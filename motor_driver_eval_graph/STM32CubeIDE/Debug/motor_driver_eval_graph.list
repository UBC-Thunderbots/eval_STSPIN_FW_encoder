
motor_driver_eval_graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  000073c4  2**0
                  CONTENTS
  4 .ARM          00000000  08005880  08005880  000073c4  2**0
                  CONTENTS
  5 .data         000003c4  20000000  08005880  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004f0  200003c4  08005c44  000073c4  2**2
                  ALLOC
  7 ._user_heap_stack 00000484  200008b4  08005c44  000078b4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000073c4  2**0
                  CONTENTS, READONLY
  9 .debug_line   0001a879  00000000  00000000  000073ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000008c  00000000  00000000  00021c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00026bdb  00000000  00000000  00021cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005ee1  00000000  00000000  000488cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001698  00000000  00000000  0004e7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00008bbb  00000000  00000000  0004fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f0  00000000  00000000  00058a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000c764  00000000  00000000  0005a2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00066a57  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003884  00000000  00000000  00066a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__gnu_thumb1_case_uqi>:
 80000c0:	b402      	push	{r1}
 80000c2:	4671      	mov	r1, lr
 80000c4:	0849      	lsrs	r1, r1, #1
 80000c6:	0049      	lsls	r1, r1, #1
 80000c8:	5c09      	ldrb	r1, [r1, r0]
 80000ca:	0049      	lsls	r1, r1, #1
 80000cc:	448e      	add	lr, r1
 80000ce:	bc02      	pop	{r1}
 80000d0:	4770      	bx	lr
 80000d2:	46c0      	nop			@ (mov r8, r8)

080000d4 <__gnu_thumb1_case_uhi>:
 80000d4:	b403      	push	{r0, r1}
 80000d6:	4671      	mov	r1, lr
 80000d8:	0849      	lsrs	r1, r1, #1
 80000da:	0040      	lsls	r0, r0, #1
 80000dc:	0049      	lsls	r1, r1, #1
 80000de:	5a09      	ldrh	r1, [r1, r0]
 80000e0:	0049      	lsls	r1, r1, #1
 80000e2:	448e      	add	lr, r1
 80000e4:	bc03      	pop	{r0, r1}
 80000e6:	4770      	bx	lr

080000e8 <__udivsi3>:
 80000e8:	2200      	movs	r2, #0
 80000ea:	0843      	lsrs	r3, r0, #1
 80000ec:	428b      	cmp	r3, r1
 80000ee:	d374      	bcc.n	80001da <__udivsi3+0xf2>
 80000f0:	0903      	lsrs	r3, r0, #4
 80000f2:	428b      	cmp	r3, r1
 80000f4:	d35f      	bcc.n	80001b6 <__udivsi3+0xce>
 80000f6:	0a03      	lsrs	r3, r0, #8
 80000f8:	428b      	cmp	r3, r1
 80000fa:	d344      	bcc.n	8000186 <__udivsi3+0x9e>
 80000fc:	0b03      	lsrs	r3, r0, #12
 80000fe:	428b      	cmp	r3, r1
 8000100:	d328      	bcc.n	8000154 <__udivsi3+0x6c>
 8000102:	0c03      	lsrs	r3, r0, #16
 8000104:	428b      	cmp	r3, r1
 8000106:	d30d      	bcc.n	8000124 <__udivsi3+0x3c>
 8000108:	22ff      	movs	r2, #255	@ 0xff
 800010a:	0209      	lsls	r1, r1, #8
 800010c:	ba12      	rev	r2, r2
 800010e:	0c03      	lsrs	r3, r0, #16
 8000110:	428b      	cmp	r3, r1
 8000112:	d302      	bcc.n	800011a <__udivsi3+0x32>
 8000114:	1212      	asrs	r2, r2, #8
 8000116:	0209      	lsls	r1, r1, #8
 8000118:	d065      	beq.n	80001e6 <__udivsi3+0xfe>
 800011a:	0b03      	lsrs	r3, r0, #12
 800011c:	428b      	cmp	r3, r1
 800011e:	d319      	bcc.n	8000154 <__udivsi3+0x6c>
 8000120:	e000      	b.n	8000124 <__udivsi3+0x3c>
 8000122:	0a09      	lsrs	r1, r1, #8
 8000124:	0bc3      	lsrs	r3, r0, #15
 8000126:	428b      	cmp	r3, r1
 8000128:	d301      	bcc.n	800012e <__udivsi3+0x46>
 800012a:	03cb      	lsls	r3, r1, #15
 800012c:	1ac0      	subs	r0, r0, r3
 800012e:	4152      	adcs	r2, r2
 8000130:	0b83      	lsrs	r3, r0, #14
 8000132:	428b      	cmp	r3, r1
 8000134:	d301      	bcc.n	800013a <__udivsi3+0x52>
 8000136:	038b      	lsls	r3, r1, #14
 8000138:	1ac0      	subs	r0, r0, r3
 800013a:	4152      	adcs	r2, r2
 800013c:	0b43      	lsrs	r3, r0, #13
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x5e>
 8000142:	034b      	lsls	r3, r1, #13
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x6a>
 800014e:	030b      	lsls	r3, r1, #12
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0ac3      	lsrs	r3, r0, #11
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x76>
 800015a:	02cb      	lsls	r3, r1, #11
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0a83      	lsrs	r3, r0, #10
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x82>
 8000166:	028b      	lsls	r3, r1, #10
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0a43      	lsrs	r3, r0, #9
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x8e>
 8000172:	024b      	lsls	r3, r1, #9
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a03      	lsrs	r3, r0, #8
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x9a>
 800017e:	020b      	lsls	r3, r1, #8
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	d2cd      	bcs.n	8000122 <__udivsi3+0x3a>
 8000186:	09c3      	lsrs	r3, r0, #7
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__udivsi3+0xa8>
 800018c:	01cb      	lsls	r3, r1, #7
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0983      	lsrs	r3, r0, #6
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__udivsi3+0xb4>
 8000198:	018b      	lsls	r3, r1, #6
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	0943      	lsrs	r3, r0, #5
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xc0>
 80001a4:	014b      	lsls	r3, r1, #5
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0903      	lsrs	r3, r0, #4
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xcc>
 80001b0:	010b      	lsls	r3, r1, #4
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	08c3      	lsrs	r3, r0, #3
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xd8>
 80001bc:	00cb      	lsls	r3, r1, #3
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0883      	lsrs	r3, r0, #2
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xe4>
 80001c8:	008b      	lsls	r3, r1, #2
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0843      	lsrs	r3, r0, #1
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xf0>
 80001d4:	004b      	lsls	r3, r1, #1
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	1a41      	subs	r1, r0, r1
 80001dc:	d200      	bcs.n	80001e0 <__udivsi3+0xf8>
 80001de:	4601      	mov	r1, r0
 80001e0:	4152      	adcs	r2, r2
 80001e2:	4610      	mov	r0, r2
 80001e4:	4770      	bx	lr
 80001e6:	e7ff      	b.n	80001e8 <__udivsi3+0x100>
 80001e8:	b501      	push	{r0, lr}
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f8f0 	bl	80003d0 <__aeabi_idiv0>
 80001f0:	bd02      	pop	{r1, pc}
 80001f2:	46c0      	nop			@ (mov r8, r8)

080001f4 <__aeabi_uidivmod>:
 80001f4:	2900      	cmp	r1, #0
 80001f6:	d0f7      	beq.n	80001e8 <__udivsi3+0x100>
 80001f8:	e776      	b.n	80000e8 <__udivsi3>
 80001fa:	4770      	bx	lr

080001fc <__divsi3>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	430b      	orrs	r3, r1
 8000200:	d47f      	bmi.n	8000302 <__divsi3+0x106>
 8000202:	2200      	movs	r2, #0
 8000204:	0843      	lsrs	r3, r0, #1
 8000206:	428b      	cmp	r3, r1
 8000208:	d374      	bcc.n	80002f4 <__divsi3+0xf8>
 800020a:	0903      	lsrs	r3, r0, #4
 800020c:	428b      	cmp	r3, r1
 800020e:	d35f      	bcc.n	80002d0 <__divsi3+0xd4>
 8000210:	0a03      	lsrs	r3, r0, #8
 8000212:	428b      	cmp	r3, r1
 8000214:	d344      	bcc.n	80002a0 <__divsi3+0xa4>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d328      	bcc.n	800026e <__divsi3+0x72>
 800021c:	0c03      	lsrs	r3, r0, #16
 800021e:	428b      	cmp	r3, r1
 8000220:	d30d      	bcc.n	800023e <__divsi3+0x42>
 8000222:	22ff      	movs	r2, #255	@ 0xff
 8000224:	0209      	lsls	r1, r1, #8
 8000226:	ba12      	rev	r2, r2
 8000228:	0c03      	lsrs	r3, r0, #16
 800022a:	428b      	cmp	r3, r1
 800022c:	d302      	bcc.n	8000234 <__divsi3+0x38>
 800022e:	1212      	asrs	r2, r2, #8
 8000230:	0209      	lsls	r1, r1, #8
 8000232:	d065      	beq.n	8000300 <__divsi3+0x104>
 8000234:	0b03      	lsrs	r3, r0, #12
 8000236:	428b      	cmp	r3, r1
 8000238:	d319      	bcc.n	800026e <__divsi3+0x72>
 800023a:	e000      	b.n	800023e <__divsi3+0x42>
 800023c:	0a09      	lsrs	r1, r1, #8
 800023e:	0bc3      	lsrs	r3, r0, #15
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__divsi3+0x4c>
 8000244:	03cb      	lsls	r3, r1, #15
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	0b83      	lsrs	r3, r0, #14
 800024c:	428b      	cmp	r3, r1
 800024e:	d301      	bcc.n	8000254 <__divsi3+0x58>
 8000250:	038b      	lsls	r3, r1, #14
 8000252:	1ac0      	subs	r0, r0, r3
 8000254:	4152      	adcs	r2, r2
 8000256:	0b43      	lsrs	r3, r0, #13
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x64>
 800025c:	034b      	lsls	r3, r1, #13
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x70>
 8000268:	030b      	lsls	r3, r1, #12
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0ac3      	lsrs	r3, r0, #11
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x7c>
 8000274:	02cb      	lsls	r3, r1, #11
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0a83      	lsrs	r3, r0, #10
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x88>
 8000280:	028b      	lsls	r3, r1, #10
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0a43      	lsrs	r3, r0, #9
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x94>
 800028c:	024b      	lsls	r3, r1, #9
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a03      	lsrs	r3, r0, #8
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0xa0>
 8000298:	020b      	lsls	r3, r1, #8
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	d2cd      	bcs.n	800023c <__divsi3+0x40>
 80002a0:	09c3      	lsrs	r3, r0, #7
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d301      	bcc.n	80002aa <__divsi3+0xae>
 80002a6:	01cb      	lsls	r3, r1, #7
 80002a8:	1ac0      	subs	r0, r0, r3
 80002aa:	4152      	adcs	r2, r2
 80002ac:	0983      	lsrs	r3, r0, #6
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d301      	bcc.n	80002b6 <__divsi3+0xba>
 80002b2:	018b      	lsls	r3, r1, #6
 80002b4:	1ac0      	subs	r0, r0, r3
 80002b6:	4152      	adcs	r2, r2
 80002b8:	0943      	lsrs	r3, r0, #5
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xc6>
 80002be:	014b      	lsls	r3, r1, #5
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0903      	lsrs	r3, r0, #4
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xd2>
 80002ca:	010b      	lsls	r3, r1, #4
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	08c3      	lsrs	r3, r0, #3
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xde>
 80002d6:	00cb      	lsls	r3, r1, #3
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0883      	lsrs	r3, r0, #2
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xea>
 80002e2:	008b      	lsls	r3, r1, #2
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0843      	lsrs	r3, r0, #1
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xf6>
 80002ee:	004b      	lsls	r3, r1, #1
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	1a41      	subs	r1, r0, r1
 80002f6:	d200      	bcs.n	80002fa <__divsi3+0xfe>
 80002f8:	4601      	mov	r1, r0
 80002fa:	4152      	adcs	r2, r2
 80002fc:	4610      	mov	r0, r2
 80002fe:	4770      	bx	lr
 8000300:	e05d      	b.n	80003be <__divsi3+0x1c2>
 8000302:	0fca      	lsrs	r2, r1, #31
 8000304:	d000      	beq.n	8000308 <__divsi3+0x10c>
 8000306:	4249      	negs	r1, r1
 8000308:	1003      	asrs	r3, r0, #32
 800030a:	d300      	bcc.n	800030e <__divsi3+0x112>
 800030c:	4240      	negs	r0, r0
 800030e:	4053      	eors	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	469c      	mov	ip, r3
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d32d      	bcc.n	8000376 <__divsi3+0x17a>
 800031a:	0a03      	lsrs	r3, r0, #8
 800031c:	428b      	cmp	r3, r1
 800031e:	d312      	bcc.n	8000346 <__divsi3+0x14a>
 8000320:	22fc      	movs	r2, #252	@ 0xfc
 8000322:	0189      	lsls	r1, r1, #6
 8000324:	ba12      	rev	r2, r2
 8000326:	0a03      	lsrs	r3, r0, #8
 8000328:	428b      	cmp	r3, r1
 800032a:	d30c      	bcc.n	8000346 <__divsi3+0x14a>
 800032c:	0189      	lsls	r1, r1, #6
 800032e:	1192      	asrs	r2, r2, #6
 8000330:	428b      	cmp	r3, r1
 8000332:	d308      	bcc.n	8000346 <__divsi3+0x14a>
 8000334:	0189      	lsls	r1, r1, #6
 8000336:	1192      	asrs	r2, r2, #6
 8000338:	428b      	cmp	r3, r1
 800033a:	d304      	bcc.n	8000346 <__divsi3+0x14a>
 800033c:	0189      	lsls	r1, r1, #6
 800033e:	d03a      	beq.n	80003b6 <__divsi3+0x1ba>
 8000340:	1192      	asrs	r2, r2, #6
 8000342:	e000      	b.n	8000346 <__divsi3+0x14a>
 8000344:	0989      	lsrs	r1, r1, #6
 8000346:	09c3      	lsrs	r3, r0, #7
 8000348:	428b      	cmp	r3, r1
 800034a:	d301      	bcc.n	8000350 <__divsi3+0x154>
 800034c:	01cb      	lsls	r3, r1, #7
 800034e:	1ac0      	subs	r0, r0, r3
 8000350:	4152      	adcs	r2, r2
 8000352:	0983      	lsrs	r3, r0, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d301      	bcc.n	800035c <__divsi3+0x160>
 8000358:	018b      	lsls	r3, r1, #6
 800035a:	1ac0      	subs	r0, r0, r3
 800035c:	4152      	adcs	r2, r2
 800035e:	0943      	lsrs	r3, r0, #5
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x16c>
 8000364:	014b      	lsls	r3, r1, #5
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0903      	lsrs	r3, r0, #4
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x178>
 8000370:	010b      	lsls	r3, r1, #4
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	08c3      	lsrs	r3, r0, #3
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x184>
 800037c:	00cb      	lsls	r3, r1, #3
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0883      	lsrs	r3, r0, #2
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x190>
 8000388:	008b      	lsls	r3, r1, #2
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	d2d9      	bcs.n	8000344 <__divsi3+0x148>
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0x19e>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0x1a6>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4663      	mov	r3, ip
 80003a4:	4152      	adcs	r2, r2
 80003a6:	105b      	asrs	r3, r3, #1
 80003a8:	4610      	mov	r0, r2
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x1b4>
 80003ac:	4240      	negs	r0, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d500      	bpl.n	80003b4 <__divsi3+0x1b8>
 80003b2:	4249      	negs	r1, r1
 80003b4:	4770      	bx	lr
 80003b6:	4663      	mov	r3, ip
 80003b8:	105b      	asrs	r3, r3, #1
 80003ba:	d300      	bcc.n	80003be <__divsi3+0x1c2>
 80003bc:	4240      	negs	r0, r0
 80003be:	b501      	push	{r0, lr}
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 f805 	bl	80003d0 <__aeabi_idiv0>
 80003c6:	bd02      	pop	{r1, pc}

080003c8 <__aeabi_idivmod>:
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d0f8      	beq.n	80003be <__divsi3+0x1c2>
 80003cc:	e716      	b.n	80001fc <__divsi3>
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_idiv0>:
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			@ (mov r8, r8)

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	@ (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f002 ff58 	bl	800328c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	@ (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	@ (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
/*  bl __libc_init_array */
 8000402:	f004 fc3d 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f000 fad9 	bl	80009bc <main>

0800040a <LoopForever>:

LoopForever:
    b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8000418:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 800041c:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 8000420:	200008b4 	.word	0x200008b4

08000424 <ADC1_IRQHandler>:
 * @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_IRQHandler>
	...

08000428 <ASPEP_TXframeProcess>:
  * @param  bufferLength Size of the packet to be sent : Header + Data
  *
  * @return Returns an ASPEP response defined in aspep.h
  */
uint8_t ASPEP_TXframeProcess(ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	0004      	movs	r4, r0
 800042c:	0008      	movs	r0, r1
 800042e:	0011      	movs	r1, r2
  uint32_t header = *headerPtr;
 8000430:	680d      	ldr	r5, [r1, #0]
{
 8000432:	001a      	movs	r2, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000434:	b2ef      	uxtb	r7, r5
 8000436:	46bc      	mov	ip, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000438:	012b      	lsls	r3, r5, #4
 800043a:	0b1f      	lsrs	r7, r3, #12
 800043c:	4663      	mov	r3, ip
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800043e:	4e2a      	ldr	r6, [pc, #168]	@ (80004e8 <ASPEP_TXframeProcess+0xc0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000440:	5cf3      	ldrb	r3, [r6, r3]
 8000442:	405f      	eors	r7, r3
 8000444:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000446:	5df7      	ldrb	r7, [r6, r7]
 8000448:	012b      	lsls	r3, r5, #4
 800044a:	0d1b      	lsrs	r3, r3, #20
 800044c:	405f      	eors	r7, r3
 800044e:	b2ff      	uxtb	r7, r7
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000450:	5df6      	ldrb	r6, [r6, r7]
 8000452:	012b      	lsls	r3, r5, #4
 8000454:	0f1b      	lsrs	r3, r3, #28
 8000456:	4073      	eors	r3, r6
 8000458:	4e24      	ldr	r6, [pc, #144]	@ (80004ec <ASPEP_TXframeProcess+0xc4>)
  *headerPtr |= (uint32_t)crc << 28;
 800045a:	5cf3      	ldrb	r3, [r6, r3]
 800045c:	071b      	lsls	r3, r3, #28
 800045e:	432b      	orrs	r3, r5
 8000460:	600b      	str	r3, [r1, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000462:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000464:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000466:	2b00      	cmp	r3, #0
 8000468:	d116      	bne.n	8000498 <ASPEP_TXframeProcess+0x70>
    {
      if (MCTL_ASYNC == dataType)
 800046a:	2503      	movs	r5, #3
 800046c:	2809      	cmp	r0, #9
 800046e:	d108      	bne.n	8000482 <ASPEP_TXframeProcess+0x5a>
      {
        /* In ASYNC, two flipflop buffers are used, the txBuffer points always to lastRequestedAsyncBuff->buffer */
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000470:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000472:	719d      	strb	r5, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000474:	64a3      	str	r3, [r4, #72]	@ 0x48
  __ASM volatile ("cpsie i" : : : "memory");
 8000476:	b662      	cpsie	i
        pHandle->ctrlBuffer.state = readLock;
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
      }
      /* Enable HF task It */
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000478:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800047a:	6960      	ldr	r0, [r4, #20]
 800047c:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 800047e:	2000      	movs	r0, #0
 8000480:	e01a      	b.n	80004b8 <ASPEP_TXframeProcess+0x90>
      else if (MCTL_SYNC == dataType)
 8000482:	280a      	cmp	r0, #10
 8000484:	d104      	bne.n	8000490 <ASPEP_TXframeProcess+0x68>
        pHandle->syncBuffer.state = readLock;
 8000486:	0023      	movs	r3, r4
 8000488:	332e      	adds	r3, #46	@ 0x2e
 800048a:	701d      	strb	r5, [r3, #0]
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800048c:	3b06      	subs	r3, #6
 800048e:	e7f1      	b.n	8000474 <ASPEP_TXframeProcess+0x4c>
        pHandle->ctrlBuffer.state = readLock;
 8000490:	1d63      	adds	r3, r4, #5
 8000492:	77dd      	strb	r5, [r3, #31]
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000494:	331b      	adds	r3, #27
 8000496:	e7ed      	b.n	8000474 <ASPEP_TXframeProcess+0x4c>
 8000498:	b662      	cpsie	i
    }
    else /* HW resource busy, saving packet to sent it once resource will be freed*/
    {
      __enable_irq(); /*TODO: Enable High frequency task is enough */
      /* Lock buffer can be freed here */
      if (MCTL_ASYNC == dataType)
 800049a:	2809      	cmp	r0, #9
 800049c:	d10d      	bne.n	80004ba <ASPEP_TXframeProcess+0x92>
      {
        /* Check that the buffer received is the one expected - probably useless */
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800049e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        {
          result = ASPEP_BUFFER_ERROR;
 80004a0:	3806      	subs	r0, #6
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80004a2:	681d      	ldr	r5, [r3, #0]
 80004a4:	428d      	cmp	r5, r1
 80004a6:	d100      	bne.n	80004aa <ASPEP_TXframeProcess+0x82>
  uint8_t result = ASPEP_OK;
 80004a8:	2000      	movs	r0, #0
        }
        else
        {
          /* Nothing to do */
        }
        if (NULL == pHandle->asyncNextBuffer)
 80004aa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <ASPEP_TXframeProcess+0x8a>
        {
          /* Required to keep the right sending order */
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80004b0:	6463      	str	r3, [r4, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do */
        }
        pHandle->lastRequestedAsyncBuff->state = pending;
 80004b2:	2102      	movs	r1, #2
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80004b4:	809a      	strh	r2, [r3, #4]
        pHandle->lastRequestedAsyncBuff->state = pending;
 80004b6:	7199      	strb	r1, [r3, #6]
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80004b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (MCTL_SYNC == dataType)
 80004ba:	280a      	cmp	r0, #10
 80004bc:	d109      	bne.n	80004d2 <ASPEP_TXframeProcess+0xaa>
        if (pHandle -> syncBuffer.state != writeLock)
 80004be:	0023      	movs	r3, r4
 80004c0:	332e      	adds	r3, #46	@ 0x2e
 80004c2:	7819      	ldrb	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80004c4:	3807      	subs	r0, #7
        if (pHandle -> syncBuffer.state != writeLock)
 80004c6:	2901      	cmp	r1, #1
 80004c8:	d1f6      	bne.n	80004b8 <ASPEP_TXframeProcess+0x90>
          pHandle->syncBuffer.state = pending;
 80004ca:	3101      	adds	r1, #1
 80004cc:	7019      	strb	r1, [r3, #0]
          pHandle->syncBuffer.length = bufferLength;
 80004ce:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 80004d0:	e7d5      	b.n	800047e <ASPEP_TXframeProcess+0x56>
      else if(ASPEP_CTRL == dataType)
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d1d3      	bne.n	800047e <ASPEP_TXframeProcess+0x56>
        if (pHandle->ctrlBuffer.state != available)
 80004d6:	3405      	adds	r4, #5
 80004d8:	7fe3      	ldrb	r3, [r4, #31]
          result = ASPEP_BUFFER_ERROR;
 80004da:	3003      	adds	r0, #3
        if (pHandle->ctrlBuffer.state != available)
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1eb      	bne.n	80004b8 <ASPEP_TXframeProcess+0x90>
          pHandle->ctrlBuffer.state = pending;
 80004e0:	3302      	adds	r3, #2
 80004e2:	77e3      	strb	r3, [r4, #31]
 80004e4:	e7cb      	b.n	800047e <ASPEP_TXframeProcess+0x56>
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	08004d04 	.word	0x08004d04
 80004ec:	08004cf4 	.word	0x08004cf4

080004f0 <ASPEP_CheckBeacon.constprop.0>:
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80004f0:	69c2      	ldr	r2, [r0, #28]
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 80004f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80004f4:	4694      	mov	ip, r2
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80004f6:	223f      	movs	r2, #63	@ 0x3f
 80004f8:	7f41      	ldrb	r1, [r0, #29]
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80004fa:	4665      	mov	r5, ip
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80004fc:	4011      	ands	r1, r2
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80004fe:	4662      	mov	r2, ip
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000500:	7f04      	ldrb	r4, [r0, #28]
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 8000502:	0003      	movs	r3, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000504:	207f      	movs	r0, #127	@ 0x7f
 8000506:	0b92      	lsrs	r2, r2, #14
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000508:	0d6d      	lsrs	r5, r5, #21
 800050a:	4005      	ands	r5, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800050c:	4002      	ands	r2, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800050e:	0018      	movs	r0, r3
bool ASPEP_CheckBeacon (ASPEP_Handle_t *pHandle)
 8000510:	b087      	sub	sp, #28
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000512:	9503      	str	r5, [sp, #12]
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000514:	9202      	str	r2, [sp, #8]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000516:	306c      	adds	r0, #108	@ 0x6c
 8000518:	7807      	ldrb	r7, [r0, #0]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800051a:	09e4      	lsrs	r4, r4, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800051c:	1c25      	adds	r5, r4, #0
 800051e:	42bc      	cmp	r4, r7
 8000520:	d900      	bls.n	8000524 <ASPEP_CheckBeacon.constprop.0+0x34>
 8000522:	1c3d      	adds	r5, r7, #0
 8000524:	7005      	strb	r5, [r0, #0]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000526:	001d      	movs	r5, r3
 8000528:	356d      	adds	r5, #109	@ 0x6d
 800052a:	782e      	ldrb	r6, [r5, #0]
 800052c:	1c30      	adds	r0, r6, #0
 800052e:	428e      	cmp	r6, r1
 8000530:	d900      	bls.n	8000534 <ASPEP_CheckBeacon.constprop.0+0x44>
 8000532:	1c08      	adds	r0, r1, #0
 8000534:	b2c6      	uxtb	r6, r0
 8000536:	7028      	strb	r0, [r5, #0]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000538:	0018      	movs	r0, r3
 800053a:	aa02      	add	r2, sp, #8
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800053c:	9605      	str	r6, [sp, #20]
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800053e:	306e      	adds	r0, #110	@ 0x6e
 8000540:	7815      	ldrb	r5, [r2, #0]
 8000542:	7806      	ldrb	r6, [r0, #0]
 8000544:	9a02      	ldr	r2, [sp, #8]
 8000546:	42b2      	cmp	r2, r6
 8000548:	d900      	bls.n	800054c <ASPEP_CheckBeacon.constprop.0+0x5c>
 800054a:	1c35      	adds	r5, r6, #0
 800054c:	7005      	strb	r5, [r0, #0]
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800054e:	0018      	movs	r0, r3
 8000550:	306f      	adds	r0, #111	@ 0x6f
 8000552:	9001      	str	r0, [sp, #4]
 8000554:	7805      	ldrb	r5, [r0, #0]
 8000556:	9803      	ldr	r0, [sp, #12]
 8000558:	aa02      	add	r2, sp, #8
 800055a:	72d0      	strb	r0, [r2, #11]
 800055c:	42a8      	cmp	r0, r5
 800055e:	d900      	bls.n	8000562 <ASPEP_CheckBeacon.constprop.0+0x72>
 8000560:	72d5      	strb	r5, [r2, #11]
 8000562:	a802      	add	r0, sp, #8
 8000564:	7ac0      	ldrb	r0, [r0, #11]
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	7010      	strb	r0, [r2, #0]
    result = false;
 800056a:	2000      	movs	r0, #0
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800056c:	42bc      	cmp	r4, r7
 800056e:	d811      	bhi.n	8000594 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000570:	9c05      	ldr	r4, [sp, #20]
 8000572:	42a1      	cmp	r1, r4
 8000574:	d80e      	bhi.n	8000594 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000576:	9a02      	ldr	r2, [sp, #8]
 8000578:	42b2      	cmp	r2, r6
 800057a:	d80b      	bhi.n	8000594 <ASPEP_CheckBeacon.constprop.0+0xa4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800057c:	9a03      	ldr	r2, [sp, #12]
 800057e:	42aa      	cmp	r2, r5
 8000580:	d808      	bhi.n	8000594 <ASPEP_CheckBeacon.constprop.0+0xa4>
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000582:	4662      	mov	r2, ip
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000584:	3370      	adds	r3, #112	@ 0x70
 8000586:	7818      	ldrb	r0, [r3, #0]
  MasterCapabilities.version = (uint8_t)((packetHeader &0x70U)>> 4U);           /*Bits 4 to 6*/
 8000588:	0652      	lsls	r2, r2, #25
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800058a:	0f52      	lsrs	r2, r2, #29
 800058c:	1a80      	subs	r0, r0, r2
 800058e:	4243      	negs	r3, r0
 8000590:	4158      	adcs	r0, r3
 8000592:	b2c0      	uxtb	r0, r0
}
 8000594:	b007      	add	sp, #28
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000598 <ASPEP_start>:
{
 8000598:	b510      	push	{r4, lr}
 800059a:	0004      	movs	r4, r0
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800059c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800059e:	6940      	ldr	r0, [r0, #20]
 80005a0:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80005a2:	0022      	movs	r2, r4
 80005a4:	2300      	movs	r3, #0
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005a6:	0021      	movs	r1, r4
    pHandle->ASPEP_State = ASPEP_IDLE;
 80005a8:	3264      	adds	r2, #100	@ 0x64
 80005aa:	8013      	strh	r3, [r2, #0]
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80005ac:	3a04      	subs	r2, #4
 80005ae:	7013      	strb	r3, [r2, #0]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80005b2:	2204      	movs	r2, #4
 80005b4:	6960      	ldr	r0, [r4, #20]
 80005b6:	311c      	adds	r1, #28
 80005b8:	4798      	blx	r3
}
 80005ba:	bd10      	pop	{r4, pc}

080005bc <ASPEP_sendBeacon>:
{
 80005bc:	b510      	push	{r4, lr}
             | (((uint32_t)capabilities->version) << 4U)
 80005be:	790b      	ldrb	r3, [r1, #4]
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005c0:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->version) << 4U)
 80005c2:	011b      	lsls	r3, r3, #4
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005c4:	0552      	lsls	r2, r2, #21
 80005c6:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005c8:	780a      	ldrb	r2, [r1, #0]
 80005ca:	01d2      	lsls	r2, r2, #7
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005cc:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005ce:	784a      	ldrb	r2, [r1, #1]
 80005d0:	0212      	lsls	r2, r2, #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005d2:	4313      	orrs	r3, r2
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80005d4:	788a      	ldrb	r2, [r1, #2]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005d6:	2100      	movs	r1, #0
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80005d8:	0392      	lsls	r2, r2, #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005da:	4313      	orrs	r3, r2
 80005dc:	2205      	movs	r2, #5
 80005de:	4313      	orrs	r3, r2
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005e0:	0002      	movs	r2, r0
    *packet = (BEACON
 80005e2:	6203      	str	r3, [r0, #32]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005e4:	3220      	adds	r2, #32
 80005e6:	2304      	movs	r3, #4
 80005e8:	f7ff ff1e 	bl	8000428 <ASPEP_TXframeProcess>
}
 80005ec:	bd10      	pop	{r4, pc}

080005ee <ASPEP_sendPing>:
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80005ee:	0003      	movs	r3, r0
{
 80005f0:	b570      	push	{r4, r5, r6, lr}
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80005f2:	3360      	adds	r3, #96	@ 0x60
 80005f4:	781c      	ldrb	r4, [r3, #0]
                   | (uint32_t)((uint32_t)Nbit << 6U)
 80005f6:	2301      	movs	r3, #1
 80005f8:	401c      	ands	r4, r3
    uint8_t ipID = pHandle->liid & 0xFU;
 80005fa:	0003      	movs	r3, r0
                   | (uint32_t)((uint32_t)ipID << 8U)
 80005fc:	250f      	movs	r5, #15
    uint8_t ipID = pHandle->liid & 0xFU;
 80005fe:	3363      	adds	r3, #99	@ 0x63
 8000600:	781b      	ldrb	r3, [r3, #0]
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000602:	0312      	lsls	r2, r2, #12
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000604:	402b      	ands	r3, r5
 8000606:	021b      	lsls	r3, r3, #8
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000608:	4313      	orrs	r3, r2
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 800060a:	010a      	lsls	r2, r1, #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800060c:	4313      	orrs	r3, r2
                   | (uint32_t)((uint32_t)cBit << 5U)
 800060e:	0149      	lsls	r1, r1, #5
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000610:	01a2      	lsls	r2, r4, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000612:	430b      	orrs	r3, r1
 8000614:	4313      	orrs	r3, r2
 8000616:	2206      	movs	r2, #6
                   | (uint32_t)((uint32_t)Nbit << 7U)
 8000618:	01e4      	lsls	r4, r4, #7
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800061a:	4323      	orrs	r3, r4
 800061c:	4313      	orrs	r3, r2
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800061e:	0002      	movs	r2, r0
 8000620:	2100      	movs	r1, #0
    *packet = PING | (uint32_t)((uint32_t)cBit << 4U)
 8000622:	6203      	str	r3, [r0, #32]
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000624:	3220      	adds	r2, #32
 8000626:	2304      	movs	r3, #4
 8000628:	f7ff fefe 	bl	8000428 <ASPEP_TXframeProcess>
}
 800062c:	bd70      	pop	{r4, r5, r6, pc}

0800062e <ASPEP_getBuffer>:
{
 800062e:	0003      	movs	r3, r0
 8000630:	b510      	push	{r4, lr}
    if (MCTL_SYNC == syncAsync)
 8000632:	2a0a      	cmp	r2, #10
 8000634:	d10c      	bne.n	8000650 <ASPEP_getBuffer+0x22>
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000636:	0002      	movs	r2, r0
 8000638:	322e      	adds	r2, #46	@ 0x2e
 800063a:	7814      	ldrb	r4, [r2, #0]
        result = false;
 800063c:	2000      	movs	r0, #0
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 800063e:	2c01      	cmp	r4, #1
 8000640:	d805      	bhi.n	800064e <ASPEP_getBuffer+0x20>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000644:	3304      	adds	r3, #4
 8000646:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000648:	2301      	movs	r3, #1
 800064a:	7013      	strb	r3, [r2, #0]
  bool result = true;
 800064c:	2001      	movs	r0, #1
}
 800064e:	bd10      	pop	{r4, pc}
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000650:	0002      	movs	r2, r0
 8000652:	3236      	adds	r2, #54	@ 0x36
 8000654:	7810      	ldrb	r0, [r2, #0]
 8000656:	2801      	cmp	r0, #1
 8000658:	d90b      	bls.n	8000672 <ASPEP_getBuffer+0x44>
 800065a:	7a14      	ldrb	r4, [r2, #8]
 800065c:	3208      	adds	r2, #8
        result = false;
 800065e:	2000      	movs	r0, #0
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000660:	2c01      	cmp	r4, #1
 8000662:	d8f4      	bhi.n	800064e <ASPEP_getBuffer+0x20>
          pHandle->asyncBufferB.state = writeLock;
 8000664:	2001      	movs	r0, #1
 8000666:	7010      	strb	r0, [r2, #0]
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000668:	001a      	movs	r2, r3
 800066a:	3238      	adds	r2, #56	@ 0x38
 800066c:	641a      	str	r2, [r3, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800066e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000670:	e005      	b.n	800067e <ASPEP_getBuffer+0x50>
          pHandle->asyncBufferA.state = writeLock;
 8000672:	2001      	movs	r0, #1
 8000674:	7010      	strb	r0, [r2, #0]
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000676:	001a      	movs	r2, r3
 8000678:	3230      	adds	r2, #48	@ 0x30
 800067a:	641a      	str	r2, [r3, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800067e:	3304      	adds	r3, #4
 8000680:	600b      	str	r3, [r1, #0]
 8000682:	e7e3      	b.n	800064c <ASPEP_getBuffer+0x1e>

08000684 <ASPEP_sendPacket>:
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	000e      	movs	r6, r1
 8000688:	0019      	movs	r1, r3
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800068a:	0003      	movs	r3, r0
{
 800068c:	0005      	movs	r5, r0
      result = ASPEP_NOT_CONNECTED;
 800068e:	2002      	movs	r0, #2
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000690:	3364      	adds	r3, #100	@ 0x64
 8000692:	781b      	ldrb	r3, [r3, #0]
{
 8000694:	0014      	movs	r4, r2
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000696:	4283      	cmp	r3, r0
 8000698:	d11c      	bne.n	80006d4 <ASPEP_sendPacket+0x50>
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800069a:	0123      	lsls	r3, r4, #4
 800069c:	430b      	orrs	r3, r1
      *header = tmpHeader;
 800069e:	1f32      	subs	r2, r6, #4
 80006a0:	6013      	str	r3, [r2, #0]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80006a2:	002b      	movs	r3, r5
 80006a4:	336c      	adds	r3, #108	@ 0x6c
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d106      	bne.n	80006ba <ASPEP_sendPacket+0x36>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80006ac:	33c9      	adds	r3, #201	@ 0xc9
 80006ae:	5533      	strb	r3, [r6, r4]
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80006b0:	1936      	adds	r6, r6, r4
 80006b2:	3334      	adds	r3, #52	@ 0x34
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80006b4:	1824      	adds	r4, r4, r0
        packet[txDataLengthTemp + 1U] = (uint8_t)0xFE; /* Dummy CRC */
 80006b6:	7073      	strb	r3, [r6, #1]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80006b8:	b2a4      	uxth	r4, r4
      if (MCTL_SYNC == syncAsync)
 80006ba:	290a      	cmp	r1, #10
 80006bc:	d105      	bne.n	80006ca <ASPEP_sendPacket+0x46>
        if (pSupHandle->MCP_PacketAvailable)
 80006be:	7c2b      	ldrb	r3, [r5, #16]
          result = MCTL_SYNC_NOT_EXPECTED;
 80006c0:	2001      	movs	r0, #1
        if (pSupHandle->MCP_PacketAvailable)
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <ASPEP_sendPacket+0x50>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80006c6:	2300      	movs	r3, #0
 80006c8:	742b      	strb	r3, [r5, #16]
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 80006ca:	3404      	adds	r4, #4
 80006cc:	0028      	movs	r0, r5
 80006ce:	b2a3      	uxth	r3, r4
 80006d0:	f7ff feaa 	bl	8000428 <ASPEP_TXframeProcess>
}
 80006d4:	bd70      	pop	{r4, r5, r6, pc}

080006d6 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80006d6:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80006d8:	1d45      	adds	r5, r0, #5
 80006da:	7fea      	ldrb	r2, [r5, #31]
{
 80006dc:	0004      	movs	r4, r0
 80006de:	2300      	movs	r3, #0
    if (pHandle->ctrlBuffer.state == readLock)
 80006e0:	2a03      	cmp	r2, #3
 80006e2:	d110      	bne.n	8000706 <ASPEP_HWDataTransmittedIT+0x30>
    {
      pHandle->ctrlBuffer.state = available;
 80006e4:	77eb      	strb	r3, [r5, #31]
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
    }
    if (pHandle->syncBuffer.state == pending)
 80006e6:	0026      	movs	r6, r4
 80006e8:	362e      	adds	r6, #46	@ 0x2e
 80006ea:	7833      	ldrb	r3, [r6, #0]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d10d      	bne.n	800070c <ASPEP_HWDataTransmittedIT+0x36>
    {
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80006f0:	0023      	movs	r3, r4
 80006f2:	3328      	adds	r3, #40	@ 0x28
 80006f4:	64a3      	str	r3, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 80006f6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80006f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80006fa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80006fc:	6960      	ldr	r0, [r4, #20]
 80006fe:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000700:	2303      	movs	r3, #3
 8000702:	7033      	strb	r3, [r6, #0]
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000704:	bd70      	pop	{r4, r5, r6, pc}
      tempBuff->state = available;
 8000706:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000708:	7193      	strb	r3, [r2, #6]
 800070a:	e7ec      	b.n	80006e6 <ASPEP_HWDataTransmittedIT+0x10>
    else if (pHandle->ctrlBuffer.state == pending)
 800070c:	7feb      	ldrb	r3, [r5, #31]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d109      	bne.n	8000726 <ASPEP_HWDataTransmittedIT+0x50>
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000712:	0021      	movs	r1, r4
 8000714:	3120      	adds	r1, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000716:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000718:	2204      	movs	r2, #4
 800071a:	6960      	ldr	r0, [r4, #20]
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800071c:	64a1      	str	r1, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800071e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000720:	2303      	movs	r3, #3
 8000722:	77eb      	strb	r3, [r5, #31]
 8000724:	e7ee      	b.n	8000704 <ASPEP_HWDataTransmittedIT+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000726:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000728:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800072a:	64a3      	str	r3, [r4, #72]	@ 0x48
      if (pHandle->asyncNextBuffer != NULL)
 800072c:	2b00      	cmp	r3, #0
 800072e:	d015      	beq.n	800075c <ASPEP_HWDataTransmittedIT+0x86>
        pHandle->asyncNextBuffer->state = readLock;
 8000730:	2203      	movs	r2, #3
 8000732:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	889a      	ldrh	r2, [r3, #4]
 8000738:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800073a:	6960      	ldr	r0, [r4, #20]
 800073c:	47a8      	blx	r5
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 800073e:	0023      	movs	r3, r4
 8000740:	3336      	adds	r3, #54	@ 0x36
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d004      	beq.n	8000752 <ASPEP_HWDataTransmittedIT+0x7c>
 8000748:	0023      	movs	r3, r4
 800074a:	333e      	adds	r3, #62	@ 0x3e
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d106      	bne.n	8000760 <ASPEP_HWDataTransmittedIT+0x8a>
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000752:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000754:	0063      	lsls	r3, r4, #1
 8000756:	3368      	adds	r3, #104	@ 0x68
 8000758:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = NULL;
 800075a:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800075c:	b662      	cpsie	i
}
 800075e:	e7d1      	b.n	8000704 <ASPEP_HWDataTransmittedIT+0x2e>
          pHandle->asyncNextBuffer = NULL;
 8000760:	2300      	movs	r3, #0
 8000762:	e7fa      	b.n	800075a <ASPEP_HWDataTransmittedIT+0x84>

08000764 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	0004      	movs	r4, r0
 8000768:	0008      	movs	r0, r1
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 800076a:	0023      	movs	r3, r4
    *packetLength = 0;
 800076c:	2100      	movs	r1, #0
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 800076e:	69e2      	ldr	r2, [r4, #28]
    if (pHandle->NewPacketAvailable)
 8000770:	3361      	adds	r3, #97	@ 0x61
    *packetLength = 0;
 8000772:	8001      	strh	r1, [r0, #0]
    if (pHandle->NewPacketAvailable)
 8000774:	781d      	ldrb	r5, [r3, #0]
 8000776:	428d      	cmp	r5, r1
 8000778:	d100      	bne.n	800077c <ASPEP_RXframeProcess+0x18>
 800077a:	e06b      	b.n	8000854 <ASPEP_RXframeProcess+0xf0>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 800077c:	0025      	movs	r5, r4
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 800077e:	7019      	strb	r1, [r3, #0]
      switch (pHandle->ASPEP_State)
 8000780:	3564      	adds	r5, #100	@ 0x64
 8000782:	7829      	ldrb	r1, [r5, #0]
 8000784:	2901      	cmp	r1, #1
 8000786:	d02e      	beq.n	80007e6 <ASPEP_RXframeProcess+0x82>
 8000788:	2902      	cmp	r1, #2
 800078a:	d048      	beq.n	800081e <ASPEP_RXframeProcess+0xba>
 800078c:	2900      	cmp	r1, #0
 800078e:	d13d      	bne.n	800080c <ASPEP_RXframeProcess+0xa8>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000790:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8000792:	2b05      	cmp	r3, #5
 8000794:	d11f      	bne.n	80007d6 <ASPEP_RXframeProcess+0x72>
          {
            if (ASPEP_CheckBeacon(pHandle) == true)
 8000796:	0020      	movs	r0, r4
 8000798:	f7ff feaa 	bl	80004f0 <ASPEP_CheckBeacon.constprop.0>
 800079c:	2800      	cmp	r0, #0
 800079e:	d014      	beq.n	80007ca <ASPEP_RXframeProcess+0x66>
            {
              /* Controller capabilities match performer capabilities.*/
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007a0:	0023      	movs	r3, r4
 80007a2:	336e      	adds	r3, #110	@ 0x6e
 80007a4:	781b      	ldrb	r3, [r3, #0]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007a6:	0022      	movs	r2, r4
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007a8:	3301      	adds	r3, #1
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	81a3      	strh	r3, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80007ae:	0023      	movs	r3, r4
 80007b0:	336f      	adds	r3, #111	@ 0x6f
 80007b2:	781b      	ldrb	r3, [r3, #0]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007b4:	325e      	adds	r2, #94	@ 0x5e
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	81e3      	strh	r3, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80007ba:	0023      	movs	r3, r4
 80007bc:	336d      	adds	r3, #109	@ 0x6d
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	8013      	strh	r3, [r2, #0]
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80007c6:	2301      	movs	r3, #1
 80007c8:	702b      	strb	r3, [r5, #0]
            }
            else
            {
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
            }
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80007ca:	0021      	movs	r1, r4
 80007cc:	0020      	movs	r0, r4
 80007ce:	316c      	adds	r1, #108	@ 0x6c
 80007d0:	f7ff fef4 	bl	80005bc <ASPEP_sendBeacon>
 80007d4:	e01a      	b.n	800080c <ASPEP_RXframeProcess+0xa8>
          else if (PING == pHandle->rxPacketType)
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d118      	bne.n	800080c <ASPEP_RXframeProcess+0xa8>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 80007da:	0b12      	lsrs	r2, r2, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80007dc:	b292      	uxth	r2, r2
          }
          else if (PING == pHandle->rxPacketType)
          {
            packetNumber = pHandle->rxHeader[1];
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80007de:	0020      	movs	r0, r4
 80007e0:	f7ff ff05 	bl	80005ee <ASPEP_sendPing>
 80007e4:	e012      	b.n	800080c <ASPEP_RXframeProcess+0xa8>
          if (BEACON == pHandle->rxPacketType)
 80007e6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d106      	bne.n	80007fa <ASPEP_RXframeProcess+0x96>
            if (ASPEP_CheckBeacon(pHandle) == false)
 80007ec:	0020      	movs	r0, r4
 80007ee:	f7ff fe7f 	bl	80004f0 <ASPEP_CheckBeacon.constprop.0>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d1e9      	bne.n	80007ca <ASPEP_RXframeProcess+0x66>
 80007f6:	7028      	strb	r0, [r5, #0]
 80007f8:	e7e7      	b.n	80007ca <ASPEP_RXframeProcess+0x66>
          else if (PING == pHandle->rxPacketType)
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d106      	bne.n	800080c <ASPEP_RXframeProcess+0xa8>
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
 80007fe:	0b12      	lsrs	r2, r2, #12
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000800:	0020      	movs	r0, r4
 8000802:	b292      	uxth	r2, r2
 8000804:	f7ff fef3 	bl	80005ee <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000808:	2302      	movs	r3, #2
 800080a:	702b      	strb	r3, [r5, #0]
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800080c:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800080e:	0021      	movs	r1, r4
 8000810:	2204      	movs	r2, #4
 8000812:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000814:	6960      	ldr	r0, [r4, #20]
 8000816:	311c      	adds	r1, #28
 8000818:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 800081a:	0028      	movs	r0, r5
 800081c:	bd70      	pop	{r4, r5, r6, pc}
          if (BEACON == pHandle->rxPacketType)
 800081e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8000820:	2b05      	cmp	r3, #5
 8000822:	d103      	bne.n	800082c <ASPEP_RXframeProcess+0xc8>
            if (ASPEP_CheckBeacon(pHandle) == false)
 8000824:	0020      	movs	r0, r4
 8000826:	f7ff fe63 	bl	80004f0 <ASPEP_CheckBeacon.constprop.0>
 800082a:	e7e4      	b.n	80007f6 <ASPEP_RXframeProcess+0x92>
          else if (PING == pHandle->rxPacketType)
 800082c:	2b06      	cmp	r3, #6
 800082e:	d102      	bne.n	8000836 <ASPEP_RXframeProcess+0xd2>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000830:	2101      	movs	r1, #1
 8000832:	7f62      	ldrb	r2, [r4, #29]
 8000834:	e7d3      	b.n	80007de <ASPEP_RXframeProcess+0x7a>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000836:	2b09      	cmp	r3, #9
 8000838:	d1e8      	bne.n	800080c <ASPEP_RXframeProcess+0xa8>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800083a:	0022      	movs	r2, r4
 800083c:	3260      	adds	r2, #96	@ 0x60
 800083e:	7813      	ldrb	r3, [r2, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	7013      	strb	r3, [r2, #0]
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000844:	2301      	movs	r3, #1
 8000846:	7423      	strb	r3, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000848:	0023      	movs	r3, r4
 800084a:	335c      	adds	r3, #92	@ 0x5c
 800084c:	881b      	ldrh	r3, [r3, #0]
              result = pHandle->rxBuffer;
 800084e:	69a5      	ldr	r5, [r4, #24]
              *packetLength = pHandle->rxLength;
 8000850:	8003      	strh	r3, [r0, #0]
              result = pHandle->rxBuffer;
 8000852:	e7dc      	b.n	800080e <ASPEP_RXframeProcess+0xaa>
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000854:	0026      	movs	r6, r4
 8000856:	3662      	adds	r6, #98	@ 0x62
 8000858:	7832      	ldrb	r2, [r6, #0]
 800085a:	2a00      	cmp	r2, #0
 800085c:	d010      	beq.n	8000880 <ASPEP_RXframeProcess+0x11c>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800085e:	0213      	lsls	r3, r2, #8
 8000860:	189b      	adds	r3, r3, r2
 8000862:	220f      	movs	r2, #15
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	4313      	orrs	r3, r2
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000868:	0022      	movs	r2, r4
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800086a:	6223      	str	r3, [r4, #32]
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800086c:	0029      	movs	r1, r5
 800086e:	2304      	movs	r3, #4
 8000870:	0020      	movs	r0, r4
 8000872:	3220      	adds	r2, #32
 8000874:	f7ff fdd8 	bl	8000428 <ASPEP_TXframeProcess>
      pHandle->badPacketFlag = ASPEP_OK;
 8000878:	7035      	strb	r5, [r6, #0]
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800087a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800087c:	6960      	ldr	r0, [r4, #20]
 800087e:	4798      	blx	r3
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000880:	2500      	movs	r5, #0
  return (result);
 8000882:	e7ca      	b.n	800081a <ASPEP_RXframeProcess+0xb6>

08000884 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000884:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000886:	0004      	movs	r4, r0
 8000888:	3465      	adds	r4, #101	@ 0x65
 800088a:	7823      	ldrb	r3, [r4, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <ASPEP_HWDataReceivedIT+0x12>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d03e      	beq.n	8000912 <ASPEP_HWDataReceivedIT+0x8e>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000896:	69c2      	ldr	r2, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000898:	4b20      	ldr	r3, [pc, #128]	@ (800091c <ASPEP_HWDataReceivedIT+0x98>)
 800089a:	b2d1      	uxtb	r1, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800089c:	5c59      	ldrb	r1, [r3, r1]
 800089e:	0a15      	lsrs	r5, r2, #8
 80008a0:	4069      	eors	r1, r5
 80008a2:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008a4:	5c59      	ldrb	r1, [r3, r1]
 80008a6:	0c15      	lsrs	r5, r2, #16
 80008a8:	4069      	eors	r1, r5
 80008aa:	b2c9      	uxtb	r1, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80008ac:	5c59      	ldrb	r1, [r3, r1]
 80008ae:	0e12      	lsrs	r2, r2, #24
 80008b0:	404a      	eors	r2, r1
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80008b2:	5c9b      	ldrb	r3, [r3, r2]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d129      	bne.n	800090c <ASPEP_HWDataReceivedIT+0x88>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80008b8:	220f      	movs	r2, #15
 80008ba:	7f03      	ldrb	r3, [r0, #28]
 80008bc:	4013      	ands	r3, r2
 80008be:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	d804      	bhi.n	80008ce <ASPEP_HWDataReceivedIT+0x4a>
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d91f      	bls.n	8000908 <ASPEP_HWDataReceivedIT+0x84>
              pHandle->NewPacketAvailable = true;
 80008c8:	3061      	adds	r0, #97	@ 0x61
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e01a      	b.n	8000904 <ASPEP_HWDataReceivedIT+0x80>
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	d11a      	bne.n	8000908 <ASPEP_HWDataReceivedIT+0x84>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80008d2:	0003      	movs	r3, r0
 80008d4:	8b82      	ldrh	r2, [r0, #28]
 80008d6:	335c      	adds	r3, #92	@ 0x5c
 80008d8:	0912      	lsrs	r2, r2, #4
 80008da:	801a      	strh	r2, [r3, #0]
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 80008dc:	d0f4      	beq.n	80008c8 <ASPEP_HWDataReceivedIT+0x44>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80008de:	0003      	movs	r3, r0
 80008e0:	335e      	adds	r3, #94	@ 0x5e
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d30b      	bcc.n	8000900 <ASPEP_HWDataReceivedIT+0x7c>
                                        (pHandle->rxLength + ((uint16_t)ASPEP_DATACRC_SIZE * (uint16_t)pHandle->Capabilities.DATA_CRC)));
 80008e8:	0003      	movs	r3, r0
 80008ea:	336c      	adds	r3, #108	@ 0x6c
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	6981      	ldr	r1, [r0, #24]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80008f6:	6940      	ldr	r0, [r0, #20]
 80008f8:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80008fa:	2301      	movs	r3, #1
 80008fc:	7023      	strb	r3, [r4, #0]
 80008fe:	e7c9      	b.n	8000894 <ASPEP_HWDataReceivedIT+0x10>
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000900:	2302      	movs	r3, #2
 8000902:	3062      	adds	r0, #98	@ 0x62
        pHandle->NewPacketAvailable = true;
 8000904:	7003      	strb	r3, [r0, #0]
}
 8000906:	e7c5      	b.n	8000894 <ASPEP_HWDataReceivedIT+0x10>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000908:	3062      	adds	r0, #98	@ 0x62
 800090a:	e7de      	b.n	80008ca <ASPEP_HWDataReceivedIT+0x46>
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 800090c:	2304      	movs	r3, #4
 800090e:	3062      	adds	r0, #98	@ 0x62
 8000910:	e7f8      	b.n	8000904 <ASPEP_HWDataReceivedIT+0x80>
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000912:	2200      	movs	r2, #0
        pHandle->NewPacketAvailable = true;
 8000914:	3061      	adds	r0, #97	@ 0x61
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000916:	7022      	strb	r2, [r4, #0]
        pHandle->NewPacketAvailable = true;
 8000918:	e7f4      	b.n	8000904 <ASPEP_HWDataReceivedIT+0x80>
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	08004d04 	.word	0x08004d04

08000920 <ASPEP_HWDMAReset>:
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000920:	0003      	movs	r3, r0
 8000922:	2200      	movs	r2, #0
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000924:	0001      	movs	r1, r0
{
 8000926:	b510      	push	{r4, lr}
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000928:	3365      	adds	r3, #101	@ 0x65
 800092a:	701a      	strb	r2, [r3, #0]
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800092c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800092e:	311c      	adds	r1, #28
 8000930:	6940      	ldr	r0, [r0, #20]
 8000932:	3204      	adds	r2, #4
 8000934:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000936:	bd10      	pop	{r4, pc}

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093a:	2510      	movs	r5, #16
{
 800093c:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	2228      	movs	r2, #40	@ 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	a80a      	add	r0, sp, #40	@ 0x28
 8000944:	f004 f993 	bl	8004c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	002a      	movs	r2, r5
 800094a:	2100      	movs	r1, #0
 800094c:	4668      	mov	r0, sp
 800094e:	f004 f98e 	bl	8004c6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000952:	002a      	movs	r2, r5
 8000954:	2100      	movs	r1, #0
 8000956:	a804      	add	r0, sp, #16
 8000958:	f004 f989 	bl	8004c6e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800095c:	2311      	movs	r3, #17
 800095e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	025b      	lsls	r3, r3, #9
 8000964:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000966:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800096a:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800096c:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000972:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000974:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000976:	9510      	str	r5, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000978:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f002 ff47 	bl	800380c <HAL_RCC_OscConfig>
 800097e:	2800      	cmp	r0, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800098c:	0021      	movs	r1, r4
 800098e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000994:	f003 f968 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000998:	2800      	cmp	r0, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x68>
 800099c:	b672      	cpsid	i
  while (1)
 800099e:	e7fe      	b.n	800099e <SystemClock_Config+0x66>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009a0:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a2:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a4:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	f003 f9e9 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x7a>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <SystemClock_Config+0x78>
  HAL_RCC_EnableCSS();
 80009b2:	f003 f929 	bl	8003c08 <HAL_RCC_EnableCSS>
}
 80009b6:	b015      	add	sp, #84	@ 0x54
 80009b8:	bd30      	pop	{r4, r5, pc}
	...

080009bc <main>:
{
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	b099      	sub	sp, #100	@ 0x64
  HAL_Init();
 80009c0:	f002 fc8a 	bl	80032d8 <HAL_Init>
  SystemClock_Config();
 80009c4:	f7ff ffb8 	bl	8000938 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	2214      	movs	r2, #20
 80009ca:	2100      	movs	r1, #0
 80009cc:	a80f      	add	r0, sp, #60	@ 0x3c
 80009ce:	f004 f94e 	bl	8004c6e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2280      	movs	r2, #128	@ 0x80
 80009d4:	4cc7      	ldr	r4, [pc, #796]	@ (8000cf4 <main+0x338>)
 80009d6:	0312      	lsls	r2, r2, #12
 80009d8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80009da:	2780      	movs	r7, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4313      	orrs	r3, r2
 80009de:	6163      	str	r3, [r4, #20]
 80009e0:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80009e2:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e6:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ec:	6963      	ldr	r3, [r4, #20]
 80009ee:	03d2      	lsls	r2, r2, #15
 80009f0:	4313      	orrs	r3, r2
 80009f2:	6163      	str	r3, [r4, #20]
 80009f4:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80009f6:	013f      	lsls	r7, r7, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fc:	9303      	str	r3, [sp, #12]
 80009fe:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	6963      	ldr	r3, [r4, #20]
 8000a02:	0292      	lsls	r2, r2, #10
 8000a04:	4313      	orrs	r3, r2
 8000a06:	6163      	str	r3, [r4, #20]
 8000a08:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000a0a:	0039      	movs	r1, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	9304      	str	r3, [sp, #16]
 8000a12:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	6963      	ldr	r3, [r4, #20]
 8000a16:	02d2      	lsls	r2, r2, #11
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	6163      	str	r3, [r4, #20]
 8000a1c:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000a1e:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4013      	ands	r3, r2
 8000a22:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 8000a28:	f002 feea 	bl	8003800 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a32:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a36:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000a38:	48af      	ldr	r0, [pc, #700]	@ (8000cf8 <main+0x33c>)
 8000a3a:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f002 fe2c 	bl	800369c <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000a44:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2600      	movs	r6, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a48:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	a90f      	add	r1, sp, #60	@ 0x3c
 8000a4c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4e:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 8000a50:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f002 fe21 	bl	800369c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5c:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	432b      	orrs	r3, r5
 8000a60:	6163      	str	r3, [r4, #20]
 8000a62:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a64:	0031      	movs	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	402b      	ands	r3, r5
 8000a68:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	a80f      	add	r0, sp, #60	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6c:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	f004 f8fe 	bl	8004c6e <memset>
  hadc.Instance = ADC1;
 8000a72:	4ca2      	ldr	r4, [pc, #648]	@ (8000cfc <main+0x340>)
 8000a74:	4ba2      	ldr	r3, [pc, #648]	@ (8000d00 <main+0x344>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a76:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000a78:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7e:	3b1c      	subs	r3, #28
 8000a80:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a88:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8a:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8c:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a8e:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a90:	61a6      	str	r6, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000a92:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a94:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a96:	62a5      	str	r5, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a98:	f002 fc52 	bl	8003340 <HAL_ADC_Init>
 8000a9c:	42b0      	cmp	r0, r6
 8000a9e:	d001      	beq.n	8000aa4 <main+0xe8>
 8000aa0:	b672      	cpsid	i
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <main+0xe6>
  sConfig.Channel = ADC_CHANNEL_5;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000aa8:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aaa:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000aac:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000aae:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ab0:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000ab2:	9511      	str	r5, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ab4:	f002 fce6 	bl	8003484 <HAL_ADC_ConfigChannel>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d001      	beq.n	8000ac0 <main+0x104>
 8000abc:	b672      	cpsid	i
  while (1)
 8000abe:	e7fe      	b.n	8000abe <main+0x102>
  sConfig.Channel = ADC_CHANNEL_9;
 8000ac0:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_9;
 8000ac6:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ac8:	f002 fcdc 	bl	8003484 <HAL_ADC_ConfigChannel>
 8000acc:	1e06      	subs	r6, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <main+0x118>
 8000ad0:	b672      	cpsid	i
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <main+0x116>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	a806      	add	r0, sp, #24
 8000ada:	f004 f8c8 	bl	8004c6e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	221c      	movs	r2, #28
 8000ae0:	0031      	movs	r1, r6
 8000ae2:	a808      	add	r0, sp, #32
 8000ae4:	f004 f8c3 	bl	8004c6e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae8:	2220      	movs	r2, #32
 8000aea:	0031      	movs	r1, r6
 8000aec:	a80f      	add	r0, sp, #60	@ 0x3c
 8000aee:	f004 f8be 	bl	8004c6e <memset>
  htim1.Instance = TIM1;
 8000af2:	4c84      	ldr	r4, [pc, #528]	@ (8000d04 <main+0x348>)
 8000af4:	4b84      	ldr	r3, [pc, #528]	@ (8000d08 <main+0x34c>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af6:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8000af8:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8000afa:	2340      	movs	r3, #64	@ 0x40
 8000afc:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000afe:	23e5      	movs	r3, #229	@ 0xe5
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b04:	2380      	movs	r3, #128	@ 0x80
 8000b06:	005b      	lsls	r3, r3, #1
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000b08:	6066      	str	r6, [r4, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000b0a:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000b0c:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b10:	f003 fab2 	bl	8004078 <HAL_TIM_PWM_Init>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d001      	beq.n	8000b1c <main+0x160>
 8000b18:	b672      	cpsid	i
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <main+0x15e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b1c:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	a906      	add	r1, sp, #24
 8000b22:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b24:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b26:	f003 fbc1 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	1e02      	subs	r2, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <main+0x176>
 8000b2e:	b672      	cpsid	i
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <main+0x174>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b32:	2360      	movs	r3, #96	@ 0x60
 8000b34:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000b36:	23e5      	movs	r3, #229	@ 0xe5
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000b40:	3306      	adds	r3, #6
 8000b42:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b44:	33f8      	adds	r3, #248	@ 0xf8
 8000b46:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b48:	3301      	adds	r3, #1
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b4c:	33ff      	adds	r3, #255	@ 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4e:	0020      	movs	r0, r4
 8000b50:	a908      	add	r1, sp, #32
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000b52:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f003 fb4a 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d001      	beq.n	8000b60 <main+0x1a4>
 8000b5c:	b672      	cpsid	i
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <main+0x1a2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b60:	2204      	movs	r2, #4
 8000b62:	0020      	movs	r0, r4
 8000b64:	a908      	add	r1, sp, #32
 8000b66:	f003 fb41 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d001      	beq.n	8000b72 <main+0x1b6>
 8000b6e:	b672      	cpsid	i
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x1b4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b72:	2208      	movs	r2, #8
 8000b74:	0020      	movs	r0, r4
 8000b76:	a908      	add	r1, sp, #32
 8000b78:	f003 fb38 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d001      	beq.n	8000b84 <main+0x1c8>
 8000b80:	b672      	cpsid	i
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <main+0x1c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b84:	2370      	movs	r3, #112	@ 0x70
 8000b86:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000b88:	4b60      	ldr	r3, [pc, #384]	@ (8000d0c <main+0x350>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8c:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8e:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b90:	220c      	movs	r2, #12
 8000b92:	0020      	movs	r0, r4
 8000b94:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000b96:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b98:	f003 fb28 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <main+0x1e8>
 8000ba0:	b672      	cpsid	i
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0x1e6>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000baa:	230e      	movs	r3, #14
 8000bac:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bae:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb0:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bb2:	015b      	lsls	r3, r3, #5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000bb4:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb6:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb8:	a90f      	add	r1, sp, #60	@ 0x3c
 8000bba:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000bbc:	970f      	str	r7, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000bbe:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc0:	f003 fba0 	bl	8004304 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	d001      	beq.n	8000bcc <main+0x210>
 8000bc8:	b672      	cpsid	i
  while (1)
 8000bca:	e7fe      	b.n	8000bca <main+0x20e>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	2708      	movs	r7, #8
  HAL_TIM_MspPostInit(&htim1);
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f002 f9a8 	bl	8002f24 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd4:	221c      	movs	r2, #28
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	a810      	add	r0, sp, #64	@ 0x40
 8000bda:	f004 f848 	bl	8004c6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	003a      	movs	r2, r7
 8000be0:	2100      	movs	r1, #0
 8000be2:	a808      	add	r0, sp, #32
 8000be4:	f004 f843 	bl	8004c6e <memset>
  htim2.Instance = TIM2;
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	4c49      	ldr	r4, [pc, #292]	@ (8000d10 <main+0x354>)
 8000bec:	05db      	lsls	r3, r3, #23
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bee:	2601      	movs	r6, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf0:	2503      	movs	r5, #3
  htim2.Instance = TIM2;
 8000bf2:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 8000bf6:	4a47      	ldr	r2, [pc, #284]	@ (8000d14 <main+0x358>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	a90f      	add	r1, sp, #60	@ 0x3c
  htim2.Init.Prescaler = 0;
 8000bfc:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_PULSE_NBR;
 8000c00:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c06:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c08:	9611      	str	r6, [sp, #68]	@ 0x44
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000c0a:	9713      	str	r7, [sp, #76]	@ 0x4c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c0c:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000c0e:	9717      	str	r7, [sp, #92]	@ 0x5c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c10:	f003 fa5a 	bl	80040c8 <HAL_TIM_Encoder_Init>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d001      	beq.n	8000c1c <main+0x260>
 8000c18:	b672      	cpsid	i
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <main+0x25e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c20:	a908      	add	r1, sp, #32
 8000c22:	0020      	movs	r0, r4
 8000c24:	f003 fb42 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	1e04      	subs	r4, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <main+0x274>
 8000c2c:	b672      	cpsid	i
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0x272>
  MX_MotorControl_Init();
 8000c30:	f000 fdf6 	bl	8001820 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000c34:	0022      	movs	r2, r4
 8000c36:	0029      	movs	r1, r5
 8000c38:	201b      	movs	r0, #27
 8000c3a:	f002 fca7 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c3e:	201b      	movs	r0, #27
 8000c40:	f002 fcce 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000c44:	0022      	movs	r2, r4
 8000c46:	0031      	movs	r1, r6
 8000c48:	2009      	movs	r0, #9
 8000c4a:	f002 fc9f 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f002 fcc6 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000c54:	0022      	movs	r2, r4
 8000c56:	0021      	movs	r1, r4
 8000c58:	200b      	movs	r0, #11
 8000c5a:	f002 fc97 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000c5e:	200b      	movs	r0, #11
 8000c60:	f002 fcbe 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8000c64:	0022      	movs	r2, r4
 8000c66:	0029      	movs	r1, r5
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f002 fc8f 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f002 fcb6 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000c74:	0022      	movs	r2, r4
 8000c76:	0021      	movs	r1, r4
 8000c78:	200d      	movs	r0, #13
 8000c7a:	f002 fc87 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f002 fcae 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000c84:	0022      	movs	r2, r4
 8000c86:	0029      	movs	r1, r5
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f002 fc7f 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f002 fca6 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000c94:	0022      	movs	r2, r4
 8000c96:	0029      	movs	r1, r5
 8000c98:	2007      	movs	r0, #7
 8000c9a:	f002 fc77 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f002 fc9e 	bl	80035e0 <HAL_NVIC_EnableIRQ>
  	MC_ProgramSpeedRampMotor1(120, 1000);
 8000ca4:	21fa      	movs	r1, #250	@ 0xfa
 8000ca6:	2078      	movs	r0, #120	@ 0x78
 8000ca8:	0089      	lsls	r1, r1, #2
 8000caa:	f000 f84b 	bl	8000d44 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 8000cae:	f000 f839 	bl	8000d24 <MC_StartMotor1>
	HAL_Delay(5000);
 8000cb2:	4819      	ldr	r0, [pc, #100]	@ (8000d18 <main+0x35c>)
 8000cb4:	f002 fb32 	bl	800331c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(360, 2000);
 8000cb8:	21fa      	movs	r1, #250	@ 0xfa
 8000cba:	20b4      	movs	r0, #180	@ 0xb4
 8000cbc:	00c9      	lsls	r1, r1, #3
 8000cbe:	0040      	lsls	r0, r0, #1
 8000cc0:	f000 f840 	bl	8000d44 <MC_ProgramSpeedRampMotor1>
	HAL_Delay(10000);
 8000cc4:	4815      	ldr	r0, [pc, #84]	@ (8000d1c <main+0x360>)
 8000cc6:	f002 fb29 	bl	800331c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(60, 2000);
 8000cca:	21fa      	movs	r1, #250	@ 0xfa
 8000ccc:	203c      	movs	r0, #60	@ 0x3c
 8000cce:	00c9      	lsls	r1, r1, #3
 8000cd0:	f000 f838 	bl	8000d44 <MC_ProgramSpeedRampMotor1>
	HAL_Delay(5000);
 8000cd4:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <main+0x35c>)
 8000cd6:	f002 fb21 	bl	800331c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(0, 100);
 8000cda:	2164      	movs	r1, #100	@ 0x64
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f000 f831 	bl	8000d44 <MC_ProgramSpeedRampMotor1>
	MC_StopMotor1();
 8000ce2:	f000 f827 	bl	8000d34 <MC_StopMotor1>
	MC_ProgramSpeedRampMotor1(360, 3600);
 8000ce6:	21e1      	movs	r1, #225	@ 0xe1
 8000ce8:	20b4      	movs	r0, #180	@ 0xb4
 8000cea:	0109      	lsls	r1, r1, #4
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	f000 f829 	bl	8000d44 <MC_ProgramSpeedRampMotor1>
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x336>
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	20000520 	.word	0x20000520
 8000d00:	40012400 	.word	0x40012400
 8000d04:	20000494 	.word	0x20000494
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	000006ea 	.word	0x000006ea
 8000d10:	2000044c 	.word	0x2000044c
 8000d14:	00000fff 	.word	0x00000fff
 8000d18:	00001388 	.word	0x00001388
 8000d1c:	00002710 	.word	0x00002710

08000d20 <Error_Handler>:
 8000d20:	b672      	cpsid	i
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <Error_Handler+0x2>

08000d24 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000d24:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 8000d26:	4b02      	ldr	r3, [pc, #8]	@ (8000d30 <MC_StartMotor1+0xc>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f000 f87b 	bl	8000e24 <MCI_StartMotor>
}
 8000d2e:	bd10      	pop	{r4, pc}
 8000d30:	20000854 	.word	0x20000854

08000d34 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000d34:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 8000d36:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <MC_StopMotor1+0xc>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f000 f88a 	bl	8000e52 <MCI_StopMotor>
}
 8000d3e:	bd10      	pop	{r4, pc}
 8000d40:	20000854 	.word	0x20000854

08000d44 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8000d44:	b510      	push	{r4, lr}
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8000d46:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <MC_ProgramSpeedRampMotor1+0x10>)
{
 8000d48:	000a      	movs	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	f000 f819 	bl	8000d84 <MCI_ExecSpeedRamp>
}
 8000d52:	bd10      	pop	{r4, pc}
 8000d54:	20000854 	.word	0x20000854

08000d58 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8000d58:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 8000d5a:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <MC_GetSTMStateMotor1+0xc>)
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	f000 f85b 	bl	8000e18 <MCI_GetSTMState>
}
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	20000854 	.word	0x20000854

08000d68 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8000d68:	4770      	bx	lr

08000d6a <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8000d6a:	4770      	bx	lr

08000d6c <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 8000d6c:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8000d72:	61c3      	str	r3, [r0, #28]
    pHandle->pSTC = pSTC;
 8000d74:	6001      	str	r1, [r0, #0]
    pHandle->pFOCVars = pFOCVars;
 8000d76:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
 8000d78:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8000d7a:	8203      	strh	r3, [r0, #16]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8000d7c:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000d7e:	3005      	adds	r0, #5
 8000d80:	77c3      	strb	r3, [r0, #31]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d82:	4770      	bx	lr

08000d84 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d88:	4b02      	ldr	r3, [pc, #8]	@ (8000d94 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 8000d8a:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8000d8c:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d8e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000d90:	4770      	bx	lr
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	00000301 	.word	0x00000301

08000d98 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000d98:	8c03      	ldrh	r3, [r0, #32]
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	4393      	bics	r3, r2
 8000d9e:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8000da0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000da2:	4319      	orrs	r1, r3
 8000da4:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000da6:	4770      	bx	lr

08000da8 <MCI_ExecBufferedCommands>:
  *         and eventually to execute the buffered command if the condition
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000daa:	1d45      	adds	r5, r0, #5
 8000dac:	7fea      	ldrb	r2, [r5, #31]
{
 8000dae:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000db0:	2a01      	cmp	r2, #1
 8000db2:	d118      	bne.n	8000de6 <MCI_ExecBufferedCommands+0x3e>
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8000db4:	7b03      	ldrb	r3, [r0, #12]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d016      	beq.n	8000de8 <MCI_ExecBufferedCommands+0x40>
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d020      	beq.n	8000e00 <MCI_ExecBufferedCommands+0x58>
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d128      	bne.n	8000e14 <MCI_ExecBufferedCommands+0x6c>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6843      	ldr	r3, [r0, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000dc6:	2103      	movs	r1, #3
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000dc8:	3305      	adds	r3, #5
 8000dca:	77da      	strb	r2, [r3, #31]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000dcc:	6800      	ldr	r0, [r0, #0]
 8000dce:	f003 fe79 	bl	8004ac4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8000dd2:	8ba2      	ldrh	r2, [r4, #28]
 8000dd4:	230e      	movs	r3, #14
 8000dd6:	5ee1      	ldrsh	r1, [r4, r3]

        case MCI_CMD_EXECTORQUERAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8000dd8:	6820      	ldr	r0, [r4, #0]
 8000dda:	f003 fe77 	bl	8004acc <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d018      	beq.n	8000e14 <MCI_ExecBufferedCommands+0x6c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8000de2:	2302      	movs	r3, #2
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8000de4:	77eb      	strb	r3, [r5, #31]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000de8:	2200      	movs	r2, #0
 8000dea:	6843      	ldr	r3, [r0, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8000dec:	2104      	movs	r1, #4
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000dee:	3305      	adds	r3, #5
 8000df0:	77da      	strb	r2, [r3, #31]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8000df2:	6800      	ldr	r0, [r0, #0]
 8000df4:	f003 fe66 	bl	8004ac4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8000df8:	8ba2      	ldrh	r2, [r4, #28]
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	5ee1      	ldrsh	r1, [r4, r3]
 8000dfe:	e7eb      	b.n	8000dd8 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000e00:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000e02:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000e04:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000e06:	1d43      	adds	r3, r0, #5
 8000e08:	77da      	strb	r2, [r3, #31]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000e0a:	3010      	adds	r0, #16
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	f003 ff5b 	bl	8004cc8 <memcpy>
      if (commandHasBeenExecuted)
 8000e12:	e7e6      	b.n	8000de2 <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e7e5      	b.n	8000de4 <MCI_ExecBufferedCommands+0x3c>

08000e18 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 8000e18:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8000e1a:	4770      	bx	lr

08000e1c <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 8000e1c:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
#endif
}
 8000e1e:	4770      	bx	lr

08000e20 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8000e20:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 8000e22:	4770      	bx	lr

08000e24 <MCI_StartMotor>:
{
 8000e24:	b510      	push	{r4, lr}
 8000e26:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000e28:	f7ff fff6 	bl	8000e18 <MCI_GetSTMState>
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	d001      	beq.n	8000e34 <MCI_StartMotor+0x10>
  bool retVal = false;
 8000e30:	2000      	movs	r0, #0
}
 8000e32:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e34:	0020      	movs	r0, r4
 8000e36:	f7ff fff1 	bl	8000e1c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d1f8      	bne.n	8000e30 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8000e3e:	0020      	movs	r0, r4
 8000e40:	f7ff ffee 	bl	8000e20 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d1f3      	bne.n	8000e30 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8000e48:	3001      	adds	r0, #1
 8000e4a:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000e4c:	3405      	adds	r4, #5
 8000e4e:	77e0      	strb	r0, [r4, #31]
      retVal = true;
 8000e50:	e7ef      	b.n	8000e32 <MCI_StartMotor+0xe>

08000e52 <MCI_StopMotor>:
{
 8000e52:	b570      	push	{r4, r5, r6, lr}
 8000e54:	0004      	movs	r4, r0
      status = false;
 8000e56:	2500      	movs	r5, #0
    State = MCI_GetSTMState(pHandle);
 8000e58:	f7ff ffde 	bl	8000e18 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8000e5c:	42a8      	cmp	r0, r5
 8000e5e:	d003      	beq.n	8000e68 <MCI_StopMotor+0x16>
 8000e60:	380c      	subs	r0, #12
 8000e62:	1e43      	subs	r3, r0, #1
 8000e64:	4198      	sbcs	r0, r3
 8000e66:	b2c5      	uxtb	r5, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e68:	0020      	movs	r0, r4
 8000e6a:	f7ff ffd7 	bl	8000e1c <MCI_GetOccurredFaults>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d002      	beq.n	8000e78 <MCI_StopMotor+0x26>
  bool retVal = false;
 8000e72:	2500      	movs	r5, #0
}
 8000e74:	0028      	movs	r0, r5
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8000e78:	0020      	movs	r0, r4
 8000e7a:	f7ff ffd1 	bl	8000e20 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d1f7      	bne.n	8000e72 <MCI_StopMotor+0x20>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0f5      	beq.n	8000e72 <MCI_StopMotor+0x20>
      pHandle->DirectCommand = MCI_STOP;
 8000e86:	2305      	movs	r3, #5
 8000e88:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 8000e8a:	e7f3      	b.n	8000e74 <MCI_StopMotor+0x22>

08000e8c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8000e8c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8000e8e:	8c00      	ldrh	r0, [r0, #32]
 8000e90:	0400      	lsls	r0, r0, #16
 8000e92:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8000e94:	4770      	bx	lr
	...

08000e98 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8000e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000e9c:	1403      	asrs	r3, r0, #16
 8000e9e:	b201      	sxth	r1, r0
 8000ea0:	480e      	ldr	r0, [pc, #56]	@ (8000edc <MCM_Clarke+0x44>)
  if (wbeta_tmp > INT16_MAX)
 8000ea2:	0212      	lsls	r2, r2, #8
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000ea4:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MCM_Clarke+0x48>)
 8000ea8:	434b      	muls	r3, r1
 8000eaa:	1a1b      	subs	r3, r3, r0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	da10      	bge.n	8000ed6 <MCM_Clarke+0x3e>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <MCM_Clarke+0x4c>)
  {
    hbeta_tmp =  ((int16_t)-32768);
 8000eb6:	0002      	movs	r2, r0
  else if (wbeta_tmp < (-32768))
 8000eb8:	4283      	cmp	r3, r0
 8000eba:	db00      	blt.n	8000ebe <MCM_Clarke+0x26>
  }
  else
  {
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8000ebc:	b21a      	sxth	r2, r3
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <MCM_Clarke+0x50>)
 8000ec0:	ac03      	add	r4, sp, #12
 8000ec2:	8021      	strh	r1, [r4, #0]
 8000ec4:	1c10      	adds	r0, r2, #0
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	da00      	bge.n	8000ecc <MCM_Clarke+0x34>
 8000eca:	1c18      	adds	r0, r3, #0
 8000ecc:	0403      	lsls	r3, r0, #16
 8000ece:	8820      	ldrh	r0, [r4, #0]
 8000ed0:	4318      	orrs	r0, r3
}
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd10      	pop	{r4, pc}
    hbeta_tmp = INT16_MAX;
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <MCM_Clarke+0x54>)
 8000ed8:	e7f1      	b.n	8000ebe <MCM_Clarke+0x26>
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	000049e6 	.word	0x000049e6
 8000ee0:	ffffb61a 	.word	0xffffb61a
 8000ee4:	ffff8000 	.word	0xffff8000
 8000ee8:	ffff8001 	.word	0xffff8001
 8000eec:	00007fff 	.word	0x00007fff

08000ef0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 8000ef6:	b29b      	uxth	r3, r3
{
 8000ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uhindex /= ((uint16_t)64);
 8000efa:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8000efc:	24c0      	movs	r4, #192	@ 0xc0
{
 8000efe:	2100      	movs	r1, #0
 8000f00:	0018      	movs	r0, r3
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000f02:	2580      	movs	r5, #128	@ 0x80
 8000f04:	00a4      	lsls	r4, r4, #2
{
 8000f06:	000a      	movs	r2, r1
 8000f08:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000f0a:	00ad      	lsls	r5, r5, #2
 8000f0c:	42a8      	cmp	r0, r5
 8000f0e:	d017      	beq.n	8000f40 <MCM_Trig_Functions+0x50>
 8000f10:	d809      	bhi.n	8000f26 <MCM_Trig_Functions+0x36>
 8000f12:	4288      	cmp	r0, r1
 8000f14:	d01d      	beq.n	8000f52 <MCM_Trig_Functions+0x62>
 8000f16:	2480      	movs	r4, #128	@ 0x80
 8000f18:	0064      	lsls	r4, r4, #1
 8000f1a:	42a0      	cmp	r0, r4
 8000f1c:	d022      	beq.n	8000f64 <MCM_Trig_Functions+0x74>
    }

    default:
      break;
  }
  return (Local_Components);
 8000f1e:	0412      	lsls	r2, r2, #16
 8000f20:	b288      	uxth	r0, r1
 8000f22:	4310      	orrs	r0, r2
}
 8000f24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d1f9      	bne.n	8000f1e <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	4912      	ldr	r1, [pc, #72]	@ (8000f78 <MCM_Trig_Functions+0x88>)
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	0052      	lsls	r2, r2, #1
 8000f34:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	5a59      	ldrh	r1, [r3, r1]
 8000f3a:	4249      	negs	r1, r1
 8000f3c:	b209      	sxth	r1, r1
      break;
 8000f3e:	e7ee      	b.n	8000f1e <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f44:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f46:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f48:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f4a:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8000f50:	e7e5      	b.n	8000f1e <MCM_Trig_Functions+0x2e>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f56:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <MCM_Trig_Functions+0x88>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f5a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f5c:	5a52      	ldrh	r2, [r2, r1]
 8000f5e:	4252      	negs	r2, r2
 8000f60:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f62:	e7e8      	b.n	8000f36 <MCM_Trig_Functions+0x46>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <MCM_Trig_Functions+0x88>)
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	5a52      	ldrh	r2, [r2, r1]
 8000f70:	4252      	negs	r2, r2
 8000f72:	b212      	sxth	r2, r2
 8000f74:	e7ea      	b.n	8000f4c <MCM_Trig_Functions+0x5c>
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	08004e06 	.word	0x08004e06

08000f7c <MCM_Park>:
{
 8000f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000f7e:	b205      	sxth	r5, r0
 8000f80:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000f82:	0008      	movs	r0, r1
 8000f84:	f7ff ffb4 	bl	8000ef0 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000f88:	b202      	sxth	r2, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000f8a:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000f8c:	0013      	movs	r3, r2
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000f8e:	0001      	movs	r1, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000f90:	436b      	muls	r3, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000f92:	4361      	muls	r1, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000f94:	1a5b      	subs	r3, r3, r1
  if (wqd_tmp > INT16_MAX)
 8000f96:	2180      	movs	r1, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000f98:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000f9a:	0209      	lsls	r1, r1, #8
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	da23      	bge.n	8000fe8 <MCM_Park+0x6c>
  else if (wqd_tmp < (-32768))
 8000fa0:	4913      	ldr	r1, [pc, #76]	@ (8000ff0 <MCM_Park+0x74>)
    hqd_tmp = ((int16_t)-32768);
 8000fa2:	000e      	movs	r6, r1
  else if (wqd_tmp < (-32768))
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	db00      	blt.n	8000faa <MCM_Park+0x2e>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000fa8:	b21e      	sxth	r6, r3
  if (((int16_t)-32768) == Output.q)
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <MCM_Park+0x78>)
 8000fac:	1c31      	adds	r1, r6, #0
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	da00      	bge.n	8000fb4 <MCM_Park+0x38>
 8000fb2:	1c19      	adds	r1, r3, #0
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000fb4:	4354      	muls	r4, r2
  if (wqd_tmp > INT16_MAX)
 8000fb6:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000fb8:	4368      	muls	r0, r5
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000fba:	1900      	adds	r0, r0, r4
 8000fbc:	b209      	sxth	r1, r1
 8000fbe:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 8000fc0:	0212      	lsls	r2, r2, #8
 8000fc2:	4290      	cmp	r0, r2
 8000fc4:	da12      	bge.n	8000fec <MCM_Park+0x70>
  else if (wqd_tmp < (-32768))
 8000fc6:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <MCM_Park+0x74>)
    hqd_tmp = ((int16_t)-32768);
 8000fc8:	0022      	movs	r2, r4
  else if (wqd_tmp < (-32768))
 8000fca:	42a0      	cmp	r0, r4
 8000fcc:	db00      	blt.n	8000fd0 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000fce:	b202      	sxth	r2, r0
  return (Output);
 8000fd0:	ac03      	add	r4, sp, #12
 8000fd2:	8021      	strh	r1, [r4, #0]
 8000fd4:	1c10      	adds	r0, r2, #0
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	da01      	bge.n	8000fde <MCM_Park+0x62>
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MCM_Park+0x7c>)
 8000fdc:	8818      	ldrh	r0, [r3, #0]
 8000fde:	0403      	lsls	r3, r0, #16
 8000fe0:	8820      	ldrh	r0, [r4, #0]
 8000fe2:	4318      	orrs	r0, r3
}
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = INT16_MAX;
 8000fe8:	4e04      	ldr	r6, [pc, #16]	@ (8000ffc <MCM_Park+0x80>)
 8000fea:	e7de      	b.n	8000faa <MCM_Park+0x2e>
    hqd_tmp = INT16_MAX;
 8000fec:	4a03      	ldr	r2, [pc, #12]	@ (8000ffc <MCM_Park+0x80>)
 8000fee:	e7ef      	b.n	8000fd0 <MCM_Park+0x54>
 8000ff0:	ffff8000 	.word	0xffff8000
 8000ff4:	ffff8001 	.word	0xffff8001
 8000ff8:	08004e04 	.word	0x08004e04
 8000ffc:	00007fff 	.word	0x00007fff

08001000 <MCM_Rev_Park>:
{
 8001000:	b530      	push	{r4, r5, lr}
 8001002:	b205      	sxth	r5, r0
 8001004:	b085      	sub	sp, #20
 8001006:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001008:	0008      	movs	r0, r1
 800100a:	f7ff ff71 	bl	8000ef0 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 800100e:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001010:	1403      	asrs	r3, r0, #16
 8001012:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001014:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001016:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8001018:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800101a:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 800101c:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800101e:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001020:	1ae4      	subs	r4, r4, r3
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001022:	13c0      	asrs	r0, r0, #15
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001024:	13e4      	asrs	r4, r4, #15
  return (Output);
 8001026:	0424      	lsls	r4, r4, #16
 8001028:	b280      	uxth	r0, r0
 800102a:	4320      	orrs	r0, r4
}
 800102c:	b005      	add	sp, #20
 800102e:	bd30      	pop	{r4, r5, pc}

08001030 <LL_GPIO_LockPin>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	430b      	orrs	r3, r1
 8001036:	61c3      	str	r3, [r0, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001038:	61c1      	str	r1, [r0, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800103a:	61c3      	str	r3, [r0, #28]
  temp = READ_REG(GPIOx->LCKR);
 800103c:	69c3      	ldr	r3, [r0, #28]
{
 800103e:	b082      	sub	sp, #8
  temp = READ_REG(GPIOx->LCKR);
 8001040:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001042:	9b01      	ldr	r3, [sp, #4]
}
 8001044:	b002      	add	sp, #8
 8001046:	4770      	bx	lr

08001048 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001048:	2226      	movs	r2, #38	@ 0x26
{
 800104a:	b570      	push	{r4, r5, r6, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 800104c:	2400      	movs	r4, #0
 800104e:	4342      	muls	r2, r0
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <FOC_Clear+0x50>)
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001052:	0085      	lsls	r5, r0, #2
  FOCVars[bMotor].Iab = NULL_ab;
 8001054:	52d4      	strh	r4, [r2, r3]
 8001056:	189b      	adds	r3, r3, r2
 8001058:	805c      	strh	r4, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 800105a:	809c      	strh	r4, [r3, #4]
 800105c:	80dc      	strh	r4, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 800105e:	819c      	strh	r4, [r3, #12]
 8001060:	81dc      	strh	r4, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8001062:	821c      	strh	r4, [r3, #16]
 8001064:	825c      	strh	r4, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001066:	83dc      	strh	r4, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001068:	82dc      	strh	r4, [r3, #22]
 800106a:	831c      	strh	r4, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 800106c:	835c      	strh	r4, [r3, #26]
 800106e:	839c      	strh	r4, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001070:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <FOC_Clear+0x54>)
 8001074:	0021      	movs	r1, r4
 8001076:	58e8      	ldr	r0, [r5, r3]
 8001078:	f003 fbe6 	bl	8004848 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <FOC_Clear+0x58>)
 800107e:	0021      	movs	r1, r4
 8001080:	58e8      	ldr	r0, [r5, r3]
 8001082:	f003 fbe1 	bl	8004848 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <FOC_Clear+0x5c>)
 8001088:	58e8      	ldr	r0, [r5, r3]
 800108a:	f003 fd0f 	bl	8004aac <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <FOC_Clear+0x60>)
 8001090:	58e8      	ldr	r0, [r5, r3]
 8001092:	f000 fd1d 	bl	8001ad0 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	200005ac 	.word	0x200005ac
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	200005a4 	.word	0x200005a4

080010ac <MCboot>:
{
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b087      	sub	sp, #28
 80010b0:	9000      	str	r0, [sp, #0]
  if (MC_NULL == pMCIList)
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d067      	beq.n	8001186 <MCboot+0xda>
    bMCBootCompleted = (uint8_t )0;
 80010b6:	2200      	movs	r2, #0
 80010b8:	4b34      	ldr	r3, [pc, #208]	@ (800118c <MCboot+0xe0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010ba:	4e35      	ldr	r6, [pc, #212]	@ (8001190 <MCboot+0xe4>)
 80010bc:	4835      	ldr	r0, [pc, #212]	@ (8001194 <MCboot+0xe8>)
    bMCBootCompleted = (uint8_t )0;
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	9301      	str	r3, [sp, #4]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010c2:	6030      	str	r0, [r6, #0]
    R1_Init(&PWM_Handle_M1);
 80010c4:	f001 f92a 	bl	800231c <R1_Init>
    ASPEP_start(&aspepOverUartA);
 80010c8:	4833      	ldr	r0, [pc, #204]	@ (8001198 <MCboot+0xec>)
 80010ca:	f7ff fa65 	bl	8000598 <ASPEP_start>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80010ce:	4b33      	ldr	r3, [pc, #204]	@ (800119c <MCboot+0xf0>)
 80010d0:	0018      	movs	r0, r3
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	f003 fbb0 	bl	8004838 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80010d8:	4f31      	ldr	r7, [pc, #196]	@ (80011a0 <MCboot+0xf4>)
 80010da:	0038      	movs	r0, r7
 80010dc:	f003 f9be 	bl	800445c <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80010e0:	4c30      	ldr	r4, [pc, #192]	@ (80011a4 <MCboot+0xf8>)
 80010e2:	4d31      	ldr	r5, [pc, #196]	@ (80011a8 <MCboot+0xfc>)
 80010e4:	4a31      	ldr	r2, [pc, #196]	@ (80011ac <MCboot+0x100>)
 80010e6:	003b      	movs	r3, r7
 80010e8:	0028      	movs	r0, r5
 80010ea:	6821      	ldr	r1, [r4, #0]
 80010ec:	9203      	str	r2, [sp, #12]
 80010ee:	f003 f96d 	bl	80043cc <EAC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80010f2:	003a      	movs	r2, r7
    FOCVars[M1].bDriveInput = EXTERNAL;
 80010f4:	2701      	movs	r7, #1
    pEAC[M1] = &EncAlignCtrlM1;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <MCboot+0x104>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80010f8:	9902      	ldr	r1, [sp, #8]
 80010fa:	6820      	ldr	r0, [r4, #0]
    pEAC[M1] = &EncAlignCtrlM1;
 80010fc:	601d      	str	r5, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80010fe:	f003 fcbe 	bl	8004a7e <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001102:	9803      	ldr	r0, [sp, #12]
 8001104:	f003 fd66 	bl	8004bd4 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001108:	482a      	ldr	r0, [pc, #168]	@ (80011b4 <MCboot+0x108>)
 800110a:	f003 fb95 	bl	8004838 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800110e:	482a      	ldr	r0, [pc, #168]	@ (80011b8 <MCboot+0x10c>)
 8001110:	f003 fb92 	bl	8004838 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8001114:	4829      	ldr	r0, [pc, #164]	@ (80011bc <MCboot+0x110>)
 8001116:	f001 fc83 	bl	8002a20 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 800111a:	4d29      	ldr	r5, [pc, #164]	@ (80011c0 <MCboot+0x114>)
 800111c:	0028      	movs	r0, r5
 800111e:	f003 fc1e 	bl	800495e <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MCboot+0x118>)
    NTC_Init(&TempSensor_M1);
 8001124:	4828      	ldr	r0, [pc, #160]	@ (80011c8 <MCboot+0x11c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60dd      	str	r5, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800112a:	4d28      	ldr	r5, [pc, #160]	@ (80011cc <MCboot+0x120>)
 800112c:	609d      	str	r5, [r3, #8]
    NTC_Init(&TempSensor_M1);
 800112e:	f003 fb77 	bl	8004820 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001132:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <MCboot+0x124>)
 8001134:	f003 fc64 	bl	8004a00 <REMNG_Init>
    FOC_Clear(M1);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ff85 	bl	8001048 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800113e:	1d6b      	adds	r3, r5, #5
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001140:	6820      	ldr	r0, [r4, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001142:	77df      	strb	r7, [r3, #31]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001144:	f003 fd29 	bl	8004b9a <STC_GetDefaultIqdref>
 8001148:	8228      	strh	r0, [r5, #16]
 800114a:	0c00      	lsrs	r0, r0, #16
 800114c:	8268      	strh	r0, [r5, #18]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800114e:	6820      	ldr	r0, [r4, #0]
 8001150:	f003 fd23 	bl	8004b9a <STC_GetDefaultIqdref>
 8001154:	0c00      	lsrs	r0, r0, #16
 8001156:	82a8      	strh	r0, [r5, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001158:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <MCboot+0x128>)
 800115a:	002a      	movs	r2, r5
 800115c:	0005      	movs	r5, r0
 800115e:	6821      	ldr	r1, [r4, #0]
 8001160:	6833      	ldr	r3, [r6, #0]
 8001162:	f7ff fe03 	bl	8000d6c <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MCboot+0x12c>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8001168:	6820      	ldr	r0, [r4, #0]
   Mci[M1].pScale = &scaleParams_M1;
 800116a:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 800116c:	f003 fd12 	bl	8004b94 <STC_GetMecSpeedRefUnitDefault>
 8001170:	2200      	movs	r2, #0
 8001172:	0001      	movs	r1, r0
 8001174:	0028      	movs	r0, r5
 8001176:	f7ff fe05 	bl	8000d84 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 800117a:	9b00      	ldr	r3, [sp, #0]
 800117c:	601d      	str	r5, [r3, #0]
    MC_APP_BootHook();
 800117e:	f7ff fdf3 	bl	8000d68 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001182:	9b01      	ldr	r3, [sp, #4]
 8001184:	701f      	strb	r7, [r3, #0]
}
 8001186:	b007      	add	sp, #28
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	2000059c 	.word	0x2000059c
 8001190:	200005a4 	.word	0x200005a4
 8001194:	20000148 	.word	0x20000148
 8001198:	2000032c 	.word	0x2000032c
 800119c:	200002a4 	.word	0x200002a4
 80011a0:	20000090 	.word	0x20000090
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	20000074 	.word	0x20000074
 80011ac:	20000110 	.word	0x20000110
 80011b0:	200005a8 	.word	0x200005a8
 80011b4:	20000278 	.word	0x20000278
 80011b8:	2000024c 	.word	0x2000024c
 80011bc:	20000048 	.word	0x20000048
 80011c0:	2000002c 	.word	0x2000002c
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000058 	.word	0x20000058
 80011cc:	200005ac 	.word	0x200005ac
 80011d0:	20000014 	.word	0x20000014
 80011d4:	20000560 	.word	0x20000560
 80011d8:	200002e0 	.word	0x200002e0

080011dc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80011dc:	4770      	bx	lr
	...

080011e0 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80011e0:	2326      	movs	r3, #38	@ 0x26
 80011e2:	4343      	muls	r3, r0
{
 80011e4:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80011e6:	4c07      	ldr	r4, [pc, #28]	@ (8001204 <FOC_CalcCurrRef+0x24>)
 80011e8:	18e4      	adds	r4, r4, r3
 80011ea:	1d63      	adds	r3, r4, #5
 80011ec:	7fdb      	ldrb	r3, [r3, #31]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d106      	bne.n	8001200 <FOC_CalcCurrRef+0x20>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80011f2:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <FOC_CalcCurrRef+0x28>)
 80011f4:	0080      	lsls	r0, r0, #2
 80011f6:	58c0      	ldr	r0, [r0, r3]
 80011f8:	f003 fca5 	bl	8004b46 <STC_CalcTorqueReference>
 80011fc:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80011fe:	8220      	strh	r0, [r4, #16]
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001200:	bd10      	pop	{r4, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	200005ac 	.word	0x200005ac
 8001208:	2000000c 	.word	0x2000000c

0800120c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800120c:	4b01      	ldr	r3, [pc, #4]	@ (8001214 <TSK_SetChargeBootCapDelayM1+0x8>)
 800120e:	8018      	strh	r0, [r3, #0]
}
 8001210:	4770      	bx	lr
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	200005a0 	.word	0x200005a0

08001218 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001218:	4b02      	ldr	r3, [pc, #8]	@ (8001224 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 800121a:	8818      	ldrh	r0, [r3, #0]
 800121c:	4243      	negs	r3, r0
 800121e:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8001220:	b2c0      	uxtb	r0, r0
}
 8001222:	4770      	bx	lr
 8001224:	200005a0 	.word	0x200005a0

08001228 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001228:	4b01      	ldr	r3, [pc, #4]	@ (8001230 <TSK_SetStopPermanencyTimeM1+0x8>)
 800122a:	8018      	strh	r0, [r3, #0]
}
 800122c:	4770      	bx	lr
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	2000059e 	.word	0x2000059e

08001234 <TSK_MF_StopProcessing>:
{
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	0004      	movs	r4, r0
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <TSK_MF_StopProcessing+0x34>)
 800123a:	0085      	lsls	r5, r0, #2
 800123c:	58e8      	ldr	r0, [r5, r3]
 800123e:	f001 faab 	bl	8002798 <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8001242:	0020      	movs	r0, r4
 8001244:	f7ff ff00 	bl	8001048 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <TSK_MF_StopProcessing+0x38>)
 800124a:	58e8      	ldr	r0, [r5, r3]
 800124c:	f003 fb54 	bl	80048f8 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001250:	20c8      	movs	r0, #200	@ 0xc8
 8001252:	0080      	lsls	r0, r0, #2
 8001254:	f7ff ffe8 	bl	8001228 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001258:	2228      	movs	r2, #40	@ 0x28
 800125a:	4362      	muls	r2, r4
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <TSK_MF_StopProcessing+0x3c>)
 800125e:	189b      	adds	r3, r3, r2
 8001260:	2208      	movs	r2, #8
 8001262:	77da      	strb	r2, [r3, #31]
}
 8001264:	bd70      	pop	{r4, r5, r6, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	200005a4 	.word	0x200005a4
 800126c:	20000000 	.word	0x20000000
 8001270:	20000560 	.word	0x20000560

08001274 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8001276:	8818      	ldrh	r0, [r3, #0]
 8001278:	4243      	negs	r3, r0
 800127a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 800127c:	b2c0      	uxtb	r0, r0
}
 800127e:	4770      	bx	lr
 8001280:	2000059e 	.word	0x2000059e

08001284 <TSK_MediumFrequencyTaskM1>:
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b085      	sub	sp, #20
  int16_t wAux = 0;
 8001288:	ab02      	add	r3, sp, #8
 800128a:	1d99      	adds	r1, r3, #6
 800128c:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 800128e:	4d89      	ldr	r5, [pc, #548]	@ (80014b4 <TSK_MediumFrequencyTaskM1+0x230>)
  int16_t wAux = 0;
 8001290:	800b      	strh	r3, [r1, #0]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001292:	0028      	movs	r0, r5
 8001294:	f003 f93e 	bl	8004514 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001298:	4e87      	ldr	r6, [pc, #540]	@ (80014b8 <TSK_MediumFrequencyTaskM1+0x234>)
 800129a:	6830      	ldr	r0, [r6, #0]
 800129c:	f003 fb10 	bl	80048c0 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80012a0:	4c86      	ldr	r4, [pc, #536]	@ (80014bc <TSK_MediumFrequencyTaskM1+0x238>)
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7ff fdbc 	bl	8000e20 <MCI_GetCurrentFaults>
    Mci[M1].State = FAULT_NOW;
 80012a8:	230a      	movs	r3, #10
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d12f      	bne.n	800130e <TSK_MediumFrequencyTaskM1+0x8a>
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80012ae:	0020      	movs	r0, r4
 80012b0:	f7ff fdb4 	bl	8000e1c <MCI_GetOccurredFaults>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d000      	beq.n	80012ba <TSK_MediumFrequencyTaskM1+0x36>
 80012b8:	e0fa      	b.n	80014b0 <TSK_MediumFrequencyTaskM1+0x22c>
      switch (Mci[M1].State)
 80012ba:	7fe0      	ldrb	r0, [r4, #31]
 80012bc:	2814      	cmp	r0, #20
 80012be:	d83c      	bhi.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
 80012c0:	f7fe ff08 	bl	80000d4 <__gnu_thumb1_case_uhi>
 80012c4:	003b0015 	.word	0x003b0015
 80012c8:	003b008f 	.word	0x003b008f
 80012cc:	003b003b 	.word	0x003b003b
 80012d0:	003b00c1 	.word	0x003b00c1
 80012d4:	003b00cc 	.word	0x003b00cc
 80012d8:	00d200f6 	.word	0x00d200f6
 80012dc:	003b003b 	.word	0x003b003b
 80012e0:	003b003b 	.word	0x003b003b
 80012e4:	00350050 	.word	0x00350050
 80012e8:	003b003b 	.word	0x003b003b
 80012ec:	00d7      	.short	0x00d7
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80012ee:	2302      	movs	r3, #2
 80012f0:	7fa1      	ldrb	r1, [r4, #30]
 80012f2:	4399      	bics	r1, r3
 80012f4:	2901      	cmp	r1, #1
 80012f6:	d120      	bne.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80012f8:	4d71      	ldr	r5, [pc, #452]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x23c>)
 80012fa:	6828      	ldr	r0, [r5, #0]
 80012fc:	0003      	movs	r3, r0
 80012fe:	3381      	adds	r3, #129	@ 0x81
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <TSK_MediumFrequencyTaskM1+0x8e>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001306:	0019      	movs	r1, r3
 8001308:	f000 fbea 	bl	8001ae0 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 800130c:	2311      	movs	r3, #17
    Mci[M1].State = FAULT_NOW;
 800130e:	77e3      	strb	r3, [r4, #31]
}
 8001310:	e013      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001312:	0003      	movs	r3, r0
 8001314:	3360      	adds	r3, #96	@ 0x60
 8001316:	8019      	strh	r1, [r3, #0]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001318:	f000 fbe2 	bl	8001ae0 <PWMC_CurrentReadingCalibr>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800131c:	2100      	movs	r1, #0
 800131e:	6828      	ldr	r0, [r5, #0]
 8001320:	f001 f8fe 	bl	8002520 <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001324:	2014      	movs	r0, #20
 8001326:	f7ff ff71 	bl	800120c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 800132a:	2310      	movs	r3, #16
 800132c:	e7ef      	b.n	800130e <TSK_MediumFrequencyTaskM1+0x8a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800132e:	7fa3      	ldrb	r3, [r4, #30]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d104      	bne.n	800133e <TSK_MediumFrequencyTaskM1+0xba>
            TSK_MF_StopProcessing(M1);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff7d 	bl	8001234 <TSK_MF_StopProcessing>
}
 800133a:	b005      	add	sp, #20
 800133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800133e:	4d60      	ldr	r5, [pc, #384]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x23c>)
 8001340:	2101      	movs	r1, #1
 8001342:	6828      	ldr	r0, [r5, #0]
 8001344:	f000 fbcc 	bl	8001ae0 <PWMC_CurrentReadingCalibr>
 8001348:	2800      	cmp	r0, #0
 800134a:	d0f6      	beq.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800134c:	7fa3      	ldrb	r3, [r4, #30]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d1e4      	bne.n	800131c <TSK_MediumFrequencyTaskM1+0x98>
                FOC_Clear(M1);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fe78 	bl	8001048 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001358:	6830      	ldr	r0, [r6, #0]
 800135a:	f003 facd 	bl	80048f8 <PQD_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800135e:	2300      	movs	r3, #0
 8001360:	83e3      	strh	r3, [r4, #30]
 8001362:	e7ea      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001364:	7fa3      	ldrb	r3, [r4, #30]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d0e4      	beq.n	8001334 <TSK_MediumFrequencyTaskM1+0xb0>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800136a:	f7ff ff55 	bl	8001218 <TSK_ChargeBootCapDelayHasElapsedM1>
 800136e:	2800      	cmp	r0, #0
 8001370:	d0e3      	beq.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8001372:	4f53      	ldr	r7, [pc, #332]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x23c>)
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f001 fa0f 	bl	8002798 <R1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 800137a:	2201      	movs	r2, #1
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800137c:	4e51      	ldr	r6, [pc, #324]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x240>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800137e:	4b52      	ldr	r3, [pc, #328]	@ (80014c8 <TSK_MediumFrequencyTaskM1+0x244>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001380:	4952      	ldr	r1, [pc, #328]	@ (80014cc <TSK_MediumFrequencyTaskM1+0x248>)
 8001382:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001384:	77da      	strb	r2, [r3, #31]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001386:	f003 fb8d 	bl	8004aa4 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 800138a:	0028      	movs	r0, r5
 800138c:	f003 f89e 	bl	80044cc <ENC_Clear>
              FOC_Clear( M1 );
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fe59 	bl	8001048 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8001396:	4b4e      	ldr	r3, [pc, #312]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x24c>)
 8001398:	0018      	movs	r0, r3
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f003 f859 	bl	8004452 <EAC_IsAligned>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d108      	bne.n	80013b6 <TSK_MediumFrequencyTaskM1+0x132>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80013a4:	9801      	ldr	r0, [sp, #4]
 80013a6:	f003 f817 	bl	80043d8 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80013aa:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80013ac:	6838      	ldr	r0, [r7, #0]
                Mci[M1].State = ALIGNMENT;
 80013ae:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80013b0:	f000 fb92 	bl	8001ad8 <PWMC_SwitchOnPWM>
 80013b4:	e7c1      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80013b6:	2103      	movs	r1, #3
 80013b8:	6830      	ldr	r0, [r6, #0]
 80013ba:	f003 fb83 	bl	8004ac4 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80013be:	0029      	movs	r1, r5
 80013c0:	6830      	ldr	r0, [r6, #0]
 80013c2:	f003 fb6f 	bl	8004aa4 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff ff08 	bl	80011dc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff ff07 	bl	80011e0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80013d2:	6830      	ldr	r0, [r6, #0]
 80013d4:	f003 fbe9 	bl	8004baa <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80013d8:	0020      	movs	r0, r4
 80013da:	f7ff fce5 	bl	8000da8 <MCI_ExecBufferedCommands>
 80013de:	2306      	movs	r3, #6
 80013e0:	e7e4      	b.n	80013ac <TSK_MediumFrequencyTaskM1+0x128>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80013e2:	7fa3      	ldrb	r3, [r4, #30]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d0a5      	beq.n	8001334 <TSK_MediumFrequencyTaskM1+0xb0>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 80013e8:	4e39      	ldr	r6, [pc, #228]	@ (80014d0 <TSK_MediumFrequencyTaskM1+0x24c>)
 80013ea:	0030      	movs	r0, r6
 80013ec:	f003 f831 	bl	8004452 <EAC_IsAligned>
 80013f0:	9001      	str	r0, [sp, #4]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 80013f2:	0030      	movs	r0, r6
 80013f4:	f003 f815 	bl	8004422 <EAC_Exec>
            if ((isAligned == false)  && (EACDone == false))
 80013f8:	9b01      	ldr	r3, [sp, #4]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 80013fa:	0006      	movs	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 80013fc:	4f31      	ldr	r7, [pc, #196]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x240>)
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <TSK_MediumFrequencyTaskM1+0x190>
 8001402:	2800      	cmp	r0, #0
 8001404:	d106      	bne.n	8001414 <TSK_MediumFrequencyTaskM1+0x190>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001406:	6838      	ldr	r0, [r7, #0]
 8001408:	f003 fb9d 	bl	8004b46 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <TSK_MediumFrequencyTaskM1+0x250>)
 800140e:	821e      	strh	r6, [r3, #16]
 8001410:	8258      	strh	r0, [r3, #18]
            {
 8001412:	e792      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
              R1_SwitchOffPWM( pwmcHandle[M1] );
 8001414:	4e2a      	ldr	r6, [pc, #168]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x23c>)
 8001416:	6830      	ldr	r0, [r6, #0]
 8001418:	f001 f9be 	bl	8002798 <R1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 800141c:	2103      	movs	r1, #3
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f003 fb50 	bl	8004ac4 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8001424:	0029      	movs	r1, r5
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f003 fb3c 	bl	8004aa4 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe0b 	bl	8001048 <FOC_Clear>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001432:	2100      	movs	r1, #0
 8001434:	6830      	ldr	r0, [r6, #0]
 8001436:	f001 f873 	bl	8002520 <R1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 800143a:	20c8      	movs	r0, #200	@ 0xc8
 800143c:	0080      	lsls	r0, r0, #2
 800143e:	f7ff fef3 	bl	8001228 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8001442:	2314      	movs	r3, #20
 8001444:	e763      	b.n	800130e <TSK_MediumFrequencyTaskM1+0x8a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001446:	7fa3      	ldrb	r3, [r4, #30]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d100      	bne.n	800144e <TSK_MediumFrequencyTaskM1+0x1ca>
 800144c:	e772      	b.n	8001334 <TSK_MediumFrequencyTaskM1+0xb0>
            MCI_ExecBufferedCommands(&Mci[M1]);
 800144e:	0020      	movs	r0, r4
 8001450:	f7ff fcaa 	bl	8000da8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fec3 	bl	80011e0 <FOC_CalcCurrRef>
 800145a:	e76e      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800145c:	f7ff ff0a 	bl	8001274 <TSK_StopPermanencyTimeHasElapsedM1>
 8001460:	2800      	cmp	r0, #0
 8001462:	d100      	bne.n	8001466 <TSK_MediumFrequencyTaskM1+0x1e2>
 8001464:	e769      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
 8001466:	e77a      	b.n	800135e <TSK_MediumFrequencyTaskM1+0xda>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001468:	7fa3      	ldrb	r3, [r4, #30]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d000      	beq.n	8001470 <TSK_MediumFrequencyTaskM1+0x1ec>
 800146e:	e764      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
 8001470:	e775      	b.n	800135e <TSK_MediumFrequencyTaskM1+0xda>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001472:	7fa3      	ldrb	r3, [r4, #30]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d100      	bne.n	800147a <TSK_MediumFrequencyTaskM1+0x1f6>
 8001478:	e75c      	b.n	8001334 <TSK_MediumFrequencyTaskM1+0xb0>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 800147a:	f7ff fefb 	bl	8001274 <TSK_StopPermanencyTimeHasElapsedM1>
 800147e:	2800      	cmp	r0, #0
 8001480:	d100      	bne.n	8001484 <TSK_MediumFrequencyTaskM1+0x200>
 8001482:	e75a      	b.n	800133a <TSK_MediumFrequencyTaskM1+0xb6>
              ENC_Clear(&ENCODER_M1);
 8001484:	0028      	movs	r0, r5
 8001486:	f003 f821 	bl	80044cc <ENC_Clear>
              R1_SwitchOnPWM(pwmcHandle[M1]);
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <TSK_MediumFrequencyTaskM1+0x23c>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	f001 f873 	bl	8002578 <R1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fea2 	bl	80011dc <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <TSK_MediumFrequencyTaskM1+0x240>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	f003 fb85 	bl	8004baa <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80014a0:	0020      	movs	r0, r4
 80014a2:	f7ff fc81 	bl	8000da8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fe9a 	bl	80011e0 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 80014ac:	2306      	movs	r3, #6
 80014ae:	e72e      	b.n	800130e <TSK_MediumFrequencyTaskM1+0x8a>
      Mci[M1].State = FAULT_OVER;
 80014b0:	230b      	movs	r3, #11
 80014b2:	e72c      	b.n	800130e <TSK_MediumFrequencyTaskM1+0x8a>
 80014b4:	20000090 	.word	0x20000090
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000560 	.word	0x20000560
 80014c0:	200005a4 	.word	0x200005a4
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	200005b1 	.word	0x200005b1
 80014cc:	20000110 	.word	0x20000110
 80014d0:	20000074 	.word	0x20000074
 80014d4:	200005ac 	.word	0x200005ac

080014d8 <MC_Scheduler>:
{
 80014d8:	b570      	push	{r4, r5, r6, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <MC_Scheduler+0x70>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d116      	bne.n	8001510 <MC_Scheduler+0x38>
    if(hMFTaskCounterM1 > 0u)
 80014e2:	4c1a      	ldr	r4, [pc, #104]	@ (800154c <MC_Scheduler+0x74>)
 80014e4:	8823      	ldrh	r3, [r4, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d013      	beq.n	8001512 <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <MC_Scheduler+0x78>)
      hMFTaskCounterM1--;
 80014f0:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80014f2:	8813      	ldrh	r3, [r2, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 80014f8:	8813      	ldrh	r3, [r2, #0]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <MC_Scheduler+0x7c>)
 8001502:	8813      	ldrh	r3, [r2, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001508:	8813      	ldrh	r3, [r2, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	8013      	strh	r3, [r2, #0]
}
 8001510:	bd70      	pop	{r4, r5, r6, pc}
      TSK_MediumFrequencyTaskM1();
 8001512:	f7ff feb7 	bl	8001284 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001516:	f7ff fc28 	bl	8000d6a <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800151a:	4d0f      	ldr	r5, [pc, #60]	@ (8001558 <MC_Scheduler+0x80>)
 800151c:	490f      	ldr	r1, [pc, #60]	@ (800155c <MC_Scheduler+0x84>)
 800151e:	6828      	ldr	r0, [r5, #0]
 8001520:	6883      	ldr	r3, [r0, #8]
 8001522:	4798      	blx	r3
 8001524:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001526:	2800      	cmp	r0, #0
 8001528:	d00c      	beq.n	8001544 <MC_Scheduler+0x6c>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 800152a:	6828      	ldr	r0, [r5, #0]
 800152c:	220a      	movs	r2, #10
 800152e:	490c      	ldr	r1, [pc, #48]	@ (8001560 <MC_Scheduler+0x88>)
 8001530:	6803      	ldr	r3, [r0, #0]
 8001532:	4798      	blx	r3
 8001534:	2800      	cmp	r0, #0
 8001536:	d005      	beq.n	8001544 <MC_Scheduler+0x6c>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001538:	6828      	ldr	r0, [r5, #0]
 800153a:	230a      	movs	r3, #10
 800153c:	89ea      	ldrh	r2, [r5, #14]
 800153e:	6846      	ldr	r6, [r0, #4]
 8001540:	68a9      	ldr	r1, [r5, #8]
 8001542:	47b0      	blx	r6
{
 8001544:	2301      	movs	r3, #1
 8001546:	e7d2      	b.n	80014ee <MC_Scheduler+0x16>
 8001548:	2000059c 	.word	0x2000059c
 800154c:	200005a2 	.word	0x200005a2
 8001550:	200005a0 	.word	0x200005a0
 8001554:	2000059e 	.word	0x2000059e
 8001558:	2000031c 	.word	0x2000031c
 800155c:	20000328 	.word	0x20000328
 8001560:	20000324 	.word	0x20000324

08001564 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001566:	4840      	ldr	r0, [pc, #256]	@ (8001668 <TSK_HighFrequencyTask+0x104>)
{
 8001568:	b089      	sub	sp, #36	@ 0x24
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 800156a:	f002 ffbd 	bl	80044e8 <ENC_CalcAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800156e:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <TSK_HighFrequencyTask+0x108>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f003 fa99 	bl	8004aa8 <STC_GetSpeedSensor>
 8001576:	0007      	movs	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001578:	f003 fa4a 	bl	8004a10 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800157c:	4e3c      	ldr	r6, [pc, #240]	@ (8001670 <TSK_HighFrequencyTask+0x10c>)
  hElAngle = SPD_GetElAngle(speedHandle);
 800157e:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001580:	a905      	add	r1, sp, #20
 8001582:	6830      	ldr	r0, [r6, #0]
 8001584:	f000 f966 	bl	8001854 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001588:	f001 fb54 	bl	8002c34 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800158c:	9805      	ldr	r0, [sp, #20]
 800158e:	f7ff fc83 	bl	8000e98 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001592:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001594:	9006      	str	r0, [sp, #24]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001596:	f7ff fcf1 	bl	8000f7c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800159a:	4c36      	ldr	r4, [pc, #216]	@ (8001674 <TSK_HighFrequencyTask+0x110>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800159c:	9003      	str	r0, [sp, #12]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800159e:	2310      	movs	r3, #16
 80015a0:	5ee1      	ldrsh	r1, [r4, r3]
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <TSK_HighFrequencyTask+0x114>)
 80015a4:	b200      	sxth	r0, r0
 80015a6:	1a09      	subs	r1, r1, r0
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f003 f94f 	bl	800484c <PI_Controller>
 80015ae:	9000      	str	r0, [sp, #0]
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80015b0:	2312      	movs	r3, #18
 80015b2:	5ee1      	ldrsh	r1, [r4, r3]
 80015b4:	ab02      	add	r3, sp, #8
 80015b6:	2206      	movs	r2, #6
 80015b8:	5e9b      	ldrsh	r3, [r3, r2]
 80015ba:	1ac9      	subs	r1, r1, r3
 80015bc:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <TSK_HighFrequencyTask+0x118>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	f003 f944 	bl	800484c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80015c4:	9a00      	ldr	r2, [sp, #0]
 80015c6:	ab04      	add	r3, sp, #16
 80015c8:	801a      	strh	r2, [r3, #0]
 80015ca:	8058      	strh	r0, [r3, #2]
 80015cc:	9904      	ldr	r1, [sp, #16]
 80015ce:	482c      	ldr	r0, [pc, #176]	@ (8001680 <TSK_HighFrequencyTask+0x11c>)
 80015d0:	f002 feca 	bl	8004368 <Circle_Limitation>
 80015d4:	b203      	sxth	r3, r0
 80015d6:	9004      	str	r0, [sp, #16]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015dc:	0038      	movs	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80015de:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015e0:	f003 fa1c 	bl	8004a1c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015e4:	0029      	movs	r1, r5
 80015e6:	9804      	ldr	r0, [sp, #16]
 80015e8:	f7ff fd0a 	bl	8001000 <MCM_Rev_Park>
 80015ec:	9007      	str	r0, [sp, #28]
  RCM_ReadOngoingConv();
 80015ee:	f001 fb57 	bl	8002ca0 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015f2:	9907      	ldr	r1, [sp, #28]
 80015f4:	6830      	ldr	r0, [r6, #0]
 80015f6:	f000 f931 	bl	800185c <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 80015fa:	002a      	movs	r2, r5
 80015fc:	9903      	ldr	r1, [sp, #12]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015fe:	0007      	movs	r7, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001600:	6830      	ldr	r0, [r6, #0]
 8001602:	f000 fa88 	bl	8001b16 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 8001606:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Iab = Iab;
 8001608:	2204      	movs	r2, #4
  FOCVars[M1].Vqd = Vqd;
 800160a:	82e3      	strh	r3, [r4, #22]
 800160c:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Iab = Iab;
 800160e:	a905      	add	r1, sp, #20
 8001610:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001612:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001614:	f003 fb58 	bl	8004cc8 <memcpy>
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001618:	2204      	movs	r2, #4
 800161a:	a906      	add	r1, sp, #24
 800161c:	1d20      	adds	r0, r4, #4
 800161e:	f003 fb53 	bl	8004cc8 <memcpy>
  FOCVars[M1].Iqd = Iqd;
 8001622:	0020      	movs	r0, r4
 8001624:	2204      	movs	r2, #4
 8001626:	a903      	add	r1, sp, #12
 8001628:	300c      	adds	r0, #12
 800162a:	f003 fb4d 	bl	8004cc8 <memcpy>
  FOCVars[M1].Valphabeta = Valphabeta;
 800162e:	0020      	movs	r0, r4
 8001630:	2204      	movs	r2, #4
 8001632:	301a      	adds	r0, #26
 8001634:	a907      	add	r1, sp, #28
 8001636:	f003 fb47 	bl	8004cc8 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 800163a:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 800163c:	2f01      	cmp	r7, #1
 800163e:	d104      	bne.n	800164a <TSK_HighFrequencyTask+0xe6>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	0039      	movs	r1, r7
 8001644:	480f      	ldr	r0, [pc, #60]	@ (8001684 <TSK_HighFrequencyTask+0x120>)
 8001646:	f7ff fba7 	bl	8000d98 <MCI_FaultProcessing>
  GLOBAL_TIMESTAMP++;
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <TSK_HighFrequencyTask+0x124>)
  if (0U == MCPA_UART_A.Mark)
 800164c:	480f      	ldr	r0, [pc, #60]	@ (800168c <TSK_HighFrequencyTask+0x128>)
  GLOBAL_TIMESTAMP++;
 800164e:	6813      	ldr	r3, [r2, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <TSK_HighFrequencyTask+0x12c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <TSK_HighFrequencyTask+0xfc>
    MCPA_dataLog (&MCPA_UART_A);
 800165c:	f002 fffe 	bl	800465c <MCPA_dataLog>
}
 8001660:	2000      	movs	r0, #0
 8001662:	b009      	add	sp, #36	@ 0x24
 8001664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	20000090 	.word	0x20000090
 800166c:	2000000c 	.word	0x2000000c
 8001670:	200005a4 	.word	0x200005a4
 8001674:	200005ac 	.word	0x200005ac
 8001678:	20000008 	.word	0x20000008
 800167c:	20000004 	.word	0x20000004
 8001680:	20000010 	.word	0x20000010
 8001684:	20000560 	.word	0x20000560
 8001688:	200008b0 	.word	0x200008b0
 800168c:	200002f0 	.word	0x200002f0
 8001690:	20000319 	.word	0x20000319

08001694 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001696:	4f1f      	ldr	r7, [pc, #124]	@ (8001714 <TSK_SafetyTask_PWMOFF+0x80>)
 8001698:	0086      	lsls	r6, r0, #2
{
 800169a:	0004      	movs	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800169c:	59f0      	ldr	r0, [r6, r7]
 800169e:	f000 fa8f 	bl	8001bc0 <PWMC_IsFaultOccurred>
 80016a2:	0005      	movs	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 80016a4:	2c00      	cmp	r4, #0
 80016a6:	d10b      	bne.n	80016c0 <TSK_SafetyTask_PWMOFF+0x2c>
  {
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80016a8:	481b      	ldr	r0, [pc, #108]	@ (8001718 <TSK_SafetyTask_PWMOFF+0x84>)
 80016aa:	f001 fa01 	bl	8002ab0 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <TSK_SafetyTask_PWMOFF+0x88>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80016b0:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80016b2:	0018      	movs	r0, r3
 80016b4:	f003 f97a 	bl	80049ac <RVBS_CalcAvVbus>
 80016b8:	2308      	movs	r3, #8
 80016ba:	4398      	bics	r0, r3
 80016bc:	4305      	orrs	r5, r0
 80016be:	b2ad      	uxth	r5, r5
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80016c0:	2328      	movs	r3, #40	@ 0x28
 80016c2:	4363      	muls	r3, r4
 80016c4:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <TSK_SafetyTask_PWMOFF+0x8c>)
 80016c6:	0029      	movs	r1, r5
 80016c8:	189b      	adds	r3, r3, r2
 80016ca:	43ea      	mvns	r2, r5
 80016cc:	0018      	movs	r0, r3
 80016ce:	b292      	uxth	r2, r2
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f7ff fb61 	bl	8000d98 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80016d6:	9801      	ldr	r0, [sp, #4]
 80016d8:	f7ff fbd8 	bl	8000e8c <MCI_GetFaultState>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d017      	beq.n	8001710 <TSK_SafetyTask_PWMOFF+0x7c>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <TSK_SafetyTask_PWMOFF+0x90>)
 80016e2:	5998      	ldr	r0, [r3, r6]
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d002      	beq.n	80016ee <TSK_SafetyTask_PWMOFF+0x5a>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 80016e8:	2100      	movs	r1, #0
 80016ea:	f002 feb4 	bl	8004456 <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016ee:	59b8      	ldr	r0, [r7, r6]
 80016f0:	f000 f9ee 	bl	8001ad0 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <TSK_SafetyTask_PWMOFF+0x94>)
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <TSK_SafetyTask_PWMOFF+0x98>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <TSK_SafetyTask_PWMOFF+0x6e>
    {
      MCPA_flushDataLog (&MCPA_UART_A);
 80016fe:	f003 f85d 	bl	80047bc <MCPA_flushDataLog>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8001702:	0020      	movs	r0, r4
 8001704:	f7ff fca0 	bl	8001048 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <TSK_SafetyTask_PWMOFF+0x9c>)
 800170a:	5998      	ldr	r0, [r3, r6]
 800170c:	f003 f8f4 	bl	80048f8 <PQD_Clear>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001710:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	200005a4 	.word	0x200005a4
 8001718:	20000048 	.word	0x20000048
 800171c:	2000002c 	.word	0x2000002c
 8001720:	20000560 	.word	0x20000560
 8001724:	200005a8 	.word	0x200005a8
 8001728:	20000319 	.word	0x20000319
 800172c:	200002f0 	.word	0x200002f0
 8001730:	20000000 	.word	0x20000000

08001734 <TSK_SafetyTask>:
{
 8001734:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <TSK_SafetyTask+0x18>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d104      	bne.n	8001748 <TSK_SafetyTask+0x14>
    TSK_SafetyTask_PWMOFF(M1);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ffa8 	bl	8001694 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 8001744:	f001 fa46 	bl	8002bd4 <RCM_ExecUserConv>
}
 8001748:	bd10      	pop	{r4, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	2000059c 	.word	0x2000059c

08001750 <MC_RunMotorControlTasks>:
{
 8001750:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <MC_RunMotorControlTasks+0x14>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <MC_RunMotorControlTasks+0x12>
    MC_Scheduler();
 800175a:	f7ff febd 	bl	80014d8 <MC_Scheduler>
    TSK_SafetyTask();
 800175e:	f7ff ffe9 	bl	8001734 <TSK_SafetyTask>
}
 8001762:	bd10      	pop	{r4, pc}
 8001764:	2000059c 	.word	0x2000059c

08001768 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001768:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <TSK_HardwareFaultTask+0x18>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f001 f813 	bl	8002798 <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	4803      	ldr	r0, [pc, #12]	@ (8001784 <TSK_HardwareFaultTask+0x1c>)
 8001778:	f7ff fb0e 	bl	8000d98 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800177c:	bd10      	pop	{r4, pc}
 800177e:	46c0      	nop			@ (mov r8, r8)
 8001780:	200005a4 	.word	0x200005a4
 8001784:	20000560 	.word	0x20000560

08001788 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001788:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800178a:	f7ff fae5 	bl	8000d58 <MC_GetSTMStateMotor1>
 800178e:	2800      	cmp	r0, #0
 8001790:	d102      	bne.n	8001798 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 8001792:	f7ff fac7 	bl	8000d24 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001796:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8001798:	f7ff facc 	bl	8000d34 <MC_StopMotor1>
}
 800179c:	e7fb      	b.n	8001796 <UI_HandleStartStopButton_cb+0xe>
	...

080017a0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
LL_GPIO_LockPin(M1_CURR_AMPL_GPIO_Port, M1_CURR_AMPL_Pin);
 80017a2:	2490      	movs	r4, #144	@ 0x90
 80017a4:	05e4      	lsls	r4, r4, #23
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 80017a6:	4d1d      	ldr	r5, [pc, #116]	@ (800181c <mc_lock_pins+0x7c>)
LL_GPIO_LockPin(M1_CURR_AMPL_GPIO_Port, M1_CURR_AMPL_Pin);
 80017a8:	0020      	movs	r0, r4
 80017aa:	2120      	movs	r1, #32
 80017ac:	f7ff fc40 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 80017b0:	0028      	movs	r0, r5
 80017b2:	2102      	movs	r1, #2
 80017b4:	f7ff fc3c 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 80017b8:	0020      	movs	r0, r4
 80017ba:	2102      	movs	r1, #2
 80017bc:	f7ff fc38 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 80017c0:	0020      	movs	r0, r4
 80017c2:	2101      	movs	r1, #1
 80017c4:	f7ff fc34 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0020      	movs	r0, r4
 80017cc:	0049      	lsls	r1, r1, #1
 80017ce:	f7ff fc2f 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	0020      	movs	r0, r4
 80017d6:	0089      	lsls	r1, r1, #2
 80017d8:	f7ff fc2a 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
 80017dc:	2180      	movs	r1, #128	@ 0x80
 80017de:	0028      	movs	r0, r5
 80017e0:	0149      	lsls	r1, r1, #5
 80017e2:	f7ff fc25 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	0028      	movs	r0, r5
 80017ea:	01c9      	lsls	r1, r1, #7
 80017ec:	f7ff fc20 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0020      	movs	r0, r4
 80017f4:	00c9      	lsls	r1, r1, #3
 80017f6:	f7ff fc1b 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0028      	movs	r0, r5
 80017fe:	0209      	lsls	r1, r1, #8
 8001800:	f7ff fc16 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0028      	movs	r0, r5
 8001808:	0189      	lsls	r1, r1, #6
 800180a:	f7ff fc11 	bl	8001030 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	0020      	movs	r0, r4
 8001812:	0109      	lsls	r1, r1, #4
 8001814:	f7ff fc0c 	bl	8001030 <LL_GPIO_LockPin>
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	48000400 	.word	0x48000400

08001820 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001820:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001822:	f002 faa5 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8001826:	21fa      	movs	r1, #250	@ 0xfa
 8001828:	00c9      	lsls	r1, r1, #3
 800182a:	f7fe fc5d 	bl	80000e8 <__udivsi3>
 800182e:	f001 fee3 	bl	80035f8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001832:	2001      	movs	r0, #1
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <MX_MotorControl_Init+0x2c>)
 8001836:	2200      	movs	r2, #0
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	4240      	negs	r0, r0
 800183c:	f001 fea6 	bl	800358c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001840:	4803      	ldr	r0, [pc, #12]	@ (8001850 <MX_MotorControl_Init+0x30>)
 8001842:	f7ff fc33 	bl	80010ac <MCboot>
  mc_lock_pins();
 8001846:	f7ff ffab 	bl	80017a0 <mc_lock_pins>
}
 800184a:	bd10      	pop	{r4, pc}
 800184c:	200003c0 	.word	0x200003c0
 8001850:	20000854 	.word	0x20000854

08001854 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 8001854:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001856:	6803      	ldr	r3, [r0, #0]
 8001858:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 800185a:	bd10      	pop	{r4, pc}

0800185c <PWMC_SetPhaseVoltage>:
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800185c:	0003      	movs	r3, r0
{
 800185e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001860:	267c      	movs	r6, #124	@ 0x7c
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001862:	334e      	adds	r3, #78	@ 0x4e
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b20a      	sxth	r2, r1
 8001868:	4353      	muls	r3, r2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800186a:	0002      	movs	r2, r0
 800186c:	46b4      	mov	ip, r6
 800186e:	3272      	adds	r2, #114	@ 0x72
 8001870:	8817      	ldrh	r7, [r2, #0]
 8001872:	140c      	asrs	r4, r1, #16
 8001874:	437c      	muls	r4, r7
 8001876:	0064      	lsls	r4, r4, #1
 8001878:	4265      	negs	r5, r4

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
    wZ = (wUBeta - wUAlpha) / 2;
 800187a:	1ae9      	subs	r1, r5, r3
    wY = (wUBeta + wUAlpha) / 2;
 800187c:	1b1c      	subs	r4, r3, r4
 800187e:	0fe2      	lsrs	r2, r4, #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001880:	0fcb      	lsrs	r3, r1, #31
    wY = (wUBeta + wUAlpha) / 2;
 8001882:	1912      	adds	r2, r2, r4
    wZ = (wUBeta - wUAlpha) / 2;
 8001884:	185b      	adds	r3, r3, r1
{
 8001886:	b085      	sub	sp, #20
    wY = (wUBeta + wUAlpha) / 2;
 8001888:	1052      	asrs	r2, r2, #1
    wZ = (wUBeta - wUAlpha) / 2;
 800188a:	105b      	asrs	r3, r3, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800188c:	08bf      	lsrs	r7, r7, #2
 800188e:	4484      	add	ip, r0
    if (wY < 0)
 8001890:	1c66      	adds	r6, r4, #1
 8001892:	db00      	blt.n	8001896 <PWMC_SetPhaseVoltage+0x3a>
 8001894:	e0a3      	b.n	80019de <PWMC_SetPhaseVoltage+0x182>
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072) ;

        if(true == pHandle->SingleShuntTopology)
 8001896:	0006      	movs	r6, r0
 8001898:	3687      	adds	r6, #135	@ 0x87
 800189a:	7836      	ldrb	r6, [r6, #0]
 800189c:	9601      	str	r6, [sp, #4]
      if (wZ < 0)
 800189e:	1c4e      	adds	r6, r1, #1
 80018a0:	da1d      	bge.n	80018de <PWMC_SetPhaseVoltage+0x82>
        pHandle->Sector = SECTOR_5;
 80018a2:	2504      	movs	r5, #4
 80018a4:	4666      	mov	r6, ip
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	17d3      	asrs	r3, r2, #31
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	0b9b      	lsrs	r3, r3, #14
 80018ae:	189b      	adds	r3, r3, r2
        wTimePhB = wTimePhA + (wZ / 131072);
 80018b0:	17ca      	asrs	r2, r1, #31
 80018b2:	0392      	lsls	r2, r2, #14
 80018b4:	0b92      	lsrs	r2, r2, #14
 80018b6:	1851      	adds	r1, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 80018b8:	17e2      	asrs	r2, r4, #31
 80018ba:	0392      	lsls	r2, r2, #14
 80018bc:	0b92      	lsrs	r2, r2, #14
 80018be:	1914      	adds	r4, r2, r4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80018c0:	149b      	asrs	r3, r3, #18
        if(true == pHandle->SingleShuntTopology)
 80018c2:	9a01      	ldr	r2, [sp, #4]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80018c4:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + (wZ / 131072);
 80018c6:	1489      	asrs	r1, r1, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80018c8:	14a4      	asrs	r4, r4, #18
        pHandle->Sector = SECTOR_5;
 80018ca:	7035      	strb	r5, [r6, #0]
        wTimePhB = wTimePhA + (wZ / 131072);
 80018cc:	18c9      	adds	r1, r1, r3
        wTimePhC = wTimePhA - (wY / 131072) ;
 80018ce:	1b1c      	subs	r4, r3, r4
        if(true == pHandle->SingleShuntTopology)
 80018d0:	2a00      	cmp	r2, #0
 80018d2:	d000      	beq.n	80018d6 <PWMC_SetPhaseVoltage+0x7a>
 80018d4:	e0de      	b.n	8001a94 <PWMC_SetPhaseVoltage+0x238>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 2U;
        }
        else
        {
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80018d6:	b2a7      	uxth	r7, r4
          pHandle->midDuty = (uint16_t)wTimePhA;
 80018d8:	b29e      	uxth	r6, r3
          }
          else
          {
            pHandle->lowDuty = (uint16_t)wTimePhA;
            pHandle->midDuty = (uint16_t)wTimePhC;
            pHandle->highDuty = (uint16_t)wTimePhB;
 80018da:	b28d      	uxth	r5, r1
 80018dc:	e01e      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
        if (wX <= 0)
 80018de:	2d00      	cmp	r5, #0
 80018e0:	dc65      	bgt.n	80019ae <PWMC_SetPhaseVoltage+0x152>
          pHandle->Sector = SECTOR_4;
 80018e2:	2203      	movs	r2, #3
 80018e4:	4664      	mov	r4, ip
 80018e6:	7022      	strb	r2, [r4, #0]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80018e8:	1aea      	subs	r2, r5, r3
 80018ea:	17d3      	asrs	r3, r2, #31
 80018ec:	039b      	lsls	r3, r3, #14
 80018ee:	0b9b      	lsrs	r3, r3, #14
 80018f0:	189b      	adds	r3, r3, r2
          wTimePhB = wTimePhA + (wZ / 131072);
 80018f2:	17ca      	asrs	r2, r1, #31
 80018f4:	0392      	lsls	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 80018f6:	17ec      	asrs	r4, r5, #31
          wTimePhB = wTimePhA + (wZ / 131072);
 80018f8:	0b92      	lsrs	r2, r2, #14
          wTimePhC = wTimePhB - (wX / 131072);
 80018fa:	03e4      	lsls	r4, r4, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 80018fc:	1851      	adds	r1, r2, r1
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80018fe:	149b      	asrs	r3, r3, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001900:	0be4      	lsrs	r4, r4, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001902:	19db      	adds	r3, r3, r7
          wTimePhB = wTimePhA + (wZ / 131072);
 8001904:	1489      	asrs	r1, r1, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001906:	1964      	adds	r4, r4, r5
          if(true == pHandle->SingleShuntTopology)
 8001908:	9a01      	ldr	r2, [sp, #4]
          wTimePhB = wTimePhA + (wZ / 131072);
 800190a:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 800190c:	1464      	asrs	r4, r4, #17
 800190e:	1b0c      	subs	r4, r1, r4
          if(true == pHandle->SingleShuntTopology)
 8001910:	2a00      	cmp	r2, #0
 8001912:	d000      	beq.n	8001916 <PWMC_SetPhaseVoltage+0xba>
 8001914:	e0c2      	b.n	8001a9c <PWMC_SetPhaseVoltage+0x240>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8001916:	b2a7      	uxth	r7, r4
          pHandle->midDuty = (uint16_t)wTimePhB;
 8001918:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 800191a:	b29d      	uxth	r5, r3
            pHandle->lowDuty = 0U;
 800191c:	0002      	movs	r2, r0
 800191e:	3258      	adds	r2, #88	@ 0x58
 8001920:	8017      	strh	r7, [r2, #0]
            pHandle->midDuty = 1U;
 8001922:	8056      	strh	r6, [r2, #2]
            pHandle->highDuty = 2U;
 8001924:	8095      	strh	r5, [r2, #4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001926:	43da      	mvns	r2, r3
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001928:	43cd      	mvns	r5, r1
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800192a:	43e6      	mvns	r6, r4
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800192c:	17d2      	asrs	r2, r2, #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800192e:	17ed      	asrs	r5, r5, #31
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001930:	4013      	ands	r3, r2
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001932:	4029      	ands	r1, r5
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001934:	17f6      	asrs	r6, r6, #31
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001936:	0002      	movs	r2, r0
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001938:	0005      	movs	r5, r0
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800193a:	0007      	movs	r7, r0
 800193c:	4034      	ands	r4, r6

    if (1U == pHandle->DTTest)
 800193e:	0006      	movs	r6, r0
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001940:	3250      	adds	r2, #80	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001942:	3552      	adds	r5, #82	@ 0x52
 8001944:	b29b      	uxth	r3, r3
 8001946:	b289      	uxth	r1, r1
 8001948:	b2a4      	uxth	r4, r4
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800194a:	3754      	adds	r7, #84	@ 0x54
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800194c:	8013      	strh	r3, [r2, #0]
 800194e:	9201      	str	r2, [sp, #4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001950:	8029      	strh	r1, [r5, #0]
 8001952:	9502      	str	r5, [sp, #8]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001954:	803c      	strh	r4, [r7, #0]
    if (1U == pHandle->DTTest)
 8001956:	3670      	adds	r6, #112	@ 0x70
 8001958:	8836      	ldrh	r6, [r6, #0]
 800195a:	2e01      	cmp	r6, #1
 800195c:	d123      	bne.n	80019a6 <PWMC_SetPhaseVoltage+0x14a>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800195e:	2262      	movs	r2, #98	@ 0x62
 8001960:	4694      	mov	ip, r2
 8001962:	4484      	add	ip, r0
 8001964:	4662      	mov	r2, ip
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001966:	0006      	movs	r6, r0
      if (pHandle->Ia > 0)
 8001968:	2500      	movs	r5, #0
 800196a:	5f52      	ldrsh	r2, [r2, r5]
        pHandle->CntPhA += pHandle->DTCompCnt;
 800196c:	3674      	adds	r6, #116	@ 0x74
 800196e:	8836      	ldrh	r6, [r6, #0]
      if (pHandle->Ia > 0)
 8001970:	2a00      	cmp	r2, #0
 8001972:	dc00      	bgt.n	8001976 <PWMC_SetPhaseVoltage+0x11a>
 8001974:	e0a5      	b.n	8001ac2 <PWMC_SetPhaseVoltage+0x266>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001976:	199b      	adds	r3, r3, r6
 8001978:	9a01      	ldr	r2, [sp, #4]
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800197a:	b29b      	uxth	r3, r3
 800197c:	8013      	strh	r3, [r2, #0]
      }

      if (pHandle->Ib > 0)
 800197e:	0003      	movs	r3, r0
 8001980:	3364      	adds	r3, #100	@ 0x64
 8001982:	2200      	movs	r2, #0
 8001984:	5e9b      	ldrsh	r3, [r3, r2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dc00      	bgt.n	800198c <PWMC_SetPhaseVoltage+0x130>
 800198a:	e09c      	b.n	8001ac6 <PWMC_SetPhaseVoltage+0x26a>
      {
        pHandle->CntPhB += pHandle->DTCompCnt;
 800198c:	1989      	adds	r1, r1, r6
 800198e:	9b02      	ldr	r3, [sp, #8]
      }
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8001990:	b289      	uxth	r1, r1
 8001992:	8019      	strh	r1, [r3, #0]
      }

      if (pHandle->Ic > 0)
 8001994:	0003      	movs	r3, r0
 8001996:	3366      	adds	r3, #102	@ 0x66
 8001998:	2200      	movs	r2, #0
 800199a:	5e9b      	ldrsh	r3, [r3, r2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc00      	bgt.n	80019a2 <PWMC_SetPhaseVoltage+0x146>
 80019a0:	e093      	b.n	8001aca <PWMC_SetPhaseVoltage+0x26e>
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80019a2:	19a6      	adds	r6, r4, r6
 80019a4:	803e      	strh	r6, [r7, #0]
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80019a6:	6943      	ldr	r3, [r0, #20]
 80019a8:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80019aa:	b005      	add	sp, #20
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pHandle->Sector = SECTOR_3;
 80019ae:	4663      	mov	r3, ip
 80019b0:	2602      	movs	r6, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80019b2:	1b52      	subs	r2, r2, r5
          pHandle->Sector = SECTOR_3;
 80019b4:	701e      	strb	r6, [r3, #0]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80019b6:	17d3      	asrs	r3, r2, #31
 80019b8:	039b      	lsls	r3, r3, #14
 80019ba:	0b9b      	lsrs	r3, r3, #14
 80019bc:	189b      	adds	r3, r3, r2
          wTimePhC = wTimePhA - (wY / 131072);
 80019be:	17e2      	asrs	r2, r4, #31
 80019c0:	0392      	lsls	r2, r2, #14
 80019c2:	0b92      	lsrs	r2, r2, #14
 80019c4:	1914      	adds	r4, r2, r4
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80019c6:	149b      	asrs	r3, r3, #18
 80019c8:	19db      	adds	r3, r3, r7
          wTimePhC = wTimePhA - (wY / 131072);
 80019ca:	14a4      	asrs	r4, r4, #18
          if(true == pHandle->SingleShuntTopology)
 80019cc:	9a01      	ldr	r2, [sp, #4]
          wTimePhC = wTimePhA - (wY / 131072);
 80019ce:	1b1c      	subs	r4, r3, r4
          wTimePhB = wTimePhC + (wX / 131072);
 80019d0:	1469      	asrs	r1, r5, #17
 80019d2:	1909      	adds	r1, r1, r4
          if(true == pHandle->SingleShuntTopology)
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d164      	bne.n	8001aa2 <PWMC_SetPhaseVoltage+0x246>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80019d8:	b28f      	uxth	r7, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 80019da:	b2a6      	uxth	r6, r4
 80019dc:	e79d      	b.n	800191a <PWMC_SetPhaseVoltage+0xbe>
      if (wZ >= 0)
 80019de:	1c4e      	adds	r6, r1, #1
 80019e0:	db1e      	blt.n	8001a20 <PWMC_SetPhaseVoltage+0x1c4>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80019e2:	1ad2      	subs	r2, r2, r3
 80019e4:	17d3      	asrs	r3, r2, #31
 80019e6:	039b      	lsls	r3, r3, #14
 80019e8:	0b9b      	lsrs	r3, r3, #14
 80019ea:	189b      	adds	r3, r3, r2
        wTimePhB = wTimePhA + (wZ / 131072);
 80019ec:	17ca      	asrs	r2, r1, #31
 80019ee:	0392      	lsls	r2, r2, #14
 80019f0:	0b92      	lsrs	r2, r2, #14
 80019f2:	1851      	adds	r1, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 80019f4:	17e2      	asrs	r2, r4, #31
 80019f6:	0392      	lsls	r2, r2, #14
 80019f8:	0b92      	lsrs	r2, r2, #14
 80019fa:	1914      	adds	r4, r2, r4
        pHandle->Sector = SECTOR_2;
 80019fc:	2501      	movs	r5, #1
 80019fe:	4666      	mov	r6, ip
        if(true == pHandle->SingleShuntTopology)
 8001a00:	0002      	movs	r2, r0
        pHandle->Sector = SECTOR_2;
 8001a02:	7035      	strb	r5, [r6, #0]
        if(true == pHandle->SingleShuntTopology)
 8001a04:	3287      	adds	r2, #135	@ 0x87
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001a06:	149b      	asrs	r3, r3, #18
        if(true == pHandle->SingleShuntTopology)
 8001a08:	7812      	ldrb	r2, [r2, #0]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001a0a:	19db      	adds	r3, r3, r7
        wTimePhB = wTimePhA + (wZ / 131072);
 8001a0c:	1489      	asrs	r1, r1, #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001a0e:	14a4      	asrs	r4, r4, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 8001a10:	18c9      	adds	r1, r1, r3
        wTimePhC = wTimePhA - (wY / 131072);
 8001a12:	1b1c      	subs	r4, r3, r4
        if(true == pHandle->SingleShuntTopology)
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d147      	bne.n	8001aa8 <PWMC_SetPhaseVoltage+0x24c>
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001a18:	b28f      	uxth	r7, r1
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001a1a:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8001a1c:	b2a5      	uxth	r5, r4
 8001a1e:	e77d      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
        if ( wX <= 0 )
 8001a20:	17ee      	asrs	r6, r5, #31
 8001a22:	2d00      	cmp	r5, #0
 8001a24:	dc18      	bgt.n	8001a58 <PWMC_SetPhaseVoltage+0x1fc>
          pHandle->Sector = SECTOR_6;
 8001a26:	2305      	movs	r3, #5
 8001a28:	4661      	mov	r1, ip
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001a2a:	1b52      	subs	r2, r2, r5
 8001a2c:	1492      	asrs	r2, r2, #18
          pHandle->Sector = SECTOR_6;
 8001a2e:	700b      	strb	r3, [r1, #0]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001a30:	19d3      	adds	r3, r2, r7
          wTimePhC = wTimePhA - (wY / 131072);
 8001a32:	17e2      	asrs	r2, r4, #31
 8001a34:	0392      	lsls	r2, r2, #14
 8001a36:	0b92      	lsrs	r2, r2, #14
 8001a38:	1914      	adds	r4, r2, r4
          if(true == pHandle->SingleShuntTopology)
 8001a3a:	0002      	movs	r2, r0
          wTimePhB = wTimePhC + (wX / 131072);
 8001a3c:	03f1      	lsls	r1, r6, #15
 8001a3e:	0bc9      	lsrs	r1, r1, #15
          if(true == pHandle->SingleShuntTopology)
 8001a40:	3287      	adds	r2, #135	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 8001a42:	14a4      	asrs	r4, r4, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001a44:	1949      	adds	r1, r1, r5
          if(true == pHandle->SingleShuntTopology)
 8001a46:	7812      	ldrb	r2, [r2, #0]
          wTimePhC = wTimePhA - (wY / 131072);
 8001a48:	1b1c      	subs	r4, r3, r4
          wTimePhB = wTimePhC + (wX / 131072);
 8001a4a:	1449      	asrs	r1, r1, #17
 8001a4c:	1909      	adds	r1, r1, r4
          if(true == pHandle->SingleShuntTopology)
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	d12d      	bne.n	8001aae <PWMC_SetPhaseVoltage+0x252>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8001a52:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhC;
 8001a54:	b2a6      	uxth	r6, r4
 8001a56:	e740      	b.n	80018da <PWMC_SetPhaseVoltage+0x7e>
          pHandle->Sector = SECTOR_1;
 8001a58:	4664      	mov	r4, ip
 8001a5a:	2200      	movs	r2, #0
          wTimePhC = wTimePhB - (wX / 131072);
 8001a5c:	03f6      	lsls	r6, r6, #15
 8001a5e:	0bf6      	lsrs	r6, r6, #15
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001a60:	1aeb      	subs	r3, r5, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8001a62:	1976      	adds	r6, r6, r5
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001a64:	0005      	movs	r5, r0
          pHandle->Sector = SECTOR_1;
 8001a66:	7022      	strb	r2, [r4, #0]
          wTimePhB = wTimePhA + (wZ / 131072);
 8001a68:	17cc      	asrs	r4, r1, #31
 8001a6a:	03a4      	lsls	r4, r4, #14
 8001a6c:	0ba4      	lsrs	r4, r4, #14
 8001a6e:	1861      	adds	r1, r4, r1
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001a70:	149b      	asrs	r3, r3, #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001a72:	357f      	adds	r5, #127	@ 0x7f
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001a74:	19db      	adds	r3, r3, r7
          wTimePhB = wTimePhA + (wZ / 131072);
 8001a76:	1489      	asrs	r1, r1, #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001a78:	782d      	ldrb	r5, [r5, #0]
          wTimePhB = wTimePhA + (wZ / 131072);
 8001a7a:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhB - (wX / 131072);
 8001a7c:	1476      	asrs	r6, r6, #17
 8001a7e:	1b8c      	subs	r4, r1, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001a80:	4295      	cmp	r5, r2
 8001a82:	d118      	bne.n	8001ab6 <PWMC_SetPhaseVoltage+0x25a>
 8001a84:	0002      	movs	r2, r0
 8001a86:	3287      	adds	r2, #135	@ 0x87
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d116      	bne.n	8001abc <PWMC_SetPhaseVoltage+0x260>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8001a8e:	b29f      	uxth	r7, r3
            pHandle->midDuty = (uint16_t)wTimePhB;
 8001a90:	b28e      	uxth	r6, r1
 8001a92:	e7c3      	b.n	8001a1c <PWMC_SetPhaseVoltage+0x1c0>
 8001a94:	2701      	movs	r7, #1
 8001a96:	2600      	movs	r6, #0
 8001a98:	2502      	movs	r5, #2
 8001a9a:	e73f      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
 8001a9c:	2700      	movs	r7, #0
 8001a9e:	2601      	movs	r6, #1
 8001aa0:	e7fa      	b.n	8001a98 <PWMC_SetPhaseVoltage+0x23c>
 8001aa2:	2700      	movs	r7, #0
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	e739      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
 8001aa8:	2702      	movs	r7, #2
 8001aaa:	2600      	movs	r6, #0
 8001aac:	e736      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
 8001aae:	2701      	movs	r7, #1
 8001ab0:	2602      	movs	r6, #2
 8001ab2:	2500      	movs	r5, #0
 8001ab4:	e732      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
 8001ab6:	2702      	movs	r7, #2
 8001ab8:	2601      	movs	r6, #1
 8001aba:	e7fa      	b.n	8001ab2 <PWMC_SetPhaseVoltage+0x256>
 8001abc:	2702      	movs	r7, #2
 8001abe:	2601      	movs	r6, #1
 8001ac0:	e72c      	b.n	800191c <PWMC_SetPhaseVoltage+0xc0>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8001ac2:	1b9b      	subs	r3, r3, r6
 8001ac4:	e758      	b.n	8001978 <PWMC_SetPhaseVoltage+0x11c>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8001ac6:	1b89      	subs	r1, r1, r6
 8001ac8:	e761      	b.n	800198e <PWMC_SetPhaseVoltage+0x132>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8001aca:	1ba4      	subs	r4, r4, r6
 8001acc:	803c      	strh	r4, [r7, #0]
 8001ace:	e76a      	b.n	80019a6 <PWMC_SetPhaseVoltage+0x14a>

08001ad0 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8001ad0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8001ad2:	6843      	ldr	r3, [r0, #4]
 8001ad4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001ad6:	bd10      	pop	{r4, pc}

08001ad8 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 8001ad8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8001ada:	6883      	ldr	r3, [r0, #8]
 8001adc:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001ade:	bd10      	pop	{r4, pc}

08001ae0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	d105      	bne.n	8001af4 <PWMC_CurrentReadingCalibr+0x14>
    {
      PWMC_SwitchOffPWM(pHandle);
 8001ae8:	f7ff fff2 	bl	8001ad0 <PWMC_SwitchOffPWM>
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
      {
        pHandle->OffCalibrWaitTimeCounter--;
        if (0U == pHandle->OffCalibrWaitTimeCounter)
        {
          pHandle->pFctCurrReadingCalib(pHandle);
 8001aec:	0020      	movs	r0, r4
 8001aee:	68e3      	ldr	r3, [r4, #12]
 8001af0:	4798      	blx	r3
          retVal = true;
 8001af2:	e008      	b.n	8001b06 <PWMC_CurrentReadingCalibr+0x26>
    else if (CRC_EXEC == action)
 8001af4:	2901      	cmp	r1, #1
 8001af6:	d001      	beq.n	8001afc <PWMC_CurrentReadingCalibr+0x1c>
  bool retVal = false;
 8001af8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8001afa:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8001afc:	0002      	movs	r2, r0
 8001afe:	3260      	adds	r2, #96	@ 0x60
 8001b00:	8813      	ldrh	r3, [r2, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <PWMC_CurrentReadingCalibr+0x2a>
      retVal = true;
 8001b06:	2001      	movs	r0, #1
 8001b08:	e7f7      	b.n	8001afa <PWMC_CurrentReadingCalibr+0x1a>
        pHandle->OffCalibrWaitTimeCounter--;
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	8013      	strh	r3, [r2, #0]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f1      	bne.n	8001af8 <PWMC_CurrentReadingCalibr+0x18>
 8001b14:	e7ea      	b.n	8001aec <PWMC_CurrentReadingCalibr+0xc>

08001b16 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8001b16:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001b18:	000d      	movs	r5, r1
 8001b1a:	1c0b      	adds	r3, r1, #0
 8001b1c:	0011      	movs	r1, r2
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001b1e:	0002      	movs	r2, r0
{
 8001b20:	0004      	movs	r4, r0
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001b22:	326e      	adds	r2, #110	@ 0x6e
 8001b24:	2000      	movs	r0, #0
 8001b26:	5e10      	ldrsh	r0, [r2, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001b28:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001b2a:	b21b      	sxth	r3, r3
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001b2c:	13d6      	asrs	r6, r2, #15
 8001b2e:	1b9b      	subs	r3, r3, r6
 8001b30:	4343      	muls	r3, r0
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	6363      	str	r3, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001b36:	aa02      	add	r2, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001b38:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001b3a:	8013      	strh	r3, [r2, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001b3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001b3e:	142d      	asrs	r5, r5, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001b40:	13de      	asrs	r6, r3, #15
 8001b42:	1bad      	subs	r5, r5, r6
 8001b44:	4368      	muls	r0, r5
 8001b46:	18c0      	adds	r0, r0, r3
 8001b48:	63a0      	str	r0, [r4, #56]	@ 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001b4a:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001b4c:	8050      	strh	r0, [r2, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001b4e:	9802      	ldr	r0, [sp, #8]
 8001b50:	f7ff fa56 	bl	8001000 <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 8001b54:	0022      	movs	r2, r4
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001b56:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 8001b58:	3268      	adds	r2, #104	@ 0x68
 8001b5a:	8013      	strh	r3, [r2, #0]

    temp1 = - ialpha_beta.alpha;
 8001b5c:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001b5e:	0c00      	lsrs	r0, r0, #16
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	1a19      	subs	r1, r3, r0
 8001b64:	b209      	sxth	r1, r1
 8001b66:	0fca      	lsrs	r2, r1, #31
 8001b68:	1852      	adds	r2, r2, r1
 8001b6a:	0021      	movs	r1, r4

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001b6c:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001b6e:	1052      	asrs	r2, r2, #1
 8001b70:	316a      	adds	r1, #106	@ 0x6a
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001b72:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001b74:	800a      	strh	r2, [r1, #0]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001b76:	0fda      	lsrs	r2, r3, #31
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	105b      	asrs	r3, r3, #1
 8001b7c:	346c      	adds	r4, #108	@ 0x6c
 8001b7e:	8023      	strh	r3, [r4, #0]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001b80:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08001b82 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8001b82:	0003      	movs	r3, r0
 8001b84:	3385      	adds	r3, #133	@ 0x85
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d113      	bne.n	8001bb4 <PWMC_OCP_Handler+0x32>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	337d      	adds	r3, #125	@ 0x7d
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d10e      	bne.n	8001bb4 <PWMC_OCP_Handler+0x32>
      {
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8001b96:	0002      	movs	r2, r0
 8001b98:	3248      	adds	r2, #72	@ 0x48
 8001b9a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001b9c:	8812      	ldrh	r2, [r2, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	324a      	adds	r2, #74	@ 0x4a
 8001ba4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8001baa:	0002      	movs	r2, r0
 8001bac:	324c      	adds	r2, #76	@ 0x4c
 8001bae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	3382      	adds	r3, #130	@ 0x82
    tempPointer = &(pHandle->Motor);
 8001bba:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverCurrentFlag = true;
 8001bbc:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8001bbe:	4770      	bx	lr

08001bc0 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8001bc0:	0002      	movs	r2, r0
{
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	2000      	movs	r0, #0
  if (true == pHandle->OverVoltageFlag)
 8001bc6:	3283      	adds	r2, #131	@ 0x83
 8001bc8:	7811      	ldrb	r1, [r2, #0]
 8001bca:	4281      	cmp	r1, r0
 8001bcc:	d001      	beq.n	8001bd2 <PWMC_IsFaultOccurred+0x12>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8001bce:	7010      	strb	r0, [r2, #0]
    retVal = MC_OVER_VOLT;
 8001bd0:	3002      	adds	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	3282      	adds	r2, #130	@ 0x82
 8001bd6:	7811      	ldrb	r1, [r2, #0]
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d003      	beq.n	8001be4 <PWMC_IsFaultOccurred+0x24>
  {
    retVal |= MC_OVER_CURR;
 8001bdc:	2140      	movs	r1, #64	@ 0x40
 8001bde:	4308      	orrs	r0, r1
    pHandle->OverCurrentFlag = false;
 8001be0:	2100      	movs	r1, #0
 8001be2:	7011      	strb	r1, [r2, #0]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8001be4:	3384      	adds	r3, #132	@ 0x84
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	d004      	beq.n	8001bf6 <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 8001bec:	2280      	movs	r2, #128	@ 0x80
 8001bee:	00d2      	lsls	r2, r2, #3
 8001bf0:	4310      	orrs	r0, r2
    pHandle->driverProtectionFlag = false;
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8001bf6:	4770      	bx	lr

08001bf8 <LL_TIM_OC_DisablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bf8:	2940      	cmp	r1, #64	@ 0x40
 8001bfa:	d812      	bhi.n	8001c22 <LL_TIM_OC_DisablePreload+0x2a>
{
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	2910      	cmp	r1, #16
 8001c00:	d003      	beq.n	8001c0a <LL_TIM_OC_DisablePreload+0x12>
 8001c02:	2300      	movs	r3, #0
 8001c04:	2901      	cmp	r1, #1
 8001c06:	d000      	beq.n	8001c0a <LL_TIM_OC_DisablePreload+0x12>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c08:	3306      	adds	r3, #6
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <LL_TIM_OC_DisablePreload+0x38>)
 8001c0c:	3018      	adds	r0, #24
 8001c0e:	5cd2      	ldrb	r2, [r2, r3]
 8001c10:	1812      	adds	r2, r2, r0
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c12:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <LL_TIM_OC_DisablePreload+0x3c>)
 8001c14:	6811      	ldr	r1, [r2, #0]
 8001c16:	5cc0      	ldrb	r0, [r0, r3]
 8001c18:	2308      	movs	r3, #8
 8001c1a:	4083      	lsls	r3, r0
 8001c1c:	4399      	bics	r1, r3
 8001c1e:	6011      	str	r1, [r2, #0]
}
 8001c20:	4770      	bx	lr
 8001c22:	2280      	movs	r2, #128	@ 0x80
{
 8001c24:	2304      	movs	r3, #4
 8001c26:	0052      	lsls	r2, r2, #1
 8001c28:	4291      	cmp	r1, r2
 8001c2a:	d0ee      	beq.n	8001c0a <LL_TIM_OC_DisablePreload+0x12>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	e7ec      	b.n	8001c0a <LL_TIM_OC_DisablePreload+0x12>
 8001c30:	0800503f 	.word	0x0800503f
 8001c34:	08005038 	.word	0x08005038

08001c38 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <LL_DMA_EnableChannel+0x10>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	18c0      	adds	r0, r0, r3
 8001c3e:	2301      	movs	r3, #1
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	6003      	str	r3, [r0, #0]
}
 8001c46:	4770      	bx	lr
 8001c48:	08005032 	.word	0x08005032

08001c4c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <LL_DMA_DisableChannel+0x10>)
 8001c50:	5ccb      	ldrb	r3, [r1, r3]
 8001c52:	18c0      	adds	r0, r0, r3
 8001c54:	6803      	ldr	r3, [r0, #0]
 8001c56:	4393      	bics	r3, r2
 8001c58:	6003      	str	r3, [r0, #0]
}
 8001c5a:	4770      	bx	lr
 8001c5c:	08005032 	.word	0x08005032

08001c60 <LL_DMA_SetDataLength>:
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <LL_DMA_SetDataLength+0x14>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	18c0      	adds	r0, r0, r3
 8001c66:	6843      	ldr	r3, [r0, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	6043      	str	r3, [r0, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001c70:	4770      	bx	lr
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	08005032 	.word	0x08005032

08001c78 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <LL_DMA_EnableIT_TC+0x10>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	18c0      	adds	r0, r0, r3
 8001c7e:	2302      	movs	r3, #2
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	6003      	str	r3, [r0, #0]
}
 8001c86:	4770      	bx	lr
 8001c88:	08005032 	.word	0x08005032

08001c8c <R1_1ShuntMotorVarsInit>:
void R1_1ShuntMotorVarsInit(PWMC_Handle_t * pHdl)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;

  /* Init motor vars */
  pHandle->iflag = 0;
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	2100      	movs	r1, #0
  pHandle->FOCDurationFlag = false;
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001c90:	0002      	movs	r2, r0
{
 8001c92:	b570      	push	{r4, r5, r6, lr}

  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001c94:	0006      	movs	r6, r0
  pHandle->iflag = 0;
 8001c96:	33c5      	adds	r3, #197	@ 0xc5
 8001c98:	7019      	strb	r1, [r3, #0]
  pHandle->FOCDurationFlag = false;
 8001c9a:	70d9      	strb	r1, [r3, #3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001c9c:	3b53      	subs	r3, #83	@ 0x53
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	32b8      	adds	r2, #184	@ 0xb8
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001ca2:	6955      	ldr	r5, [r2, #20]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001ca4:	085c      	lsrs	r4, r3, #1
 8001ca6:	8014      	strh	r4, [r2, #0]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001ca8:	8c2a      	ldrh	r2, [r5, #32]
 8001caa:	8bed      	ldrh	r5, [r5, #30]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	1952      	adds	r2, r2, r5
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	1a9d      	subs	r5, r3, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001cb4:	189a      	adds	r2, r3, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001cb6:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001cb8:	36ba      	adds	r6, #186	@ 0xba
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001cba:	b292      	uxth	r2, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001cbc:	8035      	strh	r5, [r6, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001cbe:	8072      	strh	r2, [r6, #2]

  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8001cc0:	3e6a      	subs	r6, #106	@ 0x6a
 8001cc2:	8033      	strh	r3, [r6, #0]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;

  /* initialize buffer with the default duty cycle value */
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8001cc4:	8733      	strh	r3, [r6, #56]	@ 0x38
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8001cc6:	8073      	strh	r3, [r6, #2]
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001cc8:	80b3      	strh	r3, [r6, #4]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8001cca:	3638      	adds	r6, #56	@ 0x38
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8001ccc:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[1]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during first half PWM period */
 8001cce:	3602      	adds	r6, #2
 8001cd0:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during first half PWM period */
 8001cd2:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during first half PWM period */
 8001cd4:	3602      	adds	r6, #2
 8001cd6:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during first half PWM period */
 8001cd8:	81b3      	strh	r3, [r6, #12]

  pHandle->DmaBuffCCR[3]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 8001cda:	3602      	adds	r6, #2
 8001cdc:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[3] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 8001cde:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 8001ce0:	3602      	adds	r6, #2
 8001ce2:	8033      	strh	r3, [r6, #0]
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 8001ce4:	81b3      	strh	r3, [r6, #12]
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 8001ce6:	8073      	strh	r3, [r6, #2]
  pHandle->DmaBuffCCR_latch[5] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 8001ce8:	81f3      	strh	r3, [r6, #14]

  /* initialize buffer with default sampling value */
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001cea:	0003      	movs	r3, r0
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001cec:	3c01      	subs	r4, #1
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001cee:	33ae      	adds	r3, #174	@ 0xae
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;

  pHandle->_Super.BrakeActionLock = false;
 8001cf0:	3085      	adds	r0, #133	@ 0x85
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 8001cf2:	3602      	adds	r6, #2
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8001cf4:	809d      	strh	r5, [r3, #4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001cf6:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001cf8:	805c      	strh	r4, [r3, #2]
  pHandle->_Super.BrakeActionLock = false;
 8001cfa:	7001      	strb	r1, [r0, #0]
}
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d00 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001d00:	0003      	movs	r3, r0
 8001d02:	33cc      	adds	r3, #204	@ 0xcc
 8001d04:	681b      	ldr	r3, [r3, #0]
{
 8001d06:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001d08:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8001d0a:	0003      	movs	r3, r0
{
 8001d0c:	0004      	movs	r4, r0
  pHandle->FOCDurationFlag = false;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	33c8      	adds	r3, #200	@ 0xc8
 8001d12:	7018      	strb	r0, [r3, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d14:	6853      	ldr	r3, [r2, #4]
 8001d16:	3070      	adds	r0, #112	@ 0x70
 8001d18:	4383      	bics	r3, r0
 8001d1a:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001d1c:	0023      	movs	r3, r4
  wAux1 -= (int32_t)(pHandle->PhaseOffset);

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
  {
    if (wAux1 < INT16_MAX)
 8001d1e:	2280      	movs	r2, #128	@ 0x80
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001d20:	33b4      	adds	r3, #180	@ 0xb4
 8001d22:	881d      	ldrh	r5, [r3, #0]
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001d24:	3b14      	subs	r3, #20
 8001d26:	6818      	ldr	r0, [r3, #0]
    if (wAux1 < INT16_MAX)
 8001d28:	0212      	lsls	r2, r2, #8
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001d2a:	1a2d      	subs	r5, r5, r0
    if (wAux1 < INT16_MAX)
 8001d2c:	4295      	cmp	r5, r2
 8001d2e:	db00      	blt.n	8001d32 <R1_GetPhaseCurrents+0x32>
 8001d30:	4d83      	ldr	r5, [pc, #524]	@ (8001f40 <R1_GetPhaseCurrents+0x240>)
 8001d32:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <R1_GetPhaseCurrents+0x244>)
 8001d34:	429d      	cmp	r5, r3
 8001d36:	da00      	bge.n	8001d3a <R1_GetPhaseCurrents+0x3a>
 8001d38:	001d      	movs	r5, r3
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 8001d3a:	0026      	movs	r6, r4
 8001d3c:	36b6      	adds	r6, #182	@ 0xb6
 8001d3e:	8836      	ldrh	r6, [r6, #0]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8001d40:	1a36      	subs	r6, r6, r0

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
  {
    if (wAux2 < INT16_MAX)
 8001d42:	4296      	cmp	r6, r2
 8001d44:	db00      	blt.n	8001d48 <R1_GetPhaseCurrents+0x48>
 8001d46:	4e7e      	ldr	r6, [pc, #504]	@ (8001f40 <R1_GetPhaseCurrents+0x240>)
 8001d48:	429e      	cmp	r6, r3
 8001d4a:	da00      	bge.n	8001d4e <R1_GetPhaseCurrents+0x4e>
 8001d4c:	4e7d      	ldr	r6, [pc, #500]	@ (8001f44 <R1_GetPhaseCurrents+0x244>)
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 8001d4e:	0023      	movs	r3, r4
 8001d50:	2200      	movs	r2, #0
 8001d52:	337c      	adds	r3, #124	@ 0x7c
 8001d54:	7818      	ldrb	r0, [r3, #0]
 8001d56:	0013      	movs	r3, r2
 8001d58:	2805      	cmp	r0, #5
 8001d5a:	d824      	bhi.n	8001da6 <R1_GetPhaseCurrents+0xa6>
 8001d5c:	0023      	movs	r3, r4
 8001d5e:	33c5      	adds	r3, #197	@ 0xc5
 8001d60:	f7fe f9ae 	bl	80000c0 <__gnu_thumb1_case_uqi>
 8001d64:	7a4e2c03 	.word	0x7a4e2c03
 8001d68:	c9a3      	.short	0xc9a3
  {
    case SECTOR_1:
    {
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d102      	bne.n	8001d7a <R1_GetPhaseCurrents+0x7a>
      {
        hCurrA = (int16_t) wAux2;
 8001d74:	b233      	sxth	r3, r6
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
      {
        hCurrC = (int16_t) wAux2;
        wAux1 = -wAux1;
        hCurrA = (int16_t) wAux1;
        hCurrB = -hCurrA-hCurrC;
 8001d76:	1baa      	subs	r2, r5, r6
 8001d78:	e040      	b.n	8001dfc <R1_GetPhaseCurrents+0xfc>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d100      	bne.n	8001d80 <R1_GetPhaseCurrents+0x80>
 8001d7e:	e08a      	b.n	8001e96 <R1_GetPhaseCurrents+0x196>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 8001d80:	0022      	movs	r2, r4
 8001d82:	327b      	adds	r2, #123	@ 0x7b
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	2a01      	cmp	r2, #1
 8001d88:	d106      	bne.n	8001d98 <R1_GetPhaseCurrents+0x98>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <R1_GetPhaseCurrents+0x94>
              hCurrA = (int16_t) wAux2;
 8001d8e:	b233      	sxth	r3, r6
            }
            else  /* 0x01 -ia */
            {
              wAux1 = -wAux1;
              hCurrA = (int16_t) wAux1;
              hCurrB = 0;
 8001d90:	2200      	movs	r2, #0
 8001d92:	e008      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
              hCurrA = -hCurrC;
 8001d94:	b22b      	sxth	r3, r5
              hCurrB = 0;
 8001d96:	e7fb      	b.n	8001d90 <R1_GetPhaseCurrents+0x90>
              hCurrB = pHandle->_Super.IbEst;
 8001d98:	0022      	movs	r2, r4
 8001d9a:	326a      	adds	r2, #106	@ 0x6a
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	5e12      	ldrsh	r2, [r2, r0]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <R1_GetPhaseCurrents+0xb6>
              hCurrA = (int16_t) wAux2;
 8001da4:	b233      	sxth	r3, r6

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 8001da6:	0020      	movs	r0, r4
 8001da8:	30c0      	adds	r0, #192	@ 0xc0
  pHandle->CurrBOld = hCurrB;
 8001daa:	34c2      	adds	r4, #194	@ 0xc2
  pHandle->CurrAOld = hCurrA;
 8001dac:	8003      	strh	r3, [r0, #0]
  pHandle->CurrBOld = hCurrB;
 8001dae:	8022      	strh	r2, [r4, #0]

  pStator_Currents->a = hCurrA;
 8001db0:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = hCurrB;
 8001db2:	804a      	strh	r2, [r1, #2]
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
              hCurrA = -hCurrB-hCurrC;
 8001db6:	1aab      	subs	r3, r5, r2
          hCurrA = -hCurrB-hCurrC;
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	e7f4      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d102      	bne.n	8001dcc <R1_GetPhaseCurrents+0xcc>
        hCurrB = (int16_t) wAux2;
 8001dc6:	b232      	sxth	r2, r6
        hCurrA = -hCurrB-hCurrC;
 8001dc8:	1bab      	subs	r3, r5, r6
 8001dca:	e7f5      	b.n	8001db8 <R1_GetPhaseCurrents+0xb8>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 8001dcc:	0023      	movs	r3, r4
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d100      	bne.n	8001dd4 <R1_GetPhaseCurrents+0xd4>
 8001dd2:	e088      	b.n	8001ee6 <R1_GetPhaseCurrents+0x1e6>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 8001dd4:	337b      	adds	r3, #123	@ 0x7b
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <R1_GetPhaseCurrents+0xea>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8001ddc:	2a02      	cmp	r2, #2
 8001dde:	d102      	bne.n	8001de6 <R1_GetPhaseCurrents+0xe6>
              hCurrB = (int16_t) wAux2;
 8001de0:	b232      	sxth	r2, r6
              hCurrA = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e7df      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
              hCurrB = -hCurrC;
 8001de6:	b22a      	sxth	r2, r5
 8001de8:	e7fb      	b.n	8001de2 <R1_GetPhaseCurrents+0xe2>
          hCurrA = pHandle->_Super.IaEst;
 8001dea:	0023      	movs	r3, r4
 8001dec:	3368      	adds	r3, #104	@ 0x68
 8001dee:	2000      	movs	r0, #0
 8001df0:	5e1b      	ldrsh	r3, [r3, r0]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8001df2:	2a02      	cmp	r2, #2
 8001df4:	d101      	bne.n	8001dfa <R1_GetPhaseCurrents+0xfa>
              hCurrB = (int16_t) wAux2;
 8001df6:	b232      	sxth	r2, r6
              hCurrA = pHandle->_Super.IaEst;
 8001df8:	e7d5      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
              hCurrB = -hCurrA-hCurrC;
 8001dfa:	1aea      	subs	r2, r5, r3
              hCurrB = -hCurrA;
 8001dfc:	b212      	sxth	r2, r2
 8001dfe:	e7d2      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 8001e00:	2203      	movs	r2, #3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4013      	ands	r3, r2
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d102      	bne.n	8001e10 <R1_GetPhaseCurrents+0x110>
        hCurrB = (int16_t) wAux2;
 8001e0a:	b232      	sxth	r2, r6
              wAux1 = -wAux1;
 8001e0c:	426b      	negs	r3, r5
 8001e0e:	e7d3      	b.n	8001db8 <R1_GetPhaseCurrents+0xb8>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <R1_GetPhaseCurrents+0x14e>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 8001e14:	0022      	movs	r2, r4
 8001e16:	327b      	adds	r2, #123	@ 0x7b
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	2a01      	cmp	r2, #1
 8001e1c:	d108      	bne.n	8001e30 <R1_GetPhaseCurrents+0x130>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d102      	bne.n	8001e28 <R1_GetPhaseCurrents+0x128>
              hCurrB = (int16_t) wAux2;
 8001e22:	b232      	sxth	r2, r6
              hCurrA = -hCurrB;
 8001e24:	4273      	negs	r3, r6
 8001e26:	e7c7      	b.n	8001db8 <R1_GetPhaseCurrents+0xb8>
              wAux1 = -wAux1;
 8001e28:	426b      	negs	r3, r5
              hCurrA = (int16_t) wAux1;
 8001e2a:	b21b      	sxth	r3, r3
              hCurrB = -hCurrA;
 8001e2c:	b22a      	sxth	r2, r5
 8001e2e:	e7ba      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d105      	bne.n	8001e40 <R1_GetPhaseCurrents+0x140>
              hCurrB = (int16_t) wAux2;
 8001e34:	b232      	sxth	r2, r6
              hCurrA = pHandle->_Super.IaEst;
 8001e36:	0023      	movs	r3, r4
 8001e38:	3368      	adds	r3, #104	@ 0x68
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	5e1b      	ldrsh	r3, [r3, r0]
 8001e3e:	e7b2      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
              wAux1 = -wAux1;
 8001e40:	426b      	negs	r3, r5
              hCurrA = (int16_t) wAux1;
 8001e42:	b21b      	sxth	r3, r3
          hCurrB = pHandle->_Super.IbEst;
 8001e44:	0022      	movs	r2, r4
 8001e46:	326a      	adds	r2, #106	@ 0x6a
 8001e48:	2000      	movs	r0, #0
 8001e4a:	5e12      	ldrsh	r2, [r2, r0]
 8001e4c:	e7ab      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
          hCurrB = pHandle->_Super.IbEst;
 8001e4e:	0023      	movs	r3, r4
 8001e50:	336a      	adds	r3, #106	@ 0x6a
 8001e52:	2200      	movs	r2, #0
 8001e54:	5e9a      	ldrsh	r2, [r3, r2]
          hCurrA = pHandle->_Super.IaEst;
 8001e56:	e7ee      	b.n	8001e36 <R1_GetPhaseCurrents+0x136>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 8001e58:	2205      	movs	r2, #5
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d102      	bne.n	8001e68 <R1_GetPhaseCurrents+0x168>
        wAux1 = -wAux1;
 8001e62:	426b      	negs	r3, r5
        hCurrA = (int16_t) wAux1;
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	e786      	b.n	8001d76 <R1_GetPhaseCurrents+0x76>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d014      	beq.n	8001e96 <R1_GetPhaseCurrents+0x196>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 8001e6c:	0022      	movs	r2, r4
 8001e6e:	327b      	adds	r2, #123	@ 0x7b
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d106      	bne.n	8001e84 <R1_GetPhaseCurrents+0x184>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d102      	bne.n	8001e80 <R1_GetPhaseCurrents+0x180>
              hCurrA = -hCurrC;
 8001e7a:	4273      	negs	r3, r6
              hCurrA = (int16_t) wAux1;
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	e787      	b.n	8001d90 <R1_GetPhaseCurrents+0x90>
              wAux1 = -wAux1;
 8001e80:	426b      	negs	r3, r5
 8001e82:	e7fb      	b.n	8001e7c <R1_GetPhaseCurrents+0x17c>
              hCurrB = pHandle->_Super.IbEst;
 8001e84:	0022      	movs	r2, r4
 8001e86:	326a      	adds	r2, #106	@ 0x6a
 8001e88:	2000      	movs	r0, #0
 8001e8a:	5e12      	ldrsh	r2, [r2, r0]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d1bd      	bne.n	8001e0c <R1_GetPhaseCurrents+0x10c>
              hCurrA = -hCurrB-hCurrC;
 8001e90:	1993      	adds	r3, r2, r6
          hCurrA = -hCurrB-hCurrC;
 8001e92:	425b      	negs	r3, r3
 8001e94:	e790      	b.n	8001db8 <R1_GetPhaseCurrents+0xb8>
          hCurrA = pHandle->_Super.IaEst;
 8001e96:	0023      	movs	r3, r4
 8001e98:	3368      	adds	r3, #104	@ 0x68
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	5e9b      	ldrsh	r3, [r3, r2]
          hCurrC = pHandle->_Super.IcEst;
 8001e9e:	0022      	movs	r2, r4
 8001ea0:	326c      	adds	r2, #108	@ 0x6c
          hCurrB = -hCurrA-hCurrC;
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	18d2      	adds	r2, r2, r3
              hCurrB = -hCurrA-hCurrC;
 8001ea6:	4252      	negs	r2, r2
 8001ea8:	e7a8      	b.n	8001dfc <R1_GetPhaseCurrents+0xfc>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	2306      	movs	r3, #6
 8001eae:	401a      	ands	r2, r3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d102      	bne.n	8001eba <R1_GetPhaseCurrents+0x1ba>
        wAux1 = -wAux1;
 8001eb4:	426a      	negs	r2, r5
        hCurrB = (int16_t) wAux1;
 8001eb6:	b212      	sxth	r2, r2
 8001eb8:	e786      	b.n	8001dc8 <R1_GetPhaseCurrents+0xc8>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8001eba:	0023      	movs	r3, r4
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d012      	beq.n	8001ee6 <R1_GetPhaseCurrents+0x1e6>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8001ec0:	337b      	adds	r3, #123	@ 0x7b
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <R1_GetPhaseCurrents+0x1d6>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001ec8:	2a04      	cmp	r2, #4
 8001eca:	d102      	bne.n	8001ed2 <R1_GetPhaseCurrents+0x1d2>
              hCurrB = -hCurrC;
 8001ecc:	4272      	negs	r2, r6
              hCurrB = (int16_t) wAux1;
 8001ece:	b212      	sxth	r2, r2
 8001ed0:	e787      	b.n	8001de2 <R1_GetPhaseCurrents+0xe2>
              wAux1 = -wAux1;
 8001ed2:	426a      	negs	r2, r5
 8001ed4:	e7fb      	b.n	8001ece <R1_GetPhaseCurrents+0x1ce>
          hCurrA = pHandle->_Super.IaEst;
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	3368      	adds	r3, #104	@ 0x68
 8001eda:	2000      	movs	r0, #0
 8001edc:	5e1b      	ldrsh	r3, [r3, r0]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001ede:	2a04      	cmp	r2, #4
 8001ee0:	d10f      	bne.n	8001f02 <R1_GetPhaseCurrents+0x202>
              hCurrB = -hCurrA-hCurrC;
 8001ee2:	199a      	adds	r2, r3, r6
 8001ee4:	e7df      	b.n	8001ea6 <R1_GetPhaseCurrents+0x1a6>
          hCurrB = pHandle->_Super.IbEst;
 8001ee6:	336a      	adds	r3, #106	@ 0x6a
 8001ee8:	2200      	movs	r2, #0
 8001eea:	5e9a      	ldrsh	r2, [r3, r2]
          hCurrC = pHandle->_Super.IcEst;
 8001eec:	0023      	movs	r3, r4
 8001eee:	336c      	adds	r3, #108	@ 0x6c
          hCurrA = -hCurrB-hCurrC;
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	e7cd      	b.n	8001e92 <R1_GetPhaseCurrents+0x192>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4013      	ands	r3, r2
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d102      	bne.n	8001f06 <R1_GetPhaseCurrents+0x206>
        hCurrA = (int16_t) wAux2;
 8001f00:	b233      	sxth	r3, r6
        wAux1 = -wAux1;
 8001f02:	426a      	negs	r2, r5
 8001f04:	e77a      	b.n	8001dfc <R1_GetPhaseCurrents+0xfc>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d014      	beq.n	8001f34 <R1_GetPhaseCurrents+0x234>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 8001f0a:	0022      	movs	r2, r4
 8001f0c:	327b      	adds	r2, #123	@ 0x7b
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	2a01      	cmp	r2, #1
 8001f12:	d108      	bne.n	8001f26 <R1_GetPhaseCurrents+0x226>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <R1_GetPhaseCurrents+0x21e>
              hCurrA = (int16_t) wAux2;
 8001f18:	b233      	sxth	r3, r6
              hCurrB = -hCurrA;
 8001f1a:	4272      	negs	r2, r6
 8001f1c:	e76e      	b.n	8001dfc <R1_GetPhaseCurrents+0xfc>
              wAux1 = -wAux1;
 8001f1e:	426a      	negs	r2, r5
              hCurrB = (int16_t) wAux1;
 8001f20:	b212      	sxth	r2, r2
              hCurrA = -hCurrB;
 8001f22:	b22b      	sxth	r3, r5
 8001f24:	e73f      	b.n	8001da6 <R1_GetPhaseCurrents+0xa6>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <R1_GetPhaseCurrents+0x22e>
              hCurrA = (int16_t) wAux2;
 8001f2a:	b233      	sxth	r3, r6
              hCurrB = pHandle->_Super.IbEst;
 8001f2c:	e78a      	b.n	8001e44 <R1_GetPhaseCurrents+0x144>
              wAux1 = -wAux1;
 8001f2e:	426d      	negs	r5, r5
              hCurrB = (int16_t) wAux1;
 8001f30:	b22a      	sxth	r2, r5
 8001f32:	e780      	b.n	8001e36 <R1_GetPhaseCurrents+0x136>
          hCurrA = pHandle->_Super.IaEst;
 8001f34:	0023      	movs	r3, r4
 8001f36:	3368      	adds	r3, #104	@ 0x68
 8001f38:	2200      	movs	r2, #0
 8001f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8001f3c:	e782      	b.n	8001e44 <R1_GetPhaseCurrents+0x144>
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	00007fff 	.word	0x00007fff
 8001f44:	ffff8001 	.word	0xffff8001

08001f48 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8001f48:	0003      	movs	r3, r0
 8001f4a:	33cc      	adds	r3, #204	@ 0xcc
 8001f4c:	681b      	ldr	r3, [r3, #0]
{
 8001f4e:	b510      	push	{r4, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8001f50:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8001f52:	0003      	movs	r3, r0
 8001f54:	2400      	movs	r4, #0
 8001f56:	33c8      	adds	r3, #200	@ 0xc8
 8001f58:	701c      	strb	r4, [r3, #0]
 8001f5a:	6853      	ldr	r3, [r2, #4]
 8001f5c:	3470      	adds	r4, #112	@ 0x70
 8001f5e:	43a3      	bics	r3, r4
 8001f60:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 8001f62:	0002      	movs	r2, r0
 8001f64:	32c4      	adds	r2, #196	@ 0xc4
 8001f66:	7813      	ldrb	r3, [r2, #0]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <R1_HFCurrentsCalibration+0x3a>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 8001f6c:	0004      	movs	r4, r0
 8001f6e:	30b6      	adds	r0, #182	@ 0xb6
 8001f70:	34a0      	adds	r4, #160	@ 0xa0
 8001f72:	8800      	ldrh	r0, [r0, #0]
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	181b      	adds	r3, r3, r0
 8001f78:	6023      	str	r3, [r4, #0]
    pHandle->Index++;
 8001f7a:	7813      	ldrb	r3, [r2, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	7013      	strb	r3, [r2, #0]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8001f86:	804b      	strh	r3, [r1, #2]

}
 8001f88:	bd10      	pop	{r4, pc}
	...

08001f8c <R1_SetADCSampPointPolarization>:
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001f8c:	0003      	movs	r3, r0
{
 8001f8e:	b530      	push	{r4, r5, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001f90:	33b8      	adds	r3, #184	@ 0xb8
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001f92:	881a      	ldrh	r2, [r3, #0]
 8001f94:	3314      	adds	r3, #20
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0852      	lsrs	r2, r2, #1
 8001f9a:	8bdc      	ldrh	r4, [r3, #30]
 8001f9c:	8c19      	ldrh	r1, [r3, #32]
 8001f9e:	1909      	adds	r1, r1, r4
 8001fa0:	b289      	uxth	r1, r1
 8001fa2:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001fa4:	0004      	movs	r4, r0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001fa6:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001fa8:	0001      	movs	r1, r0
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001faa:	34ba      	adds	r4, #186	@ 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001fac:	31bc      	adds	r1, #188	@ 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001fae:	8025      	strh	r5, [r4, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001fb0:	800a      	strh	r2, [r1, #0]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8001fb2:	1cda      	adds	r2, r3, #3
 8001fb4:	7fd1      	ldrb	r1, [r2, #31]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	0192      	lsls	r2, r2, #6
 8001fba:	408a      	lsls	r2, r1
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001fbc:	2407      	movs	r4, #7
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fbe:	490e      	ldr	r1, [pc, #56]	@ (8001ff8 <R1_SetADCSampPointPolarization+0x6c>)
 8001fc0:	0b52      	lsrs	r2, r2, #13
 8001fc2:	628a      	str	r2, [r1, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001fc4:	694a      	ldr	r2, [r1, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	7fdb      	ldrb	r3, [r3, #31]
 8001fca:	43a2      	bics	r2, r4
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	614b      	str	r3, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001fd0:	68ca      	ldr	r2, [r1, #12]
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <R1_SetADCSampPointPolarization+0x70>)
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	2388      	movs	r3, #136	@ 0x88
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60cb      	str	r3, [r1, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8001fde:	0003      	movs	r3, r0
 8001fe0:	33c8      	adds	r3, #200	@ 0xc8
 8001fe2:	781a      	ldrb	r2, [r3, #0]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8001fe4:	3b72      	subs	r3, #114	@ 0x72
 8001fe6:	8818      	ldrh	r0, [r3, #0]
 8001fe8:	2801      	cmp	r0, #1
 8001fea:	d001      	beq.n	8001ff0 <R1_SetADCSampPointPolarization+0x64>
  if (pHandle->FOCDurationFlag == true)
 8001fec:	0010      	movs	r0, r2
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 8001fee:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	e7fb      	b.n	8001fee <R1_SetADCSampPointPolarization+0x62>
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	40012400 	.word	0x40012400
 8001ffc:	fffff23f 	.word	0xfffff23f

08002000 <R1_CalcDutyCycles>:
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002000:	0003      	movs	r3, r0
{
 8002002:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002004:	33cc      	adds	r3, #204	@ 0xcc
 8002006:	681b      	ldr	r3, [r3, #0]
{
 8002008:	b091      	sub	sp, #68	@ 0x44
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800200e:	a90e      	add	r1, sp, #56	@ 0x38
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002010:	930a      	str	r3, [sp, #40]	@ 0x28
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002012:	0003      	movs	r3, r0
 8002014:	3350      	adds	r3, #80	@ 0x50
 8002016:	881b      	ldrh	r3, [r3, #0]
  pHandle->iflag=0x00;
 8002018:	2500      	movs	r5, #0
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 800201a:	9307      	str	r3, [sp, #28]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 800201c:	0003      	movs	r3, r0
 800201e:	3352      	adds	r3, #82	@ 0x52
 8002020:	881b      	ldrh	r3, [r3, #0]
{
 8002022:	0004      	movs	r4, r0
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8002024:	9308      	str	r3, [sp, #32]
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8002026:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002028:	930e      	str	r3, [sp, #56]	@ 0x38
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 800202a:	0003      	movs	r3, r0
 800202c:	3354      	adds	r3, #84	@ 0x54
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9a03      	ldr	r2, [sp, #12]
 8002034:	ab0e      	add	r3, sp, #56	@ 0x38
 8002036:	809a      	strh	r2, [r3, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002038:	0003      	movs	r3, r0
 800203a:	335c      	adds	r3, #92	@ 0x5c
 800203c:	781b      	ldrb	r3, [r3, #0]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 800203e:	0002      	movs	r2, r0
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002040:	9301      	str	r3, [sp, #4]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8002042:	0003      	movs	r3, r0
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8002044:	3258      	adds	r2, #88	@ 0x58
 8002046:	7812      	ldrb	r2, [r2, #0]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8002048:	335a      	adds	r3, #90	@ 0x5a
 800204a:	781b      	ldrb	r3, [r3, #0]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 800204c:	9205      	str	r2, [sp, #20]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800204e:	9a01      	ldr	r2, [sp, #4]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	0052      	lsls	r2, r2, #1
 8002054:	5e57      	ldrsh	r7, [r2, r1]
 8002056:	000a      	movs	r2, r1
 8002058:	5e9b      	ldrsh	r3, [r3, r2]
  pHandle->iflag=0x00;
 800205a:	30c5      	adds	r0, #197	@ 0xc5
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	466b      	mov	r3, sp
 8002060:	8a19      	ldrh	r1, [r3, #16]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002062:	9b00      	ldr	r3, [sp, #0]
  pHandle->iflag=0x00;
 8002064:	7005      	strb	r5, [r0, #0]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002066:	8b9b      	ldrh	r3, [r3, #28]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002068:	b2be      	uxth	r6, r7
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 800206a:	1af2      	subs	r2, r6, r3
 800206c:	1a52      	subs	r2, r2, r1
 800206e:	b212      	sxth	r2, r2
 8002070:	9206      	str	r2, [sp, #24]
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002072:	9a05      	ldr	r2, [sp, #20]
 8002074:	0052      	lsls	r2, r2, #1
 8002076:	4694      	mov	ip, r2
 8002078:	4665      	mov	r5, ip
 800207a:	aa0e      	add	r2, sp, #56	@ 0x38
 800207c:	5eaa      	ldrsh	r2, [r5, r2]
 800207e:	9209      	str	r2, [sp, #36]	@ 0x24
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8002080:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8002082:	1aca      	subs	r2, r1, r3
 8002084:	1b52      	subs	r2, r2, r5
 8002086:	4694      	mov	ip, r2
 8002088:	b292      	uxth	r2, r2
 800208a:	920d      	str	r2, [sp, #52]	@ 0x34
 800208c:	4662      	mov	r2, ip
 800208e:	b212      	sxth	r2, r2
 8002090:	920b      	str	r2, [sp, #44]	@ 0x2c
  pHandle->aShiftval[0]=0;
 8002092:	22a8      	movs	r2, #168	@ 0xa8
 8002094:	4694      	mov	ip, r2
 8002096:	44a4      	add	ip, r4
 8002098:	2500      	movs	r5, #0
 800209a:	4662      	mov	r2, ip
 800209c:	6015      	str	r5, [r2, #0]
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 800209e:	22ac      	movs	r2, #172	@ 0xac
 80020a0:	4694      	mov	ip, r2
 80020a2:	44a4      	add	ip, r4
 80020a4:	4662      	mov	r2, ip
 80020a6:	8015      	strh	r5, [r2, #0]
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80020a8:	9a00      	ldr	r2, [sp, #0]
 80020aa:	8c12      	ldrh	r2, [r2, #32]
 80020ac:	9202      	str	r2, [sp, #8]
 80020ae:	9a00      	ldr	r2, [sp, #0]
 80020b0:	2520      	movs	r5, #32
 80020b2:	5f52      	ldrsh	r2, [r2, r5]
       > (int16_t)(pHandle->Half_PWMPeriod))
 80020b4:	0025      	movs	r5, r4
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80020b6:	920c      	str	r2, [sp, #48]	@ 0x30
       > (int16_t)(pHandle->Half_PWMPeriod))
 80020b8:	35b8      	adds	r5, #184	@ 0xb8
 80020ba:	2200      	movs	r2, #0
 80020bc:	5eaa      	ldrsh	r2, [r5, r2]
 80020be:	4694      	mov	ip, r2
  if(submax_mid_deltmin > 0)
 80020c0:	9a06      	ldr	r2, [sp, #24]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	dd12      	ble.n	80020ec <R1_CalcDutyCycles+0xec>
    pHandle->iflag |= ALFLAG[maxVal];
 80020c6:	4a90      	ldr	r2, [pc, #576]	@ (8002308 <R1_CalcDutyCycles+0x308>)
 80020c8:	9d01      	ldr	r5, [sp, #4]
 80020ca:	5d52      	ldrb	r2, [r2, r5]
 80020cc:	7002      	strb	r2, [r0, #0]
  max_bad_flag = 0;
 80020ce:	2500      	movs	r5, #0
    }
  }

  if(submid_min_deltmin > 0)
  {
    pHandle->iflag |= ALFLAG[minVal];
 80020d0:	0020      	movs	r0, r4
 80020d2:	4e8d      	ldr	r6, [pc, #564]	@ (8002308 <R1_CalcDutyCycles+0x308>)
 80020d4:	9f05      	ldr	r7, [sp, #20]
 80020d6:	30c5      	adds	r0, #197	@ 0xc5
 80020d8:	7802      	ldrb	r2, [r0, #0]
 80020da:	57f7      	ldrsb	r7, [r6, r7]
  if(submid_min_deltmin > 0)
 80020dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
    pHandle->iflag |= ALFLAG[minVal];
 80020de:	9206      	str	r2, [sp, #24]
  if(submid_min_deltmin > 0)
 80020e0:	2e00      	cmp	r6, #0
 80020e2:	dd17      	ble.n	8002114 <R1_CalcDutyCycles+0x114>
    pHandle->iflag |= ALFLAG[minVal];
 80020e4:	433a      	orrs	r2, r7
 80020e6:	7002      	strb	r2, [r0, #0]
  min_bad_flag = 0;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e01c      	b.n	8002126 <R1_CalcDutyCycles+0x126>
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80020ec:	2501      	movs	r5, #1
 80020ee:	9a06      	ldr	r2, [sp, #24]
 80020f0:	1aaa      	subs	r2, r5, r2
 80020f2:	19d2      	adds	r2, r2, r7
 80020f4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80020f6:	19d2      	adds	r2, r2, r7
 80020f8:	4562      	cmp	r2, ip
 80020fa:	dce9      	bgt.n	80020d0 <R1_CalcDutyCycles+0xd0>
      pHandle->iflag |= ALFLAG[maxVal];
 80020fc:	9d01      	ldr	r5, [sp, #4]
 80020fe:	4a82      	ldr	r2, [pc, #520]	@ (8002308 <R1_CalcDutyCycles+0x308>)
 8002100:	5d52      	ldrb	r2, [r2, r5]
 8002102:	7002      	strb	r2, [r0, #0]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002104:	0028      	movs	r0, r5
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	3054      	adds	r0, #84	@ 0x54
 800210a:	188a      	adds	r2, r1, r2
 800210c:	0040      	lsls	r0, r0, #1
 800210e:	1b92      	subs	r2, r2, r6
 8002110:	5302      	strh	r2, [r0, r4]
 8002112:	e7dc      	b.n	80020ce <R1_CalcDutyCycles+0xce>
  }
  else
  {
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8002114:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8002116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002118:	3e01      	subs	r6, #1
 800211a:	42d6      	cmn	r6, r2
 800211c:	d50e      	bpl.n	800213c <R1_CalcDutyCycles+0x13c>
    {
      pHandle->iflag &= ~ALFLAG[minVal];
 800211e:	9a06      	ldr	r2, [sp, #24]
 8002120:	43ba      	bics	r2, r7
 8002122:	7002      	strb	r2, [r0, #0]
      min_bad_flag = 1;
 8002124:	2001      	movs	r0, #1
      pHandle->iflag |= ALFLAG[minVal];
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
    }
  }

  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 8002126:	002e      	movs	r6, r5
  {
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002128:	9a00      	ldr	r2, [sp, #0]
  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 800212a:	4306      	orrs	r6, r0
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 800212c:	8bd2      	ldrh	r2, [r2, #30]
  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 800212e:	2e00      	cmp	r6, #0
 8002130:	d10e      	bne.n	8002150 <R1_CalcDutyCycles+0x150>
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002132:	1a8d      	subs	r5, r1, r2
 8002134:	b22d      	sxth	r5, r5
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002136:	1a9b      	subs	r3, r3, r2
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
  }
  else if (1U == max_bad_flag)
  {
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002138:	18cb      	adds	r3, r1, r3
 800213a:	e016      	b.n	800216a <R1_CalcDutyCycles+0x16a>
      pHandle->iflag |= ALFLAG[minVal];
 800213c:	9a06      	ldr	r2, [sp, #24]
 800213e:	433a      	orrs	r2, r7
 8002140:	7002      	strb	r2, [r0, #0]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002142:	9a05      	ldr	r2, [sp, #20]
 8002144:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002146:	3254      	adds	r2, #84	@ 0x54
 8002148:	0052      	lsls	r2, r2, #1
 800214a:	3801      	subs	r0, #1
 800214c:	5310      	strh	r0, [r2, r4]
 800214e:	e7cb      	b.n	80020e8 <R1_CalcDutyCycles+0xe8>
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
 8002150:	2d01      	cmp	r5, #1
 8002152:	d000      	beq.n	8002156 <R1_CalcDutyCycles+0x156>
 8002154:	e0cf      	b.n	80022f6 <R1_CalcDutyCycles+0x2f6>
 8002156:	2801      	cmp	r0, #1
 8002158:	d000      	beq.n	800215c <R1_CalcDutyCycles+0x15c>
 800215a:	e0c8      	b.n	80022ee <R1_CalcDutyCycles+0x2ee>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 800215c:	4663      	mov	r3, ip
 800215e:	0fdd      	lsrs	r5, r3, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002160:	9b02      	ldr	r3, [sp, #8]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002162:	4465      	add	r5, ip
 8002164:	106d      	asrs	r5, r5, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	195b      	adds	r3, r3, r5
 800216a:	b21b      	sxth	r3, r3
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 800216c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800216e:	1b58      	subs	r0, r3, r5
 8002170:	42b0      	cmp	r0, r6
 8002172:	da10      	bge.n	8002196 <R1_CalcDutyCycles+0x196>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8002174:	0023      	movs	r3, r4
 8002176:	4864      	ldr	r0, [pc, #400]	@ (8002308 <R1_CalcDutyCycles+0x308>)
 8002178:	9e01      	ldr	r6, [sp, #4]
 800217a:	33c5      	adds	r3, #197	@ 0xc5
 800217c:	781d      	ldrb	r5, [r3, #0]
 800217e:	5d80      	ldrb	r0, [r0, r6]
 8002180:	4028      	ands	r0, r5
    pHandle->iflag &= ~ALFLAG[minVal];
 8002182:	43b8      	bics	r0, r7
 8002184:	7018      	strb	r0, [r3, #0]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002186:	4663      	mov	r3, ip
 8002188:	0fdd      	lsrs	r5, r3, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 800218a:	9b02      	ldr	r3, [sp, #8]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 800218c:	4465      	add	r5, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 800218e:	18d2      	adds	r2, r2, r3
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002190:	106d      	asrs	r5, r5, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002192:	1952      	adds	r2, r2, r5
 8002194:	b213      	sxth	r3, r2
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8002196:	4563      	cmp	r3, ip
 8002198:	da01      	bge.n	800219e <R1_CalcDutyCycles+0x19e>
 800219a:	2b00      	cmp	r3, #0
 800219c:	dc0a      	bgt.n	80021b4 <R1_CalcDutyCycles+0x1b4>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 800219e:	0023      	movs	r3, r4
 80021a0:	4a59      	ldr	r2, [pc, #356]	@ (8002308 <R1_CalcDutyCycles+0x308>)
 80021a2:	9e01      	ldr	r6, [sp, #4]
 80021a4:	33c5      	adds	r3, #197	@ 0xc5
 80021a6:	7818      	ldrb	r0, [r3, #0]
 80021a8:	5d92      	ldrb	r2, [r2, r6]
 80021aa:	4002      	ands	r2, r0
 80021ac:	701a      	strb	r2, [r3, #0]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	18c9      	adds	r1, r1, r3
 80021b2:	b20b      	sxth	r3, r1
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 80021b4:	4565      	cmp	r5, ip
 80021b6:	da01      	bge.n	80021bc <R1_CalcDutyCycles+0x1bc>
 80021b8:	2d00      	cmp	r5, #0
 80021ba:	dc05      	bgt.n	80021c8 <R1_CalcDutyCycles+0x1c8>
  {
    pHandle->iflag &= ~ALFLAG[minVal];
 80021bc:	0021      	movs	r1, r4
 80021be:	31c5      	adds	r1, #197	@ 0xc5
 80021c0:	780a      	ldrb	r2, [r1, #0]
    SamplePoint1 = aCCRval[midVal];
 80021c2:	9d04      	ldr	r5, [sp, #16]
    pHandle->iflag &= ~ALFLAG[minVal];
 80021c4:	43ba      	bics	r2, r7
 80021c6:	700a      	strb	r2, [r1, #0]
  else
  {
    /* Nothing to do */
  }

  pHandle->CntSmp1 = SamplePoint1;
 80021c8:	0022      	movs	r2, r4
  pHandle->CntSmp2 = SamplePoint2;
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	0023      	movs	r3, r4
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80021d0:	2102      	movs	r1, #2
  pHandle->CntSmp1 = SamplePoint1;
 80021d2:	32ba      	adds	r2, #186	@ 0xba
 80021d4:	b2ad      	uxth	r5, r5
 80021d6:	8015      	strh	r5, [r2, #0]
  pHandle->CntSmp2 = SamplePoint2;
 80021d8:	9a01      	ldr	r2, [sp, #4]
 80021da:	33bc      	adds	r3, #188	@ 0xbc
 80021dc:	801a      	strh	r2, [r3, #0]

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80021de:	9b00      	ldr	r3, [sp, #0]

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80021e0:	9803      	ldr	r0, [sp, #12]
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	9a02      	ldr	r2, [sp, #8]
 80021e8:	4b48      	ldr	r3, [pc, #288]	@ (800230c <R1_CalcDutyCycles+0x30c>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80021f6:	0023      	movs	r3, r4
 80021f8:	33a8      	adds	r3, #168	@ 0xa8
 80021fa:	8819      	ldrh	r1, [r3, #0]
 80021fc:	9b07      	ldr	r3, [sp, #28]
 80021fe:	185f      	adds	r7, r3, r1
 8002200:	0023      	movs	r3, r4
 8002202:	b2bf      	uxth	r7, r7
 8002204:	3394      	adds	r3, #148	@ 0x94
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002206:	8ada      	ldrh	r2, [r3, #22]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002208:	801f      	strh	r7, [r3, #0]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800220a:	9b08      	ldr	r3, [sp, #32]
 800220c:	189e      	adds	r6, r3, r2
 800220e:	0023      	movs	r3, r4
 8002210:	b2b6      	uxth	r6, r6
 8002212:	3396      	adds	r3, #150	@ 0x96
 8002214:	801e      	strh	r6, [r3, #0]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002216:	3316      	adds	r3, #22
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	18c0      	adds	r0, r0, r3
 800221c:	9304      	str	r3, [sp, #16]
 800221e:	b283      	uxth	r3, r0
 8002220:	2098      	movs	r0, #152	@ 0x98
 8002222:	4684      	mov	ip, r0
 8002224:	44a4      	add	ip, r4
 8002226:	4660      	mov	r0, ip
 8002228:	8003      	strh	r3, [r0, #0]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800222a:	9807      	ldr	r0, [sp, #28]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800222c:	9305      	str	r3, [sp, #20]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800222e:	1a41      	subs	r1, r0, r1
 8002230:	209a      	movs	r0, #154	@ 0x9a
 8002232:	4684      	mov	ip, r0
 8002234:	44a4      	add	ip, r4
 8002236:	4660      	mov	r0, ip
 8002238:	b289      	uxth	r1, r1
 800223a:	8001      	strh	r1, [r0, #0]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 800223c:	9808      	ldr	r0, [sp, #32]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800223e:	9b04      	ldr	r3, [sp, #16]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002240:	1a82      	subs	r2, r0, r2
 8002242:	209c      	movs	r0, #156	@ 0x9c
 8002244:	4684      	mov	ip, r0
 8002246:	44a4      	add	ip, r4
 8002248:	4660      	mov	r0, ip
 800224a:	b292      	uxth	r2, r2
 800224c:	8002      	strh	r2, [r0, #0]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800224e:	9803      	ldr	r0, [sp, #12]
 8002250:	1ac3      	subs	r3, r0, r3
 8002252:	209e      	movs	r0, #158	@ 0x9e
 8002254:	4684      	mov	ip, r0
 8002256:	44a4      	add	ip, r4
 8002258:	4660      	mov	r0, ip
 800225a:	b29b      	uxth	r3, r3
 800225c:	8003      	strh	r3, [r0, #0]

  if (pHandle->TCDoneFlag == true)
 800225e:	20c9      	movs	r0, #201	@ 0xc9
 8002260:	4684      	mov	ip, r0
 8002262:	44a4      	add	ip, r4
 8002264:	4660      	mov	r0, ip
 8002266:	7800      	ldrb	r0, [r0, #0]
 8002268:	2800      	cmp	r0, #0
 800226a:	d016      	beq.n	800229a <R1_CalcDutyCycles+0x29a>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 800226c:	2088      	movs	r0, #136	@ 0x88
 800226e:	4684      	mov	ip, r0
 8002270:	44a4      	add	ip, r4
 8002272:	4660      	mov	r0, ip
 8002274:	8007      	strh	r7, [r0, #0]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8002276:	0027      	movs	r7, r4
 8002278:	378a      	adds	r7, #138	@ 0x8a
 800227a:	803e      	strh	r6, [r7, #0]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 800227c:	0026      	movs	r6, r4
 800227e:	9805      	ldr	r0, [sp, #20]
 8002280:	368c      	adds	r6, #140	@ 0x8c
 8002282:	8030      	strh	r0, [r6, #0]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8002284:	0020      	movs	r0, r4
 8002286:	308e      	adds	r0, #142	@ 0x8e
 8002288:	8001      	strh	r1, [r0, #0]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 800228a:	0021      	movs	r1, r4
 800228c:	3190      	adds	r1, #144	@ 0x90
 800228e:	800a      	strh	r2, [r1, #0]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8002290:	0022      	movs	r2, r4
 8002292:	3292      	adds	r2, #146	@ 0x92
 8002294:	8013      	strh	r3, [r2, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <R1_CalcDutyCycles+0x310>)
 8002298:	641d      	str	r5, [r3, #64]	@ 0x40
  else
  {
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 800229a:	9902      	ldr	r1, [sp, #8]
 800229c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800229e:	f7ff fceb 	bl	8001c78 <LL_DMA_EnableIT_TC>

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80022a2:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80022a4:	2007      	movs	r0, #7
 80022a6:	3303      	adds	r3, #3
 80022a8:	7fda      	ldrb	r2, [r3, #31]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	4093      	lsls	r3, r2
 80022b0:	4a18      	ldr	r2, [pc, #96]	@ (8002314 <R1_CalcDutyCycles+0x314>)
 80022b2:	0b5b      	lsrs	r3, r3, #13
 80022b4:	6293      	str	r3, [r2, #40]	@ 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80022b6:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80022b8:	6951      	ldr	r1, [r2, #20]
 80022ba:	3304      	adds	r3, #4
 80022bc:	7fdb      	ldrb	r3, [r3, #31]
 80022be:	4381      	bics	r1, r0
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6153      	str	r3, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80022c4:	68d1      	ldr	r1, [r2, #12]
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <R1_CalcDutyCycles+0x318>)
 80022c8:	4019      	ands	r1, r3
 80022ca:	2388      	movs	r3, #136	@ 0x88
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	430b      	orrs	r3, r1
 80022d0:	60d3      	str	r3, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 80022d2:	0023      	movs	r3, r4
 80022d4:	9a01      	ldr	r2, [sp, #4]
 80022d6:	33ae      	adds	r3, #174	@ 0xae
 80022d8:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 80022da:	809d      	strh	r5, [r3, #4]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 80022dc:	3456      	adds	r4, #86	@ 0x56
 80022de:	8820      	ldrh	r0, [r4, #0]
  if (pHandle->FOCDurationFlag == true)
 80022e0:	331a      	adds	r3, #26
 80022e2:	781b      	ldrb	r3, [r3, #0]
  if (pHandle->_Super.SWerror == 1u)
 80022e4:	2801      	cmp	r0, #1
 80022e6:	d00b      	beq.n	8002300 <R1_CalcDutyCycles+0x300>
  if (pHandle->FOCDurationFlag == true)
 80022e8:	0018      	movs	r0, r3
  {
    /* Nothing to do */
  }

  return (hAux);
}
 80022ea:	b011      	add	sp, #68	@ 0x44
 80022ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 80022ee:	1a8d      	subs	r5, r1, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 80022f0:	9b02      	ldr	r3, [sp, #8]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 80022f2:	b22d      	sxth	r5, r5
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 80022f4:	e720      	b.n	8002138 <R1_CalcDutyCycles+0x138>
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	18cb      	adds	r3, r1, r3
    SamplePoint1 = aCCRval[midVal];
 80022fa:	9d04      	ldr	r5, [sp, #16]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80022fc:	b21b      	sxth	r3, r3
    SamplePoint1 = aCCRval[midVal];
 80022fe:	e735      	b.n	800216c <R1_CalcDutyCycles+0x16c>
    pHandle->_Super.SWerror = 0u;
 8002300:	2300      	movs	r3, #0
 8002302:	8023      	strh	r3, [r4, #0]
 8002304:	e7f1      	b.n	80022ea <R1_CalcDutyCycles+0x2ea>
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	08005030 	.word	0x08005030
 800230c:	08005032 	.word	0x08005032
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40012400 	.word	0x40012400
 8002318:	fffff23f 	.word	0xfffff23f

0800231c <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800231c:	0003      	movs	r3, r0
{
 800231e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002320:	33cc      	adds	r3, #204	@ 0xcc
 8002322:	681e      	ldr	r6, [r3, #0]
{
 8002324:	b087      	sub	sp, #28
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8002326:	68b3      	ldr	r3, [r6, #8]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002328:	6874      	ldr	r4, [r6, #4]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800232a:	6835      	ldr	r5, [r6, #0]
{
 800232c:	9002      	str	r0, [sp, #8]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 800232e:	9301      	str	r3, [sp, #4]
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 8002330:	f7ff fcac 	bl	8001c8c <R1_1ShuntMotorVarsInit>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	4b68      	ldr	r3, [pc, #416]	@ (80024d8 <R1_Init+0x1bc>)
 8002338:	03c9      	lsls	r1, r1, #15
 800233a:	699a      	ldr	r2, [r3, #24]
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
 800233c:	2780      	movs	r7, #128	@ 0x80
 800233e:	430a      	orrs	r2, r1
 8002340:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002342:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8002344:	4a65      	ldr	r2, [pc, #404]	@ (80024dc <R1_Init+0x1c0>)
 8002346:	400b      	ands	r3, r1
 8002348:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800234a:	9b05      	ldr	r3, [sp, #20]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	68d1      	ldr	r1, [r2, #12]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	430b      	orrs	r3, r1
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002354:	2101      	movs	r1, #1
 8002356:	60d3      	str	r3, [r2, #12]
 8002358:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800235a:	2270      	movs	r2, #112	@ 0x70
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800235c:	438b      	bics	r3, r1
 800235e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8002360:	2340      	movs	r3, #64	@ 0x40
 8002362:	6820      	ldr	r0, [r4, #0]
 8002364:	017f      	lsls	r7, r7, #5
 8002366:	4390      	bics	r0, r2
 8002368:	4303      	orrs	r3, r0
 800236a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800236c:	6863      	ldr	r3, [r4, #4]
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
 800236e:	0020      	movs	r0, r4
 8002370:	4393      	bics	r3, r2
 8002372:	6063      	str	r3, [r4, #4]
 8002374:	f7ff fc40 	bl	8001bf8 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
 8002378:	0020      	movs	r0, r4
 800237a:	2110      	movs	r1, #16
 800237c:	f7ff fc3c 	bl	8001bf8 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	0020      	movs	r0, r4
 8002384:	0049      	lsls	r1, r1, #1
 8002386:	f7ff fc37 	bl	8001bf8 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
 800238a:	0039      	movs	r1, r7
 800238c:	0020      	movs	r0, r4
 800238e:	f7ff fc33 	bl	8001bf8 <LL_TIM_OC_DisablePreload>
  SET_BIT(TIMx->CCER, Channels);
 8002392:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002394:	4952      	ldr	r1, [pc, #328]	@ (80024e0 <R1_Init+0x1c4>)
 8002396:	431f      	orrs	r7, r3
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002398:	2300      	movs	r3, #0
  SET_BIT(TIMx->CCER, Channels);
 800239a:	6227      	str	r7, [r4, #32]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800239c:	6323      	str	r3, [r4, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800239e:	3b81      	subs	r3, #129	@ 0x81
 80023a0:	6123      	str	r3, [r4, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80023a2:	68e2      	ldr	r2, [r4, #12]
 80023a4:	3302      	adds	r3, #2
 80023a6:	33ff      	adds	r3, #255	@ 0xff
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80023ac:	6a22      	ldr	r2, [r4, #32]
 80023ae:	4b4d      	ldr	r3, [pc, #308]	@ (80024e4 <R1_Init+0x1c8>)
 80023b0:	4f4d      	ldr	r7, [pc, #308]	@ (80024e8 <R1_Init+0x1cc>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	6223      	str	r3, [r4, #32]
  LL_DMA_ConfigTransfer(DMAx, pHandle->pParams_str->DMAChannelX, DMA_CFG); /* To be removed should be done by cubeMX */
 80023b6:	68f3      	ldr	r3, [r6, #12]
 80023b8:	9a01      	ldr	r2, [sp, #4]
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	781b      	ldrb	r3, [r3, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 80023c2:	9801      	ldr	r0, [sp, #4]
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	4948      	ldr	r1, [pc, #288]	@ (80024ec <R1_Init+0x1d0>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 80023d0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80023d2:	4a47      	ldr	r2, [pc, #284]	@ (80024f0 <R1_Init+0x1d4>)
 80023d4:	4011      	ands	r1, r2
 80023d6:	4a47      	ldr	r2, [pc, #284]	@ (80024f4 <R1_Init+0x1d8>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	64a2      	str	r2, [r4, #72]	@ 0x48
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 80023dc:	9a02      	ldr	r2, [sp, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 80023de:	9903      	ldr	r1, [sp, #12]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 80023e0:	3288      	adds	r2, #136	@ 0x88
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80023e2:	60da      	str	r2, [r3, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 80023e4:	0022      	movs	r2, r4
 80023e6:	324c      	adds	r2, #76	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80023e8:	609a      	str	r2, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 80023ea:	2206      	movs	r2, #6
 80023ec:	f7ff fc38 	bl	8001c60 <LL_DMA_SetDataLength>
  LL_DMA_ConfigTransfer(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_CFG); /* To be removed should be done by cubeMX */
 80023f0:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80023f2:	9a01      	ldr	r2, [sp, #4]
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4839      	ldr	r0, [pc, #228]	@ (80024e0 <R1_Init+0x1c4>)
 80023fc:	189b      	adds	r3, r3, r2
 80023fe:	681a      	ldr	r2, [r3, #0]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 8002400:	3440      	adds	r4, #64	@ 0x40
 8002402:	4002      	ands	r2, r0
 8002404:	4839      	ldr	r0, [pc, #228]	@ (80024ec <R1_Init+0x1d0>)
 8002406:	4302      	orrs	r2, r0
 8002408:	601a      	str	r2, [r3, #0]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 800240a:	9a02      	ldr	r2, [sp, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_TRANSFER_LENGTH_SAMPLING_POINT);
 800240c:	9801      	ldr	r0, [sp, #4]
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 800240e:	32ae      	adds	r2, #174	@ 0xae
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002410:	60da      	str	r2, [r3, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002412:	609c      	str	r4, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, DMA_TRANSFER_LENGTH_SAMPLING_POINT);
 8002414:	2203      	movs	r2, #3
 8002416:	f7ff fc23 	bl	8001c60 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 800241a:	9903      	ldr	r1, [sp, #12]
 800241c:	9801      	ldr	r0, [sp, #4]
 800241e:	f7ff fc2b 	bl	8001c78 <LL_DMA_EnableIT_TC>
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 8002422:	69b1      	ldr	r1, [r6, #24]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002424:	9801      	ldr	r0, [sp, #4]
 8002426:	187b      	adds	r3, r7, r1
 8002428:	3b01      	subs	r3, #1
 800242a:	9a02      	ldr	r2, [sp, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	32b4      	adds	r2, #180	@ 0xb4
 8002430:	181b      	adds	r3, r3, r0
 8002432:	60da      	str	r2, [r3, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8002434:	002a      	movs	r2, r5
 8002436:	3240      	adds	r2, #64	@ 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002438:	609a      	str	r2, [r3, #8]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, DMA_TRANSFER_LENGTH_ADC);
 800243a:	2202      	movs	r2, #2
 800243c:	f7ff fc10 	bl	8001c60 <LL_DMA_SetDataLength>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002440:	2204      	movs	r2, #4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002442:	2108      	movs	r1, #8
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002444:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8002446:	482c      	ldr	r0, [pc, #176]	@ (80024f8 <R1_Init+0x1dc>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002448:	4393      	bics	r3, r2
 800244a:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800244c:	602a      	str	r2, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800244e:	686b      	ldr	r3, [r5, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8002450:	2710      	movs	r7, #16
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002452:	438b      	bics	r3, r1
 8002454:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8002456:	6029      	str	r1, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8002458:	2180      	movs	r1, #128	@ 0x80
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <R1_Init+0x1e0>)
 800245c:	0609      	lsls	r1, r1, #24
 800245e:	689c      	ldr	r4, [r3, #8]
 8002460:	4004      	ands	r4, r0
 8002462:	4321      	orrs	r1, r4
 8002464:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8002466:	2102      	movs	r1, #2
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002468:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 800246a:	2c00      	cmp	r4, #0
 800246c:	dbfc      	blt.n	8002468 <R1_Init+0x14c>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800246e:	689c      	ldr	r4, [r3, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8002470:	4214      	tst	r4, r2
 8002472:	d1f9      	bne.n	8002468 <R1_Init+0x14c>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8002474:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8002476:	423c      	tst	r4, r7
 8002478:	d1f6      	bne.n	8002468 <R1_Init+0x14c>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 800247a:	689c      	ldr	r4, [r3, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 800247c:	420c      	tst	r4, r1
 800247e:	d1f3      	bne.n	8002468 <R1_Init+0x14c>
  MODIFY_REG(ADCx->CR,
 8002480:	2201      	movs	r2, #1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002482:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CR,
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	4001      	ands	r1, r0
 8002488:	4311      	orrs	r1, r2
 800248a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800248c:	68e9      	ldr	r1, [r5, #12]
 800248e:	481c      	ldr	r0, [pc, #112]	@ (8002500 <R1_Init+0x1e4>)
 8002490:	4001      	ands	r1, r0
 8002492:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	43a1      	bics	r1, r4
 8002498:	4311      	orrs	r1, r2
 800249a:	60d9      	str	r1, [r3, #12]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800249c:	6819      	ldr	r1, [r3, #0]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 800249e:	4211      	tst	r1, r2
 80024a0:	d0fc      	beq.n	800249c <R1_Init+0x180>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	68e9      	ldr	r1, [r5, #12]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4001      	ands	r1, r0
 80024aa:	430b      	orrs	r3, r1
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80024ac:	0011      	movs	r1, r2
 80024ae:	60eb      	str	r3, [r5, #12]
 80024b0:	3603      	adds	r6, #3
 80024b2:	7ff3      	ldrb	r3, [r6, #31]
 80024b4:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024b6:	034b      	lsls	r3, r1, #13
 80024b8:	0b5b      	lsrs	r3, r3, #13
 80024ba:	62ab      	str	r3, [r5, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <R1_Init+0x1e8>)
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 80024c4:	2200      	movs	r2, #0
 80024c6:	9b02      	ldr	r3, [sp, #8]
 80024c8:	33ca      	adds	r3, #202	@ 0xca
 80024ca:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.DTTest = 0u;
 80024cc:	9b02      	ldr	r3, [sp, #8]
 80024ce:	3370      	adds	r3, #112	@ 0x70
 80024d0:	801a      	strh	r2, [r3, #0]
}
 80024d2:	b007      	add	sp, #28
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40015800 	.word	0x40015800
 80024e0:	ffff800f 	.word	0xffff800f
 80024e4:	00000555 	.word	0x00000555
 80024e8:	08005033 	.word	0x08005033
 80024ec:	000035b0 	.word	0x000035b0
 80024f0:	ffffe0e0 	.word	0xffffe0e0
 80024f4:	0000020d 	.word	0x0000020d
 80024f8:	7fffffe8 	.word	0x7fffffe8
 80024fc:	40012400 	.word	0x40012400
 8002500:	fffff23f 	.word	0xfffff23f
 8002504:	40012c00 	.word	0x40012c00

08002508 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8002508:	0003      	movs	r3, r0
 800250a:	680a      	ldr	r2, [r1, #0]
 800250c:	33a0      	adds	r3, #160	@ 0xa0
 800250e:	601a      	str	r2, [r3, #0]
  pHdl->offsetCalibStatus = true;
 8002510:	2301      	movs	r3, #1
 8002512:	3081      	adds	r0, #129	@ 0x81
 8002514:	7003      	strb	r3, [r0, #0]
}
 8002516:	4770      	bx	lr

08002518 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8002518:	30a0      	adds	r0, #160	@ 0xa0
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	600b      	str	r3, [r1, #0]
}
 800251e:	4770      	bx	lr

08002520 <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002520:	0003      	movs	r3, r0
{
 8002522:	b510      	push	{r4, lr}
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002524:	0004      	movs	r4, r0
 8002526:	2201      	movs	r2, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002528:	33cc      	adds	r3, #204	@ 0xcc
 800252a:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800252c:	347e      	adds	r4, #126	@ 0x7e
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800252e:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002530:	7022      	strb	r2, [r4, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002532:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002534:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002536:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002538:	2102      	movs	r1, #2
 800253a:	4249      	negs	r1, r1
 800253c:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	4211      	tst	r1, r2
 8002542:	d0fc      	beq.n	800253e <R1_TurnOnLowSides+0x1e>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002548:	0212      	lsls	r2, r2, #8
 800254a:	430a      	orrs	r2, r1
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 800254e:	0003      	movs	r3, r0
 8002550:	337d      	adds	r3, #125	@ 0x7d
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d10d      	bne.n	8002574 <R1_TurnOnLowSides+0x54>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002558:	0002      	movs	r2, r0
 800255a:	3248      	adds	r2, #72	@ 0x48
 800255c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800255e:	8812      	ldrh	r2, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002560:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002562:	0002      	movs	r2, r0
 8002564:	324a      	adds	r2, #74	@ 0x4a
 8002566:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800256c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800256e:	304c      	adds	r0, #76	@ 0x4c
 8002570:	8802      	ldrh	r2, [r0, #0]
 8002572:	619a      	str	r2, [r3, #24]
}
 8002574:	bd10      	pop	{r4, pc}
	...

08002578 <R1_SwitchOnPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002578:	0003      	movs	r3, r0
{
 800257a:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800257c:	334c      	adds	r3, #76	@ 0x4c
{
 800257e:	b089      	sub	sp, #36	@ 0x24
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002580:	9305      	str	r3, [sp, #20]
 8002582:	3380      	adds	r3, #128	@ 0x80
 8002584:	681d      	ldr	r5, [r3, #0]
{
 8002586:	0007      	movs	r7, r0
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8002588:	682b      	ldr	r3, [r5, #0]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800258a:	686c      	ldr	r4, [r5, #4]
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800258c:	9307      	str	r3, [sp, #28]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800258e:	0003      	movs	r3, r0
 8002590:	33b8      	adds	r3, #184	@ 0xb8
 8002592:	881b      	ldrh	r3, [r3, #0]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002594:	68ae      	ldr	r6, [r5, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002596:	9301      	str	r3, [sp, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002598:	8be8      	ldrh	r0, [r5, #30]
 800259a:	085a      	lsrs	r2, r3, #1
 800259c:	8c2b      	ldrh	r3, [r5, #32]
 800259e:	181b      	adds	r3, r3, r0
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad0      	subs	r0, r2, r3
 80025a4:	b280      	uxth	r0, r0
 80025a6:	9003      	str	r0, [sp, #12]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025a8:	0038      	movs	r0, r7
 80025aa:	9903      	ldr	r1, [sp, #12]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025ac:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025ae:	30ba      	adds	r0, #186	@ 0xba
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025b0:	b29b      	uxth	r3, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025b2:	8001      	strh	r1, [r0, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025b4:	8043      	strh	r3, [r0, #2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80025b6:	2100      	movs	r1, #0
 80025b8:	383c      	subs	r0, #60	@ 0x3c
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80025ba:	8603      	strh	r3, [r0, #48]	@ 0x30
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80025bc:	003b      	movs	r3, r7
  pHandle->_Super.TurnOnLowSidesAction = false;
 80025be:	7001      	strb	r1, [r0, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80025c0:	9903      	ldr	r1, [sp, #12]
 80025c2:	33b2      	adds	r3, #178	@ 0xb2
 80025c4:	8019      	strh	r1, [r3, #0]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 80025c6:	9b01      	ldr	r3, [sp, #4]
 80025c8:	3301      	adds	r3, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80025ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80025cc:	9304      	str	r3, [sp, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80025ce:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 80025d0:	6362      	str	r2, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80025d2:	63a2      	str	r2, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80025d4:	63e2      	str	r2, [r4, #60]	@ 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80025d6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4313      	orrs	r3, r2
 80025dc:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 80025de:	003b      	movs	r3, r7
 80025e0:	337d      	adds	r3, #125	@ 0x7d
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d11c      	bne.n	8002622 <R1_SwitchOnPWM+0xaa>
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80025e8:	6a23      	ldr	r3, [r4, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80025ea:	9a05      	ldr	r2, [sp, #20]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80025ec:	9306      	str	r3, [sp, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80025ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80025f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80025f2:	469c      	mov	ip, r3
 80025f4:	003b      	movs	r3, r7
 80025f6:	3348      	adds	r3, #72	@ 0x48
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	9302      	str	r3, [sp, #8]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80025fc:	003b      	movs	r3, r7
 80025fe:	334a      	adds	r3, #74	@ 0x4a
 8002600:	8818      	ldrh	r0, [r3, #0]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	8813      	ldrh	r3, [r2, #0]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8002608:	4a5e      	ldr	r2, [pc, #376]	@ (8002784 <R1_SwitchOnPWM+0x20c>)
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800260a:	9305      	str	r3, [sp, #20]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800260c:	9b06      	ldr	r3, [sp, #24]
 800260e:	4213      	tst	r3, r2
 8002610:	d100      	bne.n	8002614 <R1_SwitchOnPWM+0x9c>
 8002612:	e0a6      	b.n	8002762 <R1_SwitchOnPWM+0x1ea>
 8002614:	4663      	mov	r3, ip
 8002616:	9a02      	ldr	r2, [sp, #8]
 8002618:	619a      	str	r2, [r3, #24]
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	9a05      	ldr	r2, [sp, #20]
 800261e:	6188      	str	r0, [r1, #24]
 8002620:	619a      	str	r2, [r3, #24]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002622:	2310      	movs	r3, #16
 8002624:	6822      	ldr	r2, [r4, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002626:	421a      	tst	r2, r3
 8002628:	d000      	beq.n	800262c <R1_SwitchOnPWM+0xb4>
 800262a:	e0a2      	b.n	8002772 <R1_SwitchOnPWM+0x1fa>
 800262c:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800262e:	421a      	tst	r2, r3
 8002630:	d0fc      	beq.n	800262c <R1_SwitchOnPWM+0xb4>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002632:	68eb      	ldr	r3, [r5, #12]
 8002634:	9301      	str	r3, [sp, #4]
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 8002636:	692b      	ldr	r3, [r5, #16]
 8002638:	9302      	str	r3, [sp, #8]
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 800263a:	2e00      	cmp	r6, #0
 800263c:	d011      	beq.n	8002662 <R1_SwitchOnPWM+0xea>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800263e:	2102      	movs	r1, #2
 8002640:	9b01      	ldr	r3, [sp, #4]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	000b      	movs	r3, r1
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	6073      	str	r3, [r6, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800264c:	2304      	movs	r3, #4
 800264e:	0018      	movs	r0, r3
 8002650:	4090      	lsls	r0, r2
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002652:	9a02      	ldr	r2, [sp, #8]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002654:	6070      	str	r0, [r6, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002656:	3a01      	subs	r2, #1
 8002658:	408a      	lsls	r2, r1
 800265a:	4091      	lsls	r1, r2
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800265c:	4093      	lsls	r3, r2
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800265e:	6071      	str	r1, [r6, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002660:	6073      	str	r3, [r6, #4]
  pHandle->TCCnt = 0;
 8002662:	003a      	movs	r2, r7
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002664:	2302      	movs	r3, #2
  pHandle->TCDoneFlag = false;
 8002666:	0039      	movs	r1, r7
 8002668:	425b      	negs	r3, r3
  pHandle->TCCnt = 0;
 800266a:	32c6      	adds	r2, #198	@ 0xc6
 800266c:	6123      	str	r3, [r4, #16]
 800266e:	0013      	movs	r3, r2
 8002670:	2200      	movs	r2, #0
  pHandle->TCDoneFlag = false;
 8002672:	31c9      	adds	r1, #201	@ 0xc9
  pHandle->TCCnt = 0;
 8002674:	701a      	strb	r2, [r3, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 8002676:	0030      	movs	r0, r6
  pHandle->TCDoneFlag = false;
 8002678:	700a      	strb	r2, [r1, #0]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMAChannelX, DMA_TRANSFER_LENGTH_CCR);
 800267a:	3206      	adds	r2, #6
 800267c:	9901      	ldr	r1, [sp, #4]
 800267e:	f7ff faef 	bl	8001c60 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMAChannelX);
 8002682:	0030      	movs	r0, r6
 8002684:	9901      	ldr	r1, [sp, #4]
 8002686:	f7ff fad7 	bl	8001c38 <LL_DMA_EnableChannel>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	68e2      	ldr	r2, [r4, #12]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4313      	orrs	r3, r2
 8002692:	60e3      	str	r3, [r4, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	68e2      	ldr	r2, [r4, #12]
 8002698:	015b      	lsls	r3, r3, #5
 800269a:	4313      	orrs	r3, r2
 800269c:	60e3      	str	r3, [r4, #12]
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, 3);
 800269e:	2203      	movs	r2, #3
 80026a0:	0030      	movs	r0, r6
 80026a2:	9902      	ldr	r1, [sp, #8]
 80026a4:	f7ff fadc 	bl	8001c60 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 80026a8:	0030      	movs	r0, r6
 80026aa:	9902      	ldr	r1, [sp, #8]
 80026ac:	f7ff fac4 	bl	8001c38 <LL_DMA_EnableChannel>
  WRITE_REG(TIMx->CCR4, CompareValue);
 80026b0:	9904      	ldr	r1, [sp, #16]
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 80026b2:	0030      	movs	r0, r6
 80026b4:	6421      	str	r1, [r4, #64]	@ 0x40
 80026b6:	69a9      	ldr	r1, [r5, #24]
 80026b8:	9102      	str	r1, [sp, #8]
 80026ba:	f7ff fac7 	bl	8001c4c <LL_DMA_DisableChannel>
  LL_DMA_SetDataLength(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, DMA_TRANSFER_LENGTH_ADC);
 80026be:	2202      	movs	r2, #2
 80026c0:	0030      	movs	r0, r6
 80026c2:	9902      	ldr	r1, [sp, #8]
 80026c4:	f7ff facc 	bl	8001c60 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 80026c8:	0030      	movs	r0, r6
 80026ca:	9902      	ldr	r1, [sp, #8]
 80026cc:	f7ff fab4 	bl	8001c38 <LL_DMA_EnableChannel>
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80026d0:	2101      	movs	r1, #1
 80026d2:	1ceb      	adds	r3, r5, #3
 80026d4:	7fdb      	ldrb	r3, [r3, #31]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80026d6:	2007      	movs	r0, #7
 80026d8:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026da:	034b      	lsls	r3, r1, #13
 80026dc:	9907      	ldr	r1, [sp, #28]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80026de:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <R1_SwitchOnPWM+0x210>)
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026e0:	0b5b      	lsrs	r3, r3, #13
 80026e2:	628b      	str	r3, [r1, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80026e4:	6951      	ldr	r1, [r2, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80026e6:	1d2b      	adds	r3, r5, #4
 80026e8:	7fdb      	ldrb	r3, [r3, #31]
 80026ea:	4381      	bics	r1, r0
 80026ec:	430b      	orrs	r3, r1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80026ee:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80026f0:	6153      	str	r3, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80026f2:	68d3      	ldr	r3, [r2, #12]
 80026f4:	3806      	subs	r0, #6
 80026f6:	438b      	bics	r3, r1
 80026f8:	4303      	orrs	r3, r0
 80026fa:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80026fc:	68d1      	ldr	r1, [r2, #12]
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <R1_SwitchOnPWM+0x214>)
 8002700:	4019      	ands	r1, r3
 8002702:	2388      	movs	r3, #136	@ 0x88
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	430b      	orrs	r3, r1
 8002708:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(ADCx->CR,
 800270a:	6891      	ldr	r1, [r2, #8]
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <R1_SwitchOnPWM+0x218>)
 800270e:	4019      	ands	r1, r3
 8002710:	2304      	movs	r3, #4
 8002712:	430b      	orrs	r3, r1
 8002714:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002716:	2270      	movs	r2, #112	@ 0x70
 8002718:	6863      	ldr	r3, [r4, #4]
  pHandle->FOCDurationFlag = false;
 800271a:	0039      	movs	r1, r7
 800271c:	4313      	orrs	r3, r2
 800271e:	2200      	movs	r2, #0
 8002720:	31c8      	adds	r1, #200	@ 0xc8
  pHandle->ADCRegularLocked=true;
 8002722:	37ca      	adds	r7, #202	@ 0xca
 8002724:	6063      	str	r3, [r4, #4]
  pHandle->FOCDurationFlag = false;
 8002726:	700a      	strb	r2, [r1, #0]
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002728:	9901      	ldr	r1, [sp, #4]
  pHandle->ADCRegularLocked=true;
 800272a:	7038      	strb	r0, [r7, #0]
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 800272c:	0030      	movs	r0, r6
 800272e:	f7ff faa3 	bl	8001c78 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 8002732:	0030      	movs	r0, r6
 8002734:	9902      	ldr	r1, [sp, #8]
 8002736:	f7ff fa9f 	bl	8001c78 <LL_DMA_EnableIT_TC>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800273a:	2302      	movs	r3, #2
 800273c:	425b      	negs	r3, r3
 800273e:	6123      	str	r3, [r4, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002740:	3312      	adds	r3, #18
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002742:	2101      	movs	r1, #1
 8002744:	6922      	ldr	r2, [r4, #16]
 8002746:	420a      	tst	r2, r1
 8002748:	d0fb      	beq.n	8002742 <R1_SwitchOnPWM+0x1ca>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800274a:	6822      	ldr	r2, [r4, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 800274c:	421a      	tst	r2, r3
 800274e:	d1f8      	bne.n	8002742 <R1_SwitchOnPWM+0x1ca>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002750:	000d      	movs	r5, r1
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <R1_SwitchOnPWM+0x21c>)
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	4315      	orrs	r5, r2
 8002758:	60dd      	str	r5, [r3, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800275a:	9b03      	ldr	r3, [sp, #12]
 800275c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800275e:	b009      	add	sp, #36	@ 0x24
 8002760:	bdf0      	pop	{r4, r5, r6, r7, pc}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002762:	4663      	mov	r3, ip
 8002764:	9a02      	ldr	r2, [sp, #8]
 8002766:	629a      	str	r2, [r3, #40]	@ 0x28
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	9a05      	ldr	r2, [sp, #20]
 800276c:	6288      	str	r0, [r1, #40]	@ 0x28
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002770:	e757      	b.n	8002622 <R1_SwitchOnPWM+0xaa>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002772:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8002774:	421a      	tst	r2, r3
 8002776:	d1fc      	bne.n	8002772 <R1_SwitchOnPWM+0x1fa>
 8002778:	2310      	movs	r3, #16
 800277a:	6822      	ldr	r2, [r4, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800277c:	421a      	tst	r2, r3
 800277e:	d0fc      	beq.n	800277a <R1_SwitchOnPWM+0x202>
 8002780:	e757      	b.n	8002632 <R1_SwitchOnPWM+0xba>
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	00000555 	.word	0x00000555
 8002788:	40012400 	.word	0x40012400
 800278c:	fffff23f 	.word	0xfffff23f
 8002790:	7fffffe8 	.word	0x7fffffe8
 8002794:	40012c00 	.word	0x40012c00

08002798 <R1_SwitchOffPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002798:	0003      	movs	r3, r0
{
 800279a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279c:	0004      	movs	r4, r0
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800279e:	33cc      	adds	r3, #204	@ 0xcc
 80027a0:	681e      	ldr	r6, [r3, #0]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027a2:	3b14      	subs	r3, #20
 80027a4:	881b      	ldrh	r3, [r3, #0]
{
 80027a6:	b085      	sub	sp, #20
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027a8:	9300      	str	r3, [sp, #0]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027aa:	8bf1      	ldrh	r1, [r6, #30]
 80027ac:	085a      	lsrs	r2, r3, #1
 80027ae:	8c33      	ldrh	r3, [r6, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80027b0:	6875      	ldr	r5, [r6, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027b2:	185b      	adds	r3, r3, r1
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	1ad1      	subs	r1, r2, r3
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027b8:	18d2      	adds	r2, r2, r3
 80027ba:	b293      	uxth	r3, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027bc:	b289      	uxth	r1, r1
 80027be:	9101      	str	r1, [sp, #4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027c0:	9302      	str	r3, [sp, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027c2:	0001      	movs	r1, r0
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027c4:	0023      	movs	r3, r4
 80027c6:	9a02      	ldr	r2, [sp, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027c8:	9801      	ldr	r0, [sp, #4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027ca:	33bc      	adds	r3, #188	@ 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027cc:	31ba      	adds	r1, #186	@ 0xba
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80027ce:	68b7      	ldr	r7, [r6, #8]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027d0:	8008      	strh	r0, [r1, #0]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80027d2:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80027d4:	2201      	movs	r2, #1
 80027d6:	68eb      	ldr	r3, [r5, #12]
 80027d8:	4393      	bics	r3, r2
 80027da:	60eb      	str	r3, [r5, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80027dc:	2310      	movs	r3, #16
 80027de:	682a      	ldr	r2, [r5, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80027e0:	421a      	tst	r2, r3
 80027e2:	d000      	beq.n	80027e6 <R1_SwitchOffPWM+0x4e>
 80027e4:	e074      	b.n	80028d0 <R1_SwitchOffPWM+0x138>
 80027e6:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80027e8:	421a      	tst	r2, r3
 80027ea:	d0fc      	beq.n	80027e6 <R1_SwitchOffPWM+0x4e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80027ec:	2102      	movs	r1, #2
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 80027ee:	68f3      	ldr	r3, [r6, #12]
 80027f0:	9303      	str	r3, [sp, #12]
 80027f2:	9a03      	ldr	r2, [sp, #12]
 80027f4:	4b3a      	ldr	r3, [pc, #232]	@ (80028e0 <R1_SwitchOffPWM+0x148>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	1849      	adds	r1, r1, r1
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002808:	0023      	movs	r3, r4
 800280a:	2200      	movs	r2, #0
 800280c:	337e      	adds	r3, #126	@ 0x7e
 800280e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002810:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002812:	4a34      	ldr	r2, [pc, #208]	@ (80028e4 <R1_SwitchOffPWM+0x14c>)
 8002814:	4013      	ands	r3, r2
 8002816:	646b      	str	r3, [r5, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 8002818:	0023      	movs	r3, r4
 800281a:	3385      	adds	r3, #133	@ 0x85
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <R1_SwitchOffPWM+0xb2>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8002822:	0023      	movs	r3, r4
 8002824:	337d      	adds	r3, #125	@ 0x7d
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d10e      	bne.n	800284a <R1_SwitchOffPWM+0xb2>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800282c:	0022      	movs	r2, r4
 800282e:	3248      	adds	r2, #72	@ 0x48
 8002830:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002832:	8812      	ldrh	r2, [r2, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002836:	0022      	movs	r2, r4
 8002838:	324a      	adds	r2, #74	@ 0x4a
 800283a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002840:	0022      	movs	r2, r4
 8002842:	324c      	adds	r2, #76	@ 0x4c
 8002844:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX);
 800284a:	0038      	movs	r0, r7
 800284c:	69b1      	ldr	r1, [r6, #24]
 800284e:	f7ff f9fd 	bl	8001c4c <LL_DMA_DisableChannel>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8002852:	2301      	movs	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002856:	18db      	adds	r3, r3, r3
 8002858:	607b      	str	r3, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800285a:	3302      	adds	r3, #2
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMAChannelX);
 800285c:	0038      	movs	r0, r7
 800285e:	9903      	ldr	r1, [sp, #12]
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f7ff f9f3 	bl	8001c4c <LL_DMA_DisableChannel>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 8002866:	68eb      	ldr	r3, [r5, #12]
 8002868:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <R1_SwitchOffPWM+0x150>)
  LL_DMA_DisableChannel(DMAx, pHandle->pParams_str->DMASamplingPtChannelX);
 800286a:	6931      	ldr	r1, [r6, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	60eb      	str	r3, [r5, #12]
 8002870:	0038      	movs	r0, r7
 8002872:	f7ff f9eb 	bl	8001c4c <LL_DMA_DisableChannel>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8002876:	68eb      	ldr	r3, [r5, #12]
 8002878:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <R1_SwitchOffPWM+0x154>)
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 800287a:	2104      	movs	r1, #4
 800287c:	4013      	ands	r3, r2
 800287e:	60eb      	str	r3, [r5, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002880:	0023      	movs	r3, r4
 8002882:	9a02      	ldr	r2, [sp, #8]
 8002884:	33ae      	adds	r3, #174	@ 0xae
 8002886:	801a      	strh	r2, [r3, #0]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002888:	9a01      	ldr	r2, [sp, #4]
 800288a:	809a      	strh	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800288c:	2270      	movs	r2, #112	@ 0x70
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	3301      	adds	r3, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002892:	642b      	str	r3, [r5, #64]	@ 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002894:	686b      	ldr	r3, [r5, #4]
 8002896:	4393      	bics	r3, r2
 8002898:	606b      	str	r3, [r5, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <R1_SwitchOffPWM+0x158>)
 800289c:	689a      	ldr	r2, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 800289e:	420a      	tst	r2, r1
 80028a0:	d009      	beq.n	80028b6 <R1_SwitchOffPWM+0x11e>
  MODIFY_REG(ADCx->CR,
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <R1_SwitchOffPWM+0x15c>)
 80028a6:	4011      	ands	r1, r2
 80028a8:	2210      	movs	r2, #16
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80028ae:	2104      	movs	r1, #4
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	420a      	tst	r2, r1
 80028b4:	d1fb      	bne.n	80028ae <R1_SwitchOffPWM+0x116>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	490f      	ldr	r1, [pc, #60]	@ (80028f8 <R1_SwitchOffPWM+0x160>)
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 80028ba:	0020      	movs	r0, r4
 80028bc:	400a      	ands	r2, r1
 80028be:	60da      	str	r2, [r3, #12]
  pHandle->ADCRegularLocked=false;
 80028c0:	0023      	movs	r3, r4
 80028c2:	2200      	movs	r2, #0
 80028c4:	33ca      	adds	r3, #202	@ 0xca
 80028c6:	701a      	strb	r2, [r3, #0]
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 80028c8:	f7ff f9e0 	bl	8001c8c <R1_1ShuntMotorVarsInit>
}
 80028cc:	b005      	add	sp, #20
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80028d0:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80028d2:	421a      	tst	r2, r3
 80028d4:	d1fc      	bne.n	80028d0 <R1_SwitchOffPWM+0x138>
 80028d6:	2310      	movs	r3, #16
 80028d8:	682a      	ldr	r2, [r5, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80028da:	421a      	tst	r2, r3
 80028dc:	d0fc      	beq.n	80028d8 <R1_SwitchOffPWM+0x140>
 80028de:	e785      	b.n	80027ec <R1_SwitchOffPWM+0x54>
 80028e0:	08005032 	.word	0x08005032
 80028e4:	ffff7fff 	.word	0xffff7fff
 80028e8:	fffffeff 	.word	0xfffffeff
 80028ec:	ffffefff 	.word	0xffffefff
 80028f0:	40012400 	.word	0x40012400
 80028f4:	7fffffe8 	.word	0x7fffffe8
 80028f8:	fffff23f 	.word	0xfffff23f

080028fc <R1_CurrentReadingCalibration>:
{
 80028fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80028fe:	0007      	movs	r7, r0
 8002900:	37cc      	adds	r7, #204	@ 0xcc
 8002902:	683b      	ldr	r3, [r7, #0]
{
 8002904:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002906:	685d      	ldr	r5, [r3, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 8002908:	0003      	movs	r3, r0
 800290a:	3381      	adds	r3, #129	@ 0x81
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d129      	bne.n	8002968 <R1_CurrentReadingCalibration+0x6c>
    pHandle->PhaseOffset = 0u;
 8002914:	0006      	movs	r6, r0
    pHandle->Index = 0u;
 8002916:	0002      	movs	r2, r0
    pHandle->PhaseOffset = 0u;
 8002918:	36a0      	adds	r6, #160	@ 0xa0
    pHandle->Index = 0u;
 800291a:	32c4      	adds	r2, #196	@ 0xc4
    pHandle->PhaseOffset = 0u;
 800291c:	6033      	str	r3, [r6, #0]
    pHandle->Index = 0u;
 800291e:	7013      	strb	r3, [r2, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002920:	6a2b      	ldr	r3, [r5, #32]
 8002922:	9201      	str	r2, [sp, #4]
 8002924:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <R1_CurrentReadingCalibration+0x7c>)
 8002926:	4013      	ands	r3, r2
 8002928:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 800292a:	4b14      	ldr	r3, [pc, #80]	@ (800297c <R1_CurrentReadingCalibration+0x80>)
 800292c:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 800292e:	4b14      	ldr	r3, [pc, #80]	@ (8002980 <R1_CurrentReadingCalibration+0x84>)
 8002930:	6143      	str	r3, [r0, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 8002932:	f7ff fe21 	bl	8002578 <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 8002936:	683b      	ldr	r3, [r7, #0]
    waitForPolarizationEnd(TIMx,
 8002938:	3f76      	subs	r7, #118	@ 0x76
            pHandle->pParams_str->RepetitionCounter,
 800293a:	3305      	adds	r3, #5
    waitForPolarizationEnd(TIMx,
 800293c:	7fda      	ldrb	r2, [r3, #31]
 800293e:	0039      	movs	r1, r7
 8002940:	9b01      	ldr	r3, [sp, #4]
 8002942:	0028      	movs	r0, r5
 8002944:	f001 ffdb 	bl	80048fe <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8002948:	0020      	movs	r0, r4
 800294a:	f7ff ff25 	bl	8002798 <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 800294e:	6833      	ldr	r3, [r6, #0]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	6033      	str	r3, [r6, #0]
    if (0U == pHandle->_Super.SWerror)
 8002954:	883b      	ldrh	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <R1_CurrentReadingCalibration+0x64>
      pHandle->_Super.offsetCalibStatus = true;
 800295a:	9a00      	ldr	r2, [sp, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	7013      	strb	r3, [r2, #0]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8002960:	4b08      	ldr	r3, [pc, #32]	@ (8002984 <R1_CurrentReadingCalibration+0x88>)
 8002962:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8002964:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <R1_CurrentReadingCalibration+0x8c>)
 8002966:	6163      	str	r3, [r4, #20]
  SET_BIT(TIMx->CCER, Channels);
 8002968:	6a2a      	ldr	r2, [r5, #32]
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <R1_CurrentReadingCalibration+0x90>)
  R1_1ShuntMotorVarsInit(&pHandle->_Super);
 800296c:	0020      	movs	r0, r4
 800296e:	4313      	orrs	r3, r2
 8002970:	622b      	str	r3, [r5, #32]
 8002972:	f7ff f98b 	bl	8001c8c <R1_1ShuntMotorVarsInit>
}
 8002976:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002978:	fffffaaa 	.word	0xfffffaaa
 800297c:	08001f49 	.word	0x08001f49
 8002980:	08001f8d 	.word	0x08001f8d
 8002984:	08001d01 	.word	0x08001d01
 8002988:	08002001 	.word	0x08002001
 800298c:	00000555 	.word	0x00000555

08002990 <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 8002990:	0003      	movs	r3, r0
 8002992:	33c9      	adds	r3, #201	@ 0xc9
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00f      	beq.n	80029ba <R1_TIM1_UP_IRQHandler+0x2a>
  MODIFY_REG(ADCx->CR,
 800299a:	4909      	ldr	r1, [pc, #36]	@ (80029c0 <R1_TIM1_UP_IRQHandler+0x30>)
 800299c:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <R1_TIM1_UP_IRQHandler+0x34>)
 800299e:	688a      	ldr	r2, [r1, #8]
 80029a0:	401a      	ands	r2, r3
 80029a2:	2304      	movs	r3, #4
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029a8:	2170      	movs	r1, #112	@ 0x70
 80029aa:	4a07      	ldr	r2, [pc, #28]	@ (80029c8 <R1_TIM1_UP_IRQHandler+0x38>)
 80029ac:	6853      	ldr	r3, [r2, #4]
 80029ae:	430b      	orrs	r3, r1
 80029b0:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 80029b2:	0003      	movs	r3, r0
 80029b4:	2201      	movs	r2, #1
 80029b6:	33c8      	adds	r3, #200	@ 0xc8
 80029b8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 80029ba:	307a      	adds	r0, #122	@ 0x7a
}
 80029bc:	4770      	bx	lr
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	40012400 	.word	0x40012400
 80029c4:	7fffffe8 	.word	0x7fffffe8
 80029c8:	40012c00 	.word	0x40012c00

080029cc <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80029cc:	0003      	movs	r3, r0
 80029ce:	33cc      	adds	r3, #204	@ 0xcc
 80029d0:	681a      	ldr	r2, [r3, #0]
{
 80029d2:	b510      	push	{r4, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80029d4:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 80029d6:	2c00      	cmp	r4, #0
 80029d8:	d005      	beq.n	80029e6 <R1_DMAx_TC_IRQHandler+0x1a>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80029da:	2104      	movs	r1, #4
 80029dc:	68d3      	ldr	r3, [r2, #12]
 80029de:	3b01      	subs	r3, #1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4099      	lsls	r1, r3
 80029e4:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 80029e6:	0001      	movs	r1, r0
 80029e8:	31c6      	adds	r1, #198	@ 0xc6
 80029ea:	780b      	ldrb	r3, [r1, #0]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80029ec:	3205      	adds	r2, #5
  pHandle->TCCnt++;
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	700b      	strb	r3, [r1, #0]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80029f4:	7fd2      	ldrb	r2, [r2, #31]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d110      	bne.n	8002a1c <R1_DMAx_TC_IRQHandler+0x50>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80029fa:	0003      	movs	r3, r0
 80029fc:	3394      	adds	r3, #148	@ 0x94
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	3b0c      	subs	r3, #12
 8002a02:	601a      	str	r2, [r3, #0]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	3304      	adds	r3, #4
 8002a08:	601a      	str	r2, [r3, #0]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	601a      	str	r2, [r3, #0]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	700b      	strb	r3, [r1, #0]
    pHandle->TCDoneFlag =true;
 8002a14:	0003      	movs	r3, r0
 8002a16:	2201      	movs	r2, #1
 8002a18:	33c9      	adds	r3, #201	@ 0xc9
 8002a1a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 8002a1c:	307a      	adds	r0, #122	@ 0x7a
}
 8002a1e:	bd10      	pop	{r4, pc}

08002a20 <RCM_RegisterRegConv>:
    handle = 0U;
  }
  else
  {
#endif
    uint8_t i = 0;
 8002a20:	2200      	movs	r2, #0
  uint8_t handle = 255U;
 8002a22:	23ff      	movs	r3, #255	@ 0xff
{
 8002a24:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002a26:	4c1e      	ldr	r4, [pc, #120]	@ (8002aa0 <RCM_RegisterRegConv+0x80>)
 8002a28:	0091      	lsls	r1, r2, #2
 8002a2a:	5909      	ldr	r1, [r1, r4]
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d00a      	beq.n	8002a46 <RCM_RegisterRegConv+0x26>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002a30:	790e      	ldrb	r6, [r1, #4]
 8002a32:	7905      	ldrb	r5, [r0, #4]
 8002a34:	42ae      	cmp	r6, r5
 8002a36:	d109      	bne.n	8002a4c <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002a38:	680d      	ldr	r5, [r1, #0]
 8002a3a:	6801      	ldr	r1, [r0, #0]
 8002a3c:	428d      	cmp	r5, r1
 8002a3e:	d105      	bne.n	8002a4c <RCM_RegisterRegConv+0x2c>
 8002a40:	0013      	movs	r3, r2
        {
          handle = i; /* Reuse the same handle */
          i = RCM_MAX_CONV; /* We can skip the rest of the loop */
 8002a42:	2204      	movs	r2, #4
 8002a44:	e002      	b.n	8002a4c <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d900      	bls.n	8002a4c <RCM_RegisterRegConv+0x2c>
 8002a4a:	0013      	movs	r3, r2
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8002a4c:	3201      	adds	r2, #1
 8002a4e:	b2d2      	uxtb	r2, r2
    while (i < RCM_MAX_CONV)
 8002a50:	2a03      	cmp	r2, #3
 8002a52:	d9e9      	bls.n	8002a28 <RCM_RegisterRegConv+0x8>
    }
    if (handle < RCM_MAX_CONV)
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d820      	bhi.n	8002a9a <RCM_RegisterRegConv+0x7a>
    {
      RCM_handle_array [handle] = regConv;
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	50a0      	str	r0, [r4, r2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002a5c:	2400      	movs	r4, #0
 8002a5e:	4a11      	ldr	r2, [pc, #68]	@ (8002aa4 <RCM_RegisterRegConv+0x84>)
 8002a60:	00d9      	lsls	r1, r3, #3
 8002a62:	508c      	str	r4, [r1, r2]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002a64:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002a66:	6891      	ldr	r1, [r2, #8]
 8002a68:	07c9      	lsls	r1, r1, #31
 8002a6a:	d40e      	bmi.n	8002a8a <RCM_RegisterRegConv+0x6a>
  MODIFY_REG(ADCx->CR,
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	6894      	ldr	r4, [r2, #8]
 8002a70:	4d0d      	ldr	r5, [pc, #52]	@ (8002aa8 <RCM_RegisterRegConv+0x88>)
 8002a72:	0609      	lsls	r1, r1, #24
 8002a74:	402c      	ands	r4, r5
 8002a76:	4321      	orrs	r1, r4
 8002a78:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002a7a:	6891      	ldr	r1, [r2, #8]
      {

        LL_ADC_StartCalibration( regConv->regADC);
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002a7c:	2900      	cmp	r1, #0
 8002a7e:	dbfc      	blt.n	8002a7a <RCM_RegisterRegConv+0x5a>
  MODIFY_REG(ADCx->CR,
 8002a80:	2101      	movs	r1, #1
 8002a82:	6894      	ldr	r4, [r2, #8]
 8002a84:	402c      	ands	r4, r5
 8002a86:	4321      	orrs	r1, r4
 8002a88:	6091      	str	r1, [r2, #8]
      else
      {
        /* Nothing to do */
      }
      /* Conversion handler is created, will be enabled by the first call to RCM_ExecRegularConv */
      RCM_NoInj_array[handle].enable = false;
 8002a8a:	2106      	movs	r1, #6
 8002a8c:	2400      	movs	r4, #0
 8002a8e:	4359      	muls	r1, r3
 8002a90:	4a06      	ldr	r2, [pc, #24]	@ (8002aac <RCM_RegisterRegConv+0x8c>)
 8002a92:	548c      	strb	r4, [r1, r2]
      RCM_NoInj_array[handle].next = handle;
 8002a94:	1852      	adds	r2, r2, r1
 8002a96:	7153      	strb	r3, [r2, #5]
      RCM_NoInj_array[handle].prev = handle;
 8002a98:	7113      	strb	r3, [r2, #4]
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002a9a:	7303      	strb	r3, [r0, #12]
}
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	2000089c 	.word	0x2000089c
 8002aa4:	2000087c 	.word	0x2000087c
 8002aa8:	7fffffe8 	.word	0x7fffffe8
 8002aac:	20000862 	.word	0x20000862

08002ab0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t handle = regConv->convHandle;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002ab2:	2606      	movs	r6, #6
 8002ab4:	0034      	movs	r4, r6
  uint8_t handle = regConv->convHandle;
 8002ab6:	7b03      	ldrb	r3, [r0, #12]
  if (false == RCM_NoInj_array [handle].enable)
 8002ab8:	4940      	ldr	r1, [pc, #256]	@ (8002bbc <RCM_ExecRegularConv+0x10c>)
 8002aba:	435c      	muls	r4, r3
 8002abc:	5c62      	ldrb	r2, [r4, r1]
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	d132      	bne.n	8002b28 <RCM_ExecRegularConv+0x78>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002ac2:	2504      	movs	r5, #4
      {
        if (RCM_NoInj_array[i].next > handle)
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8002ac4:	190c      	adds	r4, r1, r4
      if (true == RCM_NoInj_array [i].enable)
 8002ac6:	0037      	movs	r7, r6
 8002ac8:	4357      	muls	r7, r2
 8002aca:	5dc8      	ldrb	r0, [r1, r7]
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d00a      	beq.n	8002ae6 <RCM_ExecRegularConv+0x36>
        if (RCM_NoInj_array[i].next > handle)
 8002ad0:	19cf      	adds	r7, r1, r7
 8002ad2:	7978      	ldrb	r0, [r7, #5]
 8002ad4:	4298      	cmp	r0, r3
 8002ad6:	d967      	bls.n	8002ba8 <RCM_ExecRegularConv+0xf8>
          RCM_NoInj_array[handle].prev = i;
 8002ad8:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[i].next = handle;
          RCM_NoInj_array[formerNext].prev = handle;
          i = RCM_MAX_CONV; /* Stop the loop, handler inserted */
 8002ada:	2204      	movs	r2, #4
          RCM_NoInj_array[handle].next = formerNext;
 8002adc:	7160      	strb	r0, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8002ade:	4370      	muls	r0, r6
 8002ae0:	1808      	adds	r0, r1, r0
          RCM_NoInj_array[i].next = handle;
 8002ae2:	717b      	strb	r3, [r7, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8002ae4:	7103      	strb	r3, [r0, #4]
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	b2d2      	uxtb	r2, r2
      if (RCM_MAX_CONV == i)
 8002aea:	2a04      	cmp	r2, #4
 8002aec:	d161      	bne.n	8002bb2 <RCM_ExecRegularConv+0x102>
      /* We reach end of the array without handler inserted */
      {
       if (LastEnable != RCM_MAX_CONV )
 8002aee:	2d04      	cmp	r5, #4
 8002af0:	d05c      	beq.n	8002bac <RCM_ExecRegularConv+0xfc>
       /* We find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002af2:	3202      	adds	r2, #2
 8002af4:	0010      	movs	r0, r2
         RCM_NoInj_array[handle].next = formerNext;
 8002af6:	0014      	movs	r4, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002af8:	4368      	muls	r0, r5
 8002afa:	1808      	adds	r0, r1, r0
 8002afc:	7946      	ldrb	r6, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8002afe:	435c      	muls	r4, r3
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
         RCM_NoInj_array[formerNext].prev = handle;
 8002b00:	4372      	muls	r2, r6
         RCM_NoInj_array[handle].next = formerNext;
 8002b02:	190c      	adds	r4, r1, r4
         RCM_NoInj_array[formerNext].prev = handle;
 8002b04:	188a      	adds	r2, r1, r2
         RCM_NoInj_array[handle].next = formerNext;
 8002b06:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array[handle].prev = LastEnable;
 8002b08:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8002b0a:	7143      	strb	r3, [r0, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8002b0c:	7113      	strb	r3, [r2, #4]
      {
        /* Nothing to do we are parsing the array, nothing inserted yet */
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
 8002b0e:	2206      	movs	r2, #6
 8002b10:	0010      	movs	r0, r2
 8002b12:	2401      	movs	r4, #1
 8002b14:	4358      	muls	r0, r3
 8002b16:	520c      	strh	r4, [r1, r0]
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002b18:	4829      	ldr	r0, [pc, #164]	@ (8002bc0 <RCM_ExecRegularConv+0x110>)
 8002b1a:	7804      	ldrb	r4, [r0, #0]
 8002b1c:	4362      	muls	r2, r4
 8002b1e:	188a      	adds	r2, r1, r2
 8002b20:	7852      	ldrb	r2, [r2, #1]
 8002b22:	2a01      	cmp	r2, #1
 8002b24:	d000      	beq.n	8002b28 <RCM_ExecRegularConv+0x78>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8002b26:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8002b28:	4a26      	ldr	r2, [pc, #152]	@ (8002bc4 <RCM_ExecRegularConv+0x114>)
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d135      	bne.n	8002b9c <RCM_ExecRegularConv+0xec>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002b30:	2603      	movs	r6, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8002b32:	4c25      	ldr	r4, [pc, #148]	@ (8002bc8 <RCM_ExecRegularConv+0x118>)
 8002b34:	009a      	lsls	r2, r3, #2
 8002b36:	5915      	ldr	r5, [r2, r4]
 8002b38:	682a      	ldr	r2, [r5, #0]
 8002b3a:	68d0      	ldr	r0, [r2, #12]
 8002b3c:	43b0      	bics	r0, r6
 8002b3e:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002b40:	68d0      	ldr	r0, [r2, #12]
 8002b42:	4e22      	ldr	r6, [pc, #136]	@ (8002bcc <RCM_ExecRegularConv+0x11c>)
 8002b44:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002b46:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002b48:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002b4a:	6950      	ldr	r0, [r2, #20]
 8002b4c:	43b0      	bics	r0, r6
 8002b4e:	68ae      	ldr	r6, [r5, #8]
 8002b50:	4330      	orrs	r0, r6
 8002b52:	6150      	str	r0, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b54:	2080      	movs	r0, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002b56:	792d      	ldrb	r5, [r5, #4]
 8002b58:	0180      	lsls	r0, r0, #6
 8002b5a:	40a8      	lsls	r0, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002b5c:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b5e:	0b40      	lsrs	r0, r0, #13
 8002b60:	6290      	str	r0, [r2, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002b62:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002b64:	6890      	ldr	r0, [r2, #8]
 8002b66:	4e1a      	ldr	r6, [pc, #104]	@ (8002bd0 <RCM_ExecRegularConv+0x120>)
 8002b68:	4030      	ands	r0, r6
 8002b6a:	4328      	orrs	r0, r5
 8002b6c:	6090      	str	r0, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002b6e:	6810      	ldr	r0, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8002b70:	4228      	tst	r0, r5
 8002b72:	d0fc      	beq.n	8002b6e <RCM_ExecRegularConv+0xbe>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002b74:	6c10      	ldr	r0, [r2, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002b76:	2206      	movs	r2, #6
 8002b78:	435a      	muls	r2, r3
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002b7a:	4d11      	ldr	r5, [pc, #68]	@ (8002bc0 <RCM_ExecRegularConv+0x110>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002b7c:	188a      	adds	r2, r1, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002b7e:	7829      	ldrb	r1, [r5, #0]
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002b80:	8050      	strh	r0, [r2, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002b82:	0089      	lsls	r1, r1, #2
 8002b84:	5861      	ldr	r1, [r4, r1]
 8002b86:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002b88:	2103      	movs	r1, #3
 8002b8a:	68e0      	ldr	r0, [r4, #12]
 8002b8c:	4388      	bics	r0, r1
 8002b8e:	3902      	subs	r1, #2
 8002b90:	4301      	orrs	r1, r0
 8002b92:	60e1      	str	r1, [r4, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8002b94:	7951      	ldrb	r1, [r2, #5]
 8002b96:	7029      	strb	r1, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8002b98:	2102      	movs	r1, #2
 8002b9a:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8002b9c:	2106      	movs	r1, #6
 8002b9e:	434b      	muls	r3, r1
 8002ba0:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <RCM_ExecRegularConv+0x10c>)
 8002ba2:	18d2      	adds	r2, r2, r3
  return (retVal);
 8002ba4:	8850      	ldrh	r0, [r2, #2]
}
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	0015      	movs	r5, r2
 8002baa:	e79c      	b.n	8002ae6 <RCM_ExecRegularConv+0x36>
         RCM_currentHandle = handle;
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <RCM_ExecRegularConv+0x110>)
 8002bae:	7013      	strb	r3, [r2, #0]
    while (i < RCM_MAX_CONV)
 8002bb0:	e7ad      	b.n	8002b0e <RCM_ExecRegularConv+0x5e>
 8002bb2:	2a03      	cmp	r2, #3
 8002bb4:	d800      	bhi.n	8002bb8 <RCM_ExecRegularConv+0x108>
 8002bb6:	e786      	b.n	8002ac6 <RCM_ExecRegularConv+0x16>
 8002bb8:	e7a9      	b.n	8002b0e <RCM_ExecRegularConv+0x5e>
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	20000862 	.word	0x20000862
 8002bc0:	20000860 	.word	0x20000860
 8002bc4:	20000212 	.word	0x20000212
 8002bc8:	2000089c 	.word	0x2000089c
 8002bcc:	fffff23f 	.word	0xfffff23f
 8002bd0:	7fffffe8 	.word	0x7fffffe8

08002bd4 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <RCM_ExecUserConv+0x4c>)
{
 8002bd6:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvHandle != NULL)
 8002bd8:	681d      	ldr	r5, [r3, #0]
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	d01e      	beq.n	8002c1c <RCM_ExecUserConv+0x48>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002bde:	4e11      	ldr	r6, [pc, #68]	@ (8002c24 <RCM_ExecUserConv+0x50>)
    handle = RCM_UserConvHandle->convHandle;
 8002be0:	7b2c      	ldrb	r4, [r5, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002be2:	7833      	ldrb	r3, [r6, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d119      	bne.n	8002c1c <RCM_ExecUserConv+0x48>
    {
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002be8:	0028      	movs	r0, r5
 8002bea:	f7ff ff61 	bl	8002ab0 <RCM_ExecRegularConv>
      /* Regular conversion is read from RCM_NoInj_array but we must take care that first conversion is done */
      /* Status could also be ongoing, but decision is taken to provide previous conversion
       * instead of waiting for RCM_NoInj_array [handle].status == valid */
      if (RCM_NoInj_array [handle].status != notvalid)
 8002bee:	2206      	movs	r2, #6
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <RCM_ExecUserConv+0x54>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8002bf2:	4362      	muls	r2, r4
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002bf4:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <RCM_ExecUserConv+0x58>)
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002bf8:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8002bfa:	189b      	adds	r3, r3, r2
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <RCM_ExecUserConv+0x32>
      {
        RCM_UserConvState = RCM_USERCONV_EOC;
 8002c02:	2302      	movs	r3, #2
 8002c04:	7033      	strb	r3, [r6, #0]
      }
      else
      {
        /* Nothing to do */
      }
      if (RCM_CB_array[handle].cb != NULL)
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <RCM_ExecUserConv+0x5c>)
 8002c08:	00e4      	lsls	r4, r4, #3
 8002c0a:	58a3      	ldr	r3, [r4, r2]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <RCM_ExecUserConv+0x48>
      {
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002c10:	2000      	movs	r0, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002c12:	1912      	adds	r2, r2, r4
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002c14:	7030      	strb	r0, [r6, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002c16:	6852      	ldr	r2, [r2, #4]
 8002c18:	0028      	movs	r0, r5
 8002c1a:	4798      	blx	r3
  }
  else
  {
     /* Nothing to do */
  }
}
 8002c1c:	bd70      	pop	{r4, r5, r6, pc}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	20000858 	.word	0x20000858
 8002c24:	2000085c 	.word	0x2000085c
 8002c28:	2000085e 	.word	0x2000085e
 8002c2c:	20000862 	.word	0x20000862
 8002c30:	2000087c 	.word	0x2000087c

08002c34 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002c34:	2006      	movs	r0, #6
{
 8002c36:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <RCM_ExecNextConv+0x58>)
 8002c3a:	4915      	ldr	r1, [pc, #84]	@ (8002c90 <RCM_ExecNextConv+0x5c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4358      	muls	r0, r3
 8002c40:	5c42      	ldrb	r2, [r0, r1]
 8002c42:	2a00      	cmp	r2, #0
 8002c44:	d021      	beq.n	8002c8a <RCM_ExecNextConv+0x56>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002c46:	2404      	movs	r4, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002c48:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <RCM_ExecNextConv+0x60>)
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	589d      	ldr	r5, [r3, r2]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002c50:	1809      	adds	r1, r1, r0
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002c52:	682b      	ldr	r3, [r5, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002c54:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	43b2      	bics	r2, r6
 8002c5a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	4e0e      	ldr	r6, [pc, #56]	@ (8002c98 <RCM_ExecNextConv+0x64>)
 8002c60:	4032      	ands	r2, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002c62:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002c64:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	43b2      	bics	r2, r6
 8002c6a:	68ae      	ldr	r6, [r5, #8]
 8002c6c:	4332      	orrs	r2, r6
 8002c6e:	615a      	str	r2, [r3, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002c70:	792a      	ldrb	r2, [r5, #4]
 8002c72:	2501      	movs	r5, #1
 8002c74:	002e      	movs	r6, r5
 8002c76:	4096      	lsls	r6, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c78:	0372      	lsls	r2, r6, #13
 8002c7a:	0b52      	lsrs	r2, r2, #13
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4e06      	ldr	r6, [pc, #24]	@ (8002c9c <RCM_ExecNextConv+0x68>)
 8002c82:	4032      	ands	r2, r6
 8002c84:	4314      	orrs	r4, r2
 8002c86:	609c      	str	r4, [r3, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002c88:	704d      	strb	r5, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	20000860 	.word	0x20000860
 8002c90:	20000862 	.word	0x20000862
 8002c94:	2000089c 	.word	0x2000089c
 8002c98:	fffff23f 	.word	0xfffff23f
 8002c9c:	7fffffe8 	.word	0x7fffffe8

08002ca0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002ca2:	4c10      	ldr	r4, [pc, #64]	@ (8002ce4 <RCM_ReadOngoingConv+0x44>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <RCM_ReadOngoingConv+0x48>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002ca6:	7820      	ldrb	r0, [r4, #0]
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002ca8:	2702      	movs	r7, #2
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002caa:	0082      	lsls	r2, r0, #2
 8002cac:	58d3      	ldr	r3, [r2, r3]
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002cae:	4a0f      	ldr	r2, [pc, #60]	@ (8002cec <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002cb0:	6819      	ldr	r1, [r3, #0]
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	4343      	muls	r3, r0
 8002cb6:	18d3      	adds	r3, r2, r3
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002cb8:	785d      	ldrb	r5, [r3, #1]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002cba:	680e      	ldr	r6, [r1, #0]
 8002cbc:	43bd      	bics	r5, r7
 8002cbe:	d00a      	beq.n	8002cd6 <RCM_ReadOngoingConv+0x36>
 8002cc0:	0776      	lsls	r6, r6, #29
 8002cc2:	d508      	bpl.n	8002cd6 <RCM_ReadOngoingConv+0x36>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002cc4:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
  else
  {
    /* Reading of ADC Converted Value */
    RCM_NoInj_array[RCM_currentHandle].value
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8002cc6:	705f      	strb	r7, [r3, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8002cc8:	805d      	strh	r5, [r3, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002cca:	2303      	movs	r3, #3
 8002ccc:	68cd      	ldr	r5, [r1, #12]
 8002cce:	439d      	bics	r5, r3
 8002cd0:	3b02      	subs	r3, #2
 8002cd2:	432b      	orrs	r3, r5
 8002cd4:	60cb      	str	r3, [r1, #12]
    /* Restore back DMA configuration */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	4343      	muls	r3, r0
 8002cda:	18d2      	adds	r2, r2, r3
 8002cdc:	7953      	ldrb	r3, [r2, #5]
 8002cde:	7023      	strb	r3, [r4, #0]
}
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	20000860 	.word	0x20000860
 8002ce8:	2000089c 	.word	0x2000089c
 8002cec:	20000862 	.word	0x20000862

08002cf0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_MspInit+0x2c>)
{
 8002cf4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	0549      	lsls	r1, r1, #21
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	61da      	str	r2, [r3, #28]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	400b      	ands	r3, r1
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d16:	b002      	add	sp, #8
 8002d18:	4770      	bx	lr
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	0005      	movs	r5, r0
 8002d24:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	2214      	movs	r2, #20
 8002d28:	2100      	movs	r1, #0
 8002d2a:	a803      	add	r0, sp, #12
 8002d2c:	f001 ff9f 	bl	8004c6e <memset>
  if(hadc->Instance==ADC1)
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_ADC_MspInit+0xa8>)
 8002d32:	682a      	ldr	r2, [r5, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d144      	bne.n	8002dc2 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <HAL_ADC_MspInit+0xac>)
 8002d3c:	0089      	lsls	r1, r1, #2
 8002d3e:	699a      	ldr	r2, [r3, #24]
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002d40:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d42:	430a      	orrs	r2, r1
 8002d44:	619a      	str	r2, [r3, #24]
 8002d46:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d48:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d4a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	0289      	lsls	r1, r1, #10
 8002d56:	430a      	orrs	r2, r1
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002d5c:	2720      	movs	r7, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	02c9      	lsls	r1, r1, #11
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002d70:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	400b      	ands	r3, r1
 8002d74:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002d76:	a903      	add	r1, sp, #12

    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d7c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002d7e:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002d80:	f000 fc8c 	bl	800369c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002d84:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002d86:	4812      	ldr	r0, [pc, #72]	@ (8002dd0 <HAL_ADC_MspInit+0xb0>)
 8002d88:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002d8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f000 fc84 	bl	800369c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002d94:	4c0f      	ldr	r4, [pc, #60]	@ (8002dd4 <HAL_ADC_MspInit+0xb4>)
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <HAL_ADC_MspInit+0xb8>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002d98:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8002d9a:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002da0:	18db      	adds	r3, r3, r3
 8002da2:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	00db      	lsls	r3, r3, #3
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da8:	6066      	str	r6, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002daa:	60a6      	str	r6, [r4, #8]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dac:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002dae:	61a7      	str	r7, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002db2:	f000 fc41 	bl	8003638 <HAL_DMA_Init>
 8002db6:	42b0      	cmp	r0, r6
 8002db8:	d001      	beq.n	8002dbe <HAL_ADC_MspInit+0x9e>
    {
      Error_Handler();
 8002dba:	f7fd ffb1 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002dbe:	632c      	str	r4, [r5, #48]	@ 0x30
 8002dc0:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dc2:	b009      	add	sp, #36	@ 0x24
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40012400 	.word	0x40012400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	200004dc 	.word	0x200004dc
 8002dd8:	40020008 	.word	0x40020008

08002ddc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ddc:	b530      	push	{r4, r5, lr}
 8002dde:	0005      	movs	r5, r0
 8002de0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	2214      	movs	r2, #20
 8002de4:	2100      	movs	r1, #0
 8002de6:	a803      	add	r0, sp, #12
 8002de8:	f001 ff41 	bl	8004c6e <memset>
  if(htim_pwm->Instance==TIM1)
 8002dec:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <HAL_TIM_PWM_MspInit+0xd0>)
 8002dee:	682a      	ldr	r2, [r5, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d159      	bne.n	8002ea8 <HAL_TIM_PWM_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_TIM_PWM_MspInit+0xd4>)
 8002df8:	0109      	lsls	r1, r1, #4
 8002dfa:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	482d      	ldr	r0, [pc, #180]	@ (8002eb4 <HAL_TIM_PWM_MspInit+0xd8>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	619a      	str	r2, [r3, #24]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	02c9      	lsls	r1, r1, #11
 8002e10:	430a      	orrs	r2, r1
 8002e12:	615a      	str	r2, [r3, #20]
 8002e14:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e16:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e18:	400b      	ands	r3, r1
 8002e1a:	9302      	str	r3, [sp, #8]
 8002e1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002e26:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e2a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2c:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002e2e:	f000 fc35 	bl	800369c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002e32:	4c21      	ldr	r4, [pc, #132]	@ (8002eb8 <HAL_TIM_PWM_MspInit+0xdc>)
 8002e34:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_TIM_PWM_MspInit+0xe0>)
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002e36:	0020      	movs	r0, r4
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002e38:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e3a:	2310      	movs	r3, #16
 8002e3c:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002e42:	3380      	adds	r3, #128	@ 0x80
 8002e44:	60e3      	str	r3, [r4, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e46:	3380      	adds	r3, #128	@ 0x80
 8002e48:	6123      	str	r3, [r4, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8002e50:	2320      	movs	r3, #32
 8002e52:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	019b      	lsls	r3, r3, #6
 8002e58:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002e5a:	f000 fbed 	bl	8003638 <HAL_DMA_Init>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_TIM_PWM_MspInit+0x8a>
    {
      Error_Handler();
 8002e62:	f7fd ff5d 	bl	8000d20 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);

    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_TIM_PWM_MspInit+0xe4>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002e68:	632c      	str	r4, [r5, #48]	@ 0x30
 8002e6a:	6265      	str	r5, [r4, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002e6c:	63ac      	str	r4, [r5, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002e6e:	636c      	str	r4, [r5, #52]	@ 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002e70:	4c14      	ldr	r4, [pc, #80]	@ (8002ec4 <HAL_TIM_PWM_MspInit+0xe8>)
 8002e72:	6023      	str	r3, [r4, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e74:	2310      	movs	r3, #16
 8002e76:	6063      	str	r3, [r4, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60a3      	str	r3, [r4, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002e7c:	3380      	adds	r3, #128	@ 0x80
 8002e7e:	60e3      	str	r3, [r4, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e80:	3380      	adds	r3, #128	@ 0x80
 8002e82:	6123      	str	r3, [r4, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002e8e:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002e90:	0020      	movs	r0, r4
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002e92:	019b      	lsls	r3, r3, #6
 8002e94:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002e96:	f000 fbcf 	bl	8003638 <HAL_DMA_Init>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_TIM_PWM_MspInit+0xc6>
    {
      Error_Handler();
 8002e9e:	f7fd ff3f 	bl	8000d20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002ea2:	622c      	str	r4, [r5, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8002ea4:	62ec      	str	r4, [r5, #44]	@ 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002ea6:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ea8:	b009      	add	sp, #36	@ 0x24
 8002eaa:	bd30      	pop	{r4, r5, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	48000400 	.word	0x48000400
 8002eb8:	20000408 	.word	0x20000408
 8002ebc:	40020044 	.word	0x40020044
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	200003c4 	.word	0x200003c4

08002ec8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	0004      	movs	r4, r0
 8002ecc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	2214      	movs	r2, #20
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	a803      	add	r0, sp, #12
 8002ed4:	f001 fecb 	bl	8004c6e <memset>
  if(htim_encoder->Instance==TIM2)
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	05db      	lsls	r3, r3, #23
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11b      	bne.n	8002f1a <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x58>)
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eec:	430a      	orrs	r2, r1
 8002eee:	61da      	str	r2, [r3, #28]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef6:	9201      	str	r2, [sp, #4]
 8002ef8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	0289      	lsls	r1, r1, #10
 8002efe:	430a      	orrs	r2, r1
 8002f00:	615a      	str	r2, [r3, #20]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	400b      	ands	r3, r1
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002f0a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002f0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	3b01      	subs	r3, #1
 8002f12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002f14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f000 fbc1 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f1a:	b008      	add	sp, #32
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	0004      	movs	r4, r0
 8002f28:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	2214      	movs	r2, #20
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	a803      	add	r0, sp, #12
 8002f30:	f001 fe9d 	bl	8004c6e <memset>
  if(htim->Instance==TIM1)
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_TIM_MspPostInit+0x78>)
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d12c      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	2180      	movs	r1, #128	@ 0x80
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_TIM_MspPostInit+0x7c>)
 8002f40:	02c9      	lsls	r1, r1, #11
 8002f42:	695a      	ldr	r2, [r3, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	430a      	orrs	r2, r1
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4c:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f50:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	0289      	lsls	r1, r1, #10
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	615a      	str	r2, [r3, #20]
 8002f5e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f60:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	400b      	ands	r3, r1
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002f68:	23e0      	movs	r3, #224	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6a:	480e      	ldr	r0, [pc, #56]	@ (8002fa4 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002f6c:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002f70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f72:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f74:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f76:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f78:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f000 fb8f 	bl	800369c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002f7e:	23e0      	movs	r3, #224	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002f82:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	a903      	add	r1, sp, #12
 8002f86:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002f88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f8e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f90:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f000 fb83 	bl	800369c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f96:	b008      	add	sp, #32
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	48000400 	.word	0x48000400

08002fa8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <NMI_Handler>

08002faa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	4770      	bx	lr

08002fac <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002fac:	2207      	movs	r2, #7
{
 8002fae:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002fb0:	4b02      	ldr	r3, [pc, #8]	@ (8002fbc <DMA1_Channel1_IRQHandler+0x10>)
 8002fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8002fb4:	f7fe fad6 	bl	8001564 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002fc0:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8002fc2:	b510      	push	{r4, lr}
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002ffc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>)
 8002fc6:	6922      	ldr	r2, [r4, #16]
 8002fc8:	421a      	tst	r2, r3
 8002fca:	d008      	beq.n	8002fde <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002fcc:	68e2      	ldr	r2, [r4, #12]
 8002fce:	421a      	tst	r2, r3
 8002fd0:	d005      	beq.n	8002fde <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1e>

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(TIM1) && LL_TIM_IsEnabledIT_UPDATE(TIM1))
  {
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8002fd2:	480b      	ldr	r0, [pc, #44]	@ (8003000 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002fd4:	f7ff fcdc 	bl	8002990 <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002fd8:	2302      	movs	r3, #2
 8002fda:	425b      	negs	r3, r3
 8002fdc:	6123      	str	r3, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	421a      	tst	r2, r3
 8002fe4:	d008      	beq.n	8002ff8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8002fe6:	68e2      	ldr	r2, [r4, #12]
 8002fe8:	421a      	tst	r2, r3
 8002fea:	d005      	beq.n	8002ff8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x38>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002fec:	3b02      	subs	r3, #2
 8002fee:	3bff      	subs	r3, #255	@ 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8002ff0:	4803      	ldr	r0, [pc, #12]	@ (8003000 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002ff2:	6123      	str	r3, [r4, #16]
 8002ff4:	f7fe fdc5 	bl	8001b82 <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	20000148 	.word	0x20000148

08003004 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8003004:	2280      	movs	r2, #128	@ 0x80
 8003006:	4b05      	ldr	r3, [pc, #20]	@ (800301c <DMA1_Channel4_5_IRQHandler+0x18>)
 8003008:	0292      	lsls	r2, r2, #10
 800300a:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 800300c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 800300e:	4211      	tst	r1, r2
 8003010:	d003      	beq.n	800301a <DMA1_Channel4_5_IRQHandler+0x16>
  {
    LL_DMA_ClearFlag_TC5(DMA1);
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8003012:	4803      	ldr	r0, [pc, #12]	@ (8003020 <DMA1_Channel4_5_IRQHandler+0x1c>)
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	f7ff fcd9 	bl	80029cc <R1_DMAx_TC_IRQHandler>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 800301a:	bd10      	pop	{r4, pc}
 800301c:	40020000 	.word	0x40020000
 8003020:	20000148 	.word	0x20000148

08003024 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003024:	2201      	movs	r2, #1
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003026:	4807      	ldr	r0, [pc, #28]	@ (8003044 <TIM2_IRQHandler+0x20>)
{
 8003028:	b510      	push	{r4, lr}
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 800302a:	6a03      	ldr	r3, [r0, #32]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	4211      	tst	r1, r2
 8003030:	d006      	beq.n	8003040 <TIM2_IRQHandler+0x1c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003032:	6919      	ldr	r1, [r3, #16]
 8003034:	4211      	tst	r1, r2
 8003036:	d003      	beq.n	8003040 <TIM2_IRQHandler+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003038:	3a03      	subs	r2, #3
 800303a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 800303c:	f001 fb06 	bl	800464c <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003040:	bd10      	pop	{r4, pc}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	20000090 	.word	0x20000090

08003048 <DMA1_Channel2_3_IRQHandler>:
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003048:	2280      	movs	r2, #128	@ 0x80
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <DMA1_Channel2_3_IRQHandler+0x18>)
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	6819      	ldr	r1, [r3, #0]

void DMA1_Channel2_3_IRQHandler (void)
{
 8003050:	b510      	push	{r4, lr}
 8003052:	4211      	tst	r1, r2
 8003054:	d003      	beq.n	800305e <DMA1_Channel2_3_IRQHandler+0x16>
  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A) ){
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003056:	4803      	ldr	r0, [pc, #12]	@ (8003064 <DMA1_Channel2_3_IRQHandler+0x1c>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	f7fd fc13 	bl	8000884 <ASPEP_HWDataReceivedIT>
  }
}
 800305e:	bd10      	pop	{r4, pc}
 8003060:	40020000 	.word	0x40020000
 8003064:	2000032c 	.word	0x2000032c

08003068 <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003068:	2240      	movs	r2, #64	@ 0x40

void USART1_IRQHandler(void)
{
 800306a:	b510      	push	{r4, lr}
 800306c:	4c22      	ldr	r4, [pc, #136]	@ (80030f8 <USART1_IRQHandler+0x90>)
 800306e:	69e3      	ldr	r3, [r4, #28]
 8003070:	4213      	tst	r3, r2
 8003072:	d008      	beq.n	8003086 <USART1_IRQHandler+0x1e>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003074:	2001      	movs	r0, #1
 8003076:	4921      	ldr	r1, [pc, #132]	@ (80030fc <USART1_IRQHandler+0x94>)
 8003078:	680b      	ldr	r3, [r1, #0]
 800307a:	4383      	bics	r3, r0
 800307c:	600b      	str	r3, [r1, #0]
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 800307e:	4820      	ldr	r0, [pc, #128]	@ (8003100 <USART1_IRQHandler+0x98>)
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003080:	6222      	str	r2, [r4, #32]
 8003082:	f7fd fb28 	bl	80006d6 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003086:	2308      	movs	r3, #8
 8003088:	69e2      	ldr	r2, [r4, #28]
 800308a:	421a      	tst	r2, r3
 800308c:	d00b      	beq.n	80030a6 <USART1_IRQHandler+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800308e:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003090:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	3b07      	subs	r3, #7
 8003096:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800309a:	6821      	ldr	r1, [r4, #0]
 800309c:	330f      	adds	r3, #15
 800309e:	430b      	orrs	r3, r1
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	f382 8810 	msr	PRIMASK, r2
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80030a6:	2110      	movs	r1, #16
 80030a8:	69e3      	ldr	r3, [r4, #28]
 80030aa:	420b      	tst	r3, r1
 80030ac:	d023      	beq.n	80030f6 <USART1_IRQHandler+0x8e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	420b      	tst	r3, r1
 80030b2:	d020      	beq.n	80030f6 <USART1_IRQHandler+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	2201      	movs	r2, #1
 80030ba:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	438b      	bics	r3, r1
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030cc:	f382 8810 	msr	PRIMASK, r2
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80030d0:	2340      	movs	r3, #64	@ 0x40
 80030d2:	68a1      	ldr	r1, [r4, #8]
 80030d4:	4399      	bics	r1, r3
 80030d6:	60a1      	str	r1, [r4, #8]
 80030d8:	f380 8810 	msr	PRIMASK, r0
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80030dc:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80030e6:	68a2      	ldr	r2, [r4, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60a3      	str	r3, [r4, #8]
 80030ec:	f381 8810 	msr	PRIMASK, r1
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 80030f0:	4803      	ldr	r0, [pc, #12]	@ (8003100 <USART1_IRQHandler+0x98>)
 80030f2:	f7fd fc15 	bl	8000920 <ASPEP_HWDMAReset>
  /* USER CODE END USART1_IRQHandlern 0 */

  /* USER CODE BEGIN USART1_IRQHandler 1 */

  /* USER CODE END USART1_IRQHandler 1 */
}
 80030f6:	bd10      	pop	{r4, pc}
 80030f8:	40013800 	.word	0x40013800
 80030fc:	4002001c 	.word	0x4002001c
 8003100:	2000032c 	.word	0x2000032c

08003104 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003104:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003106:	f7fe fb2f 	bl	8001768 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x6>

0800310c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800310c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800310e:	4c0d      	ldr	r4, [pc, #52]	@ (8003144 <SysTick_Handler+0x38>)
 8003110:	7823      	ldrb	r3, [r4, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d105      	bne.n	8003122 <SysTick_Handler+0x16>
  {
    HAL_IncTick();
 8003116:	f000 f8ef 	bl	80032f8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800311a:	f000 fa88 	bl	800362e <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	7023      	strb	r3, [r4, #0]
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003122:	2280      	movs	r2, #128	@ 0x80
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8003124:	7823      	ldrb	r3, [r4, #0]
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	3301      	adds	r3, #1
 800312a:	7023      	strb	r3, [r4, #0]
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <SysTick_Handler+0x3c>)
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	4211      	tst	r1, r2
 8003132:	d003      	beq.n	800313c <SysTick_Handler+0x30>

  /* Buffer is ready by the HW layer to be processed */
  if (LL_DMA_IsActiveFlag_TC (DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC (DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8003134:	4805      	ldr	r0, [pc, #20]	@ (800314c <SysTick_Handler+0x40>)
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	f7fd fba4 	bl	8000884 <ASPEP_HWDataReceivedIT>
  }

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 800313c:	f7fe fb08 	bl	8001750 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003140:	bd10      	pop	{r4, pc}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	200003b4 	.word	0x200003b4
 8003148:	40020000 	.word	0x40020000
 800314c:	2000032c 	.word	0x2000032c

08003150 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <EXTI4_15_IRQHandler+0x18>)
 8003154:	0212      	lsls	r2, r2, #8
 8003156:	6959      	ldr	r1, [r3, #20]

/**
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI4_15_IRQHandler (void)
{
 8003158:	b510      	push	{r4, lr}
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 800315a:	4211      	tst	r1, r2
 800315c:	d002      	beq.n	8003164 <EXTI4_15_IRQHandler+0x14>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800315e:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    UI_HandleStartStopButton_cb ();
 8003160:	f7fe fb12 	bl	8001788 <UI_HandleStartStopButton_cb>
  }

}
 8003164:	bd10      	pop	{r4, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	40010400 	.word	0x40010400

0800316c <UASPEP_DAMCONFIG_TX>:
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800316c:	2340      	movs	r3, #64	@ 0x40
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 800316e:	6802      	ldr	r2, [r0, #0]
{
 8003170:	b530      	push	{r4, r5, lr}
 8003172:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003174:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	2401      	movs	r4, #1
 800317a:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800317e:	6811      	ldr	r1, [r2, #0]
 8003180:	4319      	orrs	r1, r3
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	f385 8810 	msr	PRIMASK, r5
    LL_USART_EnableIT_TC(pHandle->USARTx);

    /* Enable DMA UART to start the TX request */
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);
 8003188:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003192:	2280      	movs	r2, #128	@ 0x80
 8003194:	688c      	ldr	r4, [r1, #8]
 8003196:	4322      	orrs	r2, r4
 8003198:	608a      	str	r2, [r1, #8]
 800319a:	f385 8810 	msr	PRIMASK, r5

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 800319e:	6801      	ldr	r1, [r0, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80031a0:	6905      	ldr	r5, [r0, #16]
 80031a2:	000c      	movs	r4, r1
 80031a4:	4a03      	ldr	r2, [pc, #12]	@ (80031b4 <UASPEP_DAMCONFIG_TX+0x48>)
 80031a6:	3428      	adds	r4, #40	@ 0x28
 80031a8:	5cad      	ldrb	r5, [r5, r2]
 80031aa:	6882      	ldr	r2, [r0, #8]
 80031ac:	1952      	adds	r2, r2, r5
 80031ae:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80031b0:	620b      	str	r3, [r1, #32]
    /* DMA end of transfer on UART TX channel completion is not activated */
    /* We prefer to activate UART TC itself to avoid to trig IT while queued data are still to be transmitted */
#ifdef NULL_PTR_CHECK_USA_ASP_DRV
  }
#endif
}
 80031b2:	bd30      	pop	{r4, r5, pc}
 80031b4:	08005045 	.word	0x08005045

080031b8 <UASPEP_DAMCONFIG_RX>:
  * @brief  Configures the DMA used for data reception from controller.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_DAMCONFIG_RX(UASPEP_Handle_t *pHandle)
{
 80031b8:	b530      	push	{r4, r5, lr}
  else
  {
#endif
    /* DMA interrupt not used for F0 family */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 80031ba:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031bc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	2101      	movs	r1, #1
 80031c2:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80031c6:	6893      	ldr	r3, [r2, #8]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	f384 8810 	msr	PRIMASK, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80031d0:	6803      	ldr	r3, [r0, #0]
 80031d2:	68c5      	ldr	r5, [r0, #12]
 80031d4:	001c      	movs	r4, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <UASPEP_DAMCONFIG_RX+0x44>)
 80031d8:	3424      	adds	r4, #36	@ 0x24
 80031da:	5cad      	ldrb	r5, [r5, r2]
 80031dc:	6842      	ldr	r2, [r0, #4]
 80031de:	1952      	adds	r2, r2, r5
 80031e0:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80031e2:	2240      	movs	r2, #64	@ 0x40
 80031e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	f380 8810 	msr	PRIMASK, r0

    LL_USART_EnableDMAReq_RX(pHandle->USARTx);
#ifdef NULL_PTR_CHECK_USA_ASP_DRV
  }
#endif
}
 80031f8:	bd30      	pop	{r4, r5, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	08005045 	.word	0x08005045

08003200 <UASPEP_INIT>:
{
 8003200:	b510      	push	{r4, lr}
 8003202:	0004      	movs	r4, r0
  UASPEP_DAMCONFIG_TX(pHandle);
 8003204:	f7ff ffb2 	bl	800316c <UASPEP_DAMCONFIG_TX>
  UASPEP_DAMCONFIG_RX(pHandle);
 8003208:	0020      	movs	r0, r4
 800320a:	f7ff ffd5 	bl	80031b8 <UASPEP_DAMCONFIG_RX>
}
 800320e:	bd10      	pop	{r4, pc}

08003210 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003210:	b530      	push	{r4, r5, lr}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003212:	2401      	movs	r4, #1
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <UASPEP_SEND_PACKET+0x30>)
{
 8003216:	0015      	movs	r5, r2
 8003218:	6902      	ldr	r2, [r0, #16]
 800321a:	5cd2      	ldrb	r2, [r2, r3]
 800321c:	6883      	ldr	r3, [r0, #8]
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
  }
  else
  {
    result = false;
 800321e:	2000      	movs	r0, #0
 8003220:	189b      	adds	r3, r3, r2
 8003222:	681a      	ldr	r2, [r3, #0]
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 8003224:	4222      	tst	r2, r4
 8003226:	d109      	bne.n	800323c <UASPEP_SEND_PACKET+0x2c>
    result = true;
 8003228:	0020      	movs	r0, r4
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800322a:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	0c12      	lsrs	r2, r2, #16
 8003230:	0412      	lsls	r2, r2, #16
 8003232:	432a      	orrs	r2, r5
 8003234:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4322      	orrs	r2, r4
 800323a:	601a      	str	r2, [r3, #0]
  }
  return (result);
}
 800323c:	bd30      	pop	{r4, r5, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	08005045 	.word	0x08005045

08003244 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003244:	b510      	push	{r4, lr}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <UASPEP_RECEIVE_BUFFER+0x28>)
 8003248:	68c4      	ldr	r4, [r0, #12]
 800324a:	5ce4      	ldrb	r4, [r4, r3]
 800324c:	6843      	ldr	r3, [r0, #4]
 800324e:	2001      	movs	r0, #1
 8003250:	191b      	adds	r3, r3, r4
 8003252:	681c      	ldr	r4, [r3, #0]
 8003254:	4384      	bics	r4, r0
 8003256:	601c      	str	r4, [r3, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003258:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	0c09      	lsrs	r1, r1, #16
 800325e:	0409      	lsls	r1, r1, #16
 8003260:	4311      	orrs	r1, r2
 8003262:	6059      	str	r1, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4310      	orrs	r0, r2
 8003268:	6018      	str	r0, [r3, #0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800326a:	bd10      	pop	{r4, pc}
 800326c:	08005045 	.word	0x08005045

08003270 <UASPEP_IDLE_ENABLE>:
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003270:	2310      	movs	r3, #16
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003272:	6802      	ldr	r2, [r0, #0]
 8003274:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	2001      	movs	r0, #1
 800327c:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003280:	6810      	ldr	r0, [r2, #0]
 8003282:	4303      	orrs	r3, r0
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	f381 8810 	msr	PRIMASK, r1
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 800328a:	4770      	bx	lr

0800328c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800328c:	4770      	bx	lr
	...

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003294:	20fa      	movs	r0, #250	@ 0xfa
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_InitTick+0x3c>)
 8003298:	0080      	lsls	r0, r0, #2
 800329a:	7819      	ldrb	r1, [r3, #0]
 800329c:	f7fc ff24 	bl	80000e8 <__udivsi3>
 80032a0:	4c0b      	ldr	r4, [pc, #44]	@ (80032d0 <HAL_InitTick+0x40>)
 80032a2:	0001      	movs	r1, r0
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	f7fc ff1f 	bl	80000e8 <__udivsi3>
 80032aa:	f000 f9a5 	bl	80035f8 <HAL_SYSTICK_Config>
 80032ae:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80032b0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b2:	2c00      	cmp	r4, #0
 80032b4:	d109      	bne.n	80032ca <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b6:	2d03      	cmp	r5, #3
 80032b8:	d807      	bhi.n	80032ca <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ba:	3802      	subs	r0, #2
 80032bc:	0022      	movs	r2, r4
 80032be:	0029      	movs	r1, r5
 80032c0:	f000 f964 	bl	800358c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c4:	0020      	movs	r0, r4
 80032c6:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <HAL_InitTick+0x44>)
 80032c8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	200003bc 	.word	0x200003bc
 80032d0:	200003b8 	.word	0x200003b8
 80032d4:	200003c0 	.word	0x200003c0

080032d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d8:	2310      	movs	r3, #16
 80032da:	4a06      	ldr	r2, [pc, #24]	@ (80032f4 <HAL_Init+0x1c>)
{
 80032dc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032de:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e0:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	f7ff ffd3 	bl	8003290 <HAL_InitTick>
  HAL_MspInit();
 80032ea:	f7ff fd01 	bl	8002cf0 <HAL_MspInit>
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	40022000 	.word	0x40022000

080032f8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80032f8:	4a03      	ldr	r2, [pc, #12]	@ (8003308 <HAL_IncTick+0x10>)
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <HAL_IncTick+0x14>)
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	185b      	adds	r3, r3, r1
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	4770      	bx	lr
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	200008ac 	.word	0x200008ac
 800330c:	200003bc 	.word	0x200003bc

08003310 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003310:	4b01      	ldr	r3, [pc, #4]	@ (8003318 <HAL_GetTick+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
}
 8003314:	4770      	bx	lr
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	200008ac 	.word	0x200008ac

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fff6 	bl	8003310 <HAL_GetTick>
 8003324:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003326:	1c63      	adds	r3, r4, #1
 8003328:	d002      	beq.n	8003330 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800332a:	4b04      	ldr	r3, [pc, #16]	@ (800333c <HAL_Delay+0x20>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003330:	f7ff ffee 	bl	8003310 <HAL_GetTick>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	42a0      	cmp	r0, r4
 8003338:	d3fa      	bcc.n	8003330 <HAL_Delay+0x14>
  {
  }
}
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	200003bc 	.word	0x200003bc

08003340 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8003344:	d100      	bne.n	8003348 <HAL_ADC_Init+0x8>
 8003346:	e090      	b.n	800346a <HAL_ADC_Init+0x12a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003348:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800334a:	2b00      	cmp	r3, #0
 800334c:	d105      	bne.n	800335a <HAL_ADC_Init+0x1a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800334e:	0002      	movs	r2, r0
 8003350:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003352:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8003354:	7013      	strb	r3, [r2, #0]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003356:	f7ff fce3 	bl	8002d20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800335a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800335c:	06db      	lsls	r3, r3, #27
 800335e:	d500      	bpl.n	8003362 <HAL_ADC_Init+0x22>
 8003360:	e085      	b.n	800346e <HAL_ADC_Init+0x12e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003366:	075b      	lsls	r3, r3, #29
 8003368:	d500      	bpl.n	800336c <HAL_ADC_Init+0x2c>
 800336a:	e080      	b.n	800346e <HAL_ADC_Init+0x12e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800336e:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <HAL_ADC_Init+0x138>)
 8003370:	4019      	ands	r1, r3
 8003372:	3306      	adds	r3, #6
 8003374:	33ff      	adds	r3, #255	@ 0xff
 8003376:	430b      	orrs	r3, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003378:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800337a:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	400b      	ands	r3, r1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_ADC_Init+0x50>
 8003384:	6811      	ldr	r1, [r2, #0]
 8003386:	4219      	tst	r1, r3
 8003388:	d10e      	bne.n	80033a8 <HAL_ADC_Init+0x68>
 800338a:	68d3      	ldr	r3, [r2, #12]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	d40b      	bmi.n	80033a8 <HAL_ADC_Init+0x68>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003390:	2118      	movs	r1, #24
 8003392:	68d3      	ldr	r3, [r2, #12]
 8003394:	438b      	bics	r3, r1
 8003396:	68a1      	ldr	r1, [r4, #8]
 8003398:	430b      	orrs	r3, r1
 800339a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800339c:	6913      	ldr	r3, [r2, #16]
 800339e:	6861      	ldr	r1, [r4, #4]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80033a8:	68d3      	ldr	r3, [r2, #12]
 80033aa:	4934      	ldr	r1, [pc, #208]	@ (800347c <HAL_ADC_Init+0x13c>)
 80033ac:	400b      	ands	r3, r1
 80033ae:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033b0:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033b2:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033b4:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80033b6:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033b8:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033ba:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033bc:	68e0      	ldr	r0, [r4, #12]
 80033be:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80033c0:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033c2:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80033c4:	1d60      	adds	r0, r4, #5
 80033c6:	7fc0      	ldrb	r0, [r0, #31]
 80033c8:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033ca:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80033cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80033ce:	3801      	subs	r0, #1
 80033d0:	1e45      	subs	r5, r0, #1
 80033d2:	41a8      	sbcs	r0, r5
 80033d4:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80033d6:	4303      	orrs	r3, r0
 80033d8:	6920      	ldr	r0, [r4, #16]
 80033da:	3802      	subs	r0, #2
 80033dc:	4245      	negs	r5, r0
 80033de:	4168      	adcs	r0, r5
 80033e0:	0080      	lsls	r0, r0, #2
 80033e2:	4303      	orrs	r3, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e4:	7ee0      	ldrb	r0, [r4, #27]
 80033e6:	2801      	cmp	r0, #1
 80033e8:	d104      	bne.n	80033f4 <HAL_ADC_Init+0xb4>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033ea:	2900      	cmp	r1, #0
 80033ec:	d12b      	bne.n	8003446 <HAL_ADC_Init+0x106>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033ee:	2180      	movs	r1, #128	@ 0x80
 80033f0:	0249      	lsls	r1, r1, #9
 80033f2:	430b      	orrs	r3, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f4:	20c2      	movs	r0, #194	@ 0xc2
 80033f6:	69e1      	ldr	r1, [r4, #28]
 80033f8:	30ff      	adds	r0, #255	@ 0xff
 80033fa:	4281      	cmp	r1, r0
 80033fc:	d002      	beq.n	8003404 <HAL_ADC_Init+0xc4>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80033fe:	6a20      	ldr	r0, [r4, #32]
 8003400:	4301      	orrs	r1, r0
 8003402:	430b      	orrs	r3, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003404:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003406:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003408:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800340a:	4319      	orrs	r1, r3
 800340c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800340e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003410:	4281      	cmp	r1, r0
 8003412:	d002      	beq.n	800341a <HAL_ADC_Init+0xda>
 8003414:	1e48      	subs	r0, r1, #1
 8003416:	2806      	cmp	r0, #6
 8003418:	d807      	bhi.n	800342a <HAL_ADC_Init+0xea>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800341a:	2507      	movs	r5, #7
 800341c:	6950      	ldr	r0, [r2, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800341e:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003420:	43a8      	bics	r0, r5
 8003422:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003424:	6950      	ldr	r0, [r2, #20]
 8003426:	4301      	orrs	r1, r0
 8003428:	6151      	str	r1, [r2, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800342a:	68d2      	ldr	r2, [r2, #12]
 800342c:	4914      	ldr	r1, [pc, #80]	@ (8003480 <HAL_ADC_Init+0x140>)
 800342e:	400a      	ands	r2, r1
 8003430:	429a      	cmp	r2, r3
 8003432:	d110      	bne.n	8003456 <HAL_ADC_Init+0x116>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003434:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003436:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8003438:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800343a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800343c:	439a      	bics	r2, r3
 800343e:	3b02      	subs	r3, #2
 8003440:	4313      	orrs	r3, r2
 8003442:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003444:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003446:	2120      	movs	r1, #32
 8003448:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800344a:	4329      	orrs	r1, r5
 800344c:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003450:	4308      	orrs	r0, r1
 8003452:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8003454:	e7ce      	b.n	80033f4 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 8003456:	2312      	movs	r3, #18
 8003458:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800345a:	439a      	bics	r2, r3
 800345c:	3b02      	subs	r3, #2
 800345e:	4313      	orrs	r3, r2
 8003460:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	2301      	movs	r3, #1
 8003464:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003466:	4313      	orrs	r3, r2
 8003468:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	e7ea      	b.n	8003444 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	2310      	movs	r3, #16
 8003470:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003472:	4313      	orrs	r3, r2
 8003474:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8003476:	e7f8      	b.n	800346a <HAL_ADC_Init+0x12a>
 8003478:	fffffefd 	.word	0xfffffefd
 800347c:	fffe0219 	.word	0xfffe0219
 8003480:	833fffe7 	.word	0x833fffe7

08003484 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003486:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003488:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800348a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800348c:	3434      	adds	r4, #52	@ 0x34
 800348e:	7822      	ldrb	r2, [r4, #0]
{
 8003490:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003492:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003494:	2002      	movs	r0, #2
 8003496:	2a01      	cmp	r2, #1
 8003498:	d02a      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x6c>
 800349a:	3801      	subs	r0, #1
 800349c:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	6896      	ldr	r6, [r2, #8]
 80034a2:	0776      	lsls	r6, r6, #29
 80034a4:	d45e      	bmi.n	8003564 <HAL_ADC_ConfigChannel+0xe0>
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034a6:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80034a8:	684f      	ldr	r7, [r1, #4]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034aa:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 80034ac:	46bc      	mov	ip, r7
 80034ae:	4f30      	ldr	r7, [pc, #192]	@ (8003570 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034b0:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034b2:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 80034b4:	45bc      	cmp	ip, r7
 80034b6:	d03f      	beq.n	8003538 <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034b8:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 80034ba:	4338      	orrs	r0, r7
 80034bc:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034be:	2080      	movs	r0, #128	@ 0x80
 80034c0:	0540      	lsls	r0, r0, #21
 80034c2:	4285      	cmp	r5, r0
 80034c4:	d00f      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x62>
 80034c6:	3d01      	subs	r5, #1
 80034c8:	2d06      	cmp	r5, #6
 80034ca:	d90c      	bls.n	80034e6 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80034cc:	2007      	movs	r0, #7
 80034ce:	6955      	ldr	r5, [r2, #20]
 80034d0:	6889      	ldr	r1, [r1, #8]
 80034d2:	4005      	ands	r5, r0
 80034d4:	42a9      	cmp	r1, r5
 80034d6:	d006      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80034d8:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80034da:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80034dc:	4385      	bics	r5, r0
 80034de:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80034e0:	6955      	ldr	r5, [r2, #20]
 80034e2:	4329      	orrs	r1, r5
 80034e4:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034e6:	2e02      	cmp	r6, #2
 80034e8:	d903      	bls.n	80034f2 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ea:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ec:	2300      	movs	r3, #0
 80034ee:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 80034f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034f2:	4820      	ldr	r0, [pc, #128]	@ (8003574 <HAL_ADC_ConfigChannel+0xf0>)
 80034f4:	6801      	ldr	r1, [r0, #0]
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d01b      	beq.n	8003532 <HAL_ADC_ConfigChannel+0xae>
 80034fa:	001a      	movs	r2, r3
 80034fc:	3a11      	subs	r2, #17
 80034fe:	4255      	negs	r5, r2
 8003500:	416a      	adcs	r2, r5
 8003502:	4d1d      	ldr	r5, [pc, #116]	@ (8003578 <HAL_ADC_ConfigChannel+0xf4>)
 8003504:	4252      	negs	r2, r2
 8003506:	402a      	ands	r2, r5
 8003508:	2580      	movs	r5, #128	@ 0x80
 800350a:	046d      	lsls	r5, r5, #17
 800350c:	1952      	adds	r2, r2, r5
 800350e:	430a      	orrs	r2, r1
 8003510:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003512:	2b10      	cmp	r3, #16
 8003514:	d1e9      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003516:	4b19      	ldr	r3, [pc, #100]	@ (800357c <HAL_ADC_ConfigChannel+0xf8>)
 8003518:	4919      	ldr	r1, [pc, #100]	@ (8003580 <HAL_ADC_ConfigChannel+0xfc>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	f7fc fde4 	bl	80000e8 <__udivsi3>
 8003520:	230a      	movs	r3, #10
 8003522:	4343      	muls	r3, r0
            wait_loop_index--;
 8003524:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0de      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800352c:	9b01      	ldr	r3, [sp, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	e7f8      	b.n	8003524 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003532:	2280      	movs	r2, #128	@ 0x80
 8003534:	0412      	lsls	r2, r2, #16
 8003536:	e7ea      	b.n	800350e <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003538:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800353a:	4381      	bics	r1, r0
 800353c:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800353e:	2e02      	cmp	r6, #2
 8003540:	d8d3      	bhi.n	80034ea <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003542:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <HAL_ADC_ConfigChannel+0xf0>)
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	2b10      	cmp	r3, #16
 8003548:	d00a      	beq.n	8003560 <HAL_ADC_ConfigChannel+0xdc>
 800354a:	3b11      	subs	r3, #17
 800354c:	1e58      	subs	r0, r3, #1
 800354e:	4183      	sbcs	r3, r0
 8003550:	4809      	ldr	r0, [pc, #36]	@ (8003578 <HAL_ADC_ConfigChannel+0xf4>)
 8003552:	425b      	negs	r3, r3
 8003554:	4003      	ands	r3, r0
 8003556:	480b      	ldr	r0, [pc, #44]	@ (8003584 <HAL_ADC_ConfigChannel+0x100>)
 8003558:	181b      	adds	r3, r3, r0
 800355a:	400b      	ands	r3, r1
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e7c4      	b.n	80034ea <HAL_ADC_ConfigChannel+0x66>
 8003560:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_ADC_ConfigChannel+0x104>)
 8003562:	e7fa      	b.n	800355a <HAL_ADC_ConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003564:	2220      	movs	r2, #32
 8003566:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003568:	430a      	orrs	r2, r1
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800356c:	e7be      	b.n	80034ec <HAL_ADC_ConfigChannel+0x68>
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	00001001 	.word	0x00001001
 8003574:	40012708 	.word	0x40012708
 8003578:	ff400000 	.word	0xff400000
 800357c:	200003b8 	.word	0x200003b8
 8003580:	000f4240 	.word	0x000f4240
 8003584:	ffbfffff 	.word	0xffbfffff
 8003588:	ff7fffff 	.word	0xff7fffff

0800358c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358c:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800358e:	24ff      	movs	r4, #255	@ 0xff
 8003590:	2203      	movs	r2, #3
 8003592:	000b      	movs	r3, r1
 8003594:	0021      	movs	r1, r4
 8003596:	4002      	ands	r2, r0
 8003598:	00d2      	lsls	r2, r2, #3
 800359a:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a0:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035a2:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80035a4:	2800      	cmp	r0, #0
 80035a6:	db0a      	blt.n	80035be <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035a8:	24c0      	movs	r4, #192	@ 0xc0
 80035aa:	4a0b      	ldr	r2, [pc, #44]	@ (80035d8 <HAL_NVIC_SetPriority+0x4c>)
 80035ac:	0880      	lsrs	r0, r0, #2
 80035ae:	0080      	lsls	r0, r0, #2
 80035b0:	1880      	adds	r0, r0, r2
 80035b2:	00a4      	lsls	r4, r4, #2
 80035b4:	5902      	ldr	r2, [r0, r4]
 80035b6:	400a      	ands	r2, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80035bc:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035be:	220f      	movs	r2, #15
 80035c0:	4010      	ands	r0, r2
 80035c2:	3808      	subs	r0, #8
 80035c4:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_NVIC_SetPriority+0x50>)
 80035c6:	0880      	lsrs	r0, r0, #2
 80035c8:	0080      	lsls	r0, r0, #2
 80035ca:	1880      	adds	r0, r0, r2
 80035cc:	69c2      	ldr	r2, [r0, #28]
 80035ce:	4011      	ands	r1, r2
 80035d0:	4319      	orrs	r1, r3
 80035d2:	61c1      	str	r1, [r0, #28]
 80035d4:	e7f2      	b.n	80035bc <HAL_NVIC_SetPriority+0x30>
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035e0:	2800      	cmp	r0, #0
 80035e2:	db05      	blt.n	80035f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e4:	231f      	movs	r3, #31
 80035e6:	4018      	ands	r0, r3
 80035e8:	3b1e      	subs	r3, #30
 80035ea:	4083      	lsls	r3, r0
 80035ec:	4a01      	ldr	r2, [pc, #4]	@ (80035f4 <HAL_NVIC_EnableIRQ+0x14>)
 80035ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035f0:	4770      	bx	lr
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	2280      	movs	r2, #128	@ 0x80
 80035fa:	1e43      	subs	r3, r0, #1
 80035fc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	4293      	cmp	r3, r2
 8003602:	d20d      	bcs.n	8003620 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003604:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a07      	ldr	r2, [pc, #28]	@ (8003624 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003608:	4807      	ldr	r0, [pc, #28]	@ (8003628 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800360c:	6a03      	ldr	r3, [r0, #32]
 800360e:	0609      	lsls	r1, r1, #24
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	430b      	orrs	r3, r1
 8003616:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003620:	4770      	bx	lr
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	e000e010 	.word	0xe000e010
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800362c:	4770      	bx	lr

0800362e <HAL_SYSTICK_IRQHandler>:
{
 800362e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003630:	f7ff fffc 	bl	800362c <HAL_SYSTICK_Callback>
}
 8003634:	bd10      	pop	{r4, pc}
	...

08003638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800363e:	2c00      	cmp	r4, #0
 8003640:	d024      	beq.n	800368c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	1ca5      	adds	r5, r4, #2
 8003646:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003648:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800364a:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 800364c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800364e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003650:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	68e1      	ldr	r1, [r4, #12]
 8003658:	430b      	orrs	r3, r1
 800365a:	6921      	ldr	r1, [r4, #16]
 800365c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365e:	6961      	ldr	r1, [r4, #20]
 8003660:	430b      	orrs	r3, r1
 8003662:	69a1      	ldr	r1, [r4, #24]
 8003664:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	69e1      	ldr	r1, [r4, #28]
 8003668:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800366a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800366c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800366e:	4b09      	ldr	r3, [pc, #36]	@ (8003694 <HAL_DMA_Init+0x5c>)
 8003670:	2114      	movs	r1, #20
 8003672:	18c0      	adds	r0, r0, r3
 8003674:	f7fc fd38 	bl	80000e8 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800367a:	0080      	lsls	r0, r0, #2
 800367c:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800367e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003680:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003682:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003686:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8003688:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800368a:	77e0      	strb	r0, [r4, #31]
}
 800368c:	bd70      	pop	{r4, r5, r6, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	ffffc00f 	.word	0xffffc00f
 8003694:	bffdfff8 	.word	0xbffdfff8
 8003698:	40020000 	.word	0x40020000

0800369c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800369c:	2300      	movs	r3, #0
{
 800369e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a2:	680a      	ldr	r2, [r1, #0]
 80036a4:	0014      	movs	r4, r2
 80036a6:	40dc      	lsrs	r4, r3
 80036a8:	d101      	bne.n	80036ae <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80036aa:	b007      	add	sp, #28
 80036ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036ae:	2501      	movs	r5, #1
 80036b0:	0014      	movs	r4, r2
 80036b2:	409d      	lsls	r5, r3
 80036b4:	402c      	ands	r4, r5
 80036b6:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80036b8:	422a      	tst	r2, r5
 80036ba:	d100      	bne.n	80036be <HAL_GPIO_Init+0x22>
 80036bc:	e094      	b.n	80037e8 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036be:	684a      	ldr	r2, [r1, #4]
 80036c0:	005f      	lsls	r7, r3, #1
 80036c2:	4694      	mov	ip, r2
 80036c4:	2203      	movs	r2, #3
 80036c6:	4664      	mov	r4, ip
 80036c8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ca:	2403      	movs	r4, #3
 80036cc:	40bc      	lsls	r4, r7
 80036ce:	43e4      	mvns	r4, r4
 80036d0:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036d2:	1e54      	subs	r4, r2, #1
 80036d4:	2c01      	cmp	r4, #1
 80036d6:	d82e      	bhi.n	8003736 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80036d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036da:	9c01      	ldr	r4, [sp, #4]
 80036dc:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036de:	68cc      	ldr	r4, [r1, #12]
 80036e0:	40bc      	lsls	r4, r7
 80036e2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80036e4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80036e6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e8:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ea:	43ac      	bics	r4, r5
 80036ec:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	4664      	mov	r4, ip
 80036f0:	0924      	lsrs	r4, r4, #4
 80036f2:	4034      	ands	r4, r6
 80036f4:	409c      	lsls	r4, r3
 80036f6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80036f8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80036fa:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036fc:	9c01      	ldr	r4, [sp, #4]
 80036fe:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003700:	688c      	ldr	r4, [r1, #8]
 8003702:	40bc      	lsls	r4, r7
 8003704:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003706:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	2a02      	cmp	r2, #2
 800370a:	d116      	bne.n	800373a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800370c:	2507      	movs	r5, #7
 800370e:	260f      	movs	r6, #15
 8003710:	401d      	ands	r5, r3
 8003712:	00ad      	lsls	r5, r5, #2
 8003714:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003716:	08dc      	lsrs	r4, r3, #3
 8003718:	00a4      	lsls	r4, r4, #2
 800371a:	1904      	adds	r4, r0, r4
 800371c:	9402      	str	r4, [sp, #8]
 800371e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003720:	9603      	str	r6, [sp, #12]
 8003722:	0026      	movs	r6, r4
 8003724:	9c03      	ldr	r4, [sp, #12]
 8003726:	43a6      	bics	r6, r4
 8003728:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800372a:	690e      	ldr	r6, [r1, #16]
 800372c:	40ae      	lsls	r6, r5
 800372e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8003730:	9c02      	ldr	r4, [sp, #8]
 8003732:	6226      	str	r6, [r4, #32]
 8003734:	e001      	b.n	800373a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003736:	2a03      	cmp	r2, #3
 8003738:	d1df      	bne.n	80036fa <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800373a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800373c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800373e:	9d01      	ldr	r5, [sp, #4]
 8003740:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003742:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003744:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8003746:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003748:	4662      	mov	r2, ip
 800374a:	02a4      	lsls	r4, r4, #10
 800374c:	4222      	tst	r2, r4
 800374e:	d04b      	beq.n	80037e8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003750:	2501      	movs	r5, #1
 8003752:	4a26      	ldr	r2, [pc, #152]	@ (80037ec <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003754:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003758:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375a:	432c      	orrs	r4, r5
 800375c:	6194      	str	r4, [r2, #24]
 800375e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003760:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003762:	402a      	ands	r2, r5
 8003764:	9205      	str	r2, [sp, #20]
 8003766:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003768:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <HAL_GPIO_Init+0x154>)
 800376a:	00a4      	lsls	r4, r4, #2
 800376c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800376e:	220f      	movs	r2, #15
 8003770:	3502      	adds	r5, #2
 8003772:	401d      	ands	r5, r3
 8003774:	00ad      	lsls	r5, r5, #2
 8003776:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8003778:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800377a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800377c:	2200      	movs	r2, #0
 800377e:	42b8      	cmp	r0, r7
 8003780:	d008      	beq.n	8003794 <HAL_GPIO_Init+0xf8>
 8003782:	4f1c      	ldr	r7, [pc, #112]	@ (80037f4 <HAL_GPIO_Init+0x158>)
 8003784:	3201      	adds	r2, #1
 8003786:	42b8      	cmp	r0, r7
 8003788:	d004      	beq.n	8003794 <HAL_GPIO_Init+0xf8>
 800378a:	4f1b      	ldr	r7, [pc, #108]	@ (80037f8 <HAL_GPIO_Init+0x15c>)
 800378c:	3204      	adds	r2, #4
 800378e:	42b8      	cmp	r0, r7
 8003790:	d100      	bne.n	8003794 <HAL_GPIO_Init+0xf8>
 8003792:	3a03      	subs	r2, #3
 8003794:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003796:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003798:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 800379a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 800379c:	4a17      	ldr	r2, [pc, #92]	@ (80037fc <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 800379e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80037a0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80037a2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80037a4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80037a6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037a8:	02ff      	lsls	r7, r7, #11
 80037aa:	d401      	bmi.n	80037b0 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 80037ac:	0035      	movs	r5, r6
 80037ae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80037b2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80037b4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80037b6:	9d00      	ldr	r5, [sp, #0]
 80037b8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ba:	02bf      	lsls	r7, r7, #10
 80037bc:	d401      	bmi.n	80037c2 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 80037be:	0035      	movs	r5, r6
 80037c0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80037c4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80037c6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80037c8:	9d00      	ldr	r5, [sp, #0]
 80037ca:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037cc:	03bf      	lsls	r7, r7, #14
 80037ce:	d401      	bmi.n	80037d4 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80037d0:	0035      	movs	r5, r6
 80037d2:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037d4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80037d6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80037d8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80037da:	9e00      	ldr	r6, [sp, #0]
 80037dc:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037de:	03ff      	lsls	r7, r7, #15
 80037e0:	d401      	bmi.n	80037e6 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 80037e2:	4025      	ands	r5, r4
 80037e4:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80037e6:	6016      	str	r6, [r2, #0]
    position++;
 80037e8:	3301      	adds	r3, #1
 80037ea:	e75a      	b.n	80036a2 <HAL_GPIO_Init+0x6>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40010000 	.word	0x40010000
 80037f4:	48000400 	.word	0x48000400
 80037f8:	48000800 	.word	0x48000800
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003800:	2a00      	cmp	r2, #0
 8003802:	d001      	beq.n	8003808 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003804:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003806:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003808:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800380a:	e7fc      	b.n	8003806 <HAL_GPIO_WritePin+0x6>

0800380c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380e:	0004      	movs	r4, r0
 8003810:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003812:	2800      	cmp	r0, #0
 8003814:	d045      	beq.n	80038a2 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	6803      	ldr	r3, [r0, #0]
 8003818:	07db      	lsls	r3, r3, #31
 800381a:	d42f      	bmi.n	800387c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	079b      	lsls	r3, r3, #30
 8003820:	d500      	bpl.n	8003824 <HAL_RCC_OscConfig+0x18>
 8003822:	e081      	b.n	8003928 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	071b      	lsls	r3, r3, #28
 8003828:	d500      	bpl.n	800382c <HAL_RCC_OscConfig+0x20>
 800382a:	e0bc      	b.n	80039a6 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	075b      	lsls	r3, r3, #29
 8003830:	d500      	bpl.n	8003834 <HAL_RCC_OscConfig+0x28>
 8003832:	e0df      	b.n	80039f4 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	06db      	lsls	r3, r3, #27
 8003838:	d51a      	bpl.n	8003870 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800383a:	6962      	ldr	r2, [r4, #20]
 800383c:	2304      	movs	r3, #4
 800383e:	4db4      	ldr	r5, [pc, #720]	@ (8003b10 <HAL_RCC_OscConfig+0x304>)
 8003840:	2a01      	cmp	r2, #1
 8003842:	d000      	beq.n	8003846 <HAL_RCC_OscConfig+0x3a>
 8003844:	e148      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003846:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003848:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800384a:	430b      	orrs	r3, r1
 800384c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800384e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003850:	431a      	orrs	r2, r3
 8003852:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003854:	f7ff fd5c 	bl	8003310 <HAL_GetTick>
 8003858:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800385a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800385c:	423b      	tst	r3, r7
 800385e:	d100      	bne.n	8003862 <HAL_RCC_OscConfig+0x56>
 8003860:	e133      	b.n	8003aca <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003862:	21f8      	movs	r1, #248	@ 0xf8
 8003864:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003866:	69a3      	ldr	r3, [r4, #24]
 8003868:	438a      	bics	r2, r1
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4313      	orrs	r3, r2
 800386e:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	6a23      	ldr	r3, [r4, #32]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d000      	beq.n	8003878 <HAL_RCC_OscConfig+0x6c>
 8003876:	e157      	b.n	8003b28 <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8003878:	2000      	movs	r0, #0
 800387a:	e02a      	b.n	80038d2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800387c:	220c      	movs	r2, #12
 800387e:	4da4      	ldr	r5, [pc, #656]	@ (8003b10 <HAL_RCC_OscConfig+0x304>)
 8003880:	686b      	ldr	r3, [r5, #4]
 8003882:	4013      	ands	r3, r2
 8003884:	2b04      	cmp	r3, #4
 8003886:	d006      	beq.n	8003896 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003888:	686b      	ldr	r3, [r5, #4]
 800388a:	4013      	ands	r3, r2
 800388c:	2b08      	cmp	r3, #8
 800388e:	d10a      	bne.n	80038a6 <HAL_RCC_OscConfig+0x9a>
 8003890:	686b      	ldr	r3, [r5, #4]
 8003892:	03db      	lsls	r3, r3, #15
 8003894:	d507      	bpl.n	80038a6 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	039b      	lsls	r3, r3, #14
 800389a:	d5bf      	bpl.n	800381c <HAL_RCC_OscConfig+0x10>
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1bc      	bne.n	800381c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80038a2:	2001      	movs	r0, #1
 80038a4:	e015      	b.n	80038d2 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d114      	bne.n	80038d6 <HAL_RCC_OscConfig+0xca>
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	682a      	ldr	r2, [r5, #0]
 80038b0:	025b      	lsls	r3, r3, #9
 80038b2:	4313      	orrs	r3, r2
 80038b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038b6:	f7ff fd2b 	bl	8003310 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80038bc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	02bf      	lsls	r7, r7, #10
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	423b      	tst	r3, r7
 80038c4:	d1aa      	bne.n	800381c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c6:	f7ff fd23 	bl	8003310 <HAL_GetTick>
 80038ca:	1b80      	subs	r0, r0, r6
 80038cc:	2864      	cmp	r0, #100	@ 0x64
 80038ce:	d9f7      	bls.n	80038c0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 80038d0:	2003      	movs	r0, #3
}
 80038d2:	b005      	add	sp, #20
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0xfc>
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	4a8d      	ldr	r2, [pc, #564]	@ (8003b14 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e0:	4013      	ands	r3, r2
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	4a8c      	ldr	r2, [pc, #560]	@ (8003b18 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	4013      	ands	r3, r2
 80038ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038ee:	f7ff fd0f 	bl	8003310 <HAL_GetTick>
 80038f2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	423b      	tst	r3, r7
 80038f8:	d100      	bne.n	80038fc <HAL_RCC_OscConfig+0xf0>
 80038fa:	e78f      	b.n	800381c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7ff fd08 	bl	8003310 <HAL_GetTick>
 8003900:	1b80      	subs	r0, r0, r6
 8003902:	2864      	cmp	r0, #100	@ 0x64
 8003904:	d9f6      	bls.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003906:	e7e3      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	2b05      	cmp	r3, #5
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x10c>
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	682a      	ldr	r2, [r5, #0]
 8003910:	02db      	lsls	r3, r3, #11
 8003912:	4313      	orrs	r3, r2
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7c9      	b.n	80038ac <HAL_RCC_OscConfig+0xa0>
 8003918:	682b      	ldr	r3, [r5, #0]
 800391a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b14 <HAL_RCC_OscConfig+0x308>)
 800391c:	4013      	ands	r3, r2
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	4a7d      	ldr	r2, [pc, #500]	@ (8003b18 <HAL_RCC_OscConfig+0x30c>)
 8003924:	4013      	ands	r3, r2
 8003926:	e7c5      	b.n	80038b4 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003928:	220c      	movs	r2, #12
 800392a:	4d79      	ldr	r5, [pc, #484]	@ (8003b10 <HAL_RCC_OscConfig+0x304>)
 800392c:	686b      	ldr	r3, [r5, #4]
 800392e:	4213      	tst	r3, r2
 8003930:	d006      	beq.n	8003940 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003932:	686b      	ldr	r3, [r5, #4]
 8003934:	4013      	ands	r3, r2
 8003936:	2b08      	cmp	r3, #8
 8003938:	d110      	bne.n	800395c <HAL_RCC_OscConfig+0x150>
 800393a:	686b      	ldr	r3, [r5, #4]
 800393c:	03db      	lsls	r3, r3, #15
 800393e:	d40d      	bmi.n	800395c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	079b      	lsls	r3, r3, #30
 8003944:	d502      	bpl.n	800394c <HAL_RCC_OscConfig+0x140>
 8003946:	68e3      	ldr	r3, [r4, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d1aa      	bne.n	80038a2 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	21f8      	movs	r1, #248	@ 0xf8
 800394e:	682a      	ldr	r2, [r5, #0]
 8003950:	6923      	ldr	r3, [r4, #16]
 8003952:	438a      	bics	r2, r1
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4313      	orrs	r3, r2
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	e763      	b.n	8003824 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800395c:	68e2      	ldr	r2, [r4, #12]
 800395e:	2301      	movs	r3, #1
 8003960:	2a00      	cmp	r2, #0
 8003962:	d00f      	beq.n	8003984 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8003964:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003968:	4313      	orrs	r3, r2
 800396a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800396c:	f7ff fcd0 	bl	8003310 <HAL_GetTick>
 8003970:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	423b      	tst	r3, r7
 8003976:	d1e9      	bne.n	800394c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7ff fcca 	bl	8003310 <HAL_GetTick>
 800397c:	1b80      	subs	r0, r0, r6
 800397e:	2802      	cmp	r0, #2
 8003980:	d9f7      	bls.n	8003972 <HAL_RCC_OscConfig+0x166>
 8003982:	e7a5      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8003984:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003988:	439a      	bics	r2, r3
 800398a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800398c:	f7ff fcc0 	bl	8003310 <HAL_GetTick>
 8003990:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	423b      	tst	r3, r7
 8003996:	d100      	bne.n	800399a <HAL_RCC_OscConfig+0x18e>
 8003998:	e744      	b.n	8003824 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800399a:	f7ff fcb9 	bl	8003310 <HAL_GetTick>
 800399e:	1b80      	subs	r0, r0, r6
 80039a0:	2802      	cmp	r0, #2
 80039a2:	d9f6      	bls.n	8003992 <HAL_RCC_OscConfig+0x186>
 80039a4:	e794      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a6:	69e2      	ldr	r2, [r4, #28]
 80039a8:	2301      	movs	r3, #1
 80039aa:	4d59      	ldr	r5, [pc, #356]	@ (8003b10 <HAL_RCC_OscConfig+0x304>)
 80039ac:	2a00      	cmp	r2, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80039b0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80039b4:	4313      	orrs	r3, r2
 80039b6:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80039b8:	f7ff fcaa 	bl	8003310 <HAL_GetTick>
 80039bc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80039c0:	423b      	tst	r3, r7
 80039c2:	d000      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1ba>
 80039c4:	e732      	b.n	800382c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c6:	f7ff fca3 	bl	8003310 <HAL_GetTick>
 80039ca:	1b80      	subs	r0, r0, r6
 80039cc:	2802      	cmp	r0, #2
 80039ce:	d9f6      	bls.n	80039be <HAL_RCC_OscConfig+0x1b2>
 80039d0:	e77e      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 80039d2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80039d6:	439a      	bics	r2, r3
 80039d8:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80039da:	f7ff fc99 	bl	8003310 <HAL_GetTick>
 80039de:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80039e2:	423b      	tst	r3, r7
 80039e4:	d100      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1dc>
 80039e6:	e721      	b.n	800382c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e8:	f7ff fc92 	bl	8003310 <HAL_GetTick>
 80039ec:	1b80      	subs	r0, r0, r6
 80039ee:	2802      	cmp	r0, #2
 80039f0:	d9f6      	bls.n	80039e0 <HAL_RCC_OscConfig+0x1d4>
 80039f2:	e76d      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f8:	4d45      	ldr	r5, [pc, #276]	@ (8003b10 <HAL_RCC_OscConfig+0x304>)
 80039fa:	0552      	lsls	r2, r2, #21
 80039fc:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80039fe:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4213      	tst	r3, r2
 8003a02:	d108      	bne.n	8003a16 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a04:	69eb      	ldr	r3, [r5, #28]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61eb      	str	r3, [r5, #28]
 8003a0a:	69eb      	ldr	r3, [r5, #28]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	2780      	movs	r7, #128	@ 0x80
 8003a18:	4e40      	ldr	r6, [pc, #256]	@ (8003b1c <HAL_RCC_OscConfig+0x310>)
 8003a1a:	007f      	lsls	r7, r7, #1
 8003a1c:	6833      	ldr	r3, [r6, #0]
 8003a1e:	423b      	tst	r3, r7
 8003a20:	d015      	beq.n	8003a4e <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d122      	bne.n	8003a6e <HAL_RCC_OscConfig+0x262>
 8003a28:	6a2a      	ldr	r2, [r5, #32]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003a2e:	f7ff fc6f 	bl	8003310 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003a34:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	6a2b      	ldr	r3, [r5, #32]
 8003a38:	423b      	tst	r3, r7
 8003a3a:	d03f      	beq.n	8003abc <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8003a3c:	9b00      	ldr	r3, [sp, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d000      	beq.n	8003a44 <HAL_RCC_OscConfig+0x238>
 8003a42:	e6f7      	b.n	8003834 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a44:	69eb      	ldr	r3, [r5, #28]
 8003a46:	4a36      	ldr	r2, [pc, #216]	@ (8003b20 <HAL_RCC_OscConfig+0x314>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61eb      	str	r3, [r5, #28]
 8003a4c:	e6f2      	b.n	8003834 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	6833      	ldr	r3, [r6, #0]
 8003a50:	433b      	orrs	r3, r7
 8003a52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003a54:	f7ff fc5c 	bl	8003310 <HAL_GetTick>
 8003a58:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	6833      	ldr	r3, [r6, #0]
 8003a5c:	423b      	tst	r3, r7
 8003a5e:	d1e0      	bne.n	8003a22 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7ff fc56 	bl	8003310 <HAL_GetTick>
 8003a64:	9b01      	ldr	r3, [sp, #4]
 8003a66:	1ac0      	subs	r0, r0, r3
 8003a68:	2864      	cmp	r0, #100	@ 0x64
 8003a6a:	d9f6      	bls.n	8003a5a <HAL_RCC_OscConfig+0x24e>
 8003a6c:	e730      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d114      	bne.n	8003a9e <HAL_RCC_OscConfig+0x292>
 8003a74:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	4393      	bics	r3, r2
 8003a7a:	622b      	str	r3, [r5, #32]
 8003a7c:	6a2b      	ldr	r3, [r5, #32]
 8003a7e:	3203      	adds	r2, #3
 8003a80:	4393      	bics	r3, r2
 8003a82:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003a84:	f7ff fc44 	bl	8003310 <HAL_GetTick>
 8003a88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	6a2b      	ldr	r3, [r5, #32]
 8003a8c:	423b      	tst	r3, r7
 8003a8e:	d0d5      	beq.n	8003a3c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a90:	f7ff fc3e 	bl	8003310 <HAL_GetTick>
 8003a94:	4b23      	ldr	r3, [pc, #140]	@ (8003b24 <HAL_RCC_OscConfig+0x318>)
 8003a96:	1b80      	subs	r0, r0, r6
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	d9f6      	bls.n	8003a8a <HAL_RCC_OscConfig+0x27e>
 8003a9c:	e718      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d105      	bne.n	8003aae <HAL_RCC_OscConfig+0x2a2>
 8003aa2:	6a29      	ldr	r1, [r5, #32]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	622b      	str	r3, [r5, #32]
 8003aaa:	6a2b      	ldr	r3, [r5, #32]
 8003aac:	e7bd      	b.n	8003a2a <HAL_RCC_OscConfig+0x21e>
 8003aae:	6a2b      	ldr	r3, [r5, #32]
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	622b      	str	r3, [r5, #32]
 8003ab6:	6a2b      	ldr	r3, [r5, #32]
 8003ab8:	4393      	bics	r3, r2
 8003aba:	e7b7      	b.n	8003a2c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7ff fc28 	bl	8003310 <HAL_GetTick>
 8003ac0:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <HAL_RCC_OscConfig+0x318>)
 8003ac2:	1b80      	subs	r0, r0, r6
 8003ac4:	4298      	cmp	r0, r3
 8003ac6:	d9b6      	bls.n	8003a36 <HAL_RCC_OscConfig+0x22a>
 8003ac8:	e702      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003aca:	f7ff fc21 	bl	8003310 <HAL_GetTick>
 8003ace:	1b80      	subs	r0, r0, r6
 8003ad0:	2802      	cmp	r0, #2
 8003ad2:	d800      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2ca>
 8003ad4:	e6c1      	b.n	800385a <HAL_RCC_OscConfig+0x4e>
 8003ad6:	e6fb      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ad8:	3205      	adds	r2, #5
 8003ada:	d103      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003adc:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003ade:	439a      	bics	r2, r3
 8003ae0:	636a      	str	r2, [r5, #52]	@ 0x34
 8003ae2:	e6be      	b.n	8003862 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ae4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ae6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ae8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003aea:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003aec:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003aee:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003af0:	4393      	bics	r3, r2
 8003af2:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003af4:	f7ff fc0c 	bl	8003310 <HAL_GetTick>
 8003af8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003afa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003afc:	423b      	tst	r3, r7
 8003afe:	d100      	bne.n	8003b02 <HAL_RCC_OscConfig+0x2f6>
 8003b00:	e6b6      	b.n	8003870 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b02:	f7ff fc05 	bl	8003310 <HAL_GetTick>
 8003b06:	1b80      	subs	r0, r0, r6
 8003b08:	2802      	cmp	r0, #2
 8003b0a:	d9f6      	bls.n	8003afa <HAL_RCC_OscConfig+0x2ee>
 8003b0c:	e6e0      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	40021000 	.word	0x40021000
 8003b14:	fffeffff 	.word	0xfffeffff
 8003b18:	fffbffff 	.word	0xfffbffff
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	efffffff 	.word	0xefffffff
 8003b24:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b28:	210c      	movs	r1, #12
 8003b2a:	4d34      	ldr	r5, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x3f0>)
 8003b2c:	686a      	ldr	r2, [r5, #4]
 8003b2e:	400a      	ands	r2, r1
 8003b30:	2a08      	cmp	r2, #8
 8003b32:	d047      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b34:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <HAL_RCC_OscConfig+0x3f4>)
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d132      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4013      	ands	r3, r2
 8003b40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b42:	f7ff fbe5 	bl	8003310 <HAL_GetTick>
 8003b46:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b48:	04bf      	lsls	r7, r7, #18
 8003b4a:	682b      	ldr	r3, [r5, #0]
 8003b4c:	423b      	tst	r3, r7
 8003b4e:	d121      	bne.n	8003b94 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b50:	220f      	movs	r2, #15
 8003b52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b54:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b56:	4393      	bics	r3, r2
 8003b58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b5a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003b60:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003b62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b64:	686a      	ldr	r2, [r5, #4]
 8003b66:	430b      	orrs	r3, r1
 8003b68:	4926      	ldr	r1, [pc, #152]	@ (8003c04 <HAL_RCC_OscConfig+0x3f8>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	682a      	ldr	r2, [r5, #0]
 8003b74:	045b      	lsls	r3, r3, #17
 8003b76:	4313      	orrs	r3, r2
 8003b78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b7a:	f7ff fbc9 	bl	8003310 <HAL_GetTick>
 8003b7e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	4233      	tst	r3, r6
 8003b84:	d000      	beq.n	8003b88 <HAL_RCC_OscConfig+0x37c>
 8003b86:	e677      	b.n	8003878 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7ff fbc2 	bl	8003310 <HAL_GetTick>
 8003b8c:	1b00      	subs	r0, r0, r4
 8003b8e:	2802      	cmp	r0, #2
 8003b90:	d9f6      	bls.n	8003b80 <HAL_RCC_OscConfig+0x374>
 8003b92:	e69d      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7ff fbbc 	bl	8003310 <HAL_GetTick>
 8003b98:	1b80      	subs	r0, r0, r6
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9d5      	bls.n	8003b4a <HAL_RCC_OscConfig+0x33e>
 8003b9e:	e697      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8003ba0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ba8:	f7ff fbb2 	bl	8003310 <HAL_GetTick>
 8003bac:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	04b6      	lsls	r6, r6, #18
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	4233      	tst	r3, r6
 8003bb4:	d100      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x3ac>
 8003bb6:	e65f      	b.n	8003878 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7ff fbaa 	bl	8003310 <HAL_GetTick>
 8003bbc:	1b00      	subs	r0, r0, r4
 8003bbe:	2802      	cmp	r0, #2
 8003bc0:	d9f6      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x3a4>
 8003bc2:	e685      	b.n	80038d0 <HAL_RCC_OscConfig+0xc4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d100      	bne.n	8003bca <HAL_RCC_OscConfig+0x3be>
 8003bc8:	e66b      	b.n	80038a2 <HAL_RCC_OscConfig+0x96>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8003bcc:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003bd0:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8003bd2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd4:	4002      	ands	r2, r0
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	d000      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3d0>
 8003bda:	e662      	b.n	80038a2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bdc:	220f      	movs	r2, #15
 8003bde:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d000      	beq.n	8003be8 <HAL_RCC_OscConfig+0x3dc>
 8003be6:	e65c      	b.n	80038a2 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003be8:	23f0      	movs	r3, #240	@ 0xf0
 8003bea:	039b      	lsls	r3, r3, #14
 8003bec:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003bf0:	1ac0      	subs	r0, r0, r3
 8003bf2:	1e43      	subs	r3, r0, #1
 8003bf4:	4198      	sbcs	r0, r3
 8003bf6:	b2c0      	uxtb	r0, r0
 8003bf8:	e66b      	b.n	80038d2 <HAL_RCC_OscConfig+0xc6>
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	feffffff 	.word	0xfeffffff
 8003c04:	ffc2ffff 	.word	0xffc2ffff

08003c08 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	4a03      	ldr	r2, [pc, #12]	@ (8003c18 <HAL_RCC_EnableCSS+0x10>)
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	6811      	ldr	r1, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	4770      	bx	lr
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	220c      	movs	r2, #12
{
 8003c1e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003c20:	4d0c      	ldr	r5, [pc, #48]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x38>)
 8003c22:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c24:	401a      	ands	r2, r3
 8003c26:	2a08      	cmp	r2, #8
 8003c28:	d111      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c2a:	200f      	movs	r0, #15
 8003c2c:	490a      	ldr	r1, [pc, #40]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c2e:	0c9a      	lsrs	r2, r3, #18
 8003c30:	4002      	ands	r2, r0
 8003c32:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c34:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c36:	03db      	lsls	r3, r3, #15
 8003c38:	d507      	bpl.n	8003c4a <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c3a:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x40>)
 8003c3c:	4002      	ands	r2, r0
 8003c3e:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c40:	4807      	ldr	r0, [pc, #28]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x44>)
 8003c42:	f7fc fa51 	bl	80000e8 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c46:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c4a:	4806      	ldr	r0, [pc, #24]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x48>)
 8003c4c:	e7fb      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8003c4e:	4804      	ldr	r0, [pc, #16]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8003c50:	e7fa      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x2c>
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	40021000 	.word	0x40021000
 8003c58:	0800506b 	.word	0x0800506b
 8003c5c:	0800505b 	.word	0x0800505b
 8003c60:	007a1200 	.word	0x007a1200
 8003c64:	003d0900 	.word	0x003d0900

08003c68 <HAL_RCC_ClockConfig>:
{
 8003c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c6a:	0004      	movs	r4, r0
 8003c6c:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003c72:	2001      	movs	r0, #1
}
 8003c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c76:	2201      	movs	r2, #1
 8003c78:	4d37      	ldr	r5, [pc, #220]	@ (8003d58 <HAL_RCC_ClockConfig+0xf0>)
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	d31c      	bcc.n	8003cbc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	0793      	lsls	r3, r2, #30
 8003c86:	d422      	bmi.n	8003cce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c88:	07d2      	lsls	r2, r2, #31
 8003c8a:	d42f      	bmi.n	8003cec <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	682a      	ldr	r2, [r5, #0]
 8003c90:	401a      	ands	r2, r3
 8003c92:	42b2      	cmp	r2, r6
 8003c94:	d851      	bhi.n	8003d3a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	4d30      	ldr	r5, [pc, #192]	@ (8003d5c <HAL_RCC_ClockConfig+0xf4>)
 8003c9a:	075b      	lsls	r3, r3, #29
 8003c9c:	d454      	bmi.n	8003d48 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c9e:	f7ff ffbd 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003ca2:	686b      	ldr	r3, [r5, #4]
 8003ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d60 <HAL_RCC_ClockConfig+0xf8>)
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	0f1b      	lsrs	r3, r3, #28
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	492d      	ldr	r1, [pc, #180]	@ (8003d64 <HAL_RCC_ClockConfig+0xfc>)
 8003cae:	40d8      	lsrs	r0, r3
 8003cb0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cb2:	2002      	movs	r0, #2
 8003cb4:	f7ff faec 	bl	8003290 <HAL_InitTick>
  return HAL_OK;
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e7db      	b.n	8003c74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	4393      	bics	r3, r2
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	d1d2      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xa>
 8003ccc:	e7d9      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	4923      	ldr	r1, [pc, #140]	@ (8003d5c <HAL_RCC_ClockConfig+0xf4>)
 8003cd0:	0753      	lsls	r3, r2, #29
 8003cd2:	d504      	bpl.n	8003cde <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cd4:	23e0      	movs	r3, #224	@ 0xe0
 8003cd6:	6848      	ldr	r0, [r1, #4]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4303      	orrs	r3, r0
 8003cdc:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cde:	20f0      	movs	r0, #240	@ 0xf0
 8003ce0:	684b      	ldr	r3, [r1, #4]
 8003ce2:	4383      	bics	r3, r0
 8003ce4:	68a0      	ldr	r0, [r4, #8]
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	604b      	str	r3, [r1, #4]
 8003cea:	e7cd      	b.n	8003c88 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cec:	4f1b      	ldr	r7, [pc, #108]	@ (8003d5c <HAL_RCC_ClockConfig+0xf4>)
 8003cee:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf0:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	d119      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	039b      	lsls	r3, r3, #14
 8003cf8:	d5bb      	bpl.n	8003c72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	438b      	bics	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8003d04:	f7ff fb04 	bl	8003310 <HAL_GetTick>
 8003d08:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	401a      	ands	r2, r3
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0b9      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7ff fafa 	bl	8003310 <HAL_GetTick>
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	1ac0      	subs	r0, r0, r3
 8003d20:	4b11      	ldr	r3, [pc, #68]	@ (8003d68 <HAL_RCC_ClockConfig+0x100>)
 8003d22:	4298      	cmp	r0, r3
 8003d24:	d9f1      	bls.n	8003d0a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8003d26:	2003      	movs	r0, #3
 8003d28:	e7a4      	b.n	8003c74 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2a:	2a02      	cmp	r2, #2
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	019b      	lsls	r3, r3, #6
 8003d30:	d4e3      	bmi.n	8003cfa <HAL_RCC_ClockConfig+0x92>
 8003d32:	e79e      	b.n	8003c72 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	079b      	lsls	r3, r3, #30
 8003d36:	d4e0      	bmi.n	8003cfa <HAL_RCC_ClockConfig+0x92>
 8003d38:	e79b      	b.n	8003c72 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	682a      	ldr	r2, [r5, #0]
 8003d3c:	439a      	bics	r2, r3
 8003d3e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d40:	682a      	ldr	r2, [r5, #0]
 8003d42:	421a      	tst	r2, r3
 8003d44:	d0a7      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x2e>
 8003d46:	e794      	b.n	8003c72 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	686b      	ldr	r3, [r5, #4]
 8003d4a:	4a08      	ldr	r2, [pc, #32]	@ (8003d6c <HAL_RCC_ClockConfig+0x104>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68e2      	ldr	r2, [r4, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	606b      	str	r3, [r5, #4]
 8003d54:	e7a3      	b.n	8003c9e <HAL_RCC_ClockConfig+0x36>
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	0800504b 	.word	0x0800504b
 8003d64:	200003b8 	.word	0x200003b8
 8003d68:	00001388 	.word	0x00001388
 8003d6c:	fffff8ff 	.word	0xfffff8ff

08003d70 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d70:	4b01      	ldr	r3, [pc, #4]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
}
 8003d74:	4770      	bx	lr
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	200003b8 	.word	0x200003b8

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7e:	6803      	ldr	r3, [r0, #0]
{
 8003d80:	0005      	movs	r5, r0
 8003d82:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d84:	03db      	lsls	r3, r3, #15
 8003d86:	d52b      	bpl.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d88:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8c:	4c38      	ldr	r4, [pc, #224]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003d8e:	0552      	lsls	r2, r2, #21
 8003d90:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d94:	4213      	tst	r3, r2
 8003d96:	d108      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	69e3      	ldr	r3, [r4, #28]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61e3      	str	r3, [r4, #28]
 8003d9e:	69e3      	ldr	r3, [r4, #28]
 8003da0:	4013      	ands	r3, r2
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	2780      	movs	r7, #128	@ 0x80
 8003dac:	4e31      	ldr	r6, [pc, #196]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003dae:	007f      	lsls	r7, r7, #1
 8003db0:	6833      	ldr	r3, [r6, #0]
 8003db2:	423b      	tst	r3, r7
 8003db4:	d022      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db6:	6a21      	ldr	r1, [r4, #32]
 8003db8:	22c0      	movs	r2, #192	@ 0xc0
 8003dba:	0008      	movs	r0, r1
 8003dbc:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dbe:	686b      	ldr	r3, [r5, #4]
 8003dc0:	4e2d      	ldr	r6, [pc, #180]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc2:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc4:	4211      	tst	r1, r2
 8003dc6:	d12b      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc8:	6a23      	ldr	r3, [r4, #32]
 8003dca:	686a      	ldr	r2, [r5, #4]
 8003dcc:	4033      	ands	r3, r6
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dd2:	9b00      	ldr	r3, [sp, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d103      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	69e3      	ldr	r3, [r4, #28]
 8003dda:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de0:	682a      	ldr	r2, [r5, #0]
 8003de2:	07d3      	lsls	r3, r2, #31
 8003de4:	d506      	bpl.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de6:	2003      	movs	r0, #3
 8003de8:	4921      	ldr	r1, [pc, #132]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003dea:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003dec:	4383      	bics	r3, r0
 8003dee:	68a8      	ldr	r0, [r5, #8]
 8003df0:	4303      	orrs	r3, r0
 8003df2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df4:	0692      	lsls	r2, r2, #26
 8003df6:	d433      	bmi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e00f      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfc:	6833      	ldr	r3, [r6, #0]
 8003dfe:	433b      	orrs	r3, r7
 8003e00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e02:	f7ff fa85 	bl	8003310 <HAL_GetTick>
 8003e06:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	6833      	ldr	r3, [r6, #0]
 8003e0a:	423b      	tst	r3, r7
 8003e0c:	d1d3      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7ff fa7f 	bl	8003310 <HAL_GetTick>
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	1ac0      	subs	r0, r0, r3
 8003e16:	2864      	cmp	r0, #100	@ 0x64
 8003e18:	d9f6      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
}
 8003e1c:	b005      	add	sp, #20
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e20:	4013      	ands	r3, r2
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d0d0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e26:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e28:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2a:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e2c:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2e:	0252      	lsls	r2, r2, #9
 8003e30:	4302      	orrs	r2, r0
 8003e32:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	6a22      	ldr	r2, [r4, #32]
 8003e36:	4812      	ldr	r0, [pc, #72]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e38:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3a:	4002      	ands	r2, r0
 8003e3c:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8003e3e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e40:	07db      	lsls	r3, r3, #31
 8003e42:	d5c1      	bpl.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8003e44:	f7ff fa64 	bl	8003310 <HAL_GetTick>
 8003e48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	6a23      	ldr	r3, [r4, #32]
 8003e4e:	4213      	tst	r3, r2
 8003e50:	d1ba      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7ff fa5d 	bl	8003310 <HAL_GetTick>
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003e58:	1bc0      	subs	r0, r0, r7
 8003e5a:	4298      	cmp	r0, r3
 8003e5c:	d9f5      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003e5e:	e7dc      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e60:	2110      	movs	r1, #16
 8003e62:	4a03      	ldr	r2, [pc, #12]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003e64:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003e66:	438b      	bics	r3, r1
 8003e68:	68e9      	ldr	r1, [r5, #12]
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	e7c3      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40007000 	.word	0x40007000
 8003e78:	fffffcff 	.word	0xfffffcff
 8003e7c:	efffffff 	.word	0xefffffff
 8003e80:	fffeffff 	.word	0xfffeffff
 8003e84:	00001388 	.word	0x00001388

08003e88 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e88:	2201      	movs	r2, #1
 8003e8a:	6a03      	ldr	r3, [r0, #32]
{
 8003e8c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	4393      	bics	r3, r2
 8003e90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e96:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e98:	3272      	adds	r2, #114	@ 0x72
 8003e9a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	680a      	ldr	r2, [r1, #0]
 8003e9e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ea4:	688a      	ldr	r2, [r1, #8]
 8003ea6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea8:	4a11      	ldr	r2, [pc, #68]	@ (8003ef0 <TIM_OC1_SetConfig+0x68>)
 8003eaa:	4290      	cmp	r0, r2
 8003eac:	d005      	beq.n	8003eba <TIM_OC1_SetConfig+0x32>
 8003eae:	4e11      	ldr	r6, [pc, #68]	@ (8003ef4 <TIM_OC1_SetConfig+0x6c>)
 8003eb0:	42b0      	cmp	r0, r6
 8003eb2:	d002      	beq.n	8003eba <TIM_OC1_SetConfig+0x32>
 8003eb4:	4e10      	ldr	r6, [pc, #64]	@ (8003ef8 <TIM_OC1_SetConfig+0x70>)
 8003eb6:	42b0      	cmp	r0, r6
 8003eb8:	d113      	bne.n	8003ee2 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eba:	2608      	movs	r6, #8
 8003ebc:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ebe:	68ce      	ldr	r6, [r1, #12]
 8003ec0:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec2:	2604      	movs	r6, #4
 8003ec4:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	4290      	cmp	r0, r2
 8003ec8:	d005      	beq.n	8003ed6 <TIM_OC1_SetConfig+0x4e>
 8003eca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef4 <TIM_OC1_SetConfig+0x6c>)
 8003ecc:	4290      	cmp	r0, r2
 8003ece:	d002      	beq.n	8003ed6 <TIM_OC1_SetConfig+0x4e>
 8003ed0:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <TIM_OC1_SetConfig+0x70>)
 8003ed2:	4290      	cmp	r0, r2
 8003ed4:	d105      	bne.n	8003ee2 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed6:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eda:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	694c      	ldr	r4, [r1, #20]
 8003ede:	4334      	orrs	r4, r6
 8003ee0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ee4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ee6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	6203      	str	r3, [r0, #32]
}
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800
 8003efc:	fffffcff 	.word	0xfffffcff

08003f00 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f00:	6a03      	ldr	r3, [r0, #32]
 8003f02:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <TIM_OC3_SetConfig+0x60>)
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f06:	4013      	ands	r3, r2
 8003f08:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f0a:	2373      	movs	r3, #115	@ 0x73
  tmpccer = TIMx->CCER;
 8003f0c:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f0e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f10:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f12:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f18:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <TIM_OC3_SetConfig+0x64>)
 8003f1a:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1c:	688b      	ldr	r3, [r1, #8]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f22:	4d11      	ldr	r5, [pc, #68]	@ (8003f68 <TIM_OC3_SetConfig+0x68>)
 8003f24:	42a8      	cmp	r0, r5
 8003f26:	d10e      	bne.n	8003f46 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f28:	4d10      	ldr	r5, [pc, #64]	@ (8003f6c <TIM_OC3_SetConfig+0x6c>)
 8003f2a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f2c:	68cb      	ldr	r3, [r1, #12]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f32:	4d0f      	ldr	r5, [pc, #60]	@ (8003f70 <TIM_OC3_SetConfig+0x70>)
 8003f34:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f36:	4d0f      	ldr	r5, [pc, #60]	@ (8003f74 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f38:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3a:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3c:	698a      	ldr	r2, [r1, #24]
 8003f3e:	4332      	orrs	r2, r6
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	432a      	orrs	r2, r5
 8003f44:	e005      	b.n	8003f52 <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	4d0c      	ldr	r5, [pc, #48]	@ (8003f78 <TIM_OC3_SetConfig+0x78>)
 8003f48:	42a8      	cmp	r0, r5
 8003f4a:	d0f4      	beq.n	8003f36 <TIM_OC3_SetConfig+0x36>
 8003f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f7c <TIM_OC3_SetConfig+0x7c>)
 8003f4e:	42a8      	cmp	r0, r5
 8003f50:	d0f1      	beq.n	8003f36 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f54:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f56:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003f58:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5a:	6203      	str	r3, [r0, #32]
}
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	fffffeff 	.word	0xfffffeff
 8003f64:	fffffdff 	.word	0xfffffdff
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	fffff7ff 	.word	0xfffff7ff
 8003f70:	fffffbff 	.word	0xfffffbff
 8003f74:	ffffcfff 	.word	0xffffcfff
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <TIM_OC4_SetConfig+0x4c>)
{
 8003f84:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	4013      	ands	r3, r2
 8003f88:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f8c:	4d10      	ldr	r5, [pc, #64]	@ (8003fd0 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8003f8e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f90:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f92:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	680d      	ldr	r5, [r1, #0]
 8003f96:	022d      	lsls	r5, r5, #8
 8003f98:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <TIM_OC4_SetConfig+0x54>)
 8003f9c:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f9e:	688a      	ldr	r2, [r1, #8]
 8003fa0:	0312      	lsls	r2, r2, #12
 8003fa2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd8 <TIM_OC4_SetConfig+0x58>)
 8003fa6:	42a0      	cmp	r0, r4
 8003fa8:	d005      	beq.n	8003fb6 <TIM_OC4_SetConfig+0x36>
 8003faa:	4c0c      	ldr	r4, [pc, #48]	@ (8003fdc <TIM_OC4_SetConfig+0x5c>)
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d002      	beq.n	8003fb6 <TIM_OC4_SetConfig+0x36>
 8003fb0:	4c0b      	ldr	r4, [pc, #44]	@ (8003fe0 <TIM_OC4_SetConfig+0x60>)
 8003fb2:	42a0      	cmp	r0, r4
 8003fb4:	d104      	bne.n	8003fc0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb6:	4c0b      	ldr	r4, [pc, #44]	@ (8003fe4 <TIM_OC4_SetConfig+0x64>)
 8003fb8:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fba:	694b      	ldr	r3, [r1, #20]
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc6:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	6202      	str	r2, [r0, #32]
}
 8003fca:	bd30      	pop	{r4, r5, pc}
 8003fcc:	ffffefff 	.word	0xffffefff
 8003fd0:	ffff8cff 	.word	0xffff8cff
 8003fd4:	ffffdfff 	.word	0xffffdfff
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	40014800 	.word	0x40014800
 8003fe4:	ffffbfff 	.word	0xffffbfff

08003fe8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <TIM_Base_SetConfig+0x78>)
{
 8003fea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8003fec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fee:	4290      	cmp	r0, r2
 8003ff0:	d006      	beq.n	8004000 <TIM_Base_SetConfig+0x18>
 8003ff2:	2480      	movs	r4, #128	@ 0x80
 8003ff4:	05e4      	lsls	r4, r4, #23
 8003ff6:	42a0      	cmp	r0, r4
 8003ff8:	d002      	beq.n	8004000 <TIM_Base_SetConfig+0x18>
 8003ffa:	4c1a      	ldr	r4, [pc, #104]	@ (8004064 <TIM_Base_SetConfig+0x7c>)
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d10c      	bne.n	800401a <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	2470      	movs	r4, #112	@ 0x70
 8004002:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004004:	684c      	ldr	r4, [r1, #4]
 8004006:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004008:	4290      	cmp	r0, r2
 800400a:	d00f      	beq.n	800402c <TIM_Base_SetConfig+0x44>
 800400c:	2480      	movs	r4, #128	@ 0x80
 800400e:	05e4      	lsls	r4, r4, #23
 8004010:	42a0      	cmp	r0, r4
 8004012:	d00b      	beq.n	800402c <TIM_Base_SetConfig+0x44>
 8004014:	4c13      	ldr	r4, [pc, #76]	@ (8004064 <TIM_Base_SetConfig+0x7c>)
 8004016:	42a0      	cmp	r0, r4
 8004018:	d008      	beq.n	800402c <TIM_Base_SetConfig+0x44>
 800401a:	4c13      	ldr	r4, [pc, #76]	@ (8004068 <TIM_Base_SetConfig+0x80>)
 800401c:	42a0      	cmp	r0, r4
 800401e:	d005      	beq.n	800402c <TIM_Base_SetConfig+0x44>
 8004020:	4c12      	ldr	r4, [pc, #72]	@ (800406c <TIM_Base_SetConfig+0x84>)
 8004022:	42a0      	cmp	r0, r4
 8004024:	d002      	beq.n	800402c <TIM_Base_SetConfig+0x44>
 8004026:	4c12      	ldr	r4, [pc, #72]	@ (8004070 <TIM_Base_SetConfig+0x88>)
 8004028:	42a0      	cmp	r0, r4
 800402a:	d103      	bne.n	8004034 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800402c:	4c11      	ldr	r4, [pc, #68]	@ (8004074 <TIM_Base_SetConfig+0x8c>)
 800402e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004030:	68cb      	ldr	r3, [r1, #12]
 8004032:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004034:	2480      	movs	r4, #128	@ 0x80
 8004036:	43a3      	bics	r3, r4
 8004038:	694c      	ldr	r4, [r1, #20]
 800403a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800403c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800403e:	688b      	ldr	r3, [r1, #8]
 8004040:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004042:	680b      	ldr	r3, [r1, #0]
 8004044:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004046:	4290      	cmp	r0, r2
 8004048:	d005      	beq.n	8004056 <TIM_Base_SetConfig+0x6e>
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <TIM_Base_SetConfig+0x84>)
 800404c:	4298      	cmp	r0, r3
 800404e:	d002      	beq.n	8004056 <TIM_Base_SetConfig+0x6e>
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <TIM_Base_SetConfig+0x88>)
 8004052:	4298      	cmp	r0, r3
 8004054:	d101      	bne.n	800405a <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8004056:	690b      	ldr	r3, [r1, #16]
 8004058:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800405a:	2301      	movs	r3, #1
 800405c:	6143      	str	r3, [r0, #20]
}
 800405e:	bd10      	pop	{r4, pc}
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40002000 	.word	0x40002000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	fffffcff 	.word	0xfffffcff

08004078 <HAL_TIM_PWM_Init>:
{
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
  if (htim == NULL)
 800407e:	2c00      	cmp	r4, #0
 8004080:	d021      	beq.n	80040c6 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	0025      	movs	r5, r4
 8004084:	353d      	adds	r5, #61	@ 0x3d
 8004086:	782b      	ldrb	r3, [r5, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800408e:	0023      	movs	r3, r4
 8004090:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004092:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004094:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004096:	f7fe fea1 	bl	8002ddc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d21      	adds	r1, r4, #4
 80040a2:	f7ff ffa1 	bl	8003fe8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a6:	0022      	movs	r2, r4
 80040a8:	2301      	movs	r3, #1
  return HAL_OK;
 80040aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	3246      	adds	r2, #70	@ 0x46
 80040ae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b2:	3a08      	subs	r2, #8
 80040b4:	7013      	strb	r3, [r2, #0]
 80040b6:	7053      	strb	r3, [r2, #1]
 80040b8:	7093      	strb	r3, [r2, #2]
 80040ba:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	7113      	strb	r3, [r2, #4]
 80040be:	7153      	strb	r3, [r2, #5]
 80040c0:	7193      	strb	r3, [r2, #6]
 80040c2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	702b      	strb	r3, [r5, #0]
}
 80040c6:	bd70      	pop	{r4, r5, r6, pc}

080040c8 <HAL_TIM_Encoder_Init>:
{
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	0004      	movs	r4, r0
 80040cc:	000d      	movs	r5, r1
    return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
  if (htim == NULL)
 80040d0:	2c00      	cmp	r4, #0
 80040d2:	d047      	beq.n	8004164 <HAL_TIM_Encoder_Init+0x9c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040d4:	0026      	movs	r6, r4
 80040d6:	363d      	adds	r6, #61	@ 0x3d
 80040d8:	7833      	ldrb	r3, [r6, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_TIM_Encoder_Init+0x24>
    htim->Lock = HAL_UNLOCKED;
 80040e0:	0023      	movs	r3, r4
 80040e2:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80040e4:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80040e6:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Encoder_MspInit(htim);
 80040e8:	f7fe feee 	bl	8002ec8 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040ee:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	7033      	strb	r3, [r6, #0]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040f2:	c980      	ldmia	r1!, {r7}
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_TIM_Encoder_Init+0xa0>)
 80040f6:	68bb      	ldr	r3, [r7, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	0038      	movs	r0, r7
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040fa:	4013      	ands	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fe:	f7ff ff73 	bl	8003fe8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004102:	68b9      	ldr	r1, [r7, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8004104:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 8004106:	69bb      	ldr	r3, [r7, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8004108:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800410a:	4a18      	ldr	r2, [pc, #96]	@ (800416c <HAL_TIM_Encoder_Init+0xa4>)
  tmpsmcr |= sConfig->EncoderMode;
 800410c:	9101      	str	r1, [sp, #4]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800410e:	4013      	ands	r3, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004110:	69aa      	ldr	r2, [r5, #24]
 8004112:	68a9      	ldr	r1, [r5, #8]
 8004114:	0212      	lsls	r2, r2, #8
 8004116:	430a      	orrs	r2, r1
 8004118:	431a      	orrs	r2, r3
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_TIM_Encoder_Init+0xa8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800411c:	6929      	ldr	r1, [r5, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800411e:	401a      	ands	r2, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004120:	69eb      	ldr	r3, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004122:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004124:	021b      	lsls	r3, r3, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004126:	430b      	orrs	r3, r1
 8004128:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 800412a:	6a38      	ldr	r0, [r7, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800412c:	430b      	orrs	r3, r1
 800412e:	6a29      	ldr	r1, [r5, #32]
 8004130:	0309      	lsls	r1, r1, #12
 8004132:	430b      	orrs	r3, r1
 8004134:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004136:	22aa      	movs	r2, #170	@ 0xaa
 8004138:	4390      	bics	r0, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800413a:	696a      	ldr	r2, [r5, #20]
 800413c:	686d      	ldr	r5, [r5, #4]
 800413e:	0112      	lsls	r2, r2, #4
  htim->Instance->SMCR = tmpsmcr;
 8004140:	9901      	ldr	r1, [sp, #4]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004142:	432a      	orrs	r2, r5
 8004144:	4302      	orrs	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8004146:	60b9      	str	r1, [r7, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004148:	61bb      	str	r3, [r7, #24]
  htim->Instance->CCER = tmpccer;
 800414a:	623a      	str	r2, [r7, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	0022      	movs	r2, r4
 800414e:	2301      	movs	r3, #1
  return HAL_OK;
 8004150:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	3246      	adds	r2, #70	@ 0x46
 8004154:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	3443      	adds	r4, #67	@ 0x43
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	3a08      	subs	r2, #8
 800415a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	7113      	strb	r3, [r2, #4]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004162:	7033      	strb	r3, [r6, #0]
}
 8004164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	ffffbff8 	.word	0xffffbff8
 800416c:	fffffcfc 	.word	0xfffffcfc
 8004170:	ffff0303 	.word	0xffff0303

08004174 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004174:	2210      	movs	r2, #16
 8004176:	6a03      	ldr	r3, [r0, #32]
{
 8004178:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	4393      	bics	r3, r2
 800417c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800417e:	6a05      	ldr	r5, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004180:	4c15      	ldr	r4, [pc, #84]	@ (80041d8 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8004182:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004184:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004186:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004188:	680c      	ldr	r4, [r1, #0]
 800418a:	0224      	lsls	r4, r4, #8
 800418c:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800418e:	2320      	movs	r3, #32
 8004190:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004192:	688b      	ldr	r3, [r1, #8]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004198:	4d10      	ldr	r5, [pc, #64]	@ (80041dc <TIM_OC2_SetConfig+0x68>)
 800419a:	42a8      	cmp	r0, r5
 800419c:	d10f      	bne.n	80041be <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800419e:	2580      	movs	r5, #128	@ 0x80
 80041a0:	43ab      	bics	r3, r5
 80041a2:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a4:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a6:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80041ac:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ae:	4d0c      	ldr	r5, [pc, #48]	@ (80041e0 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b4:	698a      	ldr	r2, [r1, #24]
 80041b6:	4332      	orrs	r2, r6
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	432a      	orrs	r2, r5
 80041bc:	e005      	b.n	80041ca <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	4d09      	ldr	r5, [pc, #36]	@ (80041e4 <TIM_OC2_SetConfig+0x70>)
 80041c0:	42a8      	cmp	r0, r5
 80041c2:	d0f4      	beq.n	80041ae <TIM_OC2_SetConfig+0x3a>
 80041c4:	4d08      	ldr	r5, [pc, #32]	@ (80041e8 <TIM_OC2_SetConfig+0x74>)
 80041c6:	42a8      	cmp	r0, r5
 80041c8:	d0f1      	beq.n	80041ae <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80041ca:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80041cc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80041ce:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80041d0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80041d2:	6203      	str	r3, [r0, #32]
}
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	ffff8cff 	.word	0xffff8cff
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	fffff3ff 	.word	0xfffff3ff
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800

080041ec <HAL_TIM_PWM_ConfigChannel>:
{
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80041ee:	0006      	movs	r6, r0
 80041f0:	363c      	adds	r6, #60	@ 0x3c
{
 80041f2:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80041f4:	7832      	ldrb	r2, [r6, #0]
{
 80041f6:	0003      	movs	r3, r0
 80041f8:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80041fa:	2002      	movs	r0, #2
 80041fc:	2a01      	cmp	r2, #1
 80041fe:	d00a      	beq.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004200:	3801      	subs	r0, #1
 8004202:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8004204:	2d08      	cmp	r5, #8
 8004206:	d03f      	beq.n	8004288 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8004208:	d806      	bhi.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800420a:	2d00      	cmp	r5, #0
 800420c:	d019      	beq.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x56>
 800420e:	2d04      	cmp	r5, #4
 8004210:	d029      	beq.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8004212:	2300      	movs	r3, #0
 8004214:	7033      	strb	r3, [r6, #0]
}
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004218:	2d0c      	cmp	r5, #12
 800421a:	d1fa      	bne.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421c:	681d      	ldr	r5, [r3, #0]
 800421e:	0028      	movs	r0, r5
 8004220:	f7ff feae 	bl	8003f80 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	69ea      	ldr	r2, [r5, #28]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4313      	orrs	r3, r2
 800422c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800422e:	69eb      	ldr	r3, [r5, #28]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8004232:	4013      	ands	r3, r2
 8004234:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	69ea      	ldr	r2, [r5, #28]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	61eb      	str	r3, [r5, #28]
      break;
 8004240:	e00f      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004242:	681d      	ldr	r5, [r3, #0]
 8004244:	0028      	movs	r0, r5
 8004246:	f7ff fe1f 	bl	8003e88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800424a:	2308      	movs	r3, #8
 800424c:	69aa      	ldr	r2, [r5, #24]
 800424e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004250:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004252:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004254:	69ab      	ldr	r3, [r5, #24]
 8004256:	4393      	bics	r3, r2
 8004258:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800425a:	69ab      	ldr	r3, [r5, #24]
 800425c:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800425e:	4313      	orrs	r3, r2
 8004260:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2000      	movs	r0, #0
 8004264:	e7d5      	b.n	8004212 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004266:	681d      	ldr	r5, [r3, #0]
 8004268:	0028      	movs	r0, r5
 800426a:	f7ff ff83 	bl	8004174 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	69aa      	ldr	r2, [r5, #24]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4313      	orrs	r3, r2
 8004276:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004278:	69ab      	ldr	r3, [r5, #24]
 800427a:	4a0b      	ldr	r2, [pc, #44]	@ (80042a8 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 800427c:	4013      	ands	r3, r2
 800427e:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	69aa      	ldr	r2, [r5, #24]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	e7ea      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004288:	681f      	ldr	r7, [r3, #0]
 800428a:	0038      	movs	r0, r7
 800428c:	f7ff fe38 	bl	8003f00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004290:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	431d      	orrs	r5, r3
 8004296:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4393      	bics	r3, r2
 800429c:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	6922      	ldr	r2, [r4, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61fb      	str	r3, [r7, #28]
      break;
 80042a6:	e7dc      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x76>
 80042a8:	fffffbff 	.word	0xfffffbff

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ae:	0004      	movs	r4, r0
 80042b0:	2202      	movs	r2, #2
 80042b2:	343c      	adds	r4, #60	@ 0x3c
 80042b4:	7825      	ldrb	r5, [r4, #0]
{
 80042b6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80042b8:	0010      	movs	r0, r2
 80042ba:	2d01      	cmp	r5, #1
 80042bc:	d01d      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c0:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80042c2:	353d      	adds	r5, #61	@ 0x3d
 80042c4:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80042ca:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ce:	680e      	ldr	r6, [r1, #0]
 80042d0:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d2:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d4:	4809      	ldr	r0, [pc, #36]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80042d6:	4283      	cmp	r3, r0
 80042d8:	d006      	beq.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80042da:	2080      	movs	r0, #128	@ 0x80
 80042dc:	05c0      	lsls	r0, r0, #23
 80042de:	4283      	cmp	r3, r0
 80042e0:	d002      	beq.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80042e2:	4807      	ldr	r0, [pc, #28]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80042e4:	4283      	cmp	r3, r0
 80042e6:	d104      	bne.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e8:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ec:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ee:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80042f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80042f8:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400

08004304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004304:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004306:	0004      	movs	r4, r0
 8004308:	343c      	adds	r4, #60	@ 0x3c
 800430a:	7823      	ldrb	r3, [r4, #0]
{
 800430c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800430e:	2002      	movs	r0, #2
 8004310:	2b01      	cmp	r3, #1
 8004312:	d01c      	beq.n	800434e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004314:	68cb      	ldr	r3, [r1, #12]
 8004316:	480e      	ldr	r0, [pc, #56]	@ (8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004318:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800431a:	4003      	ands	r3, r0
 800431c:	6888      	ldr	r0, [r1, #8]
 800431e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004320:	480c      	ldr	r0, [pc, #48]	@ (8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004322:	4003      	ands	r3, r0
 8004324:	6848      	ldr	r0, [r1, #4]
 8004326:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004328:	480b      	ldr	r0, [pc, #44]	@ (8004358 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800432a:	4003      	ands	r3, r0
 800432c:	6808      	ldr	r0, [r1, #0]
 800432e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004330:	480a      	ldr	r0, [pc, #40]	@ (800435c <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004332:	4003      	ands	r3, r0
 8004334:	6908      	ldr	r0, [r1, #16]
 8004336:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004338:	4809      	ldr	r0, [pc, #36]	@ (8004360 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800433a:	4003      	ands	r3, r0
 800433c:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800433e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004340:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004342:	4808      	ldr	r0, [pc, #32]	@ (8004364 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004344:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 8004346:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004348:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800434a:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800434c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800434e:	bd10      	pop	{r4, pc}
 8004350:	fffffcff 	.word	0xfffffcff
 8004354:	fffffbff 	.word	0xfffffbff
 8004358:	fffff7ff 	.word	0xfffff7ff
 800435c:	ffffefff 	.word	0xffffefff
 8004360:	ffffdfff 	.word	0xffffdfff
 8004364:	ffffbfff 	.word	0xffffbfff

08004368 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8004368:	b20b      	sxth	r3, r1
 800436a:	1409      	asrs	r1, r1, #16
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800436e:	000e      	movs	r6, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004370:	001d      	movs	r5, r3
    maxModule = (int32_t)pHandle->MaxModule;
 8004372:	8802      	ldrh	r2, [r0, #0]
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004374:	434e      	muls	r6, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004376:	435d      	muls	r5, r3
    square_limit = maxModule * maxModule;
 8004378:	4352      	muls	r2, r2
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 800437a:	19ad      	adds	r5, r5, r6
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800437c:	000c      	movs	r4, r1
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800437e:	8840      	ldrh	r0, [r0, #2]
{
 8004380:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8004382:	42aa      	cmp	r2, r5
 8004384:	da11      	bge.n	80043aa <Circle_Limitation+0x42>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004386:	0007      	movs	r7, r0
 8004388:	4347      	muls	r7, r0
    {
      if (square_d <= vd_square_limit)
 800438a:	4d0f      	ldr	r5, [pc, #60]	@ (80043c8 <Circle_Limitation+0x60>)
 800438c:	42be      	cmp	r6, r7
 800438e:	dc11      	bgt.n	80043b4 <Circle_Limitation+0x4c>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004390:	1b96      	subs	r6, r2, r6
 8004392:	17f2      	asrs	r2, r6, #31
 8004394:	0312      	lsls	r2, r2, #12
 8004396:	0b12      	lsrs	r2, r2, #12
 8004398:	1992      	adds	r2, r2, r6
        else
        {
          /* Nothing to do */
        }
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
 800439a:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 800439c:	0052      	lsls	r2, r2, #1
 800439e:	5aaa      	ldrh	r2, [r5, r2]
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da00      	bge.n	80043a6 <Circle_Limitation+0x3e>
        {
          new_q = - new_q;
 80043a4:	4252      	negs	r2, r2
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 80043a6:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 80043a8:	b221      	sxth	r1, r4
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 80043aa:	0409      	lsls	r1, r1, #16
 80043ac:	b298      	uxth	r0, r3
 80043ae:	4308      	orrs	r0, r1
}
 80043b0:	b005      	add	sp, #20
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        new_d = (int32_t)pHandle->MaxVd;
 80043b4:	0004      	movs	r4, r0
        if (Vqd.d < 0)
 80043b6:	2900      	cmp	r1, #0
 80043b8:	da00      	bge.n	80043bc <Circle_Limitation+0x54>
          new_d = -new_d;
 80043ba:	4244      	negs	r4, r0
        square_temp = (square_limit - vd_square_limit) / 1048576;
 80043bc:	1bd7      	subs	r7, r2, r7
 80043be:	17fa      	asrs	r2, r7, #31
 80043c0:	0312      	lsls	r2, r2, #12
 80043c2:	0b12      	lsrs	r2, r2, #12
 80043c4:	19d2      	adds	r2, r2, r7
 80043c6:	e7e8      	b.n	800439a <Circle_Limitation+0x32>
 80043c8:	0800507c 	.word	0x0800507c

080043cc <EAC_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
 80043cc:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 80043ce:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 80043d0:	6001      	str	r1, [r0, #0]
    pHandle->pVSS = pVSS;
 80043d2:	6042      	str	r2, [r0, #4]
    pHandle->EncAligned = false;
 80043d4:	81c3      	strh	r3, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80043d6:	4770      	bx	lr

080043d8 <EAC_StartAlignment>:
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80043d8:	2200      	movs	r2, #0
{
 80043da:	b510      	push	{r4, lr}
 80043dc:	0004      	movs	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80043de:	0011      	movs	r1, r2
 80043e0:	6840      	ldr	r0, [r0, #4]
 80043e2:	f000 fc06 	bl	8004bf2 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 80043e6:	2314      	movs	r3, #20
 80043e8:	5ee1      	ldrsh	r1, [r4, r3]
 80043ea:	6860      	ldr	r0, [r4, #4]
 80043ec:	f000 fbf6 	bl	8004bdc <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80043f0:	6820      	ldr	r0, [r4, #0]
 80043f2:	2104      	movs	r1, #4
 80043f4:	f000 fb66 	bl	8004ac4 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 80043f8:	2200      	movs	r2, #0
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	0011      	movs	r1, r2
 80043fe:	f000 fb65 	bl	8004acc <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8004402:	2312      	movs	r3, #18
 8004404:	5ee1      	ldrsh	r1, [r4, r3]
 8004406:	8ae2      	ldrh	r2, [r4, #22]
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	f000 fb5f 	bl	8004acc <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
    wAux /= 1000U;
 800440e:	21fa      	movs	r1, #250	@ 0xfa
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004410:	8ae3      	ldrh	r3, [r4, #22]
 8004412:	8a20      	ldrh	r0, [r4, #16]
    wAux /= 1000U;
 8004414:	0089      	lsls	r1, r1, #2
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004416:	4358      	muls	r0, r3
    wAux /= 1000U;
 8004418:	f7fb fe66 	bl	80000e8 <__udivsi3>
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 800441c:	3001      	adds	r0, #1
 800441e:	81a0      	strh	r0, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004420:	bd10      	pop	{r4, pc}

08004422 <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec(EncAlign_Handle_t *pHandle)
{
 8004422:	b510      	push	{r4, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8004424:	8983      	ldrh	r3, [r0, #12]
{
 8004426:	0004      	movs	r4, r0
    if (pHandle->hRemainingTicks > 0U)
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <EAC_Exec+0x2c>
    {
      pHandle->hRemainingTicks--;
 800442c:	3b01      	subs	r3, #1
 800442e:	b29b      	uxth	r3, r3
 8004430:	8183      	strh	r3, [r0, #12]
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8004432:	2000      	movs	r0, #0
      if (0U == pHandle->hRemainingTicks)
 8004434:	4283      	cmp	r3, r0
 8004436:	d10b      	bne.n	8004450 <EAC_Exec+0x2e>
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8004438:	2314      	movs	r3, #20
 800443a:	5ee0      	ldrsh	r0, [r4, r3]
 800443c:	7e21      	ldrb	r1, [r4, #24]
 800443e:	f7fb fedd 	bl	80001fc <__divsi3>
 8004442:	b201      	sxth	r1, r0
 8004444:	68a0      	ldr	r0, [r4, #8]
 8004446:	f000 f8eb 	bl	8004620 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 800444a:	2301      	movs	r3, #1
 800444c:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 800444e:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8004450:	bd10      	pop	{r4, pc}

08004452 <EAC_IsAligned>:
__weak bool EAC_IsAligned(EncAlign_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 8004452:	7b80      	ldrb	r0, [r0, #14]
#endif
}
 8004454:	4770      	bx	lr

08004456 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8004456:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004458:	4770      	bx	lr
	...

0800445c <ENC_Init>:
            required for the speed position sensor management using ENCODER
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Init(ENCODER_Handle_t *pHandle)
{
 800445c:	b570      	push	{r4, r5, r6, lr}
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800445e:	0003      	movs	r3, r0
  WRITE_REG(TIMx->CNT, Counter);
 8004460:	2600      	movs	r6, #0
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004462:	6a05      	ldr	r5, [r0, #32]
{
 8004464:	0004      	movs	r4, r0
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004466:	2001      	movs	r0, #1
 8004468:	626e      	str	r6, [r5, #36]	@ 0x24
 800446a:	336e      	adds	r3, #110	@ 0x6e
 800446c:	8819      	ldrh	r1, [r3, #0]
 800446e:	4240      	negs	r0, r0
 8004470:	f7fb fe3a 	bl	80000e8 <__udivsi3>
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004474:	0023      	movs	r3, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004476:	21f0      	movs	r1, #240	@ 0xf0
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004478:	66a0      	str	r0, [r4, #104]	@ 0x68
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 800447a:	336c      	adds	r3, #108	@ 0x6c
 800447c:	881b      	ldrh	r3, [r3, #0]
    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;

    for (index = 0U; index < bufferSize; index++)
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 800447e:	0020      	movs	r0, r4
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	6263      	str	r3, [r4, #36]	@ 0x24
 8004484:	69aa      	ldr	r2, [r5, #24]
 8004486:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004488:	438a      	bics	r2, r1
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	4313      	orrs	r3, r2
 800448e:	61ab      	str	r3, [r5, #24]
 8004490:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004492:	69aa      	ldr	r2, [r5, #24]
 8004494:	490c      	ldr	r1, [pc, #48]	@ (80044c8 <ENC_Init+0x6c>)
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	400a      	ands	r2, r1
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	4313      	orrs	r3, r2
 800449e:	61ab      	str	r3, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044a0:	2302      	movs	r3, #2
 80044a2:	425b      	negs	r3, r3
 80044a4:	612b      	str	r3, [r5, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044a6:	68ea      	ldr	r2, [r5, #12]
 80044a8:	3303      	adds	r3, #3
 80044aa:	431a      	orrs	r2, r3
 80044ac:	60ea      	str	r2, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80044ae:	682a      	ldr	r2, [r5, #0]
      pHandle->DeltaCapturesBuffer[index] = 0;
 80044b0:	0031      	movs	r1, r6
 80044b2:	4313      	orrs	r3, r2
 80044b4:	602b      	str	r3, [r5, #0]
    bufferSize = pHandle->SpeedBufferSize;
 80044b6:	0023      	movs	r3, r4
 80044b8:	3374      	adds	r3, #116	@ 0x74
      pHandle->DeltaCapturesBuffer[index] = 0;
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	3028      	adds	r0, #40	@ 0x28
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	f000 fbd5 	bl	8004c6e <memset>
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	ffff0fff 	.word	0xffff0fff

080044cc <ENC_Clear>:
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80044cc:	0003      	movs	r3, r0
{
 80044ce:	b510      	push	{r4, lr}
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80044d0:	3374      	adds	r3, #116	@ 0x74
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 80044d2:	781a      	ldrb	r2, [r3, #0]
{
 80044d4:	0004      	movs	r4, r0
      pHandle->DeltaCapturesBuffer[index] = 0;
 80044d6:	2100      	movs	r1, #0
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	3028      	adds	r0, #40	@ 0x28
 80044dc:	f000 fbc7 	bl	8004c6e <memset>
    }
    pHandle->SensorIsReliable = true;
 80044e0:	2301      	movs	r3, #1
 80044e2:	3475      	adds	r4, #117	@ 0x75
 80044e4:	7023      	strb	r3, [r4, #0]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80044e6:	bd10      	pop	{r4, pc}

080044e8 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 80044e8:	0002      	movs	r2, r0
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80044ea:	6a03      	ldr	r3, [r0, #32]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80044ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80044f0:	b289      	uxth	r1, r1
 80044f2:	434b      	muls	r3, r1
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80044f4:	2006      	movs	r0, #6
 80044f6:	5e11      	ldrsh	r1, [r2, r0]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80044f8:	141b      	asrs	r3, r3, #16

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80044fa:	7850      	ldrb	r0, [r2, #1]
    pHandle->_Super.hMecAngle = mecAngle;
 80044fc:	80d3      	strh	r3, [r2, #6]
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4358      	muls	r0, r3

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8004502:	1a5b      	subs	r3, r3, r1
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004504:	6891      	ldr	r1, [r2, #8]
 8004506:	b21b      	sxth	r3, r3
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004508:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800450a:	18cb      	adds	r3, r1, r3
    pHandle->_Super.hElAngle = elAngle;
 800450c:	8090      	strh	r0, [r2, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800450e:	6093      	str	r3, [r2, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8004510:	4770      	bx	lr
	...

08004514 <ENC_CalcAvrgMecSpeedUnit>:
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8004514:	0002      	movs	r2, r0
{
 8004516:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004518:	6a03      	ldr	r3, [r0, #32]
{
 800451a:	0004      	movs	r4, r0
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
    pHandle->TimerOverflowNb = 0;
 800451c:	2000      	movs	r0, #0
{
 800451e:	b085      	sub	sp, #20
 8004520:	9101      	str	r1, [sp, #4]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8004522:	3274      	adds	r2, #116	@ 0x74
 8004524:	7817      	ldrb	r7, [r2, #0]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8004526:	3a04      	subs	r2, #4
 8004528:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800452a:	8811      	ldrh	r1, [r2, #0]
    pHandle->TimerOverflowNb = 0;
 800452c:	8010      	strh	r0, [r2, #0]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2310      	movs	r3, #16
 8004532:	401a      	ands	r2, r3

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8004534:	2901      	cmp	r1, #1
 8004536:	d903      	bls.n	8004540 <ENC_CalcAvrgMecSpeedUnit+0x2c>
    {
      pHandle->TimerOverflowError = true;
 8004538:	0023      	movs	r3, r4
 800453a:	2101      	movs	r1, #1
 800453c:	337d      	adds	r3, #125	@ 0x7d
 800453e:	7019      	strb	r1, [r3, #0]
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8004540:	0023      	movs	r3, r4
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004542:	0021      	movs	r1, r4
 8004544:	0026      	movs	r6, r4
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8004546:	3372      	adds	r3, #114	@ 0x72
 8004548:	9302      	str	r3, [sp, #8]
 800454a:	881b      	ldrh	r3, [r3, #0]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800454c:	316e      	adds	r1, #110	@ 0x6e
 800454e:	9103      	str	r1, [sp, #12]
 8004550:	8809      	ldrh	r1, [r1, #0]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8004552:	1ae8      	subs	r0, r5, r3
 8004554:	367c      	adds	r6, #124	@ 0x7c
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8004556:	2a00      	cmp	r2, #0
 8004558:	d04e      	beq.n	80045f8 <ENC_CalcAvrgMecSpeedUnit+0xe4>
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800455a:	42ab      	cmp	r3, r5
 800455c:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800455e:	7832      	ldrb	r2, [r6, #0]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004560:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004562:	320a      	adds	r2, #10
 8004564:	0092      	lsls	r2, r2, #2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004566:	1ac3      	subs	r3, r0, r3
      /* Encoder timer up-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture < pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004568:	5113      	str	r3, [r2, r4]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800456a:	0023      	movs	r3, r4
    int32_t wOverallAngleVariation = 0;
 800456c:	2200      	movs	r2, #0
 800456e:	00b8      	lsls	r0, r7, #2
 8004570:	1900      	adds	r0, r0, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004572:	4283      	cmp	r3, r0
 8004574:	d148      	bne.n	8004608 <ENC_CalcAvrgMecSpeedUnit+0xf4>
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8004576:	4379      	muls	r1, r7
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8004578:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800457a:	4350      	muls	r0, r2
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 800457c:	2900      	cmp	r1, #0
 800457e:	d001      	beq.n	8004584 <ENC_CalcAvrgMecSpeedUnit+0x70>
 8004580:	f7fb fe3c 	bl	80001fc <__divsi3>

    *pMecSpeedUnit = (int16_t)wtemp1;
 8004584:	9a01      	ldr	r2, [sp, #4]
 8004586:	b203      	sxth	r3, r0

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004588:	0026      	movs	r6, r4
    *pMecSpeedUnit = (int16_t)wtemp1;
 800458a:	8013      	strh	r3, [r2, #0]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800458c:	89a2      	ldrh	r2, [r4, #12]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800458e:	367c      	adds	r6, #124	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004590:	1a80      	subs	r0, r0, r2
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004592:	0022      	movs	r2, r4
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004594:	8260      	strh	r0, [r4, #18]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8004596:	81a3      	strh	r3, [r4, #12]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004598:	7833      	ldrb	r3, [r6, #0]
 800459a:	326c      	adds	r2, #108	@ 0x6c
 800459c:	330a      	adds	r3, #10
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	8812      	ldrh	r2, [r2, #0]
 80045a2:	591b      	ldr	r3, [r3, r4]
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 80045a4:	7860      	ldrb	r0, [r4, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80045a6:	4353      	muls	r3, r2
 80045a8:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	8819      	ldrh	r1, [r3, #0]
 80045ae:	f7fb fe25 	bl	80001fc <__divsi3>
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80045b2:	69e3      	ldr	r3, [r4, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80045b4:	8b61      	ldrh	r1, [r4, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 80045b6:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 80045b8:	f7fb fe20 	bl	80001fc <__divsi3>

    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80045bc:	2380      	movs	r3, #128	@ 0x80
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 80045be:	81e0      	strh	r0, [r4, #14]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	429d      	cmp	r5, r3
 80045c4:	d300      	bcc.n	80045c8 <ENC_CalcAvrgMecSpeedUnit+0xb4>
 80045c6:	4d15      	ldr	r5, [pc, #84]	@ (800461c <ENC_CalcAvrgMecSpeedUnit+0x108>)
 80045c8:	9b02      	ldr	r3, [sp, #8]
 80045ca:	801d      	strh	r5, [r3, #0]
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 80045cc:	7833      	ldrb	r3, [r6, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	7033      	strb	r3, [r6, #0]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 80045d4:	7833      	ldrb	r3, [r6, #0]
 80045d6:	42bb      	cmp	r3, r7
 80045d8:	d301      	bcc.n	80045de <ENC_CalcAvrgMecSpeedUnit+0xca>
    {
      pHandle->DeltaCapturesIndex = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	7033      	strb	r3, [r6, #0]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 80045de:	0023      	movs	r3, r4
 80045e0:	337d      	adds	r3, #125	@ 0x7d
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <ENC_CalcAvrgMecSpeedUnit+0xfc>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
 80045e8:	0023      	movs	r3, r4
 80045ea:	2000      	movs	r0, #0
 80045ec:	3375      	adds	r3, #117	@ 0x75
 80045ee:	7018      	strb	r0, [r3, #0]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80045f0:	78e3      	ldrb	r3, [r4, #3]
 80045f2:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 80045f4:	b005      	add	sp, #20
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80045f8:	429d      	cmp	r5, r3
 80045fa:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80045fc:	7832      	ldrb	r2, [r6, #0]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80045fe:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004600:	320a      	adds	r2, #10
 8004602:	0092      	lsls	r2, r2, #2
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004604:	181b      	adds	r3, r3, r0
 8004606:	e7af      	b.n	8004568 <ENC_CalcAvrgMecSpeedUnit+0x54>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004608:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 800460a:	3304      	adds	r3, #4
 800460c:	1992      	adds	r2, r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800460e:	e7b0      	b.n	8004572 <ENC_CalcAvrgMecSpeedUnit+0x5e>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8004610:	0020      	movs	r0, r4
 8004612:	9901      	ldr	r1, [sp, #4]
 8004614:	f000 fa05 	bl	8004a22 <SPD_IsMecSpeedReliable>
 8004618:	e7ec      	b.n	80045f4 <ENC_CalcAvrgMecSpeedUnit+0xe0>
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	0000ffff 	.word	0x0000ffff

08004620 <ENC_SetMecAngle>:
  *         As a consequence, timer counter is computed and updated.
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle in [s16degree](measurement_units.md) format.
  */
__weak void ENC_SetMecAngle(ENCODER_Handle_t *pHandle, int16_t hMecAngle)
{
 8004620:	0003      	movs	r3, r0
 8004622:	b510      	push	{r4, lr}

    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
 8004624:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8004626:	785a      	ldrb	r2, [r3, #1]
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004628:	6a04      	ldr	r4, [r0, #32]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800462a:	b288      	uxth	r0, r1
 800462c:	4342      	muls	r2, r0
 800462e:	809a      	strh	r2, [r3, #4]
    if (localhMecAngle < 0)
 8004630:	2900      	cmp	r1, #0
 8004632:	da01      	bge.n	8004638 <ENC_SetMecAngle+0x18>
    {
      localhMecAngle *= -1;
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 8004634:	3801      	subs	r0, #1
 8004636:	b280      	uxth	r0, r0
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8004638:	336e      	adds	r3, #110	@ 0x6e
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	4902      	ldr	r1, [pc, #8]	@ (8004648 <ENC_SetMecAngle+0x28>)
 800463e:	4358      	muls	r0, r3
 8004640:	f7fb fd52 	bl	80000e8 <__udivsi3>

    TIMx->CNT = (uint16_t)hAngleCounts;
 8004644:	6260      	str	r0, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004646:	bd10      	pop	{r4, pc}
 8004648:	0000ffff 	.word	0x0000ffff

0800464c <ENC_IRQHandler>:
{
  ENCODER_Handle_t *pHandle = (ENCODER_Handle_t *)pHandleVoid; //cstat !MISRAC2012-Rule-11.5

  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;
 800464c:	3070      	adds	r0, #112	@ 0x70
 800464e:	8803      	ldrh	r3, [r0, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	8003      	strh	r3, [r0, #0]

  return (MC_NULL);
}
 8004656:	2000      	movs	r0, #0
 8004658:	4770      	bx	lr
	...

0800465c <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800465e:	1cc7      	adds	r7, r0, #3
 8004660:	7fc3      	ldrb	r3, [r0, #31]
 8004662:	7ffa      	ldrb	r2, [r7, #31]
{
 8004664:	0004      	movs	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8004666:	429a      	cmp	r2, r3
 8004668:	d000      	beq.n	800466c <MCPA_dataLog+0x10>
 800466a:	e0a1      	b.n	80047b0 <MCPA_dataLog+0x154>
    {
      pHandle->HFIndex = 0U;
 800466c:	2300      	movs	r3, #0
      if (0U == pHandle->bufferIndex)
 800466e:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8004670:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8004672:	429d      	cmp	r5, r3
 8004674:	d135      	bne.n	80046e2 <MCPA_dataLog+0x86>
      {
        /* New buffer allocation */
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8004676:	0021      	movs	r1, r4
 8004678:	6800      	ldr	r0, [r0, #0]
 800467a:	2209      	movs	r2, #9
 800467c:	6803      	ldr	r3, [r0, #0]
 800467e:	3114      	adds	r1, #20
 8004680:	4798      	blx	r3
 8004682:	2800      	cmp	r0, #0
 8004684:	d02d      	beq.n	80046e2 <MCPA_dataLog+0x86>
#endif
        }
        else
        {
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8004686:	4b4c      	ldr	r3, [pc, #304]	@ (80047b8 <MCPA_dataLog+0x15c>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	6963      	ldr	r3, [r4, #20]
 800468c:	601a      	str	r2, [r3, #0]
          pHandle->bufferIndex = 4U;
 800468e:	2304      	movs	r3, #4
 8004690:	8323      	strh	r3, [r4, #24]
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8004692:	1c63      	adds	r3, r4, #1
 8004694:	77dd      	strb	r5, [r3, #31]
          /* Check if configuration has changed for this new buffer */
          if (pHandle->Mark == pHandle->MarkBuff)
 8004696:	3328      	adds	r3, #40	@ 0x28
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	7859      	ldrb	r1, [r3, #1]
 800469c:	3301      	adds	r3, #1
 800469e:	4291      	cmp	r1, r2
 80046a0:	d01f      	beq.n	80046e2 <MCPA_dataLog+0x86>
          }
          else
          {
            pHandle->MarkBuff            = pHandle->Mark;
            pHandle->HFNumBuff           = pHandle->HFNum;
            pHandle->MFNumBuff           = pHandle->MFNum;
 80046a2:	0025      	movs	r5, r4
            pHandle->MarkBuff            = pHandle->Mark;
 80046a4:	701a      	strb	r2, [r3, #0]
            pHandle->HFNumBuff           = pHandle->HFNum;
 80046a6:	1d26      	adds	r6, r4, #4
 80046a8:	7ff2      	ldrb	r2, [r6, #31]
 80046aa:	1d63      	adds	r3, r4, #5
 80046ac:	77da      	strb	r2, [r3, #31]
            pHandle->MFNumBuff           = pHandle->MFNum;
 80046ae:	3508      	adds	r5, #8
 80046b0:	7fe9      	ldrb	r1, [r5, #31]
 80046b2:	3323      	adds	r3, #35	@ 0x23
 80046b4:	7019      	strb	r1, [r3, #0]
            pHandle->HFRateBuff          = pHandle->HFRate;
 80046b6:	1ca3      	adds	r3, r4, #2
 80046b8:	7fdb      	ldrb	r3, [r3, #31]
            pHandle->MFRateBuff          = pHandle->MFRate;
 80046ba:	1da0      	adds	r0, r4, #6
            pHandle->HFRateBuff          = pHandle->HFRate;
 80046bc:	77fb      	strb	r3, [r7, #31]
            pHandle->MFRateBuff          = pHandle->MFRate;
 80046be:	7fc0      	ldrb	r0, [r0, #31]
 80046c0:	1de3      	adds	r3, r4, #7
 80046c2:	77d8      	strb	r0, [r3, #31]
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80046c4:	8b63      	ldrh	r3, [r4, #26]

            /* We store pointer here, so 4 bytes */
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80046c6:	1852      	adds	r2, r2, r1
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80046c8:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80046ca:	6861      	ldr	r1, [r4, #4]
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80046cc:	0092      	lsls	r2, r2, #2
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80046ce:	68a0      	ldr	r0, [r4, #8]
 80046d0:	f000 fafa 	bl	8004cc8 <memcpy>
                                                                                         so 4 bytes */
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 80046d4:	7ff2      	ldrb	r2, [r6, #31]
 80046d6:	7feb      	ldrb	r3, [r5, #31]
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 80046d8:	6920      	ldr	r0, [r4, #16]
 80046da:	68e1      	ldr	r1, [r4, #12]
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 80046dc:	18d2      	adds	r2, r2, r3
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 80046de:	f000 faf3 	bl	8004cc8 <memcpy>
      {
        /* Nothing to do */
      }

      /* */
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80046e2:	8b25      	ldrh	r5, [r4, #24]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	d032      	beq.n	800474e <MCPA_dataLog+0xf2>
 80046e8:	8ba2      	ldrh	r2, [r4, #28]
 80046ea:	42aa      	cmp	r2, r5
 80046ec:	d31c      	bcc.n	8004728 <MCPA_dataLog+0xcc>
      {
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80046ee:	2200      	movs	r2, #0
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80046f0:	6960      	ldr	r0, [r4, #20]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80046f2:	1d63      	adds	r3, r4, #5
 80046f4:	7fdb      	ldrb	r3, [r3, #31]
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80046f6:	1945      	adds	r5, r0, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80046f8:	b2d1      	uxtb	r1, r2
 80046fa:	428b      	cmp	r3, r1
 80046fc:	d828      	bhi.n	8004750 <MCPA_dataLog+0xf4>
          logValue16++;
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
        }
        /* MFRateBuff=254 means we dump MF data once per buffer */
        /* MFRateBuff=255 means we do not dump MF data */
        if (pHandle->MFRateBuff < 254U)
 80046fe:	1de2      	adds	r2, r4, #7
 8004700:	7fd5      	ldrb	r5, [r2, #31]
 8004702:	2dfd      	cmp	r5, #253	@ 0xfd
 8004704:	d80c      	bhi.n	8004720 <MCPA_dataLog+0xc4>
        {
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8004706:	1c61      	adds	r1, r4, #1
 8004708:	7fca      	ldrb	r2, [r1, #31]
 800470a:	4295      	cmp	r5, r2
 800470c:	d137      	bne.n	800477e <MCPA_dataLog+0x122>
          {
            pHandle->MFIndex = 0U;
 800470e:	2200      	movs	r2, #0
 8004710:	77ca      	strb	r2, [r1, #31]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004712:	0022      	movs	r2, r4
 8004714:	3228      	adds	r2, #40	@ 0x28
 8004716:	7811      	ldrb	r1, [r2, #0]
 8004718:	18c9      	adds	r1, r1, r3
            {
              /* Dump MF data */
              logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800471a:	8b25      	ldrh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800471c:	428b      	cmp	r3, r1
 800471e:	db22      	blt.n	8004766 <MCPA_dataLog+0x10a>
      }
      else
      {
        /* Nothing to do */
      }
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8004720:	8b22      	ldrh	r2, [r4, #24]
 8004722:	8ba3      	ldrh	r3, [r4, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	d912      	bls.n	800474e <MCPA_dataLog+0xf2>
      {
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8004728:	1de3      	adds	r3, r4, #7
 800472a:	7fdb      	ldrb	r3, [r3, #31]
 800472c:	6961      	ldr	r1, [r4, #20]
 800472e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004730:	d028      	beq.n	8004784 <MCPA_dataLog+0x128>
        {
          /* Nothing to do */
        }
        /* Buffer is ready to be send */
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8004732:	0022      	movs	r2, r4
 8004734:	322a      	adds	r2, #42	@ 0x2a
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8004736:	8b23      	ldrh	r3, [r4, #24]
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8004738:	7812      	ldrb	r2, [r2, #0]
                                            the MARK. */
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800473a:	6820      	ldr	r0, [r4, #0]
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800473c:	52ca      	strh	r2, [r1, r3]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800473e:	8b22      	ldrh	r2, [r4, #24]
 8004740:	2309      	movs	r3, #9
 8004742:	3202      	adds	r2, #2
 8004744:	6845      	ldr	r5, [r0, #4]
 8004746:	b292      	uxth	r2, r2
 8004748:	47a8      	blx	r5
                                              pHandle->bufferIndex + 2U, MCTL_ASYNC);
        pHandle->bufferIndex = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	8323      	strh	r3, [r4, #24]
      pHandle->HFIndex++;
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8004750:	68a1      	ldr	r1, [r4, #8]
 8004752:	0096      	lsls	r6, r2, #2
 8004754:	5871      	ldr	r1, [r6, r1]
 8004756:	880e      	ldrh	r6, [r1, #0]
 8004758:	0051      	lsls	r1, r2, #1
 800475a:	526e      	strh	r6, [r5, r1]
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800475c:	8b21      	ldrh	r1, [r4, #24]
 800475e:	3201      	adds	r2, #1
 8004760:	3102      	adds	r1, #2
 8004762:	8321      	strh	r1, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8004764:	e7c8      	b.n	80046f8 <MCPA_dataLog+0x9c>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004766:	68a2      	ldr	r2, [r4, #8]
 8004768:	009e      	lsls	r6, r3, #2
 800476a:	58b2      	ldr	r2, [r6, r2]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	5142      	str	r2, [r0, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	5cd2      	ldrb	r2, [r2, r3]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004774:	3301      	adds	r3, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004776:	18aa      	adds	r2, r5, r2
 8004778:	8322      	strh	r2, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e7cd      	b.n	800471a <MCPA_dataLog+0xbe>
            pHandle->MFIndex ++;
 800477e:	3201      	adds	r2, #1
 8004780:	77ca      	strb	r2, [r1, #31]
 8004782:	e7cd      	b.n	8004720 <MCPA_dataLog+0xc4>
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004784:	0022      	movs	r2, r4
 8004786:	1d63      	adds	r3, r4, #5
 8004788:	3228      	adds	r2, #40	@ 0x28
 800478a:	7fdb      	ldrb	r3, [r3, #31]
 800478c:	7815      	ldrb	r5, [r2, #0]
 800478e:	18ed      	adds	r5, r5, r3
            logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8004790:	8b20      	ldrh	r0, [r4, #24]
 8004792:	180a      	adds	r2, r1, r0
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004794:	42ab      	cmp	r3, r5
 8004796:	dacc      	bge.n	8004732 <MCPA_dataLog+0xd6>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004798:	68a6      	ldr	r6, [r4, #8]
 800479a:	009f      	lsls	r7, r3, #2
 800479c:	59be      	ldr	r6, [r7, r6]
 800479e:	6836      	ldr	r6, [r6, #0]
 80047a0:	6016      	str	r6, [r2, #0]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80047a2:	6922      	ldr	r2, [r4, #16]
 80047a4:	5cd2      	ldrb	r2, [r2, r3]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80047a6:	3301      	adds	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80047a8:	1882      	adds	r2, r0, r2
 80047aa:	8322      	strh	r2, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e7ef      	b.n	8004790 <MCPA_dataLog+0x134>
      pHandle->HFIndex++;
 80047b0:	3301      	adds	r3, #1
 80047b2:	77c3      	strb	r3, [r0, #31]
}
 80047b4:	e7cb      	b.n	800474e <MCPA_dataLog+0xf2>
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	200008b0 	.word	0x200008b0

080047bc <MCPA_flushDataLog>:
  * @brief  Sends asynchronous data to controller when the buffer is full
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80047be:	8b03      	ldrh	r3, [r0, #24]
{
 80047c0:	0004      	movs	r4, r0
    if (pHandle->bufferIndex > 0U)
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d012      	beq.n	80047ec <MCPA_flushDataLog+0x30>
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80047c6:	1dc3      	adds	r3, r0, #7
 80047c8:	7fdb      	ldrb	r3, [r3, #31]
 80047ca:	6941      	ldr	r1, [r0, #20]
 80047cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80047ce:	d00e      	beq.n	80047ee <MCPA_flushDataLog+0x32>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80047d0:	0022      	movs	r2, r4
 80047d2:	322a      	adds	r2, #42	@ 0x2a
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80047d4:	8b23      	ldrh	r3, [r4, #24]
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80047d6:	7812      	ldrb	r2, [r2, #0]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80047d8:	6820      	ldr	r0, [r4, #0]
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80047da:	52ca      	strh	r2, [r1, r3]
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80047dc:	8b22      	ldrh	r2, [r4, #24]
 80047de:	2309      	movs	r3, #9
 80047e0:	3202      	adds	r2, #2
 80047e2:	6845      	ldr	r5, [r0, #4]
 80047e4:	b292      	uxth	r2, r2
 80047e6:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80047ee:	0002      	movs	r2, r0
 80047f0:	1d43      	adds	r3, r0, #5
 80047f2:	3228      	adds	r2, #40	@ 0x28
 80047f4:	7fdb      	ldrb	r3, [r3, #31]
 80047f6:	7815      	ldrb	r5, [r2, #0]
 80047f8:	18ed      	adds	r5, r5, r3
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80047fa:	8b20      	ldrh	r0, [r4, #24]
 80047fc:	180a      	adds	r2, r1, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80047fe:	42ab      	cmp	r3, r5
 8004800:	dae6      	bge.n	80047d0 <MCPA_flushDataLog+0x14>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8004802:	68a6      	ldr	r6, [r4, #8]
 8004804:	009f      	lsls	r7, r3, #2
 8004806:	59be      	ldr	r6, [r7, r6]
 8004808:	6836      	ldr	r6, [r6, #0]
 800480a:	6016      	str	r6, [r2, #0]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800480c:	6922      	ldr	r2, [r4, #16]
 800480e:	5cd2      	ldrb	r2, [r2, r3]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004810:	3301      	adds	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8004812:	1882      	adds	r2, r0, r2
 8004814:	8322      	strh	r2, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e7ef      	b.n	80047fa <MCPA_flushDataLog+0x3e>

0800481a <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 800481e:	4770      	bx	lr

08004820 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8004820:	7803      	ldrb	r3, [r0, #0]
{
 8004822:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <NTC_Init+0xe>
      NTC_Clear(pHandle);
 8004828:	f7ff fff7 	bl	800481a <NTC_Clear>
}
 800482c:	bd10      	pop	{r4, pc}
      pHandle->hFaultState = MC_NO_ERROR;
 800482e:	2300      	movs	r3, #0
 8004830:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004832:	8883      	ldrh	r3, [r0, #4]
 8004834:	8043      	strh	r3, [r0, #2]
}
 8004836:	e7f9      	b.n	800482c <NTC_Init+0xc>

08004838 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004838:	6803      	ldr	r3, [r0, #0]
 800483a:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800483c:	8c03      	ldrh	r3, [r0, #32]
 800483e:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004844:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004846:	4770      	bx	lr

08004848 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004848:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800484a:	4770      	bx	lr

0800484c <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 800484c:	b570      	push	{r4, r5, r6, lr}
    int32_t wProportional_Term;
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800484e:	2314      	movs	r3, #20
 8004850:	5ec4      	ldrsh	r4, [r0, r3]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004852:	2316      	movs	r3, #22
 8004854:	5ec2      	ldrsh	r2, [r0, r3]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8004856:	2506      	movs	r5, #6
 8004858:	5f46      	ldrsh	r6, [r0, r5]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800485a:	2504      	movs	r5, #4
 800485c:	5f43      	ldrsh	r3, [r0, r5]
 800485e:	2500      	movs	r5, #0
 8004860:	434b      	muls	r3, r1
    if (0 == pHandle->hKiGain)
 8004862:	42ae      	cmp	r6, r5
 8004864:	d00f      	beq.n	8004886 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004866:	4371      	muls	r1, r6
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004868:	6885      	ldr	r5, [r0, #8]

      if (wIntegral_sum_temp < 0)
 800486a:	186e      	adds	r6, r5, r1
 800486c:	d519      	bpl.n	80048a2 <PI_Controller+0x56>
      {
        if (pHandle->wIntegralTerm > 0)
 800486e:	2d00      	cmp	r5, #0
 8004870:	dd02      	ble.n	8004878 <PI_Controller+0x2c>
        {
          if (wIntegral_Term > 0)
 8004872:	2900      	cmp	r1, #0
 8004874:	dd00      	ble.n	8004878 <PI_Controller+0x2c>
          {
            wIntegral_sum_temp = INT32_MAX;
 8004876:	4e10      	ldr	r6, [pc, #64]	@ (80048b8 <PI_Controller+0x6c>)
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004878:	68c5      	ldr	r5, [r0, #12]
 800487a:	42b5      	cmp	r5, r6
 800487c:	db03      	blt.n	8004886 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800487e:	6905      	ldr	r5, [r0, #16]
 8004880:	42b5      	cmp	r5, r6
 8004882:	da00      	bge.n	8004886 <PI_Controller+0x3a>
 8004884:	0035      	movs	r5, r6
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004886:	002e      	movs	r6, r5
 8004888:	8b81      	ldrh	r1, [r0, #28]
 800488a:	410b      	asrs	r3, r1
 800488c:	8bc1      	ldrh	r1, [r0, #30]
 800488e:	410e      	asrs	r6, r1
 8004890:	199b      	adds	r3, r3, r6
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004892:	429c      	cmp	r4, r3
 8004894:	da09      	bge.n	80048aa <PI_Controller+0x5e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004896:	1ae1      	subs	r1, r4, r3
      wOutput_32 = hUpperOutputLimit;
 8004898:	0023      	movs	r3, r4
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 800489a:	1949      	adds	r1, r1, r5
 800489c:	6081      	str	r1, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 800489e:	b218      	sxth	r0, r3
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->wIntegralTerm < 0)
 80048a2:	4029      	ands	r1, r5
 80048a4:	d5e8      	bpl.n	8004878 <PI_Controller+0x2c>
            wIntegral_sum_temp = -INT32_MAX;
 80048a6:	4e05      	ldr	r6, [pc, #20]	@ (80048bc <PI_Controller+0x70>)
 80048a8:	e7e6      	b.n	8004878 <PI_Controller+0x2c>
    int32_t wDischarge = 0;
 80048aa:	2100      	movs	r1, #0
    else if (wOutput_32 < hLowerOutputLimit)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	ddf4      	ble.n	800489a <PI_Controller+0x4e>
      wDischarge = hLowerOutputLimit - wOutput_32;
 80048b0:	1ad1      	subs	r1, r2, r3
      wOutput_32 = hLowerOutputLimit;
 80048b2:	0013      	movs	r3, r2
 80048b4:	e7f1      	b.n	800489a <PI_Controller+0x4e>
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	7fffffff 	.word	0x7fffffff
 80048bc:	80000001 	.word	0x80000001

080048c0 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 80048c0:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80048c2:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80048c4:	210c      	movs	r1, #12
 80048c6:	5e5a      	ldrsh	r2, [r3, r1]
 80048c8:	2416      	movs	r4, #22
 80048ca:	5f19      	ldrsh	r1, [r3, r4]
 80048cc:	4351      	muls	r1, r2
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80048ce:	240e      	movs	r4, #14
 80048d0:	5f1a      	ldrsh	r2, [r3, r4]
 80048d2:	2418      	movs	r4, #24
 80048d4:	5f1b      	ldrsh	r3, [r3, r4]
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80048d6:	240f      	movs	r4, #15
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80048d8:	4353      	muls	r3, r2
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80048da:	18c9      	adds	r1, r1, r3
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80048dc:	2300      	movs	r3, #0
 80048de:	5ec2      	ldrsh	r2, [r0, r3]
    wAux /= 65536;
 80048e0:	17cb      	asrs	r3, r1, #31
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	185b      	adds	r3, r3, r1
 80048e6:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	17d9      	asrs	r1, r3, #31
 80048ec:	4021      	ands	r1, r4
 80048ee:	18cb      	adds	r3, r1, r3
 80048f0:	111b      	asrs	r3, r3, #4
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80048f6:	bd10      	pop	{r4, pc}

080048f8 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80048fc:	4770      	bx	lr

080048fe <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80048fe:	3201      	adds	r2, #1
{
 8004900:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004902:	0854      	lsrs	r4, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004904:	2203      	movs	r2, #3
 8004906:	4252      	negs	r2, r2
 8004908:	6102      	str	r2, [r0, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800490a:	2602      	movs	r6, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 800490c:	2200      	movs	r2, #0
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 800490e:	0164      	lsls	r4, r4, #5
    while (*cnt < NB_CONVERSIONS)
 8004910:	781d      	ldrb	r5, [r3, #0]
 8004912:	2d0f      	cmp	r5, #15
 8004914:	d80e      	bhi.n	8004934 <waitForPolarizationEnd+0x36>
 8004916:	6905      	ldr	r5, [r0, #16]
 8004918:	4235      	tst	r5, r6
 800491a:	d0f9      	beq.n	8004910 <waitForPolarizationEnd+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800491c:	2503      	movs	r5, #3
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800491e:	3201      	adds	r2, #1
 8004920:	426d      	negs	r5, r5
 8004922:	b292      	uxth	r2, r2
 8004924:	6105      	str	r5, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004926:	4294      	cmp	r4, r2
 8004928:	d8f2      	bhi.n	8004910 <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 800492a:	781d      	ldrb	r5, [r3, #0]
 800492c:	2d0f      	cmp	r5, #15
 800492e:	d8ef      	bhi.n	8004910 <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 8004930:	2301      	movs	r3, #1
 8004932:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8004934:	bd70      	pop	{r4, r5, r6, pc}

08004936 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8004936:	8a42      	ldrh	r2, [r0, #18]
 8004938:	8983      	ldrh	r3, [r0, #12]
{
 800493a:	b510      	push	{r4, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800493c:	189b      	adds	r3, r3, r2
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800493e:	2200      	movs	r2, #0
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8004940:	085b      	lsrs	r3, r3, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8004942:	8941      	ldrh	r1, [r0, #10]
 8004944:	4291      	cmp	r1, r2
 8004946:	d804      	bhi.n	8004952 <RVBS_Clear+0x1c>
    {
      pHandle->aBuffer[index] = aux;
    }
    pHandle->_Super.LatestConv = aux;
 8004948:	8083      	strh	r3, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 800494a:	80c3      	strh	r3, [r0, #6]
    pHandle->index = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8004950:	bd10      	pop	{r4, pc}
      pHandle->aBuffer[index] = aux;
 8004952:	6941      	ldr	r1, [r0, #20]
 8004954:	0054      	lsls	r4, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8004956:	3201      	adds	r2, #1
      pHandle->aBuffer[index] = aux;
 8004958:	5263      	strh	r3, [r4, r1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800495a:	b292      	uxth	r2, r2
 800495c:	e7f1      	b.n	8004942 <RVBS_Clear+0xc>

0800495e <RVBS_Init>:
{
 800495e:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8004960:	f7ff ffe9 	bl	8004936 <RVBS_Clear>
}
 8004964:	bd10      	pop	{r4, pc}

08004966 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8004966:	b530      	push	{r4, r5, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8004968:	8981      	ldrh	r1, [r0, #12]
 800496a:	89c4      	ldrh	r4, [r0, #14]
{
 800496c:	0003      	movs	r3, r0
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800496e:	88c2      	ldrh	r2, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8004970:	42a1      	cmp	r1, r4
 8004972:	d107      	bne.n	8004984 <RVBS_CheckFaultState+0x1e>
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8004974:	4291      	cmp	r1, r2
 8004976:	d30e      	bcc.n	8004996 <RVBS_CheckFaultState+0x30>
      {
        fault = MC_OVER_VOLT;
      }
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004978:	8a43      	ldrh	r3, [r0, #18]
 800497a:	429a      	cmp	r2, r3
 800497c:	4192      	sbcs	r2, r2
 800497e:	4252      	negs	r2, r2
 8004980:	0090      	lsls	r0, r2, #2
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8004982:	bd30      	pop	{r4, r5, pc}
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004984:	8a45      	ldrh	r5, [r0, #18]
        fault = MC_UNDER_VOLT;
 8004986:	2004      	movs	r0, #4
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004988:	4295      	cmp	r5, r2
 800498a:	d8fa      	bhi.n	8004982 <RVBS_CheckFaultState+0x1c>
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800498c:	7c18      	ldrb	r0, [r3, #16]
 800498e:	2800      	cmp	r0, #0
 8004990:	d107      	bne.n	80049a2 <RVBS_CheckFaultState+0x3c>
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8004992:	4294      	cmp	r4, r2
 8004994:	d801      	bhi.n	800499a <RVBS_CheckFaultState+0x34>
          fault = MC_OVER_VOLT;
 8004996:	2002      	movs	r0, #2
 8004998:	e7f3      	b.n	8004982 <RVBS_CheckFaultState+0x1c>
          pHandle->OverVoltageHysteresisUpDir = true;
 800499a:	2201      	movs	r2, #1
 800499c:	741a      	strb	r2, [r3, #16]
          fault = MC_NO_ERROR;
 800499e:	2000      	movs	r0, #0
 80049a0:	e7ef      	b.n	8004982 <RVBS_CheckFaultState+0x1c>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d2fb      	bcs.n	800499e <RVBS_CheckFaultState+0x38>
          pHandle->OverVoltageHysteresisUpDir = false;
 80049a6:	2200      	movs	r2, #0
 80049a8:	741a      	strb	r2, [r3, #16]
          fault = MC_OVER_VOLT;
 80049aa:	e7f4      	b.n	8004996 <RVBS_CheckFaultState+0x30>

080049ac <RVBS_CalcAvVbus>:
{
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (0xFFFFU == hAux)
 80049ae:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <RVBS_CalcAvVbus+0x50>)
{
 80049b0:	0004      	movs	r4, r0
 80049b2:	000f      	movs	r7, r1
    if (0xFFFFU == hAux)
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d014      	beq.n	80049e2 <RVBS_CalcAvVbus+0x36>
      pHandle->aBuffer[pHandle->index] = hAux;
 80049b8:	7e45      	ldrb	r5, [r0, #25]
 80049ba:	6943      	ldr	r3, [r0, #20]
 80049bc:	006a      	lsls	r2, r5, #1
 80049be:	52d1      	strh	r1, [r2, r3]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80049c0:	8946      	ldrh	r6, [r0, #10]
      wtemp = 0u;
 80049c2:	2000      	movs	r0, #0
 80049c4:	b2f2      	uxtb	r2, r6
 80049c6:	0052      	lsls	r2, r2, #1
 80049c8:	189a      	adds	r2, r3, r2
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10e      	bne.n	80049ec <RVBS_CalcAvVbus+0x40>
      wtemp /= pHandle->LowPassFilterBW;
 80049ce:	0031      	movs	r1, r6
 80049d0:	f7fb fb8a 	bl	80000e8 <__udivsi3>
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80049d4:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80049d6:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80049d8:	80a7      	strh	r7, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80049da:	42b5      	cmp	r5, r6
 80049dc:	d20a      	bcs.n	80049f4 <RVBS_CalcAvVbus+0x48>
        pHandle->index++;
 80049de:	3501      	adds	r5, #1
 80049e0:	7665      	strb	r5, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff ffbf 	bl	8004966 <RVBS_CheckFaultState>
 80049e8:	8120      	strh	r0, [r4, #8]
}
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wtemp += pHandle->aBuffer[i];
 80049ec:	8819      	ldrh	r1, [r3, #0]
 80049ee:	3302      	adds	r3, #2
 80049f0:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80049f2:	e7ea      	b.n	80049ca <RVBS_CalcAvVbus+0x1e>
        pHandle->index = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	7663      	strb	r3, [r4, #25]
 80049f8:	e7f3      	b.n	80049e2 <RVBS_CalcAvVbus+0x36>
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	0000ffff 	.word	0x0000ffff

08004a00 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8004a04:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8004a06:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8004a08:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8004a0e:	4770      	bx	lr

08004a10 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8004a10:	2304      	movs	r3, #4
 8004a12:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004a14:	4770      	bx	lr

08004a16 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8004a16:	230c      	movs	r3, #12
 8004a18:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004a1a:	4770      	bx	lr

08004a1c <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004a20:	4770      	bx	lr

08004a22 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8004a22:	b570      	push	{r4, r5, r6, lr}
 8004a24:	0002      	movs	r2, r0
#endif
    uint16_t hAbsMecSpeedUnit;
    uint16_t hAbsMecAccelUnitP;
    int16_t hAux;
    uint8_t bSpeedErrorNumber;
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8004a26:	78c3      	ldrb	r3, [r0, #3]
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8004a28:	7804      	ldrb	r4, [r0, #0]

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	5e08      	ldrsh	r0, [r1, r0]
    {
      hAux = -(*pMecSpeedUnit);
 8004a2e:	b281      	uxth	r1, r0
    if (*pMecSpeedUnit < 0)
 8004a30:	2800      	cmp	r0, #0
 8004a32:	da01      	bge.n	8004a38 <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 8004a34:	4249      	negs	r1, r1
 8004a36:	b289      	uxth	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8004a38:	8ad6      	ldrh	r6, [r2, #22]
    {
      SpeedError = true;
 8004a3a:	2001      	movs	r0, #1
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8004a3c:	8a95      	ldrh	r5, [r2, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8004a3e:	428e      	cmp	r6, r1
 8004a40:	d802      	bhi.n	8004a48 <SPD_IsMecSpeedReliable+0x26>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8004a42:	428d      	cmp	r5, r1
 8004a44:	4189      	sbcs	r1, r1
 8004a46:	4248      	negs	r0, r1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8004a48:	2112      	movs	r1, #18
 8004a4a:	5e55      	ldrsh	r5, [r2, r1]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8004a4c:	b2a9      	uxth	r1, r5
    if (pHandle->hMecAccelUnitP < 0)
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	da01      	bge.n	8004a56 <SPD_IsMecSpeedReliable+0x34>
      hAux = -(pHandle->hMecAccelUnitP);
 8004a52:	4249      	negs	r1, r1
 8004a54:	b289      	uxth	r1, r1
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8004a56:	8b15      	ldrh	r5, [r2, #24]
 8004a58:	428d      	cmp	r5, r1
 8004a5a:	d301      	bcc.n	8004a60 <SPD_IsMecSpeedReliable+0x3e>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d009      	beq.n	8004a74 <SPD_IsMecSpeedReliable+0x52>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d901      	bls.n	8004a68 <SPD_IsMecSpeedReliable+0x46>
      {
        bSpeedErrorNumber++;
 8004a64:	3401      	adds	r4, #1
 8004a66:	b2e4      	uxtb	r4, r4
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8004a68:	1ae3      	subs	r3, r4, r3
 8004a6a:	1e59      	subs	r1, r3, #1
 8004a6c:	418b      	sbcs	r3, r1
 8004a6e:	b2d8      	uxtb	r0, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8004a70:	7014      	strb	r4, [r2, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8004a72:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	d9f7      	bls.n	8004a68 <SPD_IsMecSpeedReliable+0x46>
        bSpeedErrorNumber = 0u;
 8004a78:	0004      	movs	r4, r0
  bool SpeedSensorReliability = true;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e7f8      	b.n	8004a70 <SPD_IsMecSpeedReliable+0x4e>

08004a7e <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8004a7e:	0003      	movs	r3, r0
    pHandle->SPD = SPD_Handle;
 8004a80:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8004a82:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8004a84:	332a      	adds	r3, #42	@ 0x2a
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8004a8a:	222c      	movs	r2, #44	@ 0x2c
 8004a8c:	5e83      	ldrsh	r3, [r0, r2]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8004a92:	222e      	movs	r2, #46	@ 0x2e
 8004a94:	5e83      	ldrsh	r3, [r0, r2]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8004a9e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8004aa0:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004aa2:	4770      	bx	lr

08004aa4 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8004aa4:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004aa6:	4770      	bx	lr

08004aa8 <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8004aa8:	6940      	ldr	r0, [r0, #20]
#endif
}
 8004aaa:	4770      	bx	lr

08004aac <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8004aac:	7803      	ldrb	r3, [r0, #0]
{
 8004aae:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d103      	bne.n	8004abc <STC_Clear+0x10>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6900      	ldr	r0, [r0, #16]
 8004ab8:	f7ff fec6 	bl	8004848 <PID_SetIntegralTerm>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004abc:	bd10      	pop	{r4, pc}

08004abe <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8004abe:	6880      	ldr	r0, [r0, #8]
 8004ac0:	1400      	asrs	r0, r0, #16
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8004ac2:	4770      	bx	lr

08004ac4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8004ac4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8004ac6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8004ac8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004aca:	4770      	bx	lr

08004acc <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004ace:	7803      	ldrb	r3, [r0, #0]
{
 8004ad0:	0004      	movs	r4, r0
 8004ad2:	000d      	movs	r5, r1
 8004ad4:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d109      	bne.n	8004aee <STC_ExecRamp+0x22>
    {
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8004ada:	f7ff fff0 	bl	8004abe <STC_GetTorqueRef>
      }
      else
      {
        /* Nothing to do */
      }
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8004ade:	2128      	movs	r1, #40	@ 0x28
 8004ae0:	5e62      	ldrsh	r2, [r4, r1]
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8004ae2:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8004ae4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8004ae6:	42aa      	cmp	r2, r5
 8004ae8:	dd0f      	ble.n	8004b0a <STC_ExecRamp+0x3e>
 8004aea:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8004aee:	6847      	ldr	r7, [r0, #4]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8004af0:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8004af2:	143f      	asrs	r7, r7, #16
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	dbf8      	blt.n	8004aea <STC_ExecRamp+0x1e>
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8004af8:	2224      	movs	r2, #36	@ 0x24
 8004afa:	5e83      	ldrsh	r3, [r0, r2]
 8004afc:	428b      	cmp	r3, r1
 8004afe:	dcf4      	bgt.n	8004aea <STC_ExecRamp+0x1e>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8004b00:	8c03      	ldrh	r3, [r0, #32]
 8004b02:	428b      	cmp	r3, r1
 8004b04:	dd03      	ble.n	8004b0e <STC_ExecRamp+0x42>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8004b06:	2222      	movs	r2, #34	@ 0x22
 8004b08:	5e83      	ldrsh	r3, [r0, r2]
    if (true == allowedRange)
 8004b0a:	42ab      	cmp	r3, r5
 8004b0c:	dbed      	blt.n	8004aea <STC_ExecRamp+0x1e>
      if (0U == hDurationms)
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	d10b      	bne.n	8004b2a <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8004b12:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8004b14:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d105      	bne.n	8004b26 <STC_ExecRamp+0x5a>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8004b1a:	6065      	str	r5, [r4, #4]
        pHandle->IncDecAmount = 0;
 8004b1c:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8004b1e:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8004b20:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8004b22:	2001      	movs	r0, #1
 8004b24:	e7e2      	b.n	8004aec <STC_ExecRamp+0x20>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8004b26:	60a5      	str	r5, [r4, #8]
 8004b28:	e7f8      	b.n	8004b1c <STC_ExecRamp+0x50>
        wAux /= 1000U;
 8004b2a:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8004b2c:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8004b2e:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8004b30:	4370      	muls	r0, r6
        wAux /= 1000U;
 8004b32:	0089      	lsls	r1, r1, #2
 8004b34:	f7fb fad8 	bl	80000e8 <__udivsi3>
        pHandle->RampRemainingStep++;
 8004b38:	1c46      	adds	r6, r0, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8004b3a:	1be8      	subs	r0, r5, r7
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8004b3c:	0031      	movs	r1, r6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8004b3e:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8004b40:	f7fb fb5c 	bl	80001fc <__divsi3>
        pHandle->IncDecAmount = wAux1;
 8004b44:	e7eb      	b.n	8004b1e <STC_ExecRamp+0x52>

08004b46 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004b46:	7802      	ldrb	r2, [r0, #0]
{
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004b4c:	2a04      	cmp	r2, #4
 8004b4e:	d116      	bne.n	8004b7e <STC_CalcTorqueReference+0x38>
    {
      wCurrentReference = pHandle->TorqueRef;
 8004b50:	6885      	ldr	r5, [r0, #8]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d914      	bls.n	8004b82 <STC_CalcTorqueReference+0x3c>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8004b58:	69a1      	ldr	r1, [r4, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8004b5a:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8004b5c:	186d      	adds	r5, r5, r1
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of hTargetFinal */
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
      pHandle->RampRemainingStep = 0U;
 8004b5e:	60e3      	str	r3, [r4, #12]
      /* Run the speed control loop */

      /* Compute speed error */
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 8004b60:	142e      	asrs	r6, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8004b62:	2a03      	cmp	r2, #3
 8004b64:	d114      	bne.n	8004b90 <STC_CalcTorqueReference+0x4a>
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
#endif
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8004b66:	6960      	ldr	r0, [r4, #20]
 8004b68:	f7ff ff55 	bl	8004a16 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8004b6c:	1a31      	subs	r1, r6, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8004b6e:	b209      	sxth	r1, r1
 8004b70:	6920      	ldr	r0, [r4, #16]
 8004b72:	f7ff fe6b 	bl	800484c <PI_Controller>

      pHandle->SpeedRefUnitExt = wCurrentReference;
 8004b76:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8004b78:	0405      	lsls	r5, r0, #16
 8004b7a:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8004b7e:	6845      	ldr	r5, [r0, #4]
 8004b80:	e7e7      	b.n	8004b52 <STC_CalcTorqueReference+0xc>
    else if (1U == pHandle->RampRemainingStep)
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d1ec      	bne.n	8004b60 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004b86:	2302      	movs	r3, #2
 8004b88:	5ee5      	ldrsh	r5, [r4, r3]
      pHandle->RampRemainingStep = 0U;
 8004b8a:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004b8c:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8004b8e:	e7e6      	b.n	8004b5e <STC_CalcTorqueReference+0x18>
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8004b90:	b230      	sxth	r0, r6
 8004b92:	e7f2      	b.n	8004b7a <STC_CalcTorqueReference+0x34>

08004b94 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8004b94:	232c      	movs	r3, #44	@ 0x2c
 8004b96:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004b98:	4770      	bx	lr

08004b9a <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8004b9a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8004b9c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004b9e:	0412      	lsls	r2, r2, #16
 8004ba0:	b298      	uxth	r0, r3
{
 8004ba2:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8004ba4:	4310      	orrs	r0, r2
}
 8004ba6:	b002      	add	sp, #8
 8004ba8:	4770      	bx	lr

08004baa <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8004baa:	b510      	push	{r4, lr}
 8004bac:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8004bae:	6940      	ldr	r0, [r0, #20]
 8004bb0:	f7ff ff31 	bl	8004a16 <SPD_GetAvrgMecSpeedUnit>
 8004bb4:	0400      	lsls	r0, r0, #16
 8004bb6:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8004bba:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8004bbc:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8004bbe:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 8004bc0:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8004bc2:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8004bc4:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 8004bc6:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 8004bc8:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->hRemainingStep = 0U;
 8004bca:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8004bcc:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8004bce:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8004bd0:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8004bd2:	4770      	bx	lr

08004bd4 <VSS_Init>:
{
 8004bd4:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 8004bd6:	f7ff fff0 	bl	8004bba <VSS_Clear>
}
 8004bda:	bd10      	pop	{r4, pc}

08004bdc <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	000d      	movs	r5, r1
 8004be0:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 8004be2:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004be4:	7841      	ldrb	r1, [r0, #1]
 8004be6:	0028      	movs	r0, r5
 8004be8:	f7fb fb08 	bl	80001fc <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8004bec:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004bee:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8004bf0:	bd70      	pop	{r4, r5, r6, pc}

08004bf2 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8004bf2:	0003      	movs	r3, r0
{
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (false == pHandle->bTransitionStarted)
 8004bf6:	332c      	adds	r3, #44	@ 0x2c
 8004bf8:	781b      	ldrb	r3, [r3, #0]
{
 8004bfa:	0004      	movs	r4, r0
 8004bfc:	000f      	movs	r7, r1
 8004bfe:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d111      	bne.n	8004c28 <VSS_SetMecAcceleration+0x36>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c04:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8004c06:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c08:	9300      	str	r3, [sp, #0]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8004c0a:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8004c0c:	8b61      	ldrh	r1, [r4, #26]
 8004c0e:	0109      	lsls	r1, r1, #4
                                              / (((int32_t)SPEED_UNIT)
 8004c10:	f7fb faf4 	bl	80001fc <__divsi3>
 8004c14:	9001      	str	r0, [sp, #4]
      if (0U == hDurationms)
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	d107      	bne.n	8004c2a <VSS_SetMecAcceleration+0x38>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	9a00      	ldr	r2, [sp, #0]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8004c1e:	81a7      	strh	r7, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c20:	4353      	muls	r3, r2

        pHandle->hRemainingStep = 0U;
 8004c22:	8525      	strh	r5, [r4, #40]	@ 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c24:	81e3      	strh	r3, [r4, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8004c26:	8567      	strh	r7, [r4, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8004c28:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8004c2a:	21fa      	movs	r1, #250	@ 0xfa
 8004c2c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8004c2e:	0089      	lsls	r1, r1, #2
 8004c30:	4368      	muls	r0, r5
 8004c32:	f7fb fa59 	bl	80000e8 <__udivsi3>
        hNbrStep++;
 8004c36:	3001      	adds	r0, #1
 8004c38:	b286      	uxth	r6, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c3a:	230e      	movs	r3, #14
 8004c3c:	5ee5      	ldrsh	r5, [r4, r3]
        pHandle->hRemainingStep = hNbrStep;
 8004c3e:	8526      	strh	r6, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	d010      	beq.n	8004c66 <VSS_SetMecAcceleration+0x74>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004c44:	466b      	mov	r3, sp
 8004c46:	2204      	movs	r2, #4
 8004c48:	5e9b      	ldrsh	r3, [r3, r2]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c4a:	9900      	ldr	r1, [sp, #0]
 8004c4c:	0028      	movs	r0, r5
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004c4e:	9301      	str	r3, [sp, #4]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c50:	f7fb fad4 	bl	80001fc <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	0031      	movs	r1, r6
 8004c58:	1a18      	subs	r0, r3, r0
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8004c5a:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8004c5c:	f7fb face 	bl	80001fc <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8004c60:	9b00      	ldr	r3, [sp, #0]
 8004c62:	4343      	muls	r3, r0
 8004c64:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004c66:	042b      	lsls	r3, r5, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8004c68:	8567      	strh	r7, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8004c6a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8004c6c:	e7dc      	b.n	8004c28 <VSS_SetMecAcceleration+0x36>

08004c6e <memset>:
 8004c6e:	0003      	movs	r3, r0
 8004c70:	1882      	adds	r2, r0, r2
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d100      	bne.n	8004c78 <memset+0xa>
 8004c76:	4770      	bx	lr
 8004c78:	7019      	strb	r1, [r3, #0]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	e7f9      	b.n	8004c72 <memset+0x4>
	...

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	2600      	movs	r6, #0
 8004c84:	4c0c      	ldr	r4, [pc, #48]	@ (8004cb8 <__libc_init_array+0x38>)
 8004c86:	4d0d      	ldr	r5, [pc, #52]	@ (8004cbc <__libc_init_array+0x3c>)
 8004c88:	1b64      	subs	r4, r4, r5
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	2600      	movs	r6, #0
 8004c92:	f000 f823 	bl	8004cdc <_init>
 8004c96:	4c0a      	ldr	r4, [pc, #40]	@ (8004cc0 <__libc_init_array+0x40>)
 8004c98:	4d0a      	ldr	r5, [pc, #40]	@ (8004cc4 <__libc_init_array+0x44>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	00b3      	lsls	r3, r6, #2
 8004ca6:	58eb      	ldr	r3, [r5, r3]
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	00b3      	lsls	r3, r6, #2
 8004cb0:	58eb      	ldr	r3, [r5, r3]
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
	...

08004cc8 <memcpy>:
 8004cc8:	2300      	movs	r3, #0
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d100      	bne.n	8004cd2 <memcpy+0xa>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	5ccc      	ldrb	r4, [r1, r3]
 8004cd4:	54c4      	strb	r4, [r0, r3]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	e7f8      	b.n	8004ccc <memcpy+0x4>
	...

08004cdc <_init>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_fini>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr
