
motor_driver_eval_graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005188  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08005244  08005244  00006244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  00007300  2**0
                  CONTENTS
  4 .ARM          00000000  08005d24  08005d24  00007300  2**0
                  CONTENTS
  5 .data         00000300  20000000  08005d24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e0  20000300  08006024  00007300  2**2
                  ALLOC
  7 ._user_heap_stack 00000480  200006e0  08006024  000076e0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00007300  2**0
                  CONTENTS, READONLY
  9 .debug_line   000241bf  00000000  00000000  00007328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000092  00000000  00000000  0002b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0002e0f8  00000000  00000000  0002b579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005da9  00000000  00000000  00059671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001910  00000000  00000000  0005f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00008fd4  00000000  00000000  00060d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024d0  00000000  00000000  00069d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0006c1d4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004150  00000000  00000000  0006c218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000131ad  00000000  00000000  00070368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__udivsi3>:
 80000bc:	2200      	movs	r2, #0
 80000be:	0843      	lsrs	r3, r0, #1
 80000c0:	428b      	cmp	r3, r1
 80000c2:	d374      	bcc.n	80001ae <__udivsi3+0xf2>
 80000c4:	0903      	lsrs	r3, r0, #4
 80000c6:	428b      	cmp	r3, r1
 80000c8:	d35f      	bcc.n	800018a <__udivsi3+0xce>
 80000ca:	0a03      	lsrs	r3, r0, #8
 80000cc:	428b      	cmp	r3, r1
 80000ce:	d344      	bcc.n	800015a <__udivsi3+0x9e>
 80000d0:	0b03      	lsrs	r3, r0, #12
 80000d2:	428b      	cmp	r3, r1
 80000d4:	d328      	bcc.n	8000128 <__udivsi3+0x6c>
 80000d6:	0c03      	lsrs	r3, r0, #16
 80000d8:	428b      	cmp	r3, r1
 80000da:	d30d      	bcc.n	80000f8 <__udivsi3+0x3c>
 80000dc:	22ff      	movs	r2, #255	@ 0xff
 80000de:	0209      	lsls	r1, r1, #8
 80000e0:	ba12      	rev	r2, r2
 80000e2:	0c03      	lsrs	r3, r0, #16
 80000e4:	428b      	cmp	r3, r1
 80000e6:	d302      	bcc.n	80000ee <__udivsi3+0x32>
 80000e8:	1212      	asrs	r2, r2, #8
 80000ea:	0209      	lsls	r1, r1, #8
 80000ec:	d065      	beq.n	80001ba <__udivsi3+0xfe>
 80000ee:	0b03      	lsrs	r3, r0, #12
 80000f0:	428b      	cmp	r3, r1
 80000f2:	d319      	bcc.n	8000128 <__udivsi3+0x6c>
 80000f4:	e000      	b.n	80000f8 <__udivsi3+0x3c>
 80000f6:	0a09      	lsrs	r1, r1, #8
 80000f8:	0bc3      	lsrs	r3, r0, #15
 80000fa:	428b      	cmp	r3, r1
 80000fc:	d301      	bcc.n	8000102 <__udivsi3+0x46>
 80000fe:	03cb      	lsls	r3, r1, #15
 8000100:	1ac0      	subs	r0, r0, r3
 8000102:	4152      	adcs	r2, r2
 8000104:	0b83      	lsrs	r3, r0, #14
 8000106:	428b      	cmp	r3, r1
 8000108:	d301      	bcc.n	800010e <__udivsi3+0x52>
 800010a:	038b      	lsls	r3, r1, #14
 800010c:	1ac0      	subs	r0, r0, r3
 800010e:	4152      	adcs	r2, r2
 8000110:	0b43      	lsrs	r3, r0, #13
 8000112:	428b      	cmp	r3, r1
 8000114:	d301      	bcc.n	800011a <__udivsi3+0x5e>
 8000116:	034b      	lsls	r3, r1, #13
 8000118:	1ac0      	subs	r0, r0, r3
 800011a:	4152      	adcs	r2, r2
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d301      	bcc.n	8000126 <__udivsi3+0x6a>
 8000122:	030b      	lsls	r3, r1, #12
 8000124:	1ac0      	subs	r0, r0, r3
 8000126:	4152      	adcs	r2, r2
 8000128:	0ac3      	lsrs	r3, r0, #11
 800012a:	428b      	cmp	r3, r1
 800012c:	d301      	bcc.n	8000132 <__udivsi3+0x76>
 800012e:	02cb      	lsls	r3, r1, #11
 8000130:	1ac0      	subs	r0, r0, r3
 8000132:	4152      	adcs	r2, r2
 8000134:	0a83      	lsrs	r3, r0, #10
 8000136:	428b      	cmp	r3, r1
 8000138:	d301      	bcc.n	800013e <__udivsi3+0x82>
 800013a:	028b      	lsls	r3, r1, #10
 800013c:	1ac0      	subs	r0, r0, r3
 800013e:	4152      	adcs	r2, r2
 8000140:	0a43      	lsrs	r3, r0, #9
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x8e>
 8000146:	024b      	lsls	r3, r1, #9
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0a03      	lsrs	r3, r0, #8
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x9a>
 8000152:	020b      	lsls	r3, r1, #8
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	d2cd      	bcs.n	80000f6 <__udivsi3+0x3a>
 800015a:	09c3      	lsrs	r3, r0, #7
 800015c:	428b      	cmp	r3, r1
 800015e:	d301      	bcc.n	8000164 <__udivsi3+0xa8>
 8000160:	01cb      	lsls	r3, r1, #7
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	4152      	adcs	r2, r2
 8000166:	0983      	lsrs	r3, r0, #6
 8000168:	428b      	cmp	r3, r1
 800016a:	d301      	bcc.n	8000170 <__udivsi3+0xb4>
 800016c:	018b      	lsls	r3, r1, #6
 800016e:	1ac0      	subs	r0, r0, r3
 8000170:	4152      	adcs	r2, r2
 8000172:	0943      	lsrs	r3, r0, #5
 8000174:	428b      	cmp	r3, r1
 8000176:	d301      	bcc.n	800017c <__udivsi3+0xc0>
 8000178:	014b      	lsls	r3, r1, #5
 800017a:	1ac0      	subs	r0, r0, r3
 800017c:	4152      	adcs	r2, r2
 800017e:	0903      	lsrs	r3, r0, #4
 8000180:	428b      	cmp	r3, r1
 8000182:	d301      	bcc.n	8000188 <__udivsi3+0xcc>
 8000184:	010b      	lsls	r3, r1, #4
 8000186:	1ac0      	subs	r0, r0, r3
 8000188:	4152      	adcs	r2, r2
 800018a:	08c3      	lsrs	r3, r0, #3
 800018c:	428b      	cmp	r3, r1
 800018e:	d301      	bcc.n	8000194 <__udivsi3+0xd8>
 8000190:	00cb      	lsls	r3, r1, #3
 8000192:	1ac0      	subs	r0, r0, r3
 8000194:	4152      	adcs	r2, r2
 8000196:	0883      	lsrs	r3, r0, #2
 8000198:	428b      	cmp	r3, r1
 800019a:	d301      	bcc.n	80001a0 <__udivsi3+0xe4>
 800019c:	008b      	lsls	r3, r1, #2
 800019e:	1ac0      	subs	r0, r0, r3
 80001a0:	4152      	adcs	r2, r2
 80001a2:	0843      	lsrs	r3, r0, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xf0>
 80001a8:	004b      	lsls	r3, r1, #1
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	1a41      	subs	r1, r0, r1
 80001b0:	d200      	bcs.n	80001b4 <__udivsi3+0xf8>
 80001b2:	4601      	mov	r1, r0
 80001b4:	4152      	adcs	r2, r2
 80001b6:	4610      	mov	r0, r2
 80001b8:	4770      	bx	lr
 80001ba:	e7ff      	b.n	80001bc <__udivsi3+0x100>
 80001bc:	b501      	push	{r0, lr}
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 f8f0 	bl	80003a4 <__aeabi_idiv0>
 80001c4:	bd02      	pop	{r1, pc}
 80001c6:	46c0      	nop			@ (mov r8, r8)

080001c8 <__aeabi_uidivmod>:
 80001c8:	2900      	cmp	r1, #0
 80001ca:	d0f7      	beq.n	80001bc <__udivsi3+0x100>
 80001cc:	e776      	b.n	80000bc <__udivsi3>
 80001ce:	4770      	bx	lr

080001d0 <__divsi3>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	430b      	orrs	r3, r1
 80001d4:	d47f      	bmi.n	80002d6 <__divsi3+0x106>
 80001d6:	2200      	movs	r2, #0
 80001d8:	0843      	lsrs	r3, r0, #1
 80001da:	428b      	cmp	r3, r1
 80001dc:	d374      	bcc.n	80002c8 <__divsi3+0xf8>
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d35f      	bcc.n	80002a4 <__divsi3+0xd4>
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d344      	bcc.n	8000274 <__divsi3+0xa4>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d328      	bcc.n	8000242 <__divsi3+0x72>
 80001f0:	0c03      	lsrs	r3, r0, #16
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d30d      	bcc.n	8000212 <__divsi3+0x42>
 80001f6:	22ff      	movs	r2, #255	@ 0xff
 80001f8:	0209      	lsls	r1, r1, #8
 80001fa:	ba12      	rev	r2, r2
 80001fc:	0c03      	lsrs	r3, r0, #16
 80001fe:	428b      	cmp	r3, r1
 8000200:	d302      	bcc.n	8000208 <__divsi3+0x38>
 8000202:	1212      	asrs	r2, r2, #8
 8000204:	0209      	lsls	r1, r1, #8
 8000206:	d065      	beq.n	80002d4 <__divsi3+0x104>
 8000208:	0b03      	lsrs	r3, r0, #12
 800020a:	428b      	cmp	r3, r1
 800020c:	d319      	bcc.n	8000242 <__divsi3+0x72>
 800020e:	e000      	b.n	8000212 <__divsi3+0x42>
 8000210:	0a09      	lsrs	r1, r1, #8
 8000212:	0bc3      	lsrs	r3, r0, #15
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__divsi3+0x4c>
 8000218:	03cb      	lsls	r3, r1, #15
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0b83      	lsrs	r3, r0, #14
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__divsi3+0x58>
 8000224:	038b      	lsls	r3, r1, #14
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0b43      	lsrs	r3, r0, #13
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__divsi3+0x64>
 8000230:	034b      	lsls	r3, r1, #13
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__divsi3+0x70>
 800023c:	030b      	lsls	r3, r1, #12
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0ac3      	lsrs	r3, r0, #11
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__divsi3+0x7c>
 8000248:	02cb      	lsls	r3, r1, #11
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0a83      	lsrs	r3, r0, #10
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x88>
 8000254:	028b      	lsls	r3, r1, #10
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0a43      	lsrs	r3, r0, #9
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x94>
 8000260:	024b      	lsls	r3, r1, #9
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0a03      	lsrs	r3, r0, #8
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0xa0>
 800026c:	020b      	lsls	r3, r1, #8
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	d2cd      	bcs.n	8000210 <__divsi3+0x40>
 8000274:	09c3      	lsrs	r3, r0, #7
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__divsi3+0xae>
 800027a:	01cb      	lsls	r3, r1, #7
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	0983      	lsrs	r3, r0, #6
 8000282:	428b      	cmp	r3, r1
 8000284:	d301      	bcc.n	800028a <__divsi3+0xba>
 8000286:	018b      	lsls	r3, r1, #6
 8000288:	1ac0      	subs	r0, r0, r3
 800028a:	4152      	adcs	r2, r2
 800028c:	0943      	lsrs	r3, r0, #5
 800028e:	428b      	cmp	r3, r1
 8000290:	d301      	bcc.n	8000296 <__divsi3+0xc6>
 8000292:	014b      	lsls	r3, r1, #5
 8000294:	1ac0      	subs	r0, r0, r3
 8000296:	4152      	adcs	r2, r2
 8000298:	0903      	lsrs	r3, r0, #4
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0xd2>
 800029e:	010b      	lsls	r3, r1, #4
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	08c3      	lsrs	r3, r0, #3
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d301      	bcc.n	80002ae <__divsi3+0xde>
 80002aa:	00cb      	lsls	r3, r1, #3
 80002ac:	1ac0      	subs	r0, r0, r3
 80002ae:	4152      	adcs	r2, r2
 80002b0:	0883      	lsrs	r3, r0, #2
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__divsi3+0xea>
 80002b6:	008b      	lsls	r3, r1, #2
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	0843      	lsrs	r3, r0, #1
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xf6>
 80002c2:	004b      	lsls	r3, r1, #1
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	1a41      	subs	r1, r0, r1
 80002ca:	d200      	bcs.n	80002ce <__divsi3+0xfe>
 80002cc:	4601      	mov	r1, r0
 80002ce:	4152      	adcs	r2, r2
 80002d0:	4610      	mov	r0, r2
 80002d2:	4770      	bx	lr
 80002d4:	e05d      	b.n	8000392 <__divsi3+0x1c2>
 80002d6:	0fca      	lsrs	r2, r1, #31
 80002d8:	d000      	beq.n	80002dc <__divsi3+0x10c>
 80002da:	4249      	negs	r1, r1
 80002dc:	1003      	asrs	r3, r0, #32
 80002de:	d300      	bcc.n	80002e2 <__divsi3+0x112>
 80002e0:	4240      	negs	r0, r0
 80002e2:	4053      	eors	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	469c      	mov	ip, r3
 80002e8:	0903      	lsrs	r3, r0, #4
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d32d      	bcc.n	800034a <__divsi3+0x17a>
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d312      	bcc.n	800031a <__divsi3+0x14a>
 80002f4:	22fc      	movs	r2, #252	@ 0xfc
 80002f6:	0189      	lsls	r1, r1, #6
 80002f8:	ba12      	rev	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d30c      	bcc.n	800031a <__divsi3+0x14a>
 8000300:	0189      	lsls	r1, r1, #6
 8000302:	1192      	asrs	r2, r2, #6
 8000304:	428b      	cmp	r3, r1
 8000306:	d308      	bcc.n	800031a <__divsi3+0x14a>
 8000308:	0189      	lsls	r1, r1, #6
 800030a:	1192      	asrs	r2, r2, #6
 800030c:	428b      	cmp	r3, r1
 800030e:	d304      	bcc.n	800031a <__divsi3+0x14a>
 8000310:	0189      	lsls	r1, r1, #6
 8000312:	d03a      	beq.n	800038a <__divsi3+0x1ba>
 8000314:	1192      	asrs	r2, r2, #6
 8000316:	e000      	b.n	800031a <__divsi3+0x14a>
 8000318:	0989      	lsrs	r1, r1, #6
 800031a:	09c3      	lsrs	r3, r0, #7
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x154>
 8000320:	01cb      	lsls	r3, r1, #7
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0983      	lsrs	r3, r0, #6
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x160>
 800032c:	018b      	lsls	r3, r1, #6
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0943      	lsrs	r3, r0, #5
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x16c>
 8000338:	014b      	lsls	r3, r1, #5
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0903      	lsrs	r3, r0, #4
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x178>
 8000344:	010b      	lsls	r3, r1, #4
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	08c3      	lsrs	r3, r0, #3
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x184>
 8000350:	00cb      	lsls	r3, r1, #3
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0883      	lsrs	r3, r0, #2
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x190>
 800035c:	008b      	lsls	r3, r1, #2
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	d2d9      	bcs.n	8000318 <__divsi3+0x148>
 8000364:	0843      	lsrs	r3, r0, #1
 8000366:	428b      	cmp	r3, r1
 8000368:	d301      	bcc.n	800036e <__divsi3+0x19e>
 800036a:	004b      	lsls	r3, r1, #1
 800036c:	1ac0      	subs	r0, r0, r3
 800036e:	4152      	adcs	r2, r2
 8000370:	1a41      	subs	r1, r0, r1
 8000372:	d200      	bcs.n	8000376 <__divsi3+0x1a6>
 8000374:	4601      	mov	r1, r0
 8000376:	4663      	mov	r3, ip
 8000378:	4152      	adcs	r2, r2
 800037a:	105b      	asrs	r3, r3, #1
 800037c:	4610      	mov	r0, r2
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x1b4>
 8000380:	4240      	negs	r0, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d500      	bpl.n	8000388 <__divsi3+0x1b8>
 8000386:	4249      	negs	r1, r1
 8000388:	4770      	bx	lr
 800038a:	4663      	mov	r3, ip
 800038c:	105b      	asrs	r3, r3, #1
 800038e:	d300      	bcc.n	8000392 <__divsi3+0x1c2>
 8000390:	4240      	negs	r0, r0
 8000392:	b501      	push	{r0, lr}
 8000394:	2000      	movs	r0, #0
 8000396:	f000 f805 	bl	80003a4 <__aeabi_idiv0>
 800039a:	bd02      	pop	{r1, pc}

0800039c <__aeabi_idivmod>:
 800039c:	2900      	cmp	r1, #0
 800039e:	d0f8      	beq.n	8000392 <__divsi3+0x1c2>
 80003a0:	e716      	b.n	80001d0 <__divsi3>
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_idiv0>:
 80003a4:	4770      	bx	lr
 80003a6:	46c0      	nop			@ (mov r8, r8)

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f002 fe6c 	bl	8003088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490c      	ldr	r1, [pc, #48]	@ (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a09      	ldr	r2, [pc, #36]	@ (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c09      	ldr	r4, [pc, #36]	@ (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
/*  bl __libc_init_array */
/* Call the application's entry point.*/
  bl main
 80003d6:	f000 f853 	bl	8000480 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 80003e8:	08005d24 	.word	0x08005d24
  ldr r2, =_sbss
 80003ec:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80003f0:	200006e0 	.word	0x200006e0

080003f4 <ADC1_IRQHandler>:
 * @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_IRQHandler>
	...

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b510      	push	{r4, lr}
 80003fa:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fc:	2228      	movs	r2, #40	@ 0x28
 80003fe:	2100      	movs	r1, #0
 8000400:	a80a      	add	r0, sp, #40	@ 0x28
 8000402:	f004 ff01 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	2210      	movs	r2, #16
 8000408:	2100      	movs	r1, #0
 800040a:	4668      	mov	r0, sp
 800040c:	f004 fefc 	bl	8005208 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000410:	2210      	movs	r2, #16
 8000412:	2100      	movs	r1, #0
 8000414:	a804      	add	r0, sp, #16
 8000416:	f004 fef7 	bl	8005208 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800041a:	2211      	movs	r2, #17
 800041c:	2301      	movs	r3, #1
 800041e:	9208      	str	r2, [sp, #32]
 8000420:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000422:	2310      	movs	r3, #16
 8000424:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	2202      	movs	r2, #2
 800042a:	025b      	lsls	r3, r3, #9
 800042c:	9210      	str	r2, [sp, #64]	@ 0x40
 800042e:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000430:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000432:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000434:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000438:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800043a:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f003 f93a 	bl	80036b4 <HAL_RCC_OscConfig>
 8000440:	2800      	cmp	r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000446:	e7fe      	b.n	8000446 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	2101      	movs	r1, #1
 8000454:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000458:	f003 fb84 	bl	8003b64 <HAL_RCC_ClockConfig>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x6c>
 8000460:	b672      	cpsid	i
  while (1)
 8000462:	e7fe      	b.n	8000462 <SystemClock_Config+0x6a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000464:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000468:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	f003 fc75 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	2800      	cmp	r0, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x7e>
 8000472:	b672      	cpsid	i
  while (1)
 8000474:	e7fe      	b.n	8000474 <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 8000476:	f003 fc25 	bl	8003cc4 <HAL_RCC_EnableCSS>
}
 800047a:	b014      	add	sp, #80	@ 0x50
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <main>:
{
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46de      	mov	lr, fp
 8000484:	4645      	mov	r5, r8
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	b099      	sub	sp, #100	@ 0x64
  HAL_Init();
 800048e:	f002 fe23 	bl	80030d8 <HAL_Init>
  SystemClock_Config();
 8000492:	f7ff ffb1 	bl	80003f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	2214      	movs	r2, #20
 8000498:	2100      	movs	r1, #0
 800049a:	a80f      	add	r0, sp, #60	@ 0x3c
 800049c:	f004 feb4 	bl	8005208 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	4eb2      	ldr	r6, [pc, #712]	@ (800076c <main+0x2ec>)
 80004a4:	0312      	lsls	r2, r2, #12
 80004a6:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004a8:	2580      	movs	r5, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4313      	orrs	r3, r2
 80004ac:	6173      	str	r3, [r6, #20]
 80004ae:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004b0:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b4:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	9302      	str	r3, [sp, #8]
 80004b8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	6973      	ldr	r3, [r6, #20]
 80004bc:	03d2      	lsls	r2, r2, #15
 80004be:	4313      	orrs	r3, r2
 80004c0:	6173      	str	r3, [r6, #20]
 80004c2:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004c4:	012d      	lsls	r5, r5, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	9303      	str	r3, [sp, #12]
 80004cc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	6973      	ldr	r3, [r6, #20]
 80004d0:	0292      	lsls	r2, r2, #10
 80004d2:	4313      	orrs	r3, r2
 80004d4:	6173      	str	r3, [r6, #20]
 80004d6:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004d8:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	9304      	str	r3, [sp, #16]
 80004e0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	6973      	ldr	r3, [r6, #20]
 80004e4:	02d2      	lsls	r2, r2, #11
 80004e6:	4313      	orrs	r3, r2
 80004e8:	6173      	str	r3, [r6, #20]
 80004ea:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004ec:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4013      	ands	r3, r2
 80004f0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004f6:	f003 f8d7 	bl	80036a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80004fa:	2380      	movs	r3, #128	@ 0x80
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000500:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000504:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000506:	489a      	ldr	r0, [pc, #616]	@ (8000770 <main+0x2f0>)
 8000508:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800050a:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050c:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800050e:	f002 ffd5 	bl	80034bc <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000512:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2700      	movs	r7, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000516:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000518:	a90f      	add	r1, sp, #60	@ 0x3c
 800051a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051c:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	9712      	str	r7, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 8000520:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	9410      	str	r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000524:	f002 ffca 	bl	80034bc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000528:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052c:	4323      	orrs	r3, r4
 800052e:	6173      	str	r3, [r6, #20]
 8000530:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000532:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000534:	4023      	ands	r3, r4
 8000536:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000538:	a80f      	add	r0, sp, #60	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053c:	f004 fe64 	bl	8005208 <memset>
  hadc.Instance = ADC1;
 8000540:	4e8c      	ldr	r6, [pc, #560]	@ (8000774 <main+0x2f4>)
 8000542:	4b8d      	ldr	r3, [pc, #564]	@ (8000778 <main+0x2f8>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000544:	6077      	str	r7, [r6, #4]
  hadc.Instance = ADC1;
 8000546:	6033      	str	r3, [r6, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000548:	2320      	movs	r3, #32
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	60b7      	str	r7, [r6, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800054c:	61b7      	str	r7, [r6, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800054e:	61f7      	str	r7, [r6, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000550:	2780      	movs	r7, #128	@ 0x80
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000552:	4698      	mov	r8, r3
 8000554:	60f3      	str	r3, [r6, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000556:	3b1c      	subs	r3, #28
 8000558:	6173      	str	r3, [r6, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800055a:	00ff      	lsls	r7, r7, #3
  hadc.Init.DMAContinuousRequests = ENABLE;
 800055c:	3320      	adds	r3, #32
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800055e:	0030      	movs	r0, r6
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000560:	6134      	str	r4, [r6, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000562:	6237      	str	r7, [r6, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000564:	54f4      	strb	r4, [r6, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000566:	62b4      	str	r4, [r6, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000568:	f002 fdea 	bl	8003140 <HAL_ADC_Init>
 800056c:	2800      	cmp	r0, #0
 800056e:	d001      	beq.n	8000574 <main+0xf4>
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0xf2>
  sConfig.Channel = ADC_CHANNEL_5;
 8000574:	2305      	movs	r3, #5
 8000576:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000578:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057a:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800057c:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057e:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000580:	469a      	mov	sl, r3
 8000582:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000584:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000586:	f002 fe7f 	bl	8003288 <HAL_ADC_ConfigChannel>
 800058a:	2800      	cmp	r0, #0
 800058c:	d001      	beq.n	8000592 <main+0x112>
 800058e:	b672      	cpsid	i
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x110>
  sConfig.Channel = ADC_CHANNEL_9;
 8000592:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000594:	0030      	movs	r0, r6
 8000596:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Channel = ADC_CHANNEL_9;
 8000598:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059a:	f002 fe75 	bl	8003288 <HAL_ADC_ConfigChannel>
 800059e:	4683      	mov	fp, r0
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x128>
 80005a4:	b672      	cpsid	i
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x126>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	2608      	movs	r6, #8
 80005aa:	0001      	movs	r1, r0
 80005ac:	0032      	movs	r2, r6
 80005ae:	a806      	add	r0, sp, #24
 80005b0:	f004 fe2a 	bl	8005208 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b4:	221c      	movs	r2, #28
 80005b6:	4659      	mov	r1, fp
 80005b8:	a808      	add	r0, sp, #32
 80005ba:	f004 fe25 	bl	8005208 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005be:	2220      	movs	r2, #32
 80005c0:	4659      	mov	r1, fp
 80005c2:	a80f      	add	r0, sp, #60	@ 0x3c
 80005c4:	f004 fe20 	bl	8005208 <memset>
  htim1.Instance = TIM1;
 80005c8:	4b6c      	ldr	r3, [pc, #432]	@ (800077c <main+0x2fc>)
 80005ca:	4699      	mov	r9, r3
 80005cc:	464a      	mov	r2, r9
 80005ce:	4b6c      	ldr	r3, [pc, #432]	@ (8000780 <main+0x300>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d0:	4648      	mov	r0, r9
  htim1.Instance = TIM1;
 80005d2:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80005d4:	464b      	mov	r3, r9
 80005d6:	465a      	mov	r2, fp
 80005d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80005da:	464a      	mov	r2, r9
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	6093      	str	r3, [r2, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80005e0:	23e5      	movs	r3, #229	@ 0xe5
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	464b      	mov	r3, r9
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	465a      	mov	r2, fp
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80005f0:	615c      	str	r4, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005f4:	f003 fcee 	bl	8003fd4 <HAL_TIM_PWM_Init>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d001      	beq.n	8000600 <main+0x180>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x17e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000600:	4643      	mov	r3, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000604:	a906      	add	r1, sp, #24
 8000606:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000608:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060a:	f003 ff0d 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	1e02      	subs	r2, r0, #0
 8000610:	d001      	beq.n	8000616 <main+0x196>
 8000612:	b672      	cpsid	i
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x194>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	2360      	movs	r3, #96	@ 0x60
 8000618:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800061a:	23e5      	movs	r3, #229	@ 0xe5
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000620:	2302      	movs	r3, #2
 8000622:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000624:	33fe      	adds	r3, #254	@ 0xfe
 8000626:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000628:	3301      	adds	r3, #1
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062a:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800062c:	33ff      	adds	r3, #255	@ 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062e:	4648      	mov	r0, r9
 8000630:	a908      	add	r1, sp, #32
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000632:	960b      	str	r6, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000634:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	f003 fdd7 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 800063a:	2800      	cmp	r0, #0
 800063c:	d001      	beq.n	8000642 <main+0x1c2>
 800063e:	b672      	cpsid	i
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x1c0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000642:	2204      	movs	r2, #4
 8000644:	4648      	mov	r0, r9
 8000646:	a908      	add	r1, sp, #32
 8000648:	f003 fdce 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 800064c:	2800      	cmp	r0, #0
 800064e:	d001      	beq.n	8000654 <main+0x1d4>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000654:	0032      	movs	r2, r6
 8000656:	4648      	mov	r0, r9
 8000658:	a908      	add	r1, sp, #32
 800065a:	f003 fdc5 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 800065e:	2800      	cmp	r0, #0
 8000660:	d001      	beq.n	8000666 <main+0x1e6>
 8000662:	b672      	cpsid	i
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x1e4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000666:	2370      	movs	r3, #112	@ 0x70
 8000668:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800066a:	4b46      	ldr	r3, [pc, #280]	@ (8000784 <main+0x304>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800066e:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000670:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000672:	220c      	movs	r2, #12
 8000674:	4648      	mov	r0, r9
 8000676:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000678:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800067a:	f003 fdb5 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 800067e:	2800      	cmp	r0, #0
 8000680:	d001      	beq.n	8000686 <main+0x206>
 8000682:	b672      	cpsid	i
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x204>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000686:	230e      	movs	r3, #14
 8000688:	9312      	str	r3, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800068a:	4653      	mov	r3, sl
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800068c:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800068e:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000690:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000692:	a90f      	add	r1, sp, #60	@ 0x3c
 8000694:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000696:	950f      	str	r5, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000698:	9710      	str	r7, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800069a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800069c:	f003 fef2 	bl	8004484 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x228>
 80006a4:	b672      	cpsid	i
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x226>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	2708      	movs	r7, #8
  HAL_TIM_MspPostInit(&htim1);
 80006aa:	4648      	mov	r0, r9
 80006ac:	f002 fbc6 	bl	8002e3c <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80006b0:	221c      	movs	r2, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	a810      	add	r0, sp, #64	@ 0x40
 80006b6:	f004 fda7 	bl	8005208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	003a      	movs	r2, r7
 80006bc:	2100      	movs	r1, #0
 80006be:	a808      	add	r0, sp, #32
 80006c0:	f004 fda2 	bl	8005208 <memset>
  htim2.Instance = TIM2;
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	4c30      	ldr	r4, [pc, #192]	@ (8000788 <main+0x308>)
 80006c8:	05db      	lsls	r3, r3, #23
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ca:	2601      	movs	r6, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006cc:	2503      	movs	r5, #3
  htim2.Instance = TIM2;
 80006ce:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80006d0:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 80006d2:	4a2e      	ldr	r2, [pc, #184]	@ (800078c <main+0x30c>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006d4:	0020      	movs	r0, r4
 80006d6:	a90f      	add	r1, sp, #60	@ 0x3c
  htim2.Init.Prescaler = 0;
 80006d8:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_PULSE_NBR;
 80006dc:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006e2:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e4:	9611      	str	r6, [sp, #68]	@ 0x44
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80006e6:	9713      	str	r7, [sp, #76]	@ 0x4c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e8:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80006ea:	9717      	str	r7, [sp, #92]	@ 0x5c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006ec:	f003 fce0 	bl	80040b0 <HAL_TIM_Encoder_Init>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x278>
 80006f4:	b672      	cpsid	i
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0x276>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fc:	a908      	add	r1, sp, #32
 80006fe:	0020      	movs	r0, r4
 8000700:	f003 fe92 	bl	8004428 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	1e02      	subs	r2, r0, #0
 8000706:	d001      	beq.n	800070c <main+0x28c>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x28a>
  huart1.Instance = USART1;
 800070c:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <main+0x310>)
 800070e:	4921      	ldr	r1, [pc, #132]	@ (8000794 <main+0x314>)
 8000710:	0018      	movs	r0, r3
 8000712:	6019      	str	r1, [r3, #0]
  huart1.Init.BaudRate = 1843200;
 8000714:	23e1      	movs	r3, #225	@ 0xe1
 8000716:	035b      	lsls	r3, r3, #13
 8000718:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071c:	6082      	str	r2, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c2      	str	r2, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000724:	6182      	str	r2, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000726:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	6202      	str	r2, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	6242      	str	r2, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072c:	f004 f892 	bl	8004854 <HAL_UART_Init>
 8000730:	1e04      	subs	r4, r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x2b8>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x2b6>
  MX_MotorControl_Init();
 8000738:	f000 fe34 	bl	80013a4 <MX_MotorControl_Init>
  hspi1.Instance = SPI1;
 800073c:	4816      	ldr	r0, [pc, #88]	@ (8000798 <main+0x318>)
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <main+0x31c>)
  hspi1.Init.CRCPolynomial = 7;
 8000740:	2707      	movs	r7, #7
  hspi1.Instance = SPI1;
 8000742:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	23e0      	movs	r3, #224	@ 0xe0
 8000746:	00db      	lsls	r3, r3, #3
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000748:	6044      	str	r4, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	6144      	str	r4, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000750:	6184      	str	r4, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000754:	6244      	str	r4, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000758:	6304      	str	r4, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800075a:	6344      	str	r4, [r0, #52]	@ 0x34
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CRCPolynomial = 7;
 800075e:	62c7      	str	r7, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	f003 fb92 	bl	8003e88 <HAL_SPI_Init>
 8000764:	1e04      	subs	r4, r0, #0
 8000766:	d01b      	beq.n	80007a0 <main+0x320>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x2ea>
 800076c:	40021000 	.word	0x40021000
 8000770:	48000800 	.word	0x48000800
 8000774:	200005d0 	.word	0x200005d0
 8000778:	40012400 	.word	0x40012400
 800077c:	200004e0 	.word	0x200004e0
 8000780:	40012c00 	.word	0x40012c00
 8000784:	000006ea 	.word	0x000006ea
 8000788:	20000498 	.word	0x20000498
 800078c:	00000fff 	.word	0x00000fff
 8000790:	20000388 	.word	0x20000388
 8000794:	40013800 	.word	0x40013800
 8000798:	20000528 	.word	0x20000528
 800079c:	40013000 	.word	0x40013000
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80007a0:	0002      	movs	r2, r0
 80007a2:	0029      	movs	r1, r5
 80007a4:	201b      	movs	r0, #27
 80007a6:	f002 fdff 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007aa:	201b      	movs	r0, #27
 80007ac:	f002 fe26 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80007b0:	0022      	movs	r2, r4
 80007b2:	0031      	movs	r1, r6
 80007b4:	2009      	movs	r0, #9
 80007b6:	f002 fdf7 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ba:	2009      	movs	r0, #9
 80007bc:	f002 fe1e 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80007c0:	0022      	movs	r2, r4
 80007c2:	0021      	movs	r1, r4
 80007c4:	200b      	movs	r0, #11
 80007c6:	f002 fdef 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80007ca:	200b      	movs	r0, #11
 80007cc:	f002 fe16 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80007d0:	0022      	movs	r2, r4
 80007d2:	0029      	movs	r1, r5
 80007d4:	200a      	movs	r0, #10
 80007d6:	f002 fde7 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007da:	200a      	movs	r0, #10
 80007dc:	f002 fe0e 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007e0:	0022      	movs	r2, r4
 80007e2:	0021      	movs	r1, r4
 80007e4:	200d      	movs	r0, #13
 80007e6:	f002 fddf 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007ea:	200d      	movs	r0, #13
 80007ec:	f002 fe06 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80007f0:	0022      	movs	r2, r4
 80007f2:	0029      	movs	r1, r5
 80007f4:	200f      	movs	r0, #15
 80007f6:	f002 fdd7 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f002 fdfe 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000800:	0022      	movs	r2, r4
 8000802:	0029      	movs	r1, r5
 8000804:	0038      	movs	r0, r7
 8000806:	f002 fdcf 	bl	80033a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800080a:	0038      	movs	r0, r7
 800080c:	f002 fdf6 	bl	80033fc <HAL_NVIC_EnableIRQ>
  	MC_ProgramSpeedRampMotor1(1,0);
 8000810:	0021      	movs	r1, r4
 8000812:	0030      	movs	r0, r6
 8000814:	f000 f83e 	bl	8000894 <MC_ProgramSpeedRampMotor1>
	MC_StartMotor1();
 8000818:	f000 f82c 	bl	8000874 <MC_StartMotor1>
	MC_ProgramSpeedRampMotor1(120, 1000);
 800081c:	21fa      	movs	r1, #250	@ 0xfa
 800081e:	2078      	movs	r0, #120	@ 0x78
 8000820:	0089      	lsls	r1, r1, #2
 8000822:	f000 f837 	bl	8000894 <MC_ProgramSpeedRampMotor1>
	HAL_Delay(5000);
 8000826:	4810      	ldr	r0, [pc, #64]	@ (8000868 <main+0x3e8>)
 8000828:	f002 fc78 	bl	800311c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(360, 3000);
 800082c:	20b4      	movs	r0, #180	@ 0xb4
 800082e:	490f      	ldr	r1, [pc, #60]	@ (800086c <main+0x3ec>)
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	f000 f82f 	bl	8000894 <MC_ProgramSpeedRampMotor1>
	HAL_Delay(5000);
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <main+0x3e8>)
 8000838:	f002 fc70 	bl	800311c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(60, 2000);
 800083c:	21fa      	movs	r1, #250	@ 0xfa
 800083e:	203c      	movs	r0, #60	@ 0x3c
 8000840:	00c9      	lsls	r1, r1, #3
 8000842:	f000 f827 	bl	8000894 <MC_ProgramSpeedRampMotor1>
	HAL_Delay(5000);
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <main+0x3e8>)
 8000848:	f002 fc68 	bl	800311c <HAL_Delay>
	MC_ProgramSpeedRampMotor1(0, 100);
 800084c:	2164      	movs	r1, #100	@ 0x64
 800084e:	0020      	movs	r0, r4
 8000850:	f000 f820 	bl	8000894 <MC_ProgramSpeedRampMotor1>
	MC_StopMotor1();
 8000854:	f000 f816 	bl	8000884 <MC_StopMotor1>
	MC_ProgramSpeedRampMotor1(360, 3600);
 8000858:	21e1      	movs	r1, #225	@ 0xe1
 800085a:	20b4      	movs	r0, #180	@ 0xb4
 800085c:	0109      	lsls	r1, r1, #4
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	f000 f818 	bl	8000894 <MC_ProgramSpeedRampMotor1>
  while (1)
 8000864:	e7fe      	b.n	8000864 <main+0x3e4>
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	00001388 	.word	0x00001388
 800086c:	00000bb8 	.word	0x00000bb8

08000870 <Error_Handler>:
 8000870:	b672      	cpsid	i
  while (1)
 8000872:	e7fe      	b.n	8000872 <Error_Handler+0x2>

08000874 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000874:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 8000876:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <MC_StartMotor1+0xc>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	f000 f885 	bl	8000988 <MCI_StartMotor>
}
 800087e:	bd10      	pop	{r4, pc}
 8000880:	20000684 	.word	0x20000684

08000884 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000884:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 8000886:	4b02      	ldr	r3, [pc, #8]	@ (8000890 <MC_StopMotor1+0xc>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f000 f895 	bl	80009b8 <MCI_StopMotor>
}
 800088e:	bd10      	pop	{r4, pc}
 8000890:	20000684 	.word	0x20000684

08000894 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8000894:	0003      	movs	r3, r0
 8000896:	b510      	push	{r4, lr}
 8000898:	000a      	movs	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 800089a:	4903      	ldr	r1, [pc, #12]	@ (80008a8 <MC_ProgramSpeedRampMotor1+0x14>)
 800089c:	6808      	ldr	r0, [r1, #0]
 800089e:	0019      	movs	r1, r3
 80008a0:	f000 f81e 	bl	80008e0 <MCI_ExecSpeedRamp>
}
 80008a4:	bd10      	pop	{r4, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	20000684 	.word	0x20000684

080008ac <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 80008ac:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 80008ae:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <MC_GetSTMStateMotor1+0xc>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f000 f863 	bl	800097c <MCI_GetSTMState>
}
 80008b6:	bd10      	pop	{r4, pc}
 80008b8:	20000684 	.word	0x20000684

080008bc <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80008bc:	4770      	bx	lr
 80008be:	46c0      	nop			@ (mov r8, r8)

080008c0 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 80008c0:	4770      	bx	lr
 80008c2:	46c0      	nop			@ (mov r8, r8)

080008c4 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 80008c4:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008c6:	2300      	movs	r3, #0
    pHandle->pFOCVars = pFOCVars;
 80008c8:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008ca:	2200      	movs	r2, #0
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80008cc:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 80008ce:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 80008d0:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 80008d2:	61c3      	str	r3, [r0, #28]
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 80008d4:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008d6:	3324      	adds	r3, #36	@ 0x24
    pHandle->pSTC = pSTC;
 80008d8:	6001      	str	r1, [r0, #0]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 80008da:	54c2      	strb	r2, [r0, r3]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			@ (mov r8, r8)

080008e0 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008e4:	4b02      	ldr	r3, [pc, #8]	@ (80008f0 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 80008e6:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80008e8:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80008ea:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80008ec:	4770      	bx	lr
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	00000301 	.word	0x00000301

080008f4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80008f4:	8c03      	ldrh	r3, [r0, #32]
 80008f6:	430b      	orrs	r3, r1
 80008f8:	4393      	bics	r3, r2
 80008fa:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80008fc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80008fe:	4319      	orrs	r1, r3
 8000900:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000902:	4770      	bx	lr

08000904 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000904:	2324      	movs	r3, #36	@ 0x24
{
 8000906:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000908:	5cc2      	ldrb	r2, [r0, r3]
{
 800090a:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800090c:	2a01      	cmp	r2, #1
 800090e:	d000      	beq.n	8000912 <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000910:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 8000912:	7b01      	ldrb	r1, [r0, #12]
 8000914:	2902      	cmp	r1, #2
 8000916:	d007      	beq.n	8000928 <MCI_ExecBufferedCommands+0x24>
 8000918:	2903      	cmp	r1, #3
 800091a:	d026      	beq.n	800096a <MCI_ExecBufferedCommands+0x66>
 800091c:	2901      	cmp	r1, #1
 800091e:	d016      	beq.n	800094e <MCI_ExecBufferedCommands+0x4a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8000920:	2324      	movs	r3, #36	@ 0x24
 8000922:	2203      	movs	r2, #3
 8000924:	54e2      	strb	r2, [r4, r3]
}
 8000926:	e7f3      	b.n	8000910 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000928:	2100      	movs	r1, #0
 800092a:	6842      	ldr	r2, [r0, #4]
 800092c:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800092e:	6800      	ldr	r0, [r0, #0]
 8000930:	3104      	adds	r1, #4
 8000932:	f004 fb77 	bl	8005024 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8000936:	8ba2      	ldrh	r2, [r4, #28]
 8000938:	2310      	movs	r3, #16
 800093a:	5ee1      	ldrsh	r1, [r4, r3]
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f004 fb75 	bl	800502c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8000942:	2800      	cmp	r0, #0
 8000944:	d0ec      	beq.n	8000920 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8000946:	2324      	movs	r3, #36	@ 0x24
 8000948:	2202      	movs	r2, #2
 800094a:	54e2      	strb	r2, [r4, r3]
 800094c:	e7e0      	b.n	8000910 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800094e:	2100      	movs	r1, #0
 8000950:	6842      	ldr	r2, [r0, #4]
 8000952:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000954:	6800      	ldr	r0, [r0, #0]
 8000956:	3103      	adds	r1, #3
 8000958:	f004 fb64 	bl	8005024 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800095c:	8ba2      	ldrh	r2, [r4, #28]
 800095e:	230e      	movs	r3, #14
 8000960:	5ee1      	ldrsh	r1, [r4, r3]
 8000962:	6820      	ldr	r0, [r4, #0]
 8000964:	f004 fb62 	bl	800502c <STC_ExecRamp>
          break;
 8000968:	e7eb      	b.n	8000942 <MCI_ExecBufferedCommands+0x3e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800096a:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800096c:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800096e:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000970:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000972:	2204      	movs	r2, #4
 8000974:	3010      	adds	r0, #16
 8000976:	f004 fc4f 	bl	8005218 <memcpy>
      if (commandHasBeenExecuted)
 800097a:	e7e4      	b.n	8000946 <MCI_ExecBufferedCommands+0x42>

0800097c <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 800097c:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 800097e:	4770      	bx	lr

08000980 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 8000980:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
#endif
}
 8000982:	4770      	bx	lr

08000984 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8000984:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 8000986:	4770      	bx	lr

08000988 <MCI_StartMotor>:
{
 8000988:	b510      	push	{r4, lr}
 800098a:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800098c:	f7ff fff6 	bl	800097c <MCI_GetSTMState>
 8000990:	2800      	cmp	r0, #0
 8000992:	d001      	beq.n	8000998 <MCI_StartMotor+0x10>
  bool retVal = false;
 8000994:	2000      	movs	r0, #0
}
 8000996:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000998:	0020      	movs	r0, r4
 800099a:	f7ff fff1 	bl	8000980 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1f8      	bne.n	8000994 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff ffee 	bl	8000984 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d1f3      	bne.n	8000994 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 80009ac:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009ae:	2224      	movs	r2, #36	@ 0x24
      pHandle->DirectCommand = MCI_START;
 80009b0:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80009b2:	3001      	adds	r0, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80009b4:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 80009b6:	e7ee      	b.n	8000996 <MCI_StartMotor+0xe>

080009b8 <MCI_StopMotor>:
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 80009bc:	f7ff ffde 	bl	800097c <MCI_GetSTMState>
      status = false;
 80009c0:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d004      	beq.n	80009d0 <MCI_StopMotor+0x18>
 80009c6:	0003      	movs	r3, r0
 80009c8:	3b0c      	subs	r3, #12
 80009ca:	1e5a      	subs	r2, r3, #1
 80009cc:	4193      	sbcs	r3, r2
 80009ce:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009d0:	0020      	movs	r0, r4
 80009d2:	f7ff ffd5 	bl	8000980 <MCI_GetOccurredFaults>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d002      	beq.n	80009e0 <MCI_StopMotor+0x28>
  bool retVal = false;
 80009da:	2500      	movs	r5, #0
}
 80009dc:	0028      	movs	r0, r5
 80009de:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80009e0:	0020      	movs	r0, r4
 80009e2:	f7ff ffcf 	bl	8000984 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d1f7      	bne.n	80009da <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d0f5      	beq.n	80009da <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 80009ee:	2305      	movs	r3, #5
 80009f0:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80009f2:	e7f3      	b.n	80009dc <MCI_StopMotor+0x24>

080009f4 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80009f4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80009f6:	8c00      	ldrh	r0, [r0, #32]
 80009f8:	0400      	lsls	r0, r0, #16
 80009fa:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80009fc:	4770      	bx	lr
 80009fe:	46c0      	nop			@ (mov r8, r8)

08000a00 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8000a00:	b201      	sxth	r1, r0
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a02:	014a      	lsls	r2, r1, #5
 8000a04:	1852      	adds	r2, r2, r1
 8000a06:	00d2      	lsls	r2, r2, #3
 8000a08:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a0a:	1403      	asrs	r3, r0, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a0c:	0092      	lsls	r2, r2, #2
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a0e:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <MCM_Clarke+0x58>)
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a10:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8000a12:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a14:	00d3      	lsls	r3, r2, #3
 8000a16:	18d3      	adds	r3, r2, r3
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8000a18:	2280      	movs	r2, #128	@ 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	425b      	negs	r3, r3
 8000a1e:	1a1b      	subs	r3, r3, r0
 8000a20:	1a1b      	subs	r3, r3, r0
{
 8000a22:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8000a24:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 8000a26:	0212      	lsls	r2, r2, #8
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	da04      	bge.n	8000a36 <MCM_Clarke+0x36>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <MCM_Clarke+0x5c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	da08      	bge.n	8000a44 <MCM_Clarke+0x44>
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MCM_Clarke+0x60>)
 8000a34:	e000      	b.n	8000a38 <MCM_Clarke+0x38>
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MCM_Clarke+0x64>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8000a38:	0408      	lsls	r0, r1, #16
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	0c00      	lsrs	r0, r0, #16
 8000a3e:	4318      	orrs	r0, r3
}
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MCM_Clarke+0x60>)
 8000a46:	1c1a      	adds	r2, r3, #0
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4283      	cmp	r3, r0
 8000a4c:	db01      	blt.n	8000a52 <MCM_Clarke+0x52>
 8000a4e:	b213      	sxth	r3, r2
 8000a50:	e7f2      	b.n	8000a38 <MCM_Clarke+0x38>
 8000a52:	1c02      	adds	r2, r0, #0
 8000a54:	b213      	sxth	r3, r2
 8000a56:	e7ef      	b.n	8000a38 <MCM_Clarke+0x38>
 8000a58:	000049e6 	.word	0x000049e6
 8000a5c:	ffff8000 	.word	0xffff8000
 8000a60:	ffff8001 	.word	0xffff8001
 8000a64:	00007fff 	.word	0x00007fff

08000a68 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 8000a6e:	b29b      	uxth	r3, r3
{
 8000a70:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 8000a72:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a74:	24c0      	movs	r4, #192	@ 0xc0
 8000a76:	0018      	movs	r0, r3
 8000a78:	2580      	movs	r5, #128	@ 0x80
 8000a7a:	00a4      	lsls	r4, r4, #2
{
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	b083      	sub	sp, #12
 8000a82:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a84:	00ad      	lsls	r5, r5, #2
 8000a86:	42a8      	cmp	r0, r5
 8000a88:	d023      	beq.n	8000ad2 <MCM_Trig_Functions+0x6a>
 8000a8a:	d815      	bhi.n	8000ab8 <MCM_Trig_Functions+0x50>
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d029      	beq.n	8000ae4 <MCM_Trig_Functions+0x7c>
 8000a90:	2480      	movs	r4, #128	@ 0x80
 8000a92:	0064      	lsls	r4, r4, #1
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d109      	bne.n	8000aac <MCM_Trig_Functions+0x44>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	4918      	ldr	r1, [pc, #96]	@ (8000b00 <MCM_Trig_Functions+0x98>)
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aa4:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aa6:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aa8:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aaa:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8000aac:	0408      	lsls	r0, r1, #16
 8000aae:	0412      	lsls	r2, r2, #16
 8000ab0:	0c00      	lsrs	r0, r0, #16
 8000ab2:	4310      	orrs	r0, r2
}
 8000ab4:	b003      	add	sp, #12
 8000ab6:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000ab8:	42a0      	cmp	r0, r4
 8000aba:	d1f7      	bne.n	8000aac <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	490f      	ldr	r1, [pc, #60]	@ (8000b00 <MCM_Trig_Functions+0x98>)
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ac6:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ac8:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aca:	5a59      	ldrh	r1, [r3, r1]
 8000acc:	4249      	negs	r1, r1
 8000ace:	b209      	sxth	r1, r1
      break;
 8000ad0:	e7ec      	b.n	8000aac <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ad6:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ad8:	4909      	ldr	r1, [pc, #36]	@ (8000b00 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ade:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae0:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8000ae2:	e7e3      	b.n	8000aac <MCM_Trig_Functions+0x44>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae8:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aea:	4905      	ldr	r1, [pc, #20]	@ (8000b00 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af0:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000af2:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af4:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000af6:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af8:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000afa:	b209      	sxth	r1, r1
      break;
 8000afc:	e7d6      	b.n	8000aac <MCM_Trig_Functions+0x44>
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	08005244 	.word	0x08005244

08000b04 <MCM_Park>:
{
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	b205      	sxth	r5, r0
 8000b08:	1404      	asrs	r4, r0, #16
 8000b0a:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	f7ff ffab 	bl	8000a68 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b12:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b14:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b16:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b18:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000b1a:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000b1c:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b1e:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 8000b20:	2080      	movs	r0, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b22:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 8000b24:	0200      	lsls	r0, r0, #8
 8000b26:	4282      	cmp	r2, r0
 8000b28:	da12      	bge.n	8000b50 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MCM_Park+0x90>)
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	da24      	bge.n	8000b7a <MCM_Park+0x76>
  if (wqd_tmp > INT16_MAX)
 8000b30:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000b32:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000b34:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b36:	185b      	adds	r3, r3, r1
 8000b38:	4817      	ldr	r0, [pc, #92]	@ (8000b98 <MCM_Park+0x94>)
 8000b3a:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000b3c:	0212      	lsls	r2, r2, #8
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	db0f      	blt.n	8000b62 <MCM_Park+0x5e>
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MCM_Park+0x98>)
  return (Output);
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	041b      	lsls	r3, r3, #16
 8000b48:	0c00      	lsrs	r0, r0, #16
 8000b4a:	4318      	orrs	r0, r3
}
 8000b4c:	b004      	add	sp, #16
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <MCM_Park+0x98>)
  if (wqd_tmp > INT16_MAX)
 8000b52:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000b54:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000b56:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b58:	185b      	adds	r3, r3, r1
 8000b5a:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000b5c:	0212      	lsls	r2, r2, #8
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	daef      	bge.n	8000b42 <MCM_Park+0x3e>
  else if (wqd_tmp < (-32768))
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <MCM_Park+0x90>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	da01      	bge.n	8000b6c <MCM_Park+0x68>
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MCM_Park+0x94>)
 8000b6a:	e7eb      	b.n	8000b44 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b6c:	490a      	ldr	r1, [pc, #40]	@ (8000b98 <MCM_Park+0x94>)
 8000b6e:	1c1a      	adds	r2, r3, #0
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	428b      	cmp	r3, r1
 8000b74:	db0b      	blt.n	8000b8e <MCM_Park+0x8a>
 8000b76:	b213      	sxth	r3, r2
 8000b78:	e7e4      	b.n	8000b44 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b7a:	4e07      	ldr	r6, [pc, #28]	@ (8000b98 <MCM_Park+0x94>)
 8000b7c:	1c10      	adds	r0, r2, #0
 8000b7e:	b212      	sxth	r2, r2
 8000b80:	42b2      	cmp	r2, r6
 8000b82:	db01      	blt.n	8000b88 <MCM_Park+0x84>
 8000b84:	b200      	sxth	r0, r0
 8000b86:	e7e4      	b.n	8000b52 <MCM_Park+0x4e>
 8000b88:	1c30      	adds	r0, r6, #0
 8000b8a:	b200      	sxth	r0, r0
 8000b8c:	e7e1      	b.n	8000b52 <MCM_Park+0x4e>
 8000b8e:	1c0a      	adds	r2, r1, #0
 8000b90:	b213      	sxth	r3, r2
 8000b92:	e7d7      	b.n	8000b44 <MCM_Park+0x40>
 8000b94:	ffff8000 	.word	0xffff8000
 8000b98:	ffff8001 	.word	0xffff8001
 8000b9c:	00007fff 	.word	0x00007fff

08000ba0 <MCM_Rev_Park>:
{
 8000ba0:	b530      	push	{r4, r5, lr}
 8000ba2:	b205      	sxth	r5, r0
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000ba8:	0008      	movs	r0, r1
 8000baa:	f7ff ff5d 	bl	8000a68 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000bae:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000bb0:	1403      	asrs	r3, r0, #16
 8000bb2:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000bb4:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000bb6:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000bb8:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8000bba:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8000bbc:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8000bbe:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8000bc0:	1ae4      	subs	r4, r4, r3
 8000bc2:	13e4      	asrs	r4, r4, #15
  return (Output);
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	0424      	lsls	r4, r4, #16
 8000bc8:	0c00      	lsrs	r0, r0, #16
 8000bca:	4320      	orrs	r0, r4
}
 8000bcc:	b005      	add	sp, #20
 8000bce:	bd30      	pop	{r4, r5, pc}

08000bd0 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8000bd0:	2126      	movs	r1, #38	@ 0x26
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4341      	muls	r1, r0
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <FOC_Clear+0x50>)
{
 8000bd8:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000bda:	52ca      	strh	r2, [r1, r3]
 8000bdc:	185b      	adds	r3, r3, r1
 8000bde:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000be0:	809a      	strh	r2, [r3, #4]
 8000be2:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000be4:	819a      	strh	r2, [r3, #12]
 8000be6:	81da      	strh	r2, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8000be8:	821a      	strh	r2, [r3, #16]
 8000bea:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000bec:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000bee:	82da      	strh	r2, [r3, #22]
 8000bf0:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000bf2:	835a      	strh	r2, [r3, #26]
 8000bf4:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000bf6:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <FOC_Clear+0x54>)
 8000bfa:	0084      	lsls	r4, r0, #2
 8000bfc:	58e0      	ldr	r0, [r4, r3]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f004 f8be 	bl	8004d80 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <FOC_Clear+0x58>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	58e0      	ldr	r0, [r4, r3]
 8000c0a:	f004 f8b9 	bl	8004d80 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <FOC_Clear+0x5c>)
 8000c10:	58e0      	ldr	r0, [r4, r3]
 8000c12:	f004 f9f9 	bl	8005008 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <FOC_Clear+0x60>)
 8000c18:	58e0      	ldr	r0, [r4, r3]
 8000c1a:	f000 fd0b 	bl	8001634 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000c1e:	bd10      	pop	{r4, pc}
 8000c20:	2000065c 	.word	0x2000065c
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000654 	.word	0x20000654

08000c34 <MCboot>:
{
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	46de      	mov	lr, fp
 8000c38:	4657      	mov	r7, sl
 8000c3a:	464e      	mov	r6, r9
 8000c3c:	4645      	mov	r5, r8
 8000c3e:	b5e0      	push	{r5, r6, r7, lr}
 8000c40:	0004      	movs	r4, r0
 8000c42:	b083      	sub	sp, #12
  if (MC_NULL == pMCIList)
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d066      	beq.n	8000d16 <MCboot+0xe2>
    bMCBootCompleted = (uint8_t )0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <MCboot+0xf0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c4c:	4d36      	ldr	r5, [pc, #216]	@ (8000d28 <MCboot+0xf4>)
 8000c4e:	4837      	ldr	r0, [pc, #220]	@ (8000d2c <MCboot+0xf8>)
    bMCBootCompleted = (uint8_t )0;
 8000c50:	4690      	mov	r8, r2
 8000c52:	7013      	strb	r3, [r2, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c54:	6028      	str	r0, [r5, #0]
    R1_Init(&PWM_Handle_M1);
 8000c56:	f001 f8f5 	bl	8001e44 <R1_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8000c5a:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <MCboot+0xfc>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	469b      	mov	fp, r3
 8000c60:	f004 f886 	bl	8004d70 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8000c64:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <MCboot+0x100>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	469a      	mov	sl, r3
 8000c6a:	f003 ff35 	bl	8004ad8 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8000c6e:	4832      	ldr	r0, [pc, #200]	@ (8000d38 <MCboot+0x104>)
 8000c70:	4e32      	ldr	r6, [pc, #200]	@ (8000d3c <MCboot+0x108>)
 8000c72:	4681      	mov	r9, r0
 8000c74:	4f32      	ldr	r7, [pc, #200]	@ (8000d40 <MCboot+0x10c>)
 8000c76:	4653      	mov	r3, sl
 8000c78:	003a      	movs	r2, r7
 8000c7a:	6831      	ldr	r1, [r6, #0]
 8000c7c:	f003 fee2 	bl	8004a44 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8000c80:	464a      	mov	r2, r9
 8000c82:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <MCboot+0x110>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c84:	4659      	mov	r1, fp
    pEAC[M1] = &EncAlignCtrlM1;
 8000c86:	601a      	str	r2, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c88:	6830      	ldr	r0, [r6, #0]
 8000c8a:	4652      	mov	r2, sl
 8000c8c:	f004 f9a6 	bl	8004fdc <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8000c90:	0038      	movs	r0, r7
 8000c92:	f004 fa63 	bl	800515c <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8000c96:	482c      	ldr	r0, [pc, #176]	@ (8000d48 <MCboot+0x114>)
 8000c98:	f004 f86a 	bl	8004d70 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8000c9c:	482b      	ldr	r0, [pc, #172]	@ (8000d4c <MCboot+0x118>)
 8000c9e:	f004 f867 	bl	8004d70 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8000ca2:	482b      	ldr	r0, [pc, #172]	@ (8000d50 <MCboot+0x11c>)
 8000ca4:	f001 fd52 	bl	800274c <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8000ca8:	4f2a      	ldr	r7, [pc, #168]	@ (8000d54 <MCboot+0x120>)
 8000caa:	0038      	movs	r0, r7
 8000cac:	f004 f8fc 	bl	8004ea8 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000cb0:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <MCboot+0x124>)
    NTC_Init(&TempSensor_M1);
 8000cb2:	482a      	ldr	r0, [pc, #168]	@ (8000d5c <MCboot+0x128>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60df      	str	r7, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000cb8:	4f29      	ldr	r7, [pc, #164]	@ (8000d60 <MCboot+0x12c>)
 8000cba:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8000cbc:	f004 f84c 	bl	8004d58 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8000cc0:	4828      	ldr	r0, [pc, #160]	@ (8000d64 <MCboot+0x130>)
 8000cc2:	f004 f94b 	bl	8004f5c <REMNG_Init>
    FOC_Clear(M1);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff ff82 	bl	8000bd0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4699      	mov	r9, r3
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	3323      	adds	r3, #35	@ 0x23
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000cd4:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000cd6:	54fa      	strb	r2, [r7, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000cd8:	f004 fa22 	bl	8005120 <STC_GetDefaultIqdref>
 8000cdc:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000cde:	6830      	ldr	r0, [r6, #0]
 8000ce0:	f004 fa1e 	bl	8005120 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	4d20      	ldr	r5, [pc, #128]	@ (8000d68 <MCboot+0x134>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000ce8:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000cea:	003a      	movs	r2, r7
 8000cec:	6831      	ldr	r1, [r6, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000cee:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000cf0:	0028      	movs	r0, r5
 8000cf2:	f7ff fde7 	bl	80008c4 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MCboot+0x138>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8000cf8:	6830      	ldr	r0, [r6, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8000cfa:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 8000cfc:	f004 fa0c 	bl	8005118 <STC_GetMecSpeedRefUnitDefault>
 8000d00:	2200      	movs	r2, #0
 8000d02:	0001      	movs	r1, r0
 8000d04:	0028      	movs	r0, r5
 8000d06:	f7ff fdeb 	bl	80008e0 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8000d0a:	6025      	str	r5, [r4, #0]
    MC_APP_BootHook();
 8000d0c:	f7ff fdd6 	bl	80008bc <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8000d10:	4643      	mov	r3, r8
 8000d12:	464a      	mov	r2, r9
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	b003      	add	sp, #12
 8000d18:	bcf0      	pop	{r4, r5, r6, r7}
 8000d1a:	46bb      	mov	fp, r7
 8000d1c:	46b2      	mov	sl, r6
 8000d1e:	46a9      	mov	r9, r5
 8000d20:	46a0      	mov	r8, r4
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	2000064c 	.word	0x2000064c
 8000d28:	20000654 	.word	0x20000654
 8000d2c:	20000148 	.word	0x20000148
 8000d30:	200002a4 	.word	0x200002a4
 8000d34:	20000090 	.word	0x20000090
 8000d38:	20000074 	.word	0x20000074
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	20000110 	.word	0x20000110
 8000d44:	20000658 	.word	0x20000658
 8000d48:	20000278 	.word	0x20000278
 8000d4c:	2000024c 	.word	0x2000024c
 8000d50:	20000048 	.word	0x20000048
 8000d54:	2000002c 	.word	0x2000002c
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000058 	.word	0x20000058
 8000d60:	2000065c 	.word	0x2000065c
 8000d64:	20000014 	.word	0x20000014
 8000d68:	20000610 	.word	0x20000610
 8000d6c:	200002e0 	.word	0x200002e0

08000d70 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8000d70:	4770      	bx	lr
 8000d72:	46c0      	nop			@ (mov r8, r8)

08000d74 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d74:	2326      	movs	r3, #38	@ 0x26
 8000d76:	4343      	muls	r3, r0
{
 8000d78:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d7a:	4c08      	ldr	r4, [pc, #32]	@ (8000d9c <FOC_CalcCurrRef+0x28>)
 8000d7c:	18e4      	adds	r4, r4, r3
 8000d7e:	0023      	movs	r3, r4
 8000d80:	3324      	adds	r3, #36	@ 0x24
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d000      	beq.n	8000d8a <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000d88:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000d8a:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <FOC_CalcCurrRef+0x2c>)
 8000d8c:	0080      	lsls	r0, r0, #2
 8000d8e:	58c0      	ldr	r0, [r0, r3]
 8000d90:	f004 f98c 	bl	80050ac <STC_CalcTorqueReference>
 8000d94:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000d96:	8220      	strh	r0, [r4, #16]
}
 8000d98:	e7f6      	b.n	8000d88 <FOC_CalcCurrRef+0x14>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	2000065c 	.word	0x2000065c
 8000da0:	2000000c 	.word	0x2000000c

08000da4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000da4:	4b01      	ldr	r3, [pc, #4]	@ (8000dac <TSK_SetChargeBootCapDelayM1+0x8>)
 8000da6:	8018      	strh	r0, [r3, #0]
}
 8000da8:	4770      	bx	lr
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000650 	.word	0x20000650

08000db0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8000db0:	4b02      	ldr	r3, [pc, #8]	@ (8000dbc <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000db2:	8818      	ldrh	r0, [r3, #0]
 8000db4:	4243      	negs	r3, r0
 8000db6:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000db8:	b2c0      	uxtb	r0, r0
}
 8000dba:	4770      	bx	lr
 8000dbc:	20000650 	.word	0x20000650

08000dc0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	@ (8000dc8 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000dc2:	8018      	strh	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	2000064e 	.word	0x2000064e

08000dcc <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000dce:	8818      	ldrh	r0, [r3, #0]
 8000dd0:	4243      	negs	r3, r0
 8000dd2:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000dd4:	b2c0      	uxtb	r0, r0
}
 8000dd6:	4770      	bx	lr
 8000dd8:	2000064e 	.word	0x2000064e

08000ddc <TSK_MediumFrequencyTaskM1>:
{
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	46c6      	mov	lr, r8
 8000de0:	b500      	push	{lr}
 8000de2:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8000de4:	466b      	mov	r3, sp
 8000de6:	1d99      	adds	r1, r3, #6
 8000de8:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000dea:	4e8d      	ldr	r6, [pc, #564]	@ (8001020 <TSK_MediumFrequencyTaskM1+0x244>)
  int16_t wAux = 0;
 8000dec:	800b      	strh	r3, [r1, #0]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000dee:	0030      	movs	r0, r6
 8000df0:	f003 fece 	bl	8004b90 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8000df4:	4d8b      	ldr	r5, [pc, #556]	@ (8001024 <TSK_MediumFrequencyTaskM1+0x248>)
 8000df6:	6828      	ldr	r0, [r5, #0]
 8000df8:	f004 f802 	bl	8004e00 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000dfc:	4c8a      	ldr	r4, [pc, #552]	@ (8001028 <TSK_MediumFrequencyTaskM1+0x24c>)
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fdc0 	bl	8000984 <MCI_GetCurrentFaults>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d005      	beq.n	8000e14 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	77e3      	strb	r3, [r4, #31]
}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bc80      	pop	{r7}
 8000e10:	46b8      	mov	r8, r7
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000e14:	0020      	movs	r0, r4
 8000e16:	f7ff fdb3 	bl	8000980 <MCI_GetOccurredFaults>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d106      	bne.n	8000e2c <TSK_MediumFrequencyTaskM1+0x50>
      switch (Mci[M1].State)
 8000e1e:	7fe3      	ldrb	r3, [r4, #31]
 8000e20:	2b14      	cmp	r3, #20
 8000e22:	d8f3      	bhi.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
 8000e24:	4a81      	ldr	r2, [pc, #516]	@ (800102c <TSK_MediumFrequencyTaskM1+0x250>)
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	58d3      	ldr	r3, [r2, r3]
 8000e2a:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	77e3      	strb	r3, [r4, #31]
 8000e30:	e7ec      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e32:	7fa3      	ldrb	r3, [r4, #30]
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d100      	bne.n	8000e3a <TSK_MediumFrequencyTaskM1+0x5e>
 8000e38:	e0b2      	b.n	8000fa0 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8000e3a:	f7ff ffc7 	bl	8000dcc <TSK_StopPermanencyTimeHasElapsedM1>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d0e4      	beq.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
              ENC_Clear(&ENCODER_M1);
 8000e42:	0030      	movs	r0, r6
 8000e44:	f003 fe7e 	bl	8004b44 <ENC_Clear>
              R1_SwitchOnPWM(pwmcHandle[M1]);
 8000e48:	4b79      	ldr	r3, [pc, #484]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	f001 f974 	bl	8002138 <R1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff ff8d 	bl	8000d70 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8000e56:	4b77      	ldr	r3, [pc, #476]	@ (8001034 <TSK_MediumFrequencyTaskM1+0x258>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f004 f969 	bl	8005130 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f7ff fd50 	bl	8000904 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff ff85 	bl	8000d74 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	77e3      	strb	r3, [r4, #31]
 8000e6e:	e7cd      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e70:	4e6f      	ldr	r6, [pc, #444]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e72:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e74:	6830      	ldr	r0, [r6, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d100      	bne.n	8000e7c <TSK_MediumFrequencyTaskM1+0xa0>
 8000e7a:	e093      	b.n	8000fa4 <TSK_MediumFrequencyTaskM1+0x1c8>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	f000 fbe1 	bl	8001644 <PWMC_CurrentReadingCalibr>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d0c2      	beq.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8000e86:	7fa3      	ldrb	r3, [r4, #30]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d100      	bne.n	8000e8e <TSK_MediumFrequencyTaskM1+0xb2>
 8000e8c:	e0a8      	b.n	8000fe0 <TSK_MediumFrequencyTaskM1+0x204>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000e8e:	6830      	ldr	r0, [r6, #0]
 8000e90:	2100      	movs	r1, #0
 8000e92:	f001 f92b 	bl	80020ec <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8000e96:	2014      	movs	r0, #20
 8000e98:	f7ff ff84 	bl	8000da4 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	77e3      	strb	r3, [r4, #31]
 8000ea0:	e7b4      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000ea2:	7fa3      	ldrb	r3, [r4, #30]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d07b      	beq.n	8000fa0 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8000ea8:	f7ff ff82 	bl	8000db0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d0ad      	beq.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8000eb0:	4d5f      	ldr	r5, [pc, #380]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
 8000eb2:	6828      	ldr	r0, [r5, #0]
 8000eb4:	f001 fa70 	bl	8002398 <R1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000eb8:	2224      	movs	r2, #36	@ 0x24
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8001038 <TSK_MediumFrequencyTaskM1+0x25c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000ebe:	4f5d      	ldr	r7, [pc, #372]	@ (8001034 <TSK_MediumFrequencyTaskM1+0x258>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000ec0:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	495d      	ldr	r1, [pc, #372]	@ (800103c <TSK_MediumFrequencyTaskM1+0x260>)
 8000ec6:	f004 f89b 	bl	8005000 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8000eca:	0030      	movs	r0, r6
 8000ecc:	f003 fe3a 	bl	8004b44 <ENC_Clear>
              FOC_Clear( M1 );
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fe7d 	bl	8000bd0 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8001040 <TSK_MediumFrequencyTaskM1+0x264>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	4698      	mov	r8, r3
 8000edc:	f003 fdf8 	bl	8004ad0 <EAC_IsAligned>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d000      	beq.n	8000ee6 <TSK_MediumFrequencyTaskM1+0x10a>
 8000ee4:	e085      	b.n	8000ff2 <TSK_MediumFrequencyTaskM1+0x216>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8000ee6:	4640      	mov	r0, r8
 8000ee8:	f003 fdb2 	bl	8004a50 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8000eec:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000eee:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8000ef0:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000ef2:	f000 fba3 	bl	800163c <PWMC_SwitchOnPWM>
 8000ef6:	e789      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8000ef8:	7fa3      	ldrb	r3, [r4, #30]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d000      	beq.n	8000f00 <TSK_MediumFrequencyTaskM1+0x124>
 8000efe:	e785      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000f00:	2300      	movs	r3, #0
 8000f02:	83e3      	strh	r3, [r4, #30]
 8000f04:	e782      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8000f06:	f7ff ff61 	bl	8000dcc <TSK_StopPermanencyTimeHasElapsedM1>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d100      	bne.n	8000f10 <TSK_MediumFrequencyTaskM1+0x134>
 8000f0e:	e77d      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
 8000f10:	e7f6      	b.n	8000f00 <TSK_MediumFrequencyTaskM1+0x124>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000f12:	7fa3      	ldrb	r3, [r4, #30]
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d043      	beq.n	8000fa0 <TSK_MediumFrequencyTaskM1+0x1c4>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8000f18:	0020      	movs	r0, r4
 8000f1a:	f7ff fcf3 	bl	8000904 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ff28 	bl	8000d74 <FOC_CalcCurrRef>
 8000f24:	e772      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000f26:	7fa3      	ldrb	r3, [r4, #30]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d039      	beq.n	8000fa0 <TSK_MediumFrequencyTaskM1+0x1c4>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8000f2c:	4f44      	ldr	r7, [pc, #272]	@ (8001040 <TSK_MediumFrequencyTaskM1+0x264>)
 8000f2e:	0038      	movs	r0, r7
 8000f30:	f003 fdce 	bl	8004ad0 <EAC_IsAligned>
 8000f34:	0005      	movs	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8000f36:	0038      	movs	r0, r7
 8000f38:	f003 fdb0 	bl	8004a9c <EAC_Exec>
 8000f3c:	0007      	movs	r7, r0
            if ((isAligned == false)  && (EACDone == false))
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d101      	bne.n	8000f46 <TSK_MediumFrequencyTaskM1+0x16a>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d044      	beq.n	8000fd0 <TSK_MediumFrequencyTaskM1+0x1f4>
              R1_SwitchOffPWM( pwmcHandle[M1] );
 8000f46:	4d3a      	ldr	r5, [pc, #232]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f48:	6828      	ldr	r0, [r5, #0]
 8000f4a:	f001 fa25 	bl	8002398 <R1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000f4e:	4f39      	ldr	r7, [pc, #228]	@ (8001034 <TSK_MediumFrequencyTaskM1+0x258>)
 8000f50:	2103      	movs	r1, #3
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f004 f866 	bl	8005024 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000f58:	0031      	movs	r1, r6
 8000f5a:	6838      	ldr	r0, [r7, #0]
 8000f5c:	f004 f850 	bl	8005000 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fe35 	bl	8000bd0 <FOC_Clear>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000f66:	2100      	movs	r1, #0
 8000f68:	6828      	ldr	r0, [r5, #0]
 8000f6a:	f001 f8bf 	bl	80020ec <R1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000f6e:	20c8      	movs	r0, #200	@ 0xc8
 8000f70:	0080      	lsls	r0, r0, #2
 8000f72:	f7ff ff25 	bl	8000dc0 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8000f76:	2314      	movs	r3, #20
 8000f78:	77e3      	strb	r3, [r4, #31]
 8000f7a:	e747      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	7fa3      	ldrb	r3, [r4, #30]
 8000f80:	4393      	bics	r3, r2
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d000      	beq.n	8000f88 <TSK_MediumFrequencyTaskM1+0x1ac>
 8000f86:	e741      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000f88:	4d29      	ldr	r5, [pc, #164]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f8a:	327f      	adds	r2, #127	@ 0x7f
 8000f8c:	6828      	ldr	r0, [r5, #0]
 8000f8e:	5c82      	ldrb	r2, [r0, r2]
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	d116      	bne.n	8000fc2 <TSK_MediumFrequencyTaskM1+0x1e6>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8000f94:	2100      	movs	r1, #0
 8000f96:	f000 fb55 	bl	8001644 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8000f9a:	2311      	movs	r3, #17
 8000f9c:	77e3      	strb	r3, [r4, #31]
 8000f9e:	e735      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <TSK_MediumFrequencyTaskM1+0x254>)
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f001 f9f8 	bl	8002398 <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fe11 	bl	8000bd0 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8000fae:	6828      	ldr	r0, [r5, #0]
 8000fb0:	f003 ff44 	bl	8004e3c <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000fb4:	20c8      	movs	r0, #200	@ 0xc8
 8000fb6:	0080      	lsls	r0, r0, #2
 8000fb8:	f7ff ff02 	bl	8000dc0 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	77e3      	strb	r3, [r4, #31]
}
 8000fc0:	e724      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000fc2:	2260      	movs	r2, #96	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000fc4:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000fc6:	5283      	strh	r3, [r0, r2]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000fc8:	f000 fb3c 	bl	8001644 <PWMC_CurrentReadingCalibr>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000fcc:	6828      	ldr	r0, [r5, #0]
 8000fce:	e75f      	b.n	8000e90 <TSK_MediumFrequencyTaskM1+0xb4>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <TSK_MediumFrequencyTaskM1+0x258>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f004 f86a 	bl	80050ac <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <TSK_MediumFrequencyTaskM1+0x25c>)
 8000fda:	821f      	strh	r7, [r3, #16]
 8000fdc:	8258      	strh	r0, [r3, #18]
            {
 8000fde:	e715      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
                FOC_Clear(M1);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fdf5 	bl	8000bd0 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8000fe6:	6828      	ldr	r0, [r5, #0]
 8000fe8:	f003 ff28 	bl	8004e3c <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000fec:	2300      	movs	r3, #0
 8000fee:	83e3      	strh	r3, [r4, #30]
 8000ff0:	e70c      	b.n	8000e0c <TSK_MediumFrequencyTaskM1+0x30>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f004 f815 	bl	8005024 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000ffa:	0031      	movs	r1, r6
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f003 ffff 	bl	8005000 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff feb4 	bl	8000d70 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff feb3 	bl	8000d74 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f004 f88e 	bl	8005130 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001014:	0020      	movs	r0, r4
 8001016:	f7ff fc75 	bl	8000904 <MCI_ExecBufferedCommands>
 800101a:	2306      	movs	r3, #6
 800101c:	e767      	b.n	8000eee <TSK_MediumFrequencyTaskM1+0x112>
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	20000090 	.word	0x20000090
 8001024:	20000000 	.word	0x20000000
 8001028:	20000610 	.word	0x20000610
 800102c:	0800546c 	.word	0x0800546c
 8001030:	20000654 	.word	0x20000654
 8001034:	2000000c 	.word	0x2000000c
 8001038:	2000065c 	.word	0x2000065c
 800103c:	20000110 	.word	0x20000110
 8001040:	20000074 	.word	0x20000074

08001044 <MC_Scheduler>:
{
 8001044:	b510      	push	{r4, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MC_Scheduler+0x48>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d000      	beq.n	8001050 <MC_Scheduler+0xc>
}
 800104e:	bd10      	pop	{r4, pc}
    if(hMFTaskCounterM1 > 0u)
 8001050:	4c0f      	ldr	r4, [pc, #60]	@ (8001090 <MC_Scheduler+0x4c>)
 8001052:	8823      	ldrh	r3, [r4, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001058:	3b01      	subs	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <MC_Scheduler+0x50>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	2a00      	cmp	r2, #0
 8001064:	d003      	beq.n	800106e <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 8001066:	881a      	ldrh	r2, [r3, #0]
 8001068:	3a01      	subs	r2, #1
 800106a:	b292      	uxth	r2, r2
 800106c:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MC_Scheduler+0x54>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	2a00      	cmp	r2, #0
 8001074:	d0eb      	beq.n	800104e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	3a01      	subs	r2, #1
 800107a:	b292      	uxth	r2, r2
 800107c:	801a      	strh	r2, [r3, #0]
}
 800107e:	e7e6      	b.n	800104e <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 8001080:	f7ff feac 	bl	8000ddc <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001084:	f7ff fc1c 	bl	80008c0 <MC_APP_PostMediumFrequencyHook_M1>
 8001088:	2301      	movs	r3, #1
 800108a:	e7e7      	b.n	800105c <MC_Scheduler+0x18>
 800108c:	2000064c 	.word	0x2000064c
 8001090:	20000652 	.word	0x20000652
 8001094:	20000650 	.word	0x20000650
 8001098:	2000064e 	.word	0x2000064e

0800109c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109e:	46ce      	mov	lr, r9
 80010a0:	4647      	mov	r7, r8
 80010a2:	b580      	push	{r7, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 80010a4:	4837      	ldr	r0, [pc, #220]	@ (8001184 <TSK_HighFrequencyTask+0xe8>)
{
 80010a6:	b087      	sub	sp, #28
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 80010a8:	f003 fd5c 	bl	8004b64 <ENC_CalcAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <TSK_HighFrequencyTask+0xec>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f003 ffa8 	bl	8005004 <STC_GetSpeedSensor>
 80010b4:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80010b6:	f003 ff59 	bl	8004f6c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010ba:	4f34      	ldr	r7, [pc, #208]	@ (800118c <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 80010bc:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80010be:	a903      	add	r1, sp, #12
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f000 f989 	bl	80013d8 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 80010c6:	f001 fce7 	bl	8002a98 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80010ca:	9803      	ldr	r0, [sp, #12]
 80010cc:	f7ff fc98 	bl	8000a00 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010d0:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80010d2:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010d4:	f7ff fd16 	bl	8000b04 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010d8:	4c2d      	ldr	r4, [pc, #180]	@ (8001190 <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80010da:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80010dc:	2310      	movs	r3, #16
 80010de:	5ee1      	ldrsh	r1, [r4, r3]
 80010e0:	b203      	sxth	r3, r0
 80010e2:	1ac9      	subs	r1, r1, r3
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <TSK_HighFrequencyTask+0xf8>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f003 fe4c 	bl	8004d84 <PI_Controller>
 80010ec:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80010ee:	2312      	movs	r3, #18
 80010f0:	5ee1      	ldrsh	r1, [r4, r3]
 80010f2:	ab01      	add	r3, sp, #4
 80010f4:	2202      	movs	r2, #2
 80010f6:	5e9b      	ldrsh	r3, [r3, r2]
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <TSK_HighFrequencyTask+0xfc>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f003 fe41 	bl	8004d84 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001102:	4642      	mov	r2, r8
 8001104:	ab02      	add	r3, sp, #8
 8001106:	801a      	strh	r2, [r3, #0]
 8001108:	8058      	strh	r0, [r3, #2]
 800110a:	9902      	ldr	r1, [sp, #8]
 800110c:	4823      	ldr	r0, [pc, #140]	@ (800119c <TSK_HighFrequencyTask+0x100>)
 800110e:	f003 fc5f 	bl	80049d0 <Circle_Limitation>
 8001112:	b203      	sxth	r3, r0
 8001114:	4699      	mov	r9, r3
 8001116:	9002      	str	r0, [sp, #8]
 8001118:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800111a:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800111c:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800111e:	f003 ff2d 	bl	8004f7c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001122:	0029      	movs	r1, r5
 8001124:	9802      	ldr	r0, [sp, #8]
 8001126:	f7ff fd3b 	bl	8000ba0 <MCM_Rev_Park>
 800112a:	9005      	str	r0, [sp, #20]
  RCM_ReadOngoingConv();
 800112c:	f001 fcec 	bl	8002b08 <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001130:	9905      	ldr	r1, [sp, #20]
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f000 f954 	bl	80013e0 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001138:	002a      	movs	r2, r5
 800113a:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800113c:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f000 fa9c 	bl	800167c <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 8001144:	464b      	mov	r3, r9
 8001146:	82e3      	strh	r3, [r4, #22]
 8001148:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 800114a:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 800114c:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 800114e:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001150:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 8001152:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001154:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001156:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001158:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800115a:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 800115c:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 800115e:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001160:	f004 f85a 	bl	8005218 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001164:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001166:	2e01      	cmp	r6, #1
 8001168:	d005      	beq.n	8001176 <TSK_HighFrequencyTask+0xda>
}
 800116a:	2000      	movs	r0, #0
 800116c:	b007      	add	sp, #28
 800116e:	bcc0      	pop	{r6, r7}
 8001170:	46b9      	mov	r9, r7
 8001172:	46b0      	mov	r8, r6
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <TSK_HighFrequencyTask+0x104>)
 800117c:	f7ff fbba 	bl	80008f4 <MCI_FaultProcessing>
 8001180:	e7f3      	b.n	800116a <TSK_HighFrequencyTask+0xce>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	20000090 	.word	0x20000090
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000654 	.word	0x20000654
 8001190:	2000065c 	.word	0x2000065c
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004
 800119c:	20000010 	.word	0x20000010
 80011a0:	20000610 	.word	0x20000610

080011a4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	46c6      	mov	lr, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <TSK_SafetyTask_PWMOFF+0x7c>)
 80011aa:	0087      	lsls	r7, r0, #2
{
 80011ac:	0005      	movs	r5, r0
 80011ae:	b500      	push	{lr}
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80011b0:	59d8      	ldr	r0, [r3, r7]
 80011b2:	4698      	mov	r8, r3
 80011b4:	f000 faae 	bl	8001714 <PWMC_IsFaultOccurred>
 80011b8:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d023      	beq.n	8001206 <TSK_SafetyTask_PWMOFF+0x62>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80011be:	43f2      	mvns	r2, r6
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <TSK_SafetyTask_PWMOFF+0x80>)
 80011c2:	197c      	adds	r4, r7, r5
 80011c4:	00e4      	lsls	r4, r4, #3
 80011c6:	18e4      	adds	r4, r4, r3
 80011c8:	0020      	movs	r0, r4
 80011ca:	0031      	movs	r1, r6
 80011cc:	b292      	uxth	r2, r2
 80011ce:	f7ff fb91 	bl	80008f4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80011d2:	0020      	movs	r0, r4
 80011d4:	f7ff fc0e 	bl	80009f4 <MCI_GetFaultState>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d011      	beq.n	8001200 <TSK_SafetyTask_PWMOFF+0x5c>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <TSK_SafetyTask_PWMOFF+0x84>)
 80011de:	59d8      	ldr	r0, [r3, r7]
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d002      	beq.n	80011ea <TSK_SafetyTask_PWMOFF+0x46>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 80011e4:	2100      	movs	r1, #0
 80011e6:	f003 fc75 	bl	8004ad4 <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80011ea:	4643      	mov	r3, r8
 80011ec:	59d8      	ldr	r0, [r3, r7]
 80011ee:	f000 fa21 	bl	8001634 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80011f2:	0028      	movs	r0, r5
 80011f4:	f7ff fcec 	bl	8000bd0 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <TSK_SafetyTask_PWMOFF+0x88>)
 80011fa:	59d8      	ldr	r0, [r3, r7]
 80011fc:	f003 fe1e 	bl	8004e3c <PQD_Clear>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001200:	bc80      	pop	{r7}
 8001202:	46b8      	mov	r8, r7
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001206:	480a      	ldr	r0, [pc, #40]	@ (8001230 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001208:	f001 fb56 	bl	80028b8 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <TSK_SafetyTask_PWMOFF+0x90>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 800120e:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001210:	0018      	movs	r0, r3
 8001212:	f003 fe6f 	bl	8004ef4 <RVBS_CalcAvVbus>
 8001216:	2308      	movs	r3, #8
 8001218:	4398      	bics	r0, r3
 800121a:	4306      	orrs	r6, r0
 800121c:	b2b6      	uxth	r6, r6
 800121e:	e7ce      	b.n	80011be <TSK_SafetyTask_PWMOFF+0x1a>
 8001220:	20000654 	.word	0x20000654
 8001224:	20000610 	.word	0x20000610
 8001228:	20000658 	.word	0x20000658
 800122c:	20000000 	.word	0x20000000
 8001230:	20000048 	.word	0x20000048
 8001234:	2000002c 	.word	0x2000002c

08001238 <TSK_SafetyTask>:
{
 8001238:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <TSK_SafetyTask+0x18>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d000      	beq.n	8001244 <TSK_SafetyTask+0xc>
}
 8001242:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ffad 	bl	80011a4 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 800124a:	f001 fbf3 	bl	8002a34 <RCM_ExecUserConv>
}
 800124e:	e7f8      	b.n	8001242 <TSK_SafetyTask+0xa>
 8001250:	2000064c 	.word	0x2000064c

08001254 <MC_RunMotorControlTasks>:
{
 8001254:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <MC_RunMotorControlTasks+0x18>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <MC_RunMotorControlTasks+0xc>
}
 800125e:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001260:	f7ff fef0 	bl	8001044 <MC_Scheduler>
    TSK_SafetyTask();
 8001264:	f7ff ffe8 	bl	8001238 <TSK_SafetyTask>
}
 8001268:	e7f9      	b.n	800125e <MC_RunMotorControlTasks+0xa>
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	2000064c 	.word	0x2000064c

08001270 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001270:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <TSK_HardwareFaultTask+0x18>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f001 f88f 	bl	8002398 <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <TSK_HardwareFaultTask+0x1c>)
 8001280:	f7ff fb38 	bl	80008f4 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001284:	bd10      	pop	{r4, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	20000654 	.word	0x20000654
 800128c:	20000610 	.word	0x20000610

08001290 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001290:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001292:	f7ff fb0b 	bl	80008ac <MC_GetSTMStateMotor1>
 8001296:	2800      	cmp	r0, #0
 8001298:	d102      	bne.n	80012a0 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 800129a:	f7ff faeb 	bl	8000874 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800129e:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 80012a0:	f7ff faf0 	bl	8000884 <MC_StopMotor1>
}
 80012a4:	e7fb      	b.n	800129e <UI_HandleStartStopButton_cb+0xe>
 80012a6:	46c0      	nop			@ (mov r8, r8)

080012a8 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012a8:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012aa:	2120      	movs	r1, #32
 80012ac:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80012ae:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b0:	4a37      	ldr	r2, [pc, #220]	@ (8001390 <mc_lock_pins+0xe8>)
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012b6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	b08c      	sub	sp, #48	@ 0x30
 80012be:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void) temp;
 80012c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012c2:	4934      	ldr	r1, [pc, #208]	@ (8001394 <mc_lock_pins+0xec>)
 80012c4:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <mc_lock_pins+0xf0>)
 80012c6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012c8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012ca:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012cc:	69d4      	ldr	r4, [r2, #28]
 80012ce:	940a      	str	r4, [sp, #40]	@ 0x28
  (void) temp;
 80012d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012d4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012d8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012da:	3801      	subs	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80012dc:	9109      	str	r1, [sp, #36]	@ 0x24
  (void) temp;
 80012de:	9909      	ldr	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e0:	492e      	ldr	r1, [pc, #184]	@ (800139c <mc_lock_pins+0xf4>)
 80012e2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012e4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012e8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ea:	30ff      	adds	r0, #255	@ 0xff
  temp = READ_REG(GPIOx->LCKR);
 80012ec:	9108      	str	r1, [sp, #32]
  (void) temp;
 80012ee:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f0:	492b      	ldr	r1, [pc, #172]	@ (80013a0 <mc_lock_pins+0xf8>)
 80012f2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012f8:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012fa:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80012fc:	9107      	str	r1, [sp, #28]
  (void) temp;
 80012fe:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001300:	2181      	movs	r1, #129	@ 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001302:	30ff      	adds	r0, #255	@ 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001304:	0249      	lsls	r1, r1, #9
 8001306:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001308:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800130c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800130e:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001310:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001312:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001314:	2188      	movs	r1, #136	@ 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001316:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001318:	0249      	lsls	r1, r1, #9
 800131a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800131c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800131e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001320:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001322:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001324:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001326:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001328:	21a0      	movs	r1, #160	@ 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800132a:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001330:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001332:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001334:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001336:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001338:	9104      	str	r1, [sp, #16]
  (void) temp;
 800133a:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800133c:	2182      	movs	r1, #130	@ 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 800133e:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001340:	0249      	lsls	r1, r1, #9
 8001342:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001344:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001346:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001348:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800134a:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 800134c:	9103      	str	r1, [sp, #12]
  (void) temp;
 800134e:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001350:	21c0      	movs	r1, #192	@ 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001352:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001354:	0249      	lsls	r1, r1, #9
 8001356:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001358:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800135a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800135c:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800135e:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001360:	9102      	str	r1, [sp, #8]
  (void) temp;
 8001362:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001364:	2190      	movs	r1, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001366:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001368:	0249      	lsls	r1, r1, #9
 800136a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800136c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800136e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001370:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001372:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001374:	9201      	str	r2, [sp, #4]
  (void) temp;
 8001376:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001378:	2284      	movs	r2, #132	@ 0x84
  WRITE_REG(GPIOx->LCKR, PinMask);
 800137a:	0109      	lsls	r1, r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800137c:	0252      	lsls	r2, r2, #9
 800137e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001380:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001382:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001388:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
}
 800138a:	b00c      	add	sp, #48	@ 0x30
 800138c:	bd10      	pop	{r4, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	00010020 	.word	0x00010020
 8001394:	00010002 	.word	0x00010002
 8001398:	48000400 	.word	0x48000400
 800139c:	00010001 	.word	0x00010001
 80013a0:	00010100 	.word	0x00010100

080013a4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80013a4:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80013a6:	f002 fcc1 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 80013aa:	21fa      	movs	r1, #250	@ 0xfa
 80013ac:	00c9      	lsls	r1, r1, #3
 80013ae:	f7fe fe85 	bl	80000bc <__udivsi3>
 80013b2:	f002 f82f 	bl	8003414 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80013b6:	2001      	movs	r0, #1
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <MX_MotorControl_Init+0x2c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	4240      	negs	r0, r0
 80013c0:	f001 fff2 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_MotorControl_Init+0x30>)
 80013c6:	f7ff fc35 	bl	8000c34 <MCboot>
  mc_lock_pins();
 80013ca:	f7ff ff6d 	bl	80012a8 <mc_lock_pins>
}
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	200002fc 	.word	0x200002fc
 80013d4:	20000684 	.word	0x20000684

080013d8 <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 80013d8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80013da:	6803      	ldr	r3, [r0, #0]
 80013dc:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80013de:	bd10      	pop	{r4, pc}

080013e0 <PWMC_SetPhaseVoltage>:
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80013e0:	224e      	movs	r2, #78	@ 0x4e
{
 80013e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80013e4:	5a82      	ldrh	r2, [r0, r2]
 80013e6:	b20b      	sxth	r3, r1
 80013e8:	435a      	muls	r2, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80013ea:	2372      	movs	r3, #114	@ 0x72
 80013ec:	5ac3      	ldrh	r3, [r0, r3]
 80013ee:	140c      	asrs	r4, r1, #16
 80013f0:	435c      	muls	r4, r3
 80013f2:	0064      	lsls	r4, r4, #1
 80013f4:	4266      	negs	r6, r4

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80013f6:	1b14      	subs	r4, r2, r4
 80013f8:	0fe1      	lsrs	r1, r4, #31
 80013fa:	1909      	adds	r1, r1, r4
    wZ = (wUBeta - wUAlpha) / 2;
 80013fc:	1ab2      	subs	r2, r6, r2
    wY = (wUBeta + wUAlpha) / 2;
 80013fe:	104f      	asrs	r7, r1, #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001400:	0fd1      	lsrs	r1, r2, #31
 8001402:	1889      	adds	r1, r1, r2
{
 8001404:	b083      	sub	sp, #12
    wZ = (wUBeta - wUAlpha) / 2;
 8001406:	104d      	asrs	r5, r1, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001408:	089b      	lsrs	r3, r3, #2
    if (wY < 0)
 800140a:	1c61      	adds	r1, r4, #1
 800140c:	db60      	blt.n	80014d0 <PWMC_SetPhaseVoltage+0xf0>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800140e:	1c51      	adds	r1, r2, #1
 8001410:	db3d      	blt.n	800148e <PWMC_SetPhaseVoltage+0xae>
      {
        pHandle->Sector = SECTOR_2;
 8001412:	217c      	movs	r1, #124	@ 0x7c
 8001414:	2601      	movs	r6, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001416:	1b7f      	subs	r7, r7, r5
 8001418:	17fd      	asrs	r5, r7, #31
 800141a:	03ad      	lsls	r5, r5, #14
 800141c:	0bad      	lsrs	r5, r5, #14
 800141e:	19ed      	adds	r5, r5, r7
 8001420:	14ad      	asrs	r5, r5, #18
        pHandle->Sector = SECTOR_2;
 8001422:	5446      	strb	r6, [r0, r1]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001424:	18e9      	adds	r1, r5, r3
        wTimePhB = wTimePhA + (wZ / 131072);
 8001426:	17d3      	asrs	r3, r2, #31
 8001428:	039b      	lsls	r3, r3, #14
 800142a:	0b9b      	lsrs	r3, r3, #14
 800142c:	189a      	adds	r2, r3, r2
        wTimePhC = wTimePhA - (wY / 131072);
 800142e:	17e3      	asrs	r3, r4, #31
 8001430:	039b      	lsls	r3, r3, #14
 8001432:	0b9b      	lsrs	r3, r3, #14
 8001434:	191b      	adds	r3, r3, r4

        if(true == pHandle->SingleShuntTopology)
 8001436:	2487      	movs	r4, #135	@ 0x87
 8001438:	5d04      	ldrb	r4, [r0, r4]
        wTimePhB = wTimePhA + (wZ / 131072);
 800143a:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072);
 800143c:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 800143e:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 8001440:	1acb      	subs	r3, r1, r3
        if(true == pHandle->SingleShuntTopology)
 8001442:	2c00      	cmp	r4, #0
 8001444:	d165      	bne.n	8001512 <PWMC_SetPhaseVoltage+0x132>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001446:	b297      	uxth	r7, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001448:	b28e      	uxth	r6, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 800144a:	b29d      	uxth	r5, r3
            pHandle->lowDuty = 0U;
 800144c:	2458      	movs	r4, #88	@ 0x58
 800144e:	5307      	strh	r7, [r0, r4]
            pHandle->midDuty = 1U;
 8001450:	3402      	adds	r4, #2
 8001452:	5306      	strh	r6, [r0, r4]
            pHandle->highDuty = 2U;
 8001454:	3402      	adds	r4, #2
 8001456:	5305      	strh	r5, [r0, r4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001458:	43cc      	mvns	r4, r1
 800145a:	17e4      	asrs	r4, r4, #31
 800145c:	4021      	ands	r1, r4
 800145e:	2450      	movs	r4, #80	@ 0x50
 8001460:	b289      	uxth	r1, r1
 8001462:	5301      	strh	r1, [r0, r4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001464:	43d4      	mvns	r4, r2
 8001466:	17e4      	asrs	r4, r4, #31
 8001468:	4022      	ands	r2, r4
 800146a:	2452      	movs	r4, #82	@ 0x52
 800146c:	b292      	uxth	r2, r2
 800146e:	5302      	strh	r2, [r0, r4]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001470:	43dc      	mvns	r4, r3
 8001472:	17e4      	asrs	r4, r4, #31
 8001474:	4023      	ands	r3, r4
 8001476:	2454      	movs	r4, #84	@ 0x54
 8001478:	b29b      	uxth	r3, r3
 800147a:	5303      	strh	r3, [r0, r4]

    if (1U == pHandle->DTTest)
 800147c:	341c      	adds	r4, #28
 800147e:	5b04      	ldrh	r4, [r0, r4]
 8001480:	2c01      	cmp	r4, #1
 8001482:	d100      	bne.n	8001486 <PWMC_SetPhaseVoltage+0xa6>
 8001484:	e080      	b.n	8001588 <PWMC_SetPhaseVoltage+0x1a8>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001486:	6943      	ldr	r3, [r0, #20]
 8001488:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800148a:	b003      	add	sp, #12
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 800148e:	2e00      	cmp	r6, #0
 8001490:	dd60      	ble.n	8001554 <PWMC_SetPhaseVoltage+0x174>
          pHandle->Sector = SECTOR_1;
 8001492:	217c      	movs	r1, #124	@ 0x7c
 8001494:	2400      	movs	r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001496:	1b75      	subs	r5, r6, r5
 8001498:	14ad      	asrs	r5, r5, #18
          pHandle->Sector = SECTOR_1;
 800149a:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800149c:	18e9      	adds	r1, r5, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 800149e:	17d3      	asrs	r3, r2, #31
 80014a0:	039b      	lsls	r3, r3, #14
 80014a2:	0b9b      	lsrs	r3, r3, #14
 80014a4:	189a      	adds	r2, r3, r2
          wTimePhC = wTimePhB - (wX / 131072);
 80014a6:	17f3      	asrs	r3, r6, #31
 80014a8:	03db      	lsls	r3, r3, #15
 80014aa:	0bdb      	lsrs	r3, r3, #15
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80014ac:	347f      	adds	r4, #127	@ 0x7f
          wTimePhB = wTimePhA + (wZ / 131072);
 80014ae:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80014b0:	199b      	adds	r3, r3, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80014b2:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 80014b4:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 80014b6:	145b      	asrs	r3, r3, #17
 80014b8:	1ad3      	subs	r3, r2, r3
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80014ba:	2c00      	cmp	r4, #0
 80014bc:	d104      	bne.n	80014c8 <PWMC_SetPhaseVoltage+0xe8>
 80014be:	3487      	adds	r4, #135	@ 0x87
 80014c0:	5d04      	ldrb	r4, [r0, r4]
 80014c2:	2c00      	cmp	r4, #0
 80014c4:	d100      	bne.n	80014c8 <PWMC_SetPhaseVoltage+0xe8>
 80014c6:	e0b0      	b.n	800162a <PWMC_SetPhaseVoltage+0x24a>
 80014c8:	2702      	movs	r7, #2
 80014ca:	2601      	movs	r6, #1
 80014cc:	2500      	movs	r5, #0
 80014ce:	e7bd      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
        if(true == pHandle->SingleShuntTopology)
 80014d0:	2187      	movs	r1, #135	@ 0x87
 80014d2:	5c41      	ldrb	r1, [r0, r1]
 80014d4:	468c      	mov	ip, r1
      if (wZ < 0)
 80014d6:	1c51      	adds	r1, r2, #1
 80014d8:	db70      	blt.n	80015bc <PWMC_SetPhaseVoltage+0x1dc>
        if (wX <= 0)
 80014da:	2e00      	cmp	r6, #0
 80014dc:	dd1d      	ble.n	800151a <PWMC_SetPhaseVoltage+0x13a>
          pHandle->Sector = SECTOR_3;
 80014de:	227c      	movs	r2, #124	@ 0x7c
 80014e0:	2102      	movs	r1, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80014e2:	1bbf      	subs	r7, r7, r6
          pHandle->Sector = SECTOR_3;
 80014e4:	5481      	strb	r1, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80014e6:	17fa      	asrs	r2, r7, #31
 80014e8:	0392      	lsls	r2, r2, #14
 80014ea:	0b92      	lsrs	r2, r2, #14
 80014ec:	19d2      	adds	r2, r2, r7
 80014ee:	1492      	asrs	r2, r2, #18
 80014f0:	18d1      	adds	r1, r2, r3
          wTimePhC = wTimePhA - (wY / 131072);
 80014f2:	17e3      	asrs	r3, r4, #31
 80014f4:	039b      	lsls	r3, r3, #14
 80014f6:	0b9b      	lsrs	r3, r3, #14
 80014f8:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 80014fa:	4664      	mov	r4, ip
          wTimePhC = wTimePhA - (wY / 131072);
 80014fc:	149b      	asrs	r3, r3, #18
 80014fe:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 8001500:	1472      	asrs	r2, r6, #17
 8001502:	18d2      	adds	r2, r2, r3
          if(true == pHandle->SingleShuntTopology)
 8001504:	2c00      	cmp	r4, #0
 8001506:	d000      	beq.n	800150a <PWMC_SetPhaseVoltage+0x12a>
 8001508:	e083      	b.n	8001612 <PWMC_SetPhaseVoltage+0x232>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800150a:	b297      	uxth	r7, r2
          pHandle->midDuty = (uint16_t)wTimePhC;
 800150c:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800150e:	b28d      	uxth	r5, r1
 8001510:	e79c      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
 8001512:	2702      	movs	r7, #2
 8001514:	2600      	movs	r6, #0
 8001516:	2501      	movs	r5, #1
 8001518:	e798      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
          pHandle->Sector = SECTOR_4;
 800151a:	217c      	movs	r1, #124	@ 0x7c
 800151c:	2403      	movs	r4, #3
 800151e:	5444      	strb	r4, [r0, r1]
          if(true == pHandle->SingleShuntTopology)
 8001520:	4664      	mov	r4, ip
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001522:	1b75      	subs	r5, r6, r5
 8001524:	17e9      	asrs	r1, r5, #31
 8001526:	0389      	lsls	r1, r1, #14
 8001528:	0b89      	lsrs	r1, r1, #14
 800152a:	1949      	adds	r1, r1, r5
 800152c:	1489      	asrs	r1, r1, #18
 800152e:	18c9      	adds	r1, r1, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 8001530:	17d3      	asrs	r3, r2, #31
 8001532:	039b      	lsls	r3, r3, #14
 8001534:	0b9b      	lsrs	r3, r3, #14
 8001536:	189a      	adds	r2, r3, r2
          wTimePhC = wTimePhB - (wX / 131072);
 8001538:	17f3      	asrs	r3, r6, #31
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 800153e:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001540:	199b      	adds	r3, r3, r6
          wTimePhB = wTimePhA + (wZ / 131072);
 8001542:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 8001544:	145b      	asrs	r3, r3, #17
 8001546:	1ad3      	subs	r3, r2, r3
          if(true == pHandle->SingleShuntTopology)
 8001548:	2c00      	cmp	r4, #0
 800154a:	d06a      	beq.n	8001622 <PWMC_SetPhaseVoltage+0x242>
 800154c:	2700      	movs	r7, #0
 800154e:	2601      	movs	r6, #1
 8001550:	2502      	movs	r5, #2
 8001552:	e77b      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
          pHandle->Sector = SECTOR_6;
 8001554:	227c      	movs	r2, #124	@ 0x7c
 8001556:	2105      	movs	r1, #5
 8001558:	5481      	strb	r1, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800155a:	1bb9      	subs	r1, r7, r6
 800155c:	1489      	asrs	r1, r1, #18
 800155e:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhA - (wY / 131072);
 8001560:	17e3      	asrs	r3, r4, #31
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	0b9b      	lsrs	r3, r3, #14
 8001566:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 8001568:	2487      	movs	r4, #135	@ 0x87
          wTimePhB = wTimePhC + (wX / 131072);
 800156a:	17f2      	asrs	r2, r6, #31
 800156c:	03d2      	lsls	r2, r2, #15
 800156e:	0bd2      	lsrs	r2, r2, #15
          wTimePhC = wTimePhA - (wY / 131072);
 8001570:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001572:	1992      	adds	r2, r2, r6
          if(true == pHandle->SingleShuntTopology)
 8001574:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 8001576:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 8001578:	1452      	asrs	r2, r2, #17
 800157a:	18d2      	adds	r2, r2, r3
          if(true == pHandle->SingleShuntTopology)
 800157c:	2c00      	cmp	r4, #0
 800157e:	d04c      	beq.n	800161a <PWMC_SetPhaseVoltage+0x23a>
 8001580:	2701      	movs	r7, #1
 8001582:	2602      	movs	r6, #2
 8001584:	2500      	movs	r5, #0
 8001586:	e761      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
      if (pHandle->Ia > 0)
 8001588:	2562      	movs	r5, #98	@ 0x62
 800158a:	5f45      	ldrsh	r5, [r0, r5]
        pHandle->CntPhA += pHandle->DTCompCnt;
 800158c:	3473      	adds	r4, #115	@ 0x73
 800158e:	5b04      	ldrh	r4, [r0, r4]
      if (pHandle->Ia > 0)
 8001590:	2d00      	cmp	r5, #0
 8001592:	dd37      	ble.n	8001604 <PWMC_SetPhaseVoltage+0x224>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001594:	1909      	adds	r1, r1, r4
 8001596:	b289      	uxth	r1, r1
 8001598:	2550      	movs	r5, #80	@ 0x50
 800159a:	5341      	strh	r1, [r0, r5]
      if (pHandle->Ib > 0)
 800159c:	2164      	movs	r1, #100	@ 0x64
 800159e:	5e41      	ldrsh	r1, [r0, r1]
 80015a0:	2900      	cmp	r1, #0
 80015a2:	dd2c      	ble.n	80015fe <PWMC_SetPhaseVoltage+0x21e>
        pHandle->CntPhB += pHandle->DTCompCnt;
 80015a4:	1912      	adds	r2, r2, r4
 80015a6:	b292      	uxth	r2, r2
 80015a8:	2152      	movs	r1, #82	@ 0x52
 80015aa:	5242      	strh	r2, [r0, r1]
      if (pHandle->Ic > 0)
 80015ac:	2266      	movs	r2, #102	@ 0x66
 80015ae:	5e82      	ldrsh	r2, [r0, r2]
 80015b0:	2a00      	cmp	r2, #0
 80015b2:	dd20      	ble.n	80015f6 <PWMC_SetPhaseVoltage+0x216>
        pHandle->CntPhC += pHandle->DTCompCnt;
 80015b4:	191c      	adds	r4, r3, r4
 80015b6:	2354      	movs	r3, #84	@ 0x54
 80015b8:	52c4      	strh	r4, [r0, r3]
 80015ba:	e764      	b.n	8001486 <PWMC_SetPhaseVoltage+0xa6>
        pHandle->Sector = SECTOR_5;
 80015bc:	217c      	movs	r1, #124	@ 0x7c
 80015be:	2604      	movs	r6, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80015c0:	1b7d      	subs	r5, r7, r5
        pHandle->Sector = SECTOR_5;
 80015c2:	5446      	strb	r6, [r0, r1]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80015c4:	17e9      	asrs	r1, r5, #31
 80015c6:	0389      	lsls	r1, r1, #14
 80015c8:	0b89      	lsrs	r1, r1, #14
 80015ca:	1949      	adds	r1, r1, r5
 80015cc:	1489      	asrs	r1, r1, #18
 80015ce:	18c9      	adds	r1, r1, r3
        wTimePhB = wTimePhA + (wZ / 131072);
 80015d0:	17d3      	asrs	r3, r2, #31
 80015d2:	039b      	lsls	r3, r3, #14
 80015d4:	0b9b      	lsrs	r3, r3, #14
 80015d6:	189a      	adds	r2, r3, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 80015d8:	17e3      	asrs	r3, r4, #31
 80015da:	039b      	lsls	r3, r3, #14
 80015dc:	0b9b      	lsrs	r3, r3, #14
 80015de:	191b      	adds	r3, r3, r4
        if(true == pHandle->SingleShuntTopology)
 80015e0:	4664      	mov	r4, ip
        wTimePhB = wTimePhA + (wZ / 131072);
 80015e2:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80015e4:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80015e6:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 80015e8:	1acb      	subs	r3, r1, r3
        if(true == pHandle->SingleShuntTopology)
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	d10d      	bne.n	800160a <PWMC_SetPhaseVoltage+0x22a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80015ee:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 80015f0:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80015f2:	b295      	uxth	r5, r2
 80015f4:	e72a      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80015f6:	2254      	movs	r2, #84	@ 0x54
 80015f8:	1b1b      	subs	r3, r3, r4
 80015fa:	5283      	strh	r3, [r0, r2]
 80015fc:	e743      	b.n	8001486 <PWMC_SetPhaseVoltage+0xa6>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80015fe:	1b12      	subs	r2, r2, r4
 8001600:	b292      	uxth	r2, r2
 8001602:	e7d1      	b.n	80015a8 <PWMC_SetPhaseVoltage+0x1c8>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8001604:	1b09      	subs	r1, r1, r4
 8001606:	b289      	uxth	r1, r1
 8001608:	e7c6      	b.n	8001598 <PWMC_SetPhaseVoltage+0x1b8>
 800160a:	2701      	movs	r7, #1
 800160c:	2600      	movs	r6, #0
 800160e:	2502      	movs	r5, #2
 8001610:	e71c      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
 8001612:	2700      	movs	r7, #0
 8001614:	2602      	movs	r6, #2
 8001616:	2501      	movs	r5, #1
 8001618:	e718      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800161a:	b28f      	uxth	r7, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 800161c:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 800161e:	b295      	uxth	r5, r2
 8001620:	e714      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8001622:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 8001624:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8001626:	b28d      	uxth	r5, r1
 8001628:	e710      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800162a:	b28f      	uxth	r7, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 800162c:	b296      	uxth	r6, r2
            pHandle->highDuty = (uint16_t)wTimePhC;
 800162e:	b29d      	uxth	r5, r3
 8001630:	e70c      	b.n	800144c <PWMC_SetPhaseVoltage+0x6c>
 8001632:	46c0      	nop			@ (mov r8, r8)

08001634 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 8001634:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8001636:	6843      	ldr	r3, [r0, #4]
 8001638:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 800163a:	bd10      	pop	{r4, pc}

0800163c <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 800163c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800163e:	6883      	ldr	r3, [r0, #8]
 8001640:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001642:	bd10      	pop	{r4, pc}

08001644 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8001644:	b510      	push	{r4, lr}
 8001646:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8001648:	2900      	cmp	r1, #0
 800164a:	d010      	beq.n	800166e <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 800164c:	2901      	cmp	r1, #1
 800164e:	d001      	beq.n	8001654 <PWMC_CurrentReadingCalibr+0x10>
  bool retVal = false;
 8001650:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8001652:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8001654:	2260      	movs	r2, #96	@ 0x60
 8001656:	5a83      	ldrh	r3, [r0, r2]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <PWMC_CurrentReadingCalibr+0x26>
        pHandle->OffCalibrWaitTimeCounter--;
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f4      	bne.n	8001650 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8001666:	68c3      	ldr	r3, [r0, #12]
 8001668:	4798      	blx	r3
      retVal = true;
 800166a:	2001      	movs	r0, #1
 800166c:	e7f1      	b.n	8001652 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 800166e:	f7ff ffe1 	bl	8001634 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8001672:	0020      	movs	r0, r4
 8001674:	68e3      	ldr	r3, [r4, #12]
 8001676:	4798      	blx	r3
      retVal = true;
 8001678:	2001      	movs	r0, #1
 800167a:	e7ea      	b.n	8001652 <PWMC_CurrentReadingCalibr+0xe>

0800167c <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	0004      	movs	r4, r0
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001680:	206e      	movs	r0, #110	@ 0x6e
 8001682:	5e20      	ldrsh	r0, [r4, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001684:	6b65      	ldr	r5, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001686:	b20b      	sxth	r3, r1
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001688:	13ee      	asrs	r6, r5, #15
 800168a:	1b9b      	subs	r3, r3, r6
 800168c:	4343      	muls	r3, r0
{
 800168e:	b084      	sub	sp, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001690:	195b      	adds	r3, r3, r5
 8001692:	6363      	str	r3, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001694:	ad02      	add	r5, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001696:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001698:	802b      	strh	r3, [r5, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800169a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 800169c:	1409      	asrs	r1, r1, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800169e:	13de      	asrs	r6, r3, #15
 80016a0:	1b89      	subs	r1, r1, r6
 80016a2:	4348      	muls	r0, r1
 80016a4:	18c0      	adds	r0, r0, r3
 80016a6:	63a0      	str	r0, [r4, #56]	@ 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80016a8:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 80016aa:	8068      	strh	r0, [r5, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 80016ac:	0011      	movs	r1, r2
 80016ae:	9802      	ldr	r0, [sp, #8]
 80016b0:	f7ff fa76 	bl	8000ba0 <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 80016b4:	2268      	movs	r2, #104	@ 0x68
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 80016b6:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 80016b8:	52a3      	strh	r3, [r4, r2]

    temp1 = - ialpha_beta.alpha;
 80016ba:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 80016bc:	0c00      	lsrs	r0, r0, #16
 80016be:	b29b      	uxth	r3, r3
 80016c0:	1a19      	subs	r1, r3, r0
 80016c2:	b209      	sxth	r1, r1
 80016c4:	0fca      	lsrs	r2, r1, #31
 80016c6:	1852      	adds	r2, r2, r1
 80016c8:	216a      	movs	r1, #106	@ 0x6a

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 80016ca:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 80016cc:	1052      	asrs	r2, r2, #1
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 80016ce:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 80016d0:	5262      	strh	r2, [r4, r1]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 80016d2:	0fda      	lsrs	r2, r3, #31
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	226c      	movs	r2, #108	@ 0x6c
 80016d8:	105b      	asrs	r3, r3, #1
 80016da:	52a3      	strh	r3, [r4, r2]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80016dc:	b004      	add	sp, #16
 80016de:	bd70      	pop	{r4, r5, r6, pc}

080016e0 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 80016e0:	2385      	movs	r3, #133	@ 0x85
 80016e2:	5cc3      	ldrb	r3, [r0, r3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 80016e8:	337d      	adds	r3, #125	@ 0x7d
 80016ea:	5cc3      	ldrb	r3, [r0, r3]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d004      	beq.n	80016fa <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80016f0:	2382      	movs	r3, #130	@ 0x82
 80016f2:	2201      	movs	r2, #1
 80016f4:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 80016f6:	307a      	adds	r0, #122	@ 0x7a
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80016f8:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80016fa:	2248      	movs	r2, #72	@ 0x48
 80016fc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80016fe:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8001702:	224a      	movs	r2, #74	@ 0x4a
 8001704:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001706:	5a82      	ldrh	r2, [r0, r2]
 8001708:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 800170a:	224c      	movs	r2, #76	@ 0x4c
 800170c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800170e:	5a82      	ldrh	r2, [r0, r2]
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001712:	e7ed      	b.n	80016f0 <PWMC_OCP_Handler+0x10>

08001714 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8001714:	2283      	movs	r2, #131	@ 0x83
{
 8001716:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 8001718:	5c81      	ldrb	r1, [r0, r2]
{
 800171a:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 800171c:	2900      	cmp	r1, #0
 800171e:	d015      	beq.n	800174c <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8001720:	2100      	movs	r1, #0
 8001722:	2442      	movs	r4, #66	@ 0x42
 8001724:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 8001726:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8001728:	2282      	movs	r2, #130	@ 0x82
 800172a:	5c99      	ldrb	r1, [r3, r2]
 800172c:	2900      	cmp	r1, #0
 800172e:	d002      	beq.n	8001736 <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8001730:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 8001732:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 8001734:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8001736:	2284      	movs	r2, #132	@ 0x84
 8001738:	5c99      	ldrb	r1, [r3, r2]
 800173a:	2900      	cmp	r1, #0
 800173c:	d005      	beq.n	800174a <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	00c9      	lsls	r1, r1, #3
 8001742:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 8001744:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 8001746:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8001748:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800174a:	bd10      	pop	{r4, pc}
 800174c:	2440      	movs	r4, #64	@ 0x40
  uint16_t retVal = MC_NO_FAULTS;
 800174e:	2000      	movs	r0, #0
 8001750:	e7ea      	b.n	8001728 <PWMC_IsFaultOccurred+0x14>
 8001752:	46c0      	nop			@ (mov r8, r8)

08001754 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001754:	23cc      	movs	r3, #204	@ 0xcc
 8001756:	58c3      	ldr	r3, [r0, r3]
{
 8001758:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800175a:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 800175c:	2400      	movs	r4, #0
 800175e:	23c8      	movs	r3, #200	@ 0xc8
 8001760:	54c4      	strb	r4, [r0, r3]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001762:	6853      	ldr	r3, [r2, #4]
 8001764:	3470      	adds	r4, #112	@ 0x70
 8001766:	43a3      	bics	r3, r4
 8001768:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800176a:	22a0      	movs	r2, #160	@ 0xa0
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 800176c:	23b4      	movs	r3, #180	@ 0xb4
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800176e:	5884      	ldr	r4, [r0, r2]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
  {
    if (wAux1 < INT16_MAX)
 8001770:	2280      	movs	r2, #128	@ 0x80
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001772:	5ac3      	ldrh	r3, [r0, r3]
    if (wAux1 < INT16_MAX)
 8001774:	0212      	lsls	r2, r2, #8
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001776:	1b1b      	subs	r3, r3, r4
    if (wAux1 < INT16_MAX)
 8001778:	4293      	cmp	r3, r2
 800177a:	db00      	blt.n	800177e <R1_GetPhaseCurrents+0x2a>
 800177c:	4b91      	ldr	r3, [pc, #580]	@ (80019c4 <R1_GetPhaseCurrents+0x270>)
 800177e:	4a92      	ldr	r2, [pc, #584]	@ (80019c8 <R1_GetPhaseCurrents+0x274>)
 8001780:	4293      	cmp	r3, r2
 8001782:	da00      	bge.n	8001786 <R1_GetPhaseCurrents+0x32>
 8001784:	0013      	movs	r3, r2
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 8001786:	22b6      	movs	r2, #182	@ 0xb6
 8001788:	5a82      	ldrh	r2, [r0, r2]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 800178a:	1b12      	subs	r2, r2, r4

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
  {
    if (wAux2 < INT16_MAX)
 800178c:	2480      	movs	r4, #128	@ 0x80
 800178e:	0224      	lsls	r4, r4, #8
 8001790:	42a2      	cmp	r2, r4
 8001792:	db00      	blt.n	8001796 <R1_GetPhaseCurrents+0x42>
 8001794:	4a8b      	ldr	r2, [pc, #556]	@ (80019c4 <R1_GetPhaseCurrents+0x270>)
 8001796:	4c8c      	ldr	r4, [pc, #560]	@ (80019c8 <R1_GetPhaseCurrents+0x274>)
 8001798:	42a2      	cmp	r2, r4
 800179a:	da00      	bge.n	800179e <R1_GetPhaseCurrents+0x4a>
 800179c:	0022      	movs	r2, r4
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 800179e:	247c      	movs	r4, #124	@ 0x7c
 80017a0:	5d04      	ldrb	r4, [r0, r4]
 80017a2:	2c05      	cmp	r4, #5
 80017a4:	d900      	bls.n	80017a8 <R1_GetPhaseCurrents+0x54>
 80017a6:	e109      	b.n	80019bc <R1_GetPhaseCurrents+0x268>
 80017a8:	4d88      	ldr	r5, [pc, #544]	@ (80019cc <R1_GetPhaseCurrents+0x278>)
 80017aa:	00a4      	lsls	r4, r4, #2
 80017ac:	592c      	ldr	r4, [r5, r4]
 80017ae:	46a7      	mov	pc, r4
      break;
    }

    case SECTOR_5:
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 80017b0:	24c5      	movs	r4, #197	@ 0xc5
 80017b2:	2506      	movs	r5, #6
 80017b4:	5d04      	ldrb	r4, [r0, r4]
 80017b6:	4025      	ands	r5, r4
 80017b8:	2d06      	cmp	r5, #6
 80017ba:	d100      	bne.n	80017be <R1_GetPhaseCurrents+0x6a>
 80017bc:	e0ad      	b.n	800191a <R1_GetPhaseCurrents+0x1c6>
        hCurrB = (int16_t) wAux1;
        hCurrA = -hCurrB-hCurrC;
      }
      else
      {
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 80017be:	2d00      	cmp	r5, #0
 80017c0:	d100      	bne.n	80017c4 <R1_GetPhaseCurrents+0x70>
 80017c2:	e085      	b.n	80018d0 <R1_GetPhaseCurrents+0x17c>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 80017c4:	247b      	movs	r4, #123	@ 0x7b
 80017c6:	5d04      	ldrb	r4, [r0, r4]
 80017c8:	2c01      	cmp	r4, #1
 80017ca:	d100      	bne.n	80017ce <R1_GetPhaseCurrents+0x7a>
 80017cc:	e0c6      	b.n	800195c <R1_GetPhaseCurrents+0x208>
          hCurrA = pHandle->_Super.IaEst;
 80017ce:	2468      	movs	r4, #104	@ 0x68
 80017d0:	5f04      	ldrsh	r4, [r0, r4]
              hCurrA = 0;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80017d2:	2d04      	cmp	r5, #4
 80017d4:	d100      	bne.n	80017d8 <R1_GetPhaseCurrents+0x84>
 80017d6:	e0d7      	b.n	8001988 <R1_GetPhaseCurrents+0x234>
    case SECTOR_6:
    {
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
      {
        hCurrA = (int16_t) wAux2;
        wAux1 = -wAux1;
 80017d8:	425d      	negs	r5, r3
        hCurrB = (int16_t) wAux1;
 80017da:	b22d      	sxth	r5, r5
 80017dc:	e071      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 80017de:	24c5      	movs	r4, #197	@ 0xc5
 80017e0:	5d05      	ldrb	r5, [r0, r4]
 80017e2:	3cc2      	subs	r4, #194	@ 0xc2
 80017e4:	402c      	ands	r4, r5
 80017e6:	2c03      	cmp	r4, #3
 80017e8:	d100      	bne.n	80017ec <R1_GetPhaseCurrents+0x98>
 80017ea:	e083      	b.n	80018f4 <R1_GetPhaseCurrents+0x1a0>
      }
      else
      {
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 80017ec:	2c00      	cmp	r4, #0
 80017ee:	d100      	bne.n	80017f2 <R1_GetPhaseCurrents+0x9e>
 80017f0:	e07b      	b.n	80018ea <R1_GetPhaseCurrents+0x196>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 80017f2:	257b      	movs	r5, #123	@ 0x7b
 80017f4:	5d45      	ldrb	r5, [r0, r5]
 80017f6:	2d01      	cmp	r5, #1
 80017f8:	d100      	bne.n	80017fc <R1_GetPhaseCurrents+0xa8>
 80017fa:	e093      	b.n	8001924 <R1_GetPhaseCurrents+0x1d0>
              hCurrA = -hCurrB;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80017fc:	2c01      	cmp	r4, #1
 80017fe:	d100      	bne.n	8001802 <R1_GetPhaseCurrents+0xae>
 8001800:	e0b2      	b.n	8001968 <R1_GetPhaseCurrents+0x214>
              hCurrA = (int16_t) wAux2;
              hCurrB = pHandle->_Super.IbEst;
            }
            else  /* 0x02 -ib */
            {
              wAux1 = -wAux1;
 8001802:	425b      	negs	r3, r3
              hCurrB = (int16_t) wAux1;
 8001804:	b21d      	sxth	r5, r3
              hCurrA = pHandle->_Super.IaEst;
 8001806:	2368      	movs	r3, #104	@ 0x68
 8001808:	5ec4      	ldrsh	r4, [r0, r3]
 800180a:	e05a      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 800180c:	24c5      	movs	r4, #197	@ 0xc5
 800180e:	5d05      	ldrb	r5, [r0, r4]
 8001810:	3cc0      	subs	r4, #192	@ 0xc0
 8001812:	402c      	ands	r4, r5
 8001814:	2c05      	cmp	r4, #5
 8001816:	d100      	bne.n	800181a <R1_GetPhaseCurrents+0xc6>
 8001818:	e07b      	b.n	8001912 <R1_GetPhaseCurrents+0x1be>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 800181a:	2c00      	cmp	r4, #0
 800181c:	d04a      	beq.n	80018b4 <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 800181e:	257b      	movs	r5, #123	@ 0x7b
 8001820:	5d45      	ldrb	r5, [r0, r5]
 8001822:	2d01      	cmp	r5, #1
 8001824:	d100      	bne.n	8001828 <R1_GetPhaseCurrents+0xd4>
 8001826:	e094      	b.n	8001952 <R1_GetPhaseCurrents+0x1fe>
              hCurrB = pHandle->_Super.IbEst;
 8001828:	256a      	movs	r5, #106	@ 0x6a
 800182a:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 800182c:	2c01      	cmp	r4, #1
 800182e:	d100      	bne.n	8001832 <R1_GetPhaseCurrents+0xde>
 8001830:	e0a6      	b.n	8001980 <R1_GetPhaseCurrents+0x22c>
              hCurrA = -hCurrB-hCurrC;
 8001832:	1b5c      	subs	r4, r3, r5
 8001834:	b224      	sxth	r4, r4
 8001836:	e044      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 8001838:	24c5      	movs	r4, #197	@ 0xc5
 800183a:	2506      	movs	r5, #6
 800183c:	5d04      	ldrb	r4, [r0, r4]
 800183e:	4025      	ands	r5, r4
 8001840:	2d06      	cmp	r5, #6
 8001842:	d100      	bne.n	8001846 <R1_GetPhaseCurrents+0xf2>
 8001844:	e061      	b.n	800190a <R1_GetPhaseCurrents+0x1b6>
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 8001846:	2d00      	cmp	r5, #0
 8001848:	d042      	beq.n	80018d0 <R1_GetPhaseCurrents+0x17c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 800184a:	247b      	movs	r4, #123	@ 0x7b
 800184c:	5d04      	ldrb	r4, [r0, r4]
 800184e:	2c01      	cmp	r4, #1
 8001850:	d100      	bne.n	8001854 <R1_GetPhaseCurrents+0x100>
 8001852:	e079      	b.n	8001948 <R1_GetPhaseCurrents+0x1f4>
          hCurrA = pHandle->_Super.IaEst;
 8001854:	2468      	movs	r4, #104	@ 0x68
 8001856:	5f04      	ldrsh	r4, [r0, r4]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8001858:	2d02      	cmp	r5, #2
 800185a:	d100      	bne.n	800185e <R1_GetPhaseCurrents+0x10a>
 800185c:	e092      	b.n	8001984 <R1_GetPhaseCurrents+0x230>
              hCurrB = -hCurrA-hCurrC;
 800185e:	1b1d      	subs	r5, r3, r4
 8001860:	b22d      	sxth	r5, r5
 8001862:	e02e      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 8001864:	24c5      	movs	r4, #197	@ 0xc5
 8001866:	5d05      	ldrb	r5, [r0, r4]
 8001868:	3cc2      	subs	r4, #194	@ 0xc2
 800186a:	402c      	ands	r4, r5
 800186c:	2c03      	cmp	r4, #3
 800186e:	d048      	beq.n	8001902 <R1_GetPhaseCurrents+0x1ae>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8001870:	2c00      	cmp	r4, #0
 8001872:	d035      	beq.n	80018e0 <R1_GetPhaseCurrents+0x18c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 8001874:	257b      	movs	r5, #123	@ 0x7b
 8001876:	5d45      	ldrb	r5, [r0, r5]
 8001878:	2d01      	cmp	r5, #1
 800187a:	d059      	beq.n	8001930 <R1_GetPhaseCurrents+0x1dc>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 800187c:	2c02      	cmp	r4, #2
 800187e:	d100      	bne.n	8001882 <R1_GetPhaseCurrents+0x12e>
 8001880:	e076      	b.n	8001970 <R1_GetPhaseCurrents+0x21c>
              wAux1 = -wAux1;
 8001882:	425c      	negs	r4, r3
              hCurrB = pHandle->_Super.IbEst;
 8001884:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux1;
 8001886:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8001888:	5ec5      	ldrsh	r5, [r0, r3]
 800188a:	e01a      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 800188c:	24c5      	movs	r4, #197	@ 0xc5
 800188e:	5d05      	ldrb	r5, [r0, r4]
 8001890:	3cc0      	subs	r4, #192	@ 0xc0
 8001892:	402c      	ands	r4, r5
 8001894:	2c05      	cmp	r4, #5
 8001896:	d02f      	beq.n	80018f8 <R1_GetPhaseCurrents+0x1a4>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 8001898:	2c00      	cmp	r4, #0
 800189a:	d00b      	beq.n	80018b4 <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 800189c:	257b      	movs	r5, #123	@ 0x7b
 800189e:	5d45      	ldrb	r5, [r0, r5]
 80018a0:	2d01      	cmp	r5, #1
 80018a2:	d04b      	beq.n	800193c <R1_GetPhaseCurrents+0x1e8>
              hCurrB = pHandle->_Super.IbEst;
 80018a4:	256a      	movs	r5, #106	@ 0x6a
 80018a6:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80018a8:	2c04      	cmp	r4, #4
 80018aa:	d100      	bne.n	80018ae <R1_GetPhaseCurrents+0x15a>
 80018ac:	e064      	b.n	8001978 <R1_GetPhaseCurrents+0x224>
              wAux1 = -wAux1;
 80018ae:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 80018b0:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 80018b2:	e006      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 80018b4:	2368      	movs	r3, #104	@ 0x68
 80018b6:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 80018b8:	236c      	movs	r3, #108	@ 0x6c
          hCurrB = -hCurrA-hCurrC;
 80018ba:	5ac5      	ldrh	r5, [r0, r3]
 80018bc:	192d      	adds	r5, r5, r4
 80018be:	426d      	negs	r5, r5
 80018c0:	b22d      	sxth	r5, r5

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 80018c2:	23c0      	movs	r3, #192	@ 0xc0
 80018c4:	52c4      	strh	r4, [r0, r3]
  pHandle->CurrBOld = hCurrB;
 80018c6:	3302      	adds	r3, #2
 80018c8:	52c5      	strh	r5, [r0, r3]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 80018ca:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 80018cc:	800c      	strh	r4, [r1, #0]
}
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
          hCurrB = pHandle->_Super.IbEst;
 80018d0:	236a      	movs	r3, #106	@ 0x6a
 80018d2:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 80018d4:	236c      	movs	r3, #108	@ 0x6c
          hCurrA = -hCurrB-hCurrC;
 80018d6:	5ac4      	ldrh	r4, [r0, r3]
 80018d8:	1964      	adds	r4, r4, r5
 80018da:	4264      	negs	r4, r4
 80018dc:	b224      	sxth	r4, r4
 80018de:	e7f0      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
          hCurrB = pHandle->_Super.IbEst;
 80018e0:	236a      	movs	r3, #106	@ 0x6a
 80018e2:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrA = pHandle->_Super.IaEst;
 80018e4:	2368      	movs	r3, #104	@ 0x68
 80018e6:	5ec4      	ldrsh	r4, [r0, r3]
 80018e8:	e7eb      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 80018ea:	2368      	movs	r3, #104	@ 0x68
 80018ec:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrB = pHandle->_Super.IbEst;
 80018ee:	236a      	movs	r3, #106	@ 0x6a
 80018f0:	5ec5      	ldrsh	r5, [r0, r3]
 80018f2:	e7e6      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
        hCurrA = (int16_t) wAux2;
 80018f4:	b214      	sxth	r4, r2
 80018f6:	e76f      	b.n	80017d8 <R1_GetPhaseCurrents+0x84>
        wAux1 = -wAux1;
 80018f8:	425c      	negs	r4, r3
        hCurrB = -hCurrA-hCurrC;
 80018fa:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux1;
 80018fc:	b224      	sxth	r4, r4
        hCurrB = -hCurrA-hCurrC;
 80018fe:	b22d      	sxth	r5, r5
 8001900:	e7df      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 8001902:	425c      	negs	r4, r3
        hCurrB = (int16_t) wAux2;
 8001904:	b215      	sxth	r5, r2
        hCurrA = (int16_t) wAux1;
 8001906:	b224      	sxth	r4, r4
 8001908:	e7db      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
        hCurrA = -hCurrB-hCurrC;
 800190a:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux2;
 800190c:	b215      	sxth	r5, r2
        hCurrA = -hCurrB-hCurrC;
 800190e:	b224      	sxth	r4, r4
 8001910:	e7d7      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
        hCurrB = -hCurrA-hCurrC;
 8001912:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux2;
 8001914:	b214      	sxth	r4, r2
        hCurrB = -hCurrA-hCurrC;
 8001916:	b22d      	sxth	r5, r5
 8001918:	e7d3      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 800191a:	425d      	negs	r5, r3
        hCurrA = -hCurrB-hCurrC;
 800191c:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux1;
 800191e:	b22d      	sxth	r5, r5
        hCurrA = -hCurrB-hCurrC;
 8001920:	b224      	sxth	r4, r4
 8001922:	e7ce      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 8001924:	2c01      	cmp	r4, #1
 8001926:	d041      	beq.n	80019ac <R1_GetPhaseCurrents+0x258>
              wAux1 = -wAux1;
 8001928:	425d      	negs	r5, r3
              hCurrB = (int16_t) wAux1;
 800192a:	b22d      	sxth	r5, r5
              hCurrA = -hCurrB;
 800192c:	b21c      	sxth	r4, r3
 800192e:	e7c8      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8001930:	2c02      	cmp	r4, #2
 8001932:	d03f      	beq.n	80019b4 <R1_GetPhaseCurrents+0x260>
              wAux1 = -wAux1;
 8001934:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 8001936:	b224      	sxth	r4, r4
              hCurrB = -hCurrA;
 8001938:	b21d      	sxth	r5, r3
 800193a:	e7c2      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800193c:	2c04      	cmp	r4, #4
 800193e:	d02d      	beq.n	800199c <R1_GetPhaseCurrents+0x248>
              wAux1 = -wAux1;
 8001940:	425c      	negs	r4, r3
              hCurrB = 0;
 8001942:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux1;
 8001944:	b224      	sxth	r4, r4
              hCurrB = 0;
 8001946:	e7bc      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 8001948:	2d02      	cmp	r5, #2
 800194a:	d024      	beq.n	8001996 <R1_GetPhaseCurrents+0x242>
              hCurrA = 0;
 800194c:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 800194e:	b21d      	sxth	r5, r3
 8001950:	e7b7      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 8001952:	2c01      	cmp	r4, #1
 8001954:	d01c      	beq.n	8001990 <R1_GetPhaseCurrents+0x23c>
              hCurrB = 0;
 8001956:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 8001958:	b21c      	sxth	r4, r3
              hCurrB = 0;
 800195a:	e7b2      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800195c:	2d04      	cmp	r5, #4
 800195e:	d021      	beq.n	80019a4 <R1_GetPhaseCurrents+0x250>
              wAux1 = -wAux1;
 8001960:	425d      	negs	r5, r3
              hCurrA = 0;
 8001962:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux1;
 8001964:	b22d      	sxth	r5, r5
              hCurrA = 0;
 8001966:	e7ac      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = pHandle->_Super.IbEst;
 8001968:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux2;
 800196a:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 800196c:	5ec5      	ldrsh	r5, [r0, r3]
 800196e:	e7a8      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = pHandle->_Super.IaEst;
 8001970:	2368      	movs	r3, #104	@ 0x68
              hCurrB = (int16_t) wAux2;
 8001972:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 8001974:	5ec4      	ldrsh	r4, [r0, r3]
 8001976:	e7a4      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB-hCurrC;
 8001978:	18ac      	adds	r4, r5, r2
 800197a:	4264      	negs	r4, r4
 800197c:	b224      	sxth	r4, r4
 800197e:	e7a0      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = (int16_t) wAux2;
 8001980:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 8001982:	e79e      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = (int16_t) wAux2;
 8001984:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 8001986:	e79c      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA-hCurrC;
 8001988:	18a5      	adds	r5, r4, r2
 800198a:	426d      	negs	r5, r5
 800198c:	b22d      	sxth	r5, r5
 800198e:	e798      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = 0;
 8001990:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux2;
 8001992:	b214      	sxth	r4, r2
              hCurrC = -hCurrA;
 8001994:	e795      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = 0;
 8001996:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux2;
 8001998:	b215      	sxth	r5, r2
              hCurrA = 0;
 800199a:	e792      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrC;
 800199c:	4254      	negs	r4, r2
              hCurrB = 0;
 800199e:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 80019a0:	b224      	sxth	r4, r4
              hCurrB = 0;
 80019a2:	e78e      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrC;
 80019a4:	4255      	negs	r5, r2
              hCurrA = 0;
 80019a6:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 80019a8:	b22d      	sxth	r5, r5
 80019aa:	e78a      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA;
 80019ac:	4255      	negs	r5, r2
              hCurrA = (int16_t) wAux2;
 80019ae:	b214      	sxth	r4, r2
              hCurrB = -hCurrA;
 80019b0:	b22d      	sxth	r5, r5
 80019b2:	e786      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB;
 80019b4:	4254      	negs	r4, r2
              hCurrB = (int16_t) wAux2;
 80019b6:	b215      	sxth	r5, r2
              hCurrA = -hCurrB;
 80019b8:	b224      	sxth	r4, r4
 80019ba:	e782      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
  switch (pHandle->_Super.Sector)
 80019bc:	2500      	movs	r5, #0
 80019be:	002c      	movs	r4, r5
 80019c0:	e77f      	b.n	80018c2 <R1_GetPhaseCurrents+0x16e>
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	00007fff 	.word	0x00007fff
 80019c8:	ffff8001 	.word	0xffff8001
 80019cc:	080054c0 	.word	0x080054c0

080019d0 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80019d0:	23cc      	movs	r3, #204	@ 0xcc
 80019d2:	58c3      	ldr	r3, [r0, r3]
{
 80019d4:	b530      	push	{r4, r5, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80019d6:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 80019d8:	2400      	movs	r4, #0
 80019da:	23c8      	movs	r3, #200	@ 0xc8
 80019dc:	54c4      	strb	r4, [r0, r3]
 80019de:	6853      	ldr	r3, [r2, #4]
 80019e0:	3470      	adds	r4, #112	@ 0x70
 80019e2:	43a3      	bics	r3, r4
 80019e4:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 80019e6:	23c4      	movs	r3, #196	@ 0xc4
 80019e8:	5cc2      	ldrb	r2, [r0, r3]
 80019ea:	2a0f      	cmp	r2, #15
 80019ec:	d809      	bhi.n	8001a02 <R1_HFCurrentsCalibration+0x32>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 80019ee:	22b6      	movs	r2, #182	@ 0xb6
 80019f0:	3430      	adds	r4, #48	@ 0x30
 80019f2:	5a85      	ldrh	r5, [r0, r2]
 80019f4:	5902      	ldr	r2, [r0, r4]
 80019f6:	1952      	adds	r2, r2, r5
 80019f8:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 80019fa:	5cc2      	ldrb	r2, [r0, r3]
 80019fc:	3201      	adds	r2, #1
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	54c2      	strb	r2, [r0, r3]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8001a06:	804b      	strh	r3, [r1, #2]

}
 8001a08:	bd30      	pop	{r4, r5, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)

08001a0c <R1_SetADCSampPointPolarization>:
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001a0c:	21cc      	movs	r1, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001a0e:	22b8      	movs	r2, #184	@ 0xb8
{
 8001a10:	b530      	push	{r4, r5, lr}
 8001a12:	0003      	movs	r3, r0
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001a14:	5a82      	ldrh	r2, [r0, r2]
 8001a16:	5840      	ldr	r0, [r0, r1]
 8001a18:	0852      	lsrs	r2, r2, #1
 8001a1a:	8bc4      	ldrh	r4, [r0, #30]
 8001a1c:	8c01      	ldrh	r1, [r0, #32]
 8001a1e:	1909      	adds	r1, r1, r4
 8001a20:	b289      	uxth	r1, r1
 8001a22:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001a24:	24ba      	movs	r4, #186	@ 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001a26:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001a28:	21bc      	movs	r1, #188	@ 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001a2a:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001a2c:	525a      	strh	r2, [r3, r1]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8001a2e:	2222      	movs	r2, #34	@ 0x22
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a30:	2180      	movs	r1, #128	@ 0x80
 8001a32:	5c82      	ldrb	r2, [r0, r2]
 8001a34:	0189      	lsls	r1, r1, #6
 8001a36:	4091      	lsls	r1, r2
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <R1_SetADCSampPointPolarization+0x64>)
 8001a3a:	0b49      	lsrs	r1, r1, #13
 8001a3c:	6291      	str	r1, [r2, #40]	@ 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8001a3e:	2123      	movs	r1, #35	@ 0x23
 8001a40:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001a42:	2007      	movs	r0, #7
 8001a44:	6954      	ldr	r4, [r2, #20]
 8001a46:	4384      	bics	r4, r0
 8001a48:	4321      	orrs	r1, r4
 8001a4a:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a4c:	68d0      	ldr	r0, [r2, #12]
 8001a4e:	4909      	ldr	r1, [pc, #36]	@ (8001a74 <R1_SetADCSampPointPolarization+0x68>)
 8001a50:	4008      	ands	r0, r1
 8001a52:	2188      	movs	r1, #136	@ 0x88
 8001a54:	00c9      	lsls	r1, r1, #3
 8001a56:	4301      	orrs	r1, r0
 8001a58:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8001a5a:	22c8      	movs	r2, #200	@ 0xc8
 8001a5c:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8001a5e:	3a72      	subs	r2, #114	@ 0x72
 8001a60:	5a98      	ldrh	r0, [r3, r2]
 8001a62:	2801      	cmp	r0, #1
 8001a64:	d001      	beq.n	8001a6a <R1_SetADCSampPointPolarization+0x5e>
  if (pHandle->FOCDurationFlag == true)
 8001a66:	0008      	movs	r0, r1
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 8001a68:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5299      	strh	r1, [r3, r2]
 8001a6e:	e7fb      	b.n	8001a68 <R1_SetADCSampPointPolarization+0x5c>
 8001a70:	40012400 	.word	0x40012400
 8001a74:	fffff23f 	.word	0xfffff23f

08001a78 <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	4657      	mov	r7, sl
 8001a7c:	464e      	mov	r6, r9
 8001a7e:	4645      	mov	r5, r8
 8001a80:	46de      	mov	lr, fp
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a82:	22cc      	movs	r2, #204	@ 0xcc
  uint8_t midVal;
  uint8_t minVal;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a84:	2150      	movs	r1, #80	@ 0x50
{
 8001a86:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a88:	5887      	ldr	r7, [r0, r2]
{
 8001a8a:	b091      	sub	sp, #68	@ 0x44
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a8c:	68ba      	ldr	r2, [r7, #8]
{
 8001a8e:	0003      	movs	r3, r0
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a90:	920a      	str	r2, [sp, #40]	@ 0x28
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a92:	5a42      	ldrh	r2, [r0, r1]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a94:	3102      	adds	r1, #2
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a96:	4690      	mov	r8, r2
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a98:	5a42      	ldrh	r2, [r0, r1]
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a9a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a9c:	4692      	mov	sl, r2
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a9e:	910e      	str	r1, [sp, #56]	@ 0x38
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8001aa0:	2154      	movs	r1, #84	@ 0x54
 8001aa2:	5a42      	ldrh	r2, [r0, r1]

  maxVal = (uint8_t)pHandle->_Super.highDuty;
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 8001aa4:	2600      	movs	r6, #0
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8001aa6:	4691      	mov	r9, r2
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	aa0e      	add	r2, sp, #56	@ 0x38
 8001aac:	8091      	strh	r1, [r2, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8001aae:	215c      	movs	r1, #92	@ 0x5c
  pHandle->iflag=0x00;
 8001ab0:	22c5      	movs	r2, #197	@ 0xc5
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8001ab2:	5c44      	ldrb	r4, [r0, r1]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8001ab4:	3902      	subs	r1, #2
 8001ab6:	5c40      	ldrb	r0, [r0, r1]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8001ab8:	3902      	subs	r1, #2
 8001aba:	5c5d      	ldrb	r5, [r3, r1]
  pHandle->iflag=0x00;
 8001abc:	549e      	strb	r6, [r3, r2]

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001abe:	0061      	lsls	r1, r4, #1
 8001ac0:	aa0e      	add	r2, sp, #56	@ 0x38
 8001ac2:	9405      	str	r4, [sp, #20]
 8001ac4:	5e8a      	ldrsh	r2, [r1, r2]
 8001ac6:	0040      	lsls	r0, r0, #1
 8001ac8:	4694      	mov	ip, r2
 8001aca:	aa0e      	add	r2, sp, #56	@ 0x38
 8001acc:	5a51      	ldrh	r1, [r2, r1]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001ace:	9701      	str	r7, [sp, #4]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001ad0:	910d      	str	r1, [sp, #52]	@ 0x34
 8001ad2:	000c      	movs	r4, r1
 8001ad4:	5e81      	ldrsh	r1, [r0, r2]
 8001ad6:	aa0e      	add	r2, sp, #56	@ 0x38
 8001ad8:	5a12      	ldrh	r2, [r2, r0]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001ada:	8bb8      	ldrh	r0, [r7, #28]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001adc:	4693      	mov	fp, r2
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001ade:	1a24      	subs	r4, r4, r0
 8001ae0:	9004      	str	r0, [sp, #16]
 8001ae2:	1aa4      	subs	r4, r4, r2
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8001ae4:	0068      	lsls	r0, r5, #1
 8001ae6:	aa0e      	add	r2, sp, #56	@ 0x38
 8001ae8:	5e80      	ldrsh	r0, [r0, r2]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001aea:	465a      	mov	r2, fp
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8001aec:	0007      	movs	r7, r0
 8001aee:	900b      	str	r0, [sp, #44]	@ 0x2c
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001af0:	9804      	ldr	r0, [sp, #16]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001af2:	b224      	sxth	r4, r4
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001af4:	1a10      	subs	r0, r2, r0
 8001af6:	1bc0      	subs	r0, r0, r7
 8001af8:	b282      	uxth	r2, r0
 8001afa:	920c      	str	r2, [sp, #48]	@ 0x30
  pHandle->aShiftval[0]=0;
 8001afc:	22a8      	movs	r2, #168	@ 0xa8
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001afe:	9f01      	ldr	r7, [sp, #4]
  pHandle->aShiftval[0]=0;
 8001b00:	509e      	str	r6, [r3, r2]
  pHandle->aShiftval[2]=0;
 8001b02:	3204      	adds	r2, #4
 8001b04:	529e      	strh	r6, [r3, r2]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001b06:	8c3a      	ldrh	r2, [r7, #32]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001b08:	b200      	sxth	r0, r0
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b0c:	2620      	movs	r6, #32
 8001b0e:	5fba      	ldrsh	r2, [r7, r6]
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001b10:	26b8      	movs	r6, #184	@ 0xb8
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001b12:	9207      	str	r2, [sp, #28]
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001b14:	5f9a      	ldrsh	r2, [r3, r6]
    }
  }

  if(submid_min_deltmin > 0)
  {
    pHandle->iflag |= ALFLAG[minVal];
 8001b16:	4ec6      	ldr	r6, [pc, #792]	@ (8001e30 <R1_CalcDutyCycles+0x3b8>)
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001b18:	9202      	str	r2, [sp, #8]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
  }
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
  {
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b1a:	8bfa      	ldrh	r2, [r7, #30]
    pHandle->iflag |= ALFLAG[minVal];
 8001b1c:	9608      	str	r6, [sp, #32]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b1e:	9206      	str	r2, [sp, #24]
    pHandle->iflag |= ALFLAG[minVal];
 8001b20:	5772      	ldrsb	r2, [r6, r5]
 8001b22:	9203      	str	r2, [sp, #12]
  if(submax_mid_deltmin > 0)
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	dc00      	bgt.n	8001b2a <R1_CalcDutyCycles+0xb2>
 8001b28:	e09e      	b.n	8001c68 <R1_CalcDutyCycles+0x1f0>
    pHandle->iflag |= ALFLAG[maxVal];
 8001b2a:	9c05      	ldr	r4, [sp, #20]
 8001b2c:	5734      	ldrsb	r4, [r6, r4]
  if(submid_min_deltmin > 0)
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	dc00      	bgt.n	8001b34 <R1_CalcDutyCycles+0xbc>
 8001b32:	e0ae      	b.n	8001c92 <R1_CalcDutyCycles+0x21a>
    pHandle->iflag |= ALFLAG[minVal];
 8001b34:	4314      	orrs	r4, r2
 8001b36:	22c5      	movs	r2, #197	@ 0xc5
 8001b38:	4655      	mov	r5, sl
 8001b3a:	549c      	strb	r4, [r3, r2]
 8001b3c:	4646      	mov	r6, r8
 8001b3e:	464c      	mov	r4, r9
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001b40:	4659      	mov	r1, fp
 8001b42:	9a06      	ldr	r2, [sp, #24]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001b44:	9804      	ldr	r0, [sp, #16]
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001b46:	1a89      	subs	r1, r1, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001b48:	1a80      	subs	r0, r0, r2
 8001b4a:	4458      	add	r0, fp
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001b4c:	b209      	sxth	r1, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001b4e:	b200      	sxth	r0, r0
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 8001b50:	9a07      	ldr	r2, [sp, #28]
 8001b52:	1a47      	subs	r7, r0, r1
 8001b54:	4297      	cmp	r7, r2
 8001b56:	da13      	bge.n	8001b80 <R1_CalcDutyCycles+0x108>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8001b58:	20c5      	movs	r0, #197	@ 0xc5
 8001b5a:	9a08      	ldr	r2, [sp, #32]
 8001b5c:	9905      	ldr	r1, [sp, #20]
 8001b5e:	5c1f      	ldrb	r7, [r3, r0]
 8001b60:	5c51      	ldrb	r1, [r2, r1]
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b62:	9a03      	ldr	r2, [sp, #12]
    pHandle->iflag &=  ALFLAG[maxVal];
 8001b64:	4039      	ands	r1, r7
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b66:	4391      	bics	r1, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b68:	9a02      	ldr	r2, [sp, #8]
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b6a:	5419      	strb	r1, [r3, r0]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b6c:	4694      	mov	ip, r2
 8001b6e:	0fd1      	lsrs	r1, r2, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b72:	4461      	add	r1, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b74:	4694      	mov	ip, r2
 8001b76:	9806      	ldr	r0, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b78:	1049      	asrs	r1, r1, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b7a:	4460      	add	r0, ip
 8001b7c:	1840      	adds	r0, r0, r1
 8001b7e:	b200      	sxth	r0, r0
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8001b80:	9a02      	ldr	r2, [sp, #8]
 8001b82:	4290      	cmp	r0, r2
 8001b84:	db00      	blt.n	8001b88 <R1_CalcDutyCycles+0x110>
 8001b86:	e0b4      	b.n	8001cf2 <R1_CalcDutyCycles+0x27a>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	dc00      	bgt.n	8001b8e <R1_CalcDutyCycles+0x116>
 8001b8c:	e0b1      	b.n	8001cf2 <R1_CalcDutyCycles+0x27a>
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8001b8e:	9a02      	ldr	r2, [sp, #8]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001b90:	b280      	uxth	r0, r0
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8001b92:	4291      	cmp	r1, r2
 8001b94:	db00      	blt.n	8001b98 <R1_CalcDutyCycles+0x120>
 8001b96:	e0a6      	b.n	8001ce6 <R1_CalcDutyCycles+0x26e>
 8001b98:	2900      	cmp	r1, #0
 8001b9a:	dc00      	bgt.n	8001b9e <R1_CalcDutyCycles+0x126>
 8001b9c:	e0a3      	b.n	8001ce6 <R1_CalcDutyCycles+0x26e>
  else
  {
    /* Nothing to do */
  }

  pHandle->CntSmp1 = SamplePoint1;
 8001b9e:	b28a      	uxth	r2, r1
 8001ba0:	4693      	mov	fp, r2
 8001ba2:	21ba      	movs	r1, #186	@ 0xba
 8001ba4:	465a      	mov	r2, fp
 8001ba6:	525a      	strh	r2, [r3, r1]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001ba8:	9a01      	ldr	r2, [sp, #4]
  pHandle->CntSmp2 = SamplePoint2;
 8001baa:	3102      	adds	r1, #2
 8001bac:	68d7      	ldr	r7, [r2, #12]
 8001bae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001bb0:	5258      	strh	r0, [r3, r1]
 8001bb2:	4694      	mov	ip, r2
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	499f      	ldr	r1, [pc, #636]	@ (8001e34 <R1_CalcDutyCycles+0x3bc>)
 8001bb8:	5c79      	ldrb	r1, [r7, r1]
 8001bba:	4461      	add	r1, ip
 8001bbc:	680f      	ldr	r7, [r1, #0]
 8001bbe:	4397      	bics	r7, r2
 8001bc0:	600f      	str	r7, [r1, #0]

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001bc2:	4642      	mov	r2, r8
 8001bc4:	2794      	movs	r7, #148	@ 0x94
 8001bc6:	53da      	strh	r2, [r3, r7]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001bc8:	4652      	mov	r2, sl
 8001bca:	3702      	adds	r7, #2
 8001bcc:	53da      	strh	r2, [r3, r7]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001bce:	464a      	mov	r2, r9
 8001bd0:	3702      	adds	r7, #2
 8001bd2:	53da      	strh	r2, [r3, r7]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001bd4:	3702      	adds	r7, #2
 8001bd6:	53de      	strh	r6, [r3, r7]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001bd8:	3702      	adds	r7, #2
 8001bda:	53dd      	strh	r5, [r3, r7]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001bdc:	3702      	adds	r7, #2
 8001bde:	53dc      	strh	r4, [r3, r7]

  if (pHandle->TCDoneFlag == true)
 8001be0:	372b      	adds	r7, #43	@ 0x2b
 8001be2:	5ddf      	ldrb	r7, [r3, r7]
 8001be4:	2f00      	cmp	r7, #0
 8001be6:	d011      	beq.n	8001c0c <R1_CalcDutyCycles+0x194>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8001be8:	2788      	movs	r7, #136	@ 0x88
 8001bea:	4642      	mov	r2, r8
 8001bec:	53da      	strh	r2, [r3, r7]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8001bee:	4652      	mov	r2, sl
 8001bf0:	3702      	adds	r7, #2
 8001bf2:	53da      	strh	r2, [r3, r7]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8001bf4:	464a      	mov	r2, r9
 8001bf6:	3702      	adds	r7, #2
 8001bf8:	53da      	strh	r2, [r3, r7]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8001bfa:	3702      	adds	r7, #2
 8001bfc:	53de      	strh	r6, [r3, r7]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8001bfe:	2690      	movs	r6, #144	@ 0x90
 8001c00:	539d      	strh	r5, [r3, r6]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8001c02:	2592      	movs	r5, #146	@ 0x92
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001c04:	465a      	mov	r2, fp
 8001c06:	535c      	strh	r4, [r3, r5]
 8001c08:	4c8b      	ldr	r4, [pc, #556]	@ (8001e38 <R1_CalcDutyCycles+0x3c0>)
 8001c0a:	6422      	str	r2, [r4, #64]	@ 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001c0c:	2502      	movs	r5, #2
 8001c0e:	680c      	ldr	r4, [r1, #0]
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	432c      	orrs	r4, r5
 8001c14:	600c      	str	r4, [r1, #0]
 8001c16:	2122      	movs	r1, #34	@ 0x22
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c18:	2480      	movs	r4, #128	@ 0x80
 8001c1a:	5c51      	ldrb	r1, [r2, r1]
 8001c1c:	01a4      	lsls	r4, r4, #6
 8001c1e:	408c      	lsls	r4, r1
 8001c20:	4986      	ldr	r1, [pc, #536]	@ (8001e3c <R1_CalcDutyCycles+0x3c4>)
 8001c22:	0b64      	lsrs	r4, r4, #13
 8001c24:	628c      	str	r4, [r1, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001c26:	694c      	ldr	r4, [r1, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8001c28:	3521      	adds	r5, #33	@ 0x21
 8001c2a:	5d52      	ldrb	r2, [r2, r5]
 8001c2c:	3d1c      	subs	r5, #28
 8001c2e:	43ac      	bics	r4, r5
 8001c30:	4322      	orrs	r2, r4
 8001c32:	614a      	str	r2, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001c34:	68cc      	ldr	r4, [r1, #12]
 8001c36:	4a82      	ldr	r2, [pc, #520]	@ (8001e40 <R1_CalcDutyCycles+0x3c8>)
 8001c38:	4014      	ands	r4, r2
 8001c3a:	2288      	movs	r2, #136	@ 0x88
 8001c3c:	00d2      	lsls	r2, r2, #3
 8001c3e:	4322      	orrs	r2, r4
 8001c40:	60ca      	str	r2, [r1, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8001c42:	22ae      	movs	r2, #174	@ 0xae
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8001c44:	4659      	mov	r1, fp
  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8001c46:	5298      	strh	r0, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8001c48:	3204      	adds	r2, #4
 8001c4a:	5299      	strh	r1, [r3, r2]

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8001c4c:	3216      	adds	r2, #22
 8001c4e:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8001c50:	3a72      	subs	r2, #114	@ 0x72
 8001c52:	5a98      	ldrh	r0, [r3, r2]
 8001c54:	2801      	cmp	r0, #1
 8001c56:	d058      	beq.n	8001d0a <R1_CalcDutyCycles+0x292>
  if (pHandle->FOCDurationFlag == true)
 8001c58:	0008      	movs	r0, r1
  {
    /* Nothing to do */
  }

  return (hAux);
}
 8001c5a:	b011      	add	sp, #68	@ 0x44
 8001c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c5e:	46bb      	mov	fp, r7
 8001c60:	46b2      	mov	sl, r6
 8001c62:	46a9      	mov	r9, r5
 8001c64:	46a0      	mov	r8, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001c68:	4662      	mov	r2, ip
 8001c6a:	1b14      	subs	r4, r2, r4
 8001c6c:	9a07      	ldr	r2, [sp, #28]
 8001c6e:	3401      	adds	r4, #1
 8001c70:	4694      	mov	ip, r2
 8001c72:	9a02      	ldr	r2, [sp, #8]
 8001c74:	4464      	add	r4, ip
 8001c76:	4294      	cmp	r4, r2
 8001c78:	dc73      	bgt.n	8001d62 <R1_CalcDutyCycles+0x2ea>
      pHandle->iflag |= ALFLAG[maxVal];
 8001c7a:	9a05      	ldr	r2, [sp, #20]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8001c7c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
      pHandle->iflag |= ALFLAG[maxVal];
 8001c7e:	56b4      	ldrsb	r4, [r6, r2]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8001c80:	9e04      	ldr	r6, [sp, #16]
 8001c82:	3254      	adds	r2, #84	@ 0x54
 8001c84:	3601      	adds	r6, #1
 8001c86:	445e      	add	r6, fp
 8001c88:	0052      	lsls	r2, r2, #1
 8001c8a:	1bf6      	subs	r6, r6, r7
 8001c8c:	52d6      	strh	r6, [r2, r3]
  if(submid_min_deltmin > 0)
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	dc77      	bgt.n	8001d82 <R1_CalcDutyCycles+0x30a>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8001c92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001c94:	3801      	subs	r0, #1
 8001c96:	b2e4      	uxtb	r4, r4
 8001c98:	42d0      	cmn	r0, r2
 8001c9a:	d439      	bmi.n	8001d10 <R1_CalcDutyCycles+0x298>
      pHandle->iflag |= ALFLAG[minVal];
 8001c9c:	21c5      	movs	r1, #197	@ 0xc5
 8001c9e:	9a03      	ldr	r2, [sp, #12]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001ca0:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8001ca2:	4314      	orrs	r4, r2
 8001ca4:	545c      	strb	r4, [r3, r1]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001ca6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001ca8:	006d      	lsls	r5, r5, #1
 8001caa:	3901      	subs	r1, #1
 8001cac:	52e9      	strh	r1, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cae:	21a8      	movs	r1, #168	@ 0xa8
 8001cb0:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cb2:	20aa      	movs	r0, #170	@ 0xaa
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cb4:	5a5e      	ldrh	r6, [r3, r1]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cb6:	5a1d      	ldrh	r5, [r3, r0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cb8:	1991      	adds	r1, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cba:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001cbc:	24ac      	movs	r4, #172	@ 0xac
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cbe:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001cc0:	464a      	mov	r2, r9
 8001cc2:	5b1c      	ldrh	r4, [r3, r4]
 8001cc4:	1917      	adds	r7, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001cc6:	4642      	mov	r2, r8
 8001cc8:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001cca:	4652      	mov	r2, sl
 8001ccc:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001cce:	464a      	mov	r2, r9
 8001cd0:	1b14      	subs	r4, r2, r4
 8001cd2:	b2ba      	uxth	r2, r7
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	b282      	uxth	r2, r0
 8001cd8:	4692      	mov	sl, r2
 8001cda:	b28a      	uxth	r2, r1
 8001cdc:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001cde:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001ce0:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001ce2:	b2a4      	uxth	r4, r4
 8001ce4:	e72c      	b.n	8001b40 <R1_CalcDutyCycles+0xc8>
    pHandle->iflag &= ~ALFLAG[minVal];
 8001ce6:	27c5      	movs	r7, #197	@ 0xc5
 8001ce8:	9a03      	ldr	r2, [sp, #12]
 8001cea:	5dd9      	ldrb	r1, [r3, r7]
 8001cec:	4391      	bics	r1, r2
 8001cee:	55d9      	strb	r1, [r3, r7]
    SamplePoint1 = aCCRval[midVal];
 8001cf0:	e757      	b.n	8001ba2 <R1_CalcDutyCycles+0x12a>
    pHandle->iflag &=  ALFLAG[maxVal];
 8001cf2:	27c5      	movs	r7, #197	@ 0xc5
 8001cf4:	5dda      	ldrb	r2, [r3, r7]
 8001cf6:	9808      	ldr	r0, [sp, #32]
 8001cf8:	9204      	str	r2, [sp, #16]
 8001cfa:	9a05      	ldr	r2, [sp, #20]
 8001cfc:	5c80      	ldrb	r0, [r0, r2]
 8001cfe:	9a04      	ldr	r2, [sp, #16]
 8001d00:	4010      	ands	r0, r2
 8001d02:	55d8      	strb	r0, [r3, r7]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d06:	4458      	add	r0, fp
 8001d08:	e741      	b.n	8001b8e <R1_CalcDutyCycles+0x116>
    pHandle->_Super.SWerror = 0u;
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5299      	strh	r1, [r3, r2]
  return (hAux);
 8001d0e:	e7a4      	b.n	8001c5a <R1_CalcDutyCycles+0x1e2>
      pHandle->iflag &= ~ALFLAG[minVal];
 8001d10:	20c5      	movs	r0, #197	@ 0xc5
 8001d12:	9a03      	ldr	r2, [sp, #12]
 8001d14:	4394      	bics	r4, r2
 8001d16:	541c      	strb	r4, [r3, r0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d18:	24a8      	movs	r4, #168	@ 0xa8
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001d1a:	9a04      	ldr	r2, [sp, #16]
 8001d1c:	9806      	ldr	r0, [sp, #24]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d1e:	5b1e      	ldrh	r6, [r3, r4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001d20:	1a10      	subs	r0, r2, r0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d22:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d24:	3402      	adds	r4, #2
 8001d26:	5b1d      	ldrh	r5, [r3, r4]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d28:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d2a:	002a      	movs	r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d2c:	3402      	adds	r4, #2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d2e:	4452      	add	r2, sl
 8001d30:	9204      	str	r2, [sp, #16]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d32:	5b1a      	ldrh	r2, [r3, r4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001d34:	4458      	add	r0, fp
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d36:	0014      	movs	r4, r2
 8001d38:	444c      	add	r4, r9
 8001d3a:	940b      	str	r4, [sp, #44]	@ 0x2c
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	1ba6      	subs	r6, r4, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d40:	4654      	mov	r4, sl
 8001d42:	1b65      	subs	r5, r4, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d44:	464c      	mov	r4, r9
 8001d46:	1aa4      	subs	r4, r4, r2
 8001d48:	466a      	mov	r2, sp
 8001d4a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001d4c:	b200      	sxth	r0, r0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d4e:	4691      	mov	r9, r2
 8001d50:	466a      	mov	r2, sp
 8001d52:	8a12      	ldrh	r2, [r2, #16]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001d54:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d56:	4692      	mov	sl, r2
 8001d58:	b2ba      	uxth	r2, r7
 8001d5a:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d5c:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d5e:	b2a4      	uxth	r4, r4
 8001d60:	e6f6      	b.n	8001b50 <R1_CalcDutyCycles+0xd8>
  if(submid_min_deltmin > 0)
 8001d62:	2800      	cmp	r0, #0
 8001d64:	dd2d      	ble.n	8001dc2 <R1_CalcDutyCycles+0x34a>
    pHandle->iflag |= ALFLAG[minVal];
 8001d66:	21c5      	movs	r1, #197	@ 0xc5
 8001d68:	464c      	mov	r4, r9
 8001d6a:	4655      	mov	r5, sl
 8001d6c:	4646      	mov	r6, r8
 8001d6e:	9a03      	ldr	r2, [sp, #12]
 8001d70:	545a      	strb	r2, [r3, r1]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d72:	465a      	mov	r2, fp
 8001d74:	9906      	ldr	r1, [sp, #24]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d78:	1a51      	subs	r1, r2, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d7a:	4458      	add	r0, fp
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d7c:	b209      	sxth	r1, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d7e:	b200      	sxth	r0, r0
 8001d80:	e6e6      	b.n	8001b50 <R1_CalcDutyCycles+0xd8>
    pHandle->iflag |= ALFLAG[minVal];
 8001d82:	9a03      	ldr	r2, [sp, #12]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d84:	21aa      	movs	r1, #170	@ 0xaa
    pHandle->iflag |= ALFLAG[minVal];
 8001d86:	4314      	orrs	r4, r2
 8001d88:	22c5      	movs	r2, #197	@ 0xc5
 8001d8a:	549c      	strb	r4, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d8c:	3a1d      	subs	r2, #29
 8001d8e:	5a9e      	ldrh	r6, [r3, r2]
 8001d90:	4642      	mov	r2, r8
 8001d92:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d94:	4652      	mov	r2, sl
 8001d96:	5a5d      	ldrh	r5, [r3, r1]
 8001d98:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d9a:	22ac      	movs	r2, #172	@ 0xac
 8001d9c:	5a9c      	ldrh	r4, [r3, r2]
 8001d9e:	464a      	mov	r2, r9
 8001da0:	1911      	adds	r1, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001da2:	4642      	mov	r2, r8
 8001da4:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001da6:	4652      	mov	r2, sl
 8001da8:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001daa:	464a      	mov	r2, r9
 8001dac:	1b14      	subs	r4, r2, r4
 8001dae:	b28a      	uxth	r2, r1
 8001db0:	4691      	mov	r9, r2
 8001db2:	b282      	uxth	r2, r0
 8001db4:	4692      	mov	sl, r2
 8001db6:	b2ba      	uxth	r2, r7
 8001db8:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001dba:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001dbc:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001dbe:	b2a4      	uxth	r4, r4
 8001dc0:	e6be      	b.n	8001b40 <R1_CalcDutyCycles+0xc8>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8001dc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001dc4:	3801      	subs	r0, #1
 8001dc6:	42d0      	cmn	r0, r2
 8001dc8:	d50e      	bpl.n	8001de8 <R1_CalcDutyCycles+0x370>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001dca:	9a02      	ldr	r2, [sp, #8]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001dce:	4694      	mov	ip, r2
 8001dd0:	0fd1      	lsrs	r1, r2, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001dd2:	9a06      	ldr	r2, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001dd4:	4461      	add	r1, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001dd6:	4694      	mov	ip, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001dd8:	1049      	asrs	r1, r1, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001dda:	4460      	add	r0, ip
 8001ddc:	1840      	adds	r0, r0, r1
 8001dde:	464c      	mov	r4, r9
 8001de0:	4655      	mov	r5, sl
 8001de2:	4646      	mov	r6, r8
 8001de4:	b200      	sxth	r0, r0
 8001de6:	e6b3      	b.n	8001b50 <R1_CalcDutyCycles+0xd8>
      pHandle->iflag |= ALFLAG[minVal];
 8001de8:	21c5      	movs	r1, #197	@ 0xc5
 8001dea:	9a03      	ldr	r2, [sp, #12]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001dec:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8001dee:	545a      	strb	r2, [r3, r1]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001df0:	22a8      	movs	r2, #168	@ 0xa8
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001df2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001df4:	006d      	lsls	r5, r5, #1
 8001df6:	3901      	subs	r1, #1
 8001df8:	52e9      	strh	r1, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001dfa:	5a9e      	ldrh	r6, [r3, r2]
 8001dfc:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001dfe:	21aa      	movs	r1, #170	@ 0xaa
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001e00:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001e02:	4652      	mov	r2, sl
 8001e04:	5a5d      	ldrh	r5, [r3, r1]
 8001e06:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001e08:	22ac      	movs	r2, #172	@ 0xac
 8001e0a:	5a9c      	ldrh	r4, [r3, r2]
 8001e0c:	464a      	mov	r2, r9
 8001e0e:	1911      	adds	r1, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001e10:	4642      	mov	r2, r8
 8001e12:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001e14:	4652      	mov	r2, sl
 8001e16:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001e18:	464a      	mov	r2, r9
 8001e1a:	1b14      	subs	r4, r2, r4
 8001e1c:	b28a      	uxth	r2, r1
 8001e1e:	4691      	mov	r9, r2
 8001e20:	b282      	uxth	r2, r0
 8001e22:	4692      	mov	sl, r2
 8001e24:	b2ba      	uxth	r2, r7
 8001e26:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001e28:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001e2a:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001e2c:	b2a4      	uxth	r4, r4
 8001e2e:	e7a0      	b.n	8001d72 <R1_CalcDutyCycles+0x2fa>
 8001e30:	080054d8 	.word	0x080054d8
 8001e34:	080054db 	.word	0x080054db
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40012400 	.word	0x40012400
 8001e40:	fffff23f 	.word	0xfffff23f

08001e44 <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e44:	23cc      	movs	r3, #204	@ 0xcc
 8001e46:	58c3      	ldr	r3, [r0, r3]
{
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	46de      	mov	lr, fp
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e4c:	469b      	mov	fp, r3
{
 8001e4e:	4657      	mov	r7, sl
 8001e50:	464e      	mov	r6, r9
 8001e52:	4645      	mov	r5, r8
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8001e54:	465a      	mov	r2, fp
{
 8001e56:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8001e58:	6815      	ldr	r5, [r2, #0]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001e5a:	6892      	ldr	r2, [r2, #8]
  pHandle->iflag = 0;
 8001e5c:	2700      	movs	r7, #0
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001e5e:	4694      	mov	ip, r2
  pHandle->iflag = 0;
 8001e60:	22c5      	movs	r2, #197	@ 0xc5
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e62:	685b      	ldr	r3, [r3, #4]
  pHandle->iflag = 0;
 8001e64:	5487      	strb	r7, [r0, r2]
  pHandle->FOCDurationFlag = false;
 8001e66:	3203      	adds	r2, #3
 8001e68:	5487      	strb	r7, [r0, r2]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001e6a:	3a56      	subs	r2, #86	@ 0x56
 8001e6c:	5a84      	ldrh	r4, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e6e:	465e      	mov	r6, fp
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001e70:	0862      	lsrs	r2, r4, #1
 8001e72:	4690      	mov	r8, r2
 8001e74:	22b8      	movs	r2, #184	@ 0xb8
 8001e76:	4641      	mov	r1, r8
 8001e78:	5281      	strh	r1, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e7a:	8bf6      	ldrh	r6, [r6, #30]
 8001e7c:	465a      	mov	r2, fp
 8001e7e:	46b1      	mov	r9, r6
 8001e80:	8c12      	ldrh	r2, [r2, #32]
 8001e82:	08a4      	lsrs	r4, r4, #2
 8001e84:	444a      	add	r2, r9
 8001e86:	b292      	uxth	r2, r2
 8001e88:	1aa6      	subs	r6, r4, r2
 8001e8a:	b2b6      	uxth	r6, r6
 8001e8c:	46b1      	mov	r9, r6
{
 8001e8e:	b085      	sub	sp, #20
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e90:	9201      	str	r2, [sp, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001e92:	26ba      	movs	r6, #186	@ 0xba
 8001e94:	464a      	mov	r2, r9
 8001e96:	5382      	strh	r2, [r0, r6]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e98:	9a01      	ldr	r2, [sp, #4]
 8001e9a:	0421      	lsls	r1, r4, #16
 8001e9c:	18a2      	adds	r2, r4, r2
 8001e9e:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001ea0:	3602      	adds	r6, #2
 8001ea2:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8001ea4:	4321      	orrs	r1, r4
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001ea6:	3e68      	subs	r6, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8001ea8:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001eaa:	5384      	strh	r4, [r0, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8001eac:	2488      	movs	r4, #136	@ 0x88
 8001eae:	5101      	str	r1, [r0, r4]
 8001eb0:	3404      	adds	r4, #4
 8001eb2:	5101      	str	r1, [r0, r4]
 8001eb4:	3404      	adds	r4, #4
 8001eb6:	5101      	str	r1, [r0, r4]
 8001eb8:	3404      	adds	r4, #4
 8001eba:	5101      	str	r1, [r0, r4]
 8001ebc:	3404      	adds	r4, #4
 8001ebe:	5101      	str	r1, [r0, r4]
 8001ec0:	3404      	adds	r4, #4
 8001ec2:	5101      	str	r1, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001ec4:	21ae      	movs	r1, #174	@ 0xae
 8001ec6:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001ec8:	4642      	mov	r2, r8
 8001eca:	3102      	adds	r1, #2
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8001ed0:	4649      	mov	r1, r9
 8001ed2:	22b2      	movs	r2, #178	@ 0xb2
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ed4:	2480      	movs	r4, #128	@ 0x80
 8001ed6:	5281      	strh	r1, [r0, r2]
  pHandle->_Super.BrakeActionLock = false;
 8001ed8:	3a2d      	subs	r2, #45	@ 0x2d
 8001eda:	5487      	strb	r7, [r0, r2]
 8001edc:	4a70      	ldr	r2, [pc, #448]	@ (80020a0 <R1_Init+0x25c>)
 8001ede:	03e4      	lsls	r4, r4, #15
 8001ee0:	6991      	ldr	r1, [r2, #24]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001ee2:	4e70      	ldr	r6, [pc, #448]	@ (80020a4 <R1_Init+0x260>)
 8001ee4:	4321      	orrs	r1, r4
 8001ee6:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ee8:	6992      	ldr	r2, [r2, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8001eea:	496f      	ldr	r1, [pc, #444]	@ (80020a8 <R1_Init+0x264>)
 8001eec:	4022      	ands	r2, r4
 8001eee:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001ef0:	9a03      	ldr	r2, [sp, #12]
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	68cc      	ldr	r4, [r1, #12]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001efc:	2101      	movs	r1, #1
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001efe:	2440      	movs	r4, #64	@ 0x40
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	46b1      	mov	r9, r6
 8001f04:	438a      	bics	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	316f      	adds	r1, #111	@ 0x6f
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	4322      	orrs	r2, r4
 8001f10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001f12:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001f14:	3c38      	subs	r4, #56	@ 0x38
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001f16:	438a      	bics	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	4963      	ldr	r1, [pc, #396]	@ (80020ac <R1_Init+0x268>)
 8001f1e:	43a2      	bics	r2, r4
 8001f20:	619a      	str	r2, [r3, #24]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	400a      	ands	r2, r1
 8001f26:	619a      	str	r2, [r3, #24]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	43a2      	bics	r2, r4
 8001f2c:	61da      	str	r2, [r3, #28]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	400a      	ands	r2, r1
 8001f32:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8001f34:	2280      	movs	r2, #128	@ 0x80
 8001f36:	6a19      	ldr	r1, [r3, #32]
 8001f38:	0152      	lsls	r2, r2, #5
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001f3e:	2281      	movs	r2, #129	@ 0x81
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001f40:	2180      	movs	r1, #128	@ 0x80
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001f42:	4252      	negs	r2, r2
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f44:	631f      	str	r7, [r3, #48]	@ 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001f46:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	4a57      	ldr	r2, [pc, #348]	@ (80020b0 <R1_Init+0x26c>)
 8001f52:	430a      	orrs	r2, r1
 8001f54:	621a      	str	r2, [r3, #32]
 8001f56:	4957      	ldr	r1, [pc, #348]	@ (80020b4 <R1_Init+0x270>)
 8001f58:	465a      	mov	r2, fp
 8001f5a:	468a      	mov	sl, r1
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	4452      	add	r2, sl
 8001f60:	3a01      	subs	r2, #1
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	4462      	add	r2, ip
 8001f66:	6817      	ldr	r7, [r2, #0]
 8001f68:	4037      	ands	r7, r6
 8001f6a:	4e53      	ldr	r6, [pc, #332]	@ (80020b8 <R1_Init+0x274>)
 8001f6c:	4337      	orrs	r7, r6
 8001f6e:	6017      	str	r7, [r2, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8001f70:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 8001f72:	46b0      	mov	r8, r6
 8001f74:	4e51      	ldr	r6, [pc, #324]	@ (80020bc <R1_Init+0x278>)
 8001f76:	403e      	ands	r6, r7
 8001f78:	4f51      	ldr	r7, [pc, #324]	@ (80020c0 <R1_Init+0x27c>)
 8001f7a:	4337      	orrs	r7, r6
 8001f7c:	649f      	str	r7, [r3, #72]	@ 0x48
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 8001f7e:	0007      	movs	r7, r0
 8001f80:	3788      	adds	r7, #136	@ 0x88
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f82:	60d7      	str	r7, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 8001f84:	001f      	movs	r7, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f86:	2606      	movs	r6, #6
 8001f88:	374c      	adds	r7, #76	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001f8a:	6097      	str	r7, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f8c:	6857      	ldr	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f8e:	9101      	str	r1, [sp, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f90:	0c3f      	lsrs	r7, r7, #16
 8001f92:	043f      	lsls	r7, r7, #16
 8001f94:	4337      	orrs	r7, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f96:	465e      	mov	r6, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f98:	6057      	str	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f9a:	6937      	ldr	r7, [r6, #16]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 8001f9c:	3340      	adds	r3, #64	@ 0x40
 8001f9e:	4457      	add	r7, sl
 8001fa0:	3f01      	subs	r7, #1
 8001fa2:	783f      	ldrb	r7, [r7, #0]
 8001fa4:	4467      	add	r7, ip
 8001fa6:	683e      	ldr	r6, [r7, #0]
 8001fa8:	46b2      	mov	sl, r6
 8001faa:	464e      	mov	r6, r9
 8001fac:	4651      	mov	r1, sl
 8001fae:	400e      	ands	r6, r1
 8001fb0:	46b1      	mov	r9, r6
 8001fb2:	4646      	mov	r6, r8
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	430e      	orrs	r6, r1
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 8001fb8:	21ae      	movs	r1, #174	@ 0xae
 8001fba:	4688      	mov	r8, r1
 8001fbc:	4480      	add	r8, r0
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fbe:	4641      	mov	r1, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001fc0:	603e      	str	r6, [r7, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fc2:	60f9      	str	r1, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001fc4:	2103      	movs	r1, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001fc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	607b      	str	r3, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001fd2:	2702      	movs	r7, #2
 8001fd4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fd6:	9901      	ldr	r1, [sp, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001fd8:	433b      	orrs	r3, r7
 8001fda:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fdc:	465a      	mov	r2, fp
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 8001fde:	0003      	movs	r3, r0
 8001fe0:	6992      	ldr	r2, [r2, #24]
 8001fe2:	33b4      	adds	r3, #180	@ 0xb4
 8001fe4:	1889      	adds	r1, r1, r2
 8001fe6:	3901      	subs	r1, #1
 8001fe8:	780a      	ldrb	r2, [r1, #0]
 8001fea:	4462      	add	r2, ip
 8001fec:	60d3      	str	r3, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8001fee:	002b      	movs	r3, r5
 8001ff0:	3340      	adds	r3, #64	@ 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001ff2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001ff4:	6853      	ldr	r3, [r2, #4]
 8001ff6:	0c1b      	lsrs	r3, r3, #16
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	433b      	orrs	r3, r7
 8001ffc:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001ffe:	2204      	movs	r2, #4
 8002000:	686b      	ldr	r3, [r5, #4]
 8002002:	4393      	bics	r3, r2
 8002004:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002006:	602a      	str	r2, [r5, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002008:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 800200a:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <R1_Init+0x280>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800200c:	43a3      	bics	r3, r4
 800200e:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8002010:	602c      	str	r4, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8002012:	6891      	ldr	r1, [r2, #8]
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <R1_Init+0x284>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8002016:	3408      	adds	r4, #8
  MODIFY_REG(ADCx->CR,
 8002018:	4019      	ands	r1, r3
 800201a:	3318      	adds	r3, #24
 800201c:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800201e:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8002020:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002022:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8002024:	2b00      	cmp	r3, #0
 8002026:	dbfc      	blt.n	8002022 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8002028:	6893      	ldr	r3, [r2, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 800202a:	4219      	tst	r1, r3
 800202c:	d1f9      	bne.n	8002022 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 800202e:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8002030:	421c      	tst	r4, r3
 8002032:	d1f6      	bne.n	8002022 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8002034:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8002036:	421f      	tst	r7, r3
 8002038:	d1f3      	bne.n	8002022 <R1_Init+0x1de>
  MODIFY_REG(ADCx->CR,
 800203a:	6893      	ldr	r3, [r2, #8]
 800203c:	4922      	ldr	r1, [pc, #136]	@ (80020c8 <R1_Init+0x284>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800203e:	4c23      	ldr	r4, [pc, #140]	@ (80020cc <R1_Init+0x288>)
  MODIFY_REG(ADCx->CR,
 8002040:	400b      	ands	r3, r1
 8002042:	2101      	movs	r1, #1
 8002044:	430b      	orrs	r3, r1
 8002046:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002048:	68eb      	ldr	r3, [r5, #12]
 800204a:	4023      	ands	r3, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800204c:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800204e:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002050:	68d3      	ldr	r3, [r2, #12]
 8002052:	43a3      	bics	r3, r4
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 8002058:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800205a:	491a      	ldr	r1, [pc, #104]	@ (80020c4 <R1_Init+0x280>)
 800205c:	680b      	ldr	r3, [r1, #0]
 800205e:	421a      	tst	r2, r3
 8002060:	d0fc      	beq.n	800205c <R1_Init+0x218>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002062:	68e9      	ldr	r1, [r5, #12]
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <R1_Init+0x288>)
 8002066:	4019      	ands	r1, r3
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	430b      	orrs	r3, r1
 800206e:	60eb      	str	r3, [r5, #12]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002070:	4659      	mov	r1, fp
 8002072:	2322      	movs	r3, #34	@ 0x22
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	0011      	movs	r1, r2
 8002078:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800207a:	034b      	lsls	r3, r1, #13
 800207c:	0b5b      	lsrs	r3, r3, #13
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800207e:	4914      	ldr	r1, [pc, #80]	@ (80020d0 <R1_Init+0x28c>)
 8002080:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002082:	680b      	ldr	r3, [r1, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 8002088:	22ca      	movs	r2, #202	@ 0xca
 800208a:	2300      	movs	r3, #0
 800208c:	5483      	strb	r3, [r0, r2]
  pHandle->_Super.DTTest = 0u;
 800208e:	3a5a      	subs	r2, #90	@ 0x5a
 8002090:	5283      	strh	r3, [r0, r2]
}
 8002092:	b005      	add	sp, #20
 8002094:	bcf0      	pop	{r4, r5, r6, r7}
 8002096:	46bb      	mov	fp, r7
 8002098:	46b2      	mov	sl, r6
 800209a:	46a9      	mov	r9, r5
 800209c:	46a0      	mov	r8, r4
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	ffff800f 	.word	0xffff800f
 80020a8:	40015800 	.word	0x40015800
 80020ac:	fffff7ff 	.word	0xfffff7ff
 80020b0:	00000555 	.word	0x00000555
 80020b4:	080054dc 	.word	0x080054dc
 80020b8:	000035b0 	.word	0x000035b0
 80020bc:	ffffe0e0 	.word	0xffffe0e0
 80020c0:	0000020d 	.word	0x0000020d
 80020c4:	40012400 	.word	0x40012400
 80020c8:	7fffffe8 	.word	0x7fffffe8
 80020cc:	fffff23f 	.word	0xfffff23f
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 80020d4:	23a0      	movs	r3, #160	@ 0xa0
 80020d6:	680a      	ldr	r2, [r1, #0]
 80020d8:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 80020da:	2201      	movs	r2, #1
 80020dc:	3b1f      	subs	r3, #31
 80020de:	54c2      	strb	r2, [r0, r3]
}
 80020e0:	4770      	bx	lr
 80020e2:	46c0      	nop			@ (mov r8, r8)

080020e4 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 80020e4:	23a0      	movs	r3, #160	@ 0xa0
 80020e6:	58c3      	ldr	r3, [r0, r3]
 80020e8:	600b      	str	r3, [r1, #0]
}
 80020ea:	4770      	bx	lr

080020ec <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020ec:	23cc      	movs	r3, #204	@ 0xcc
 80020ee:	58c3      	ldr	r3, [r0, r3]
{
 80020f0:	b510      	push	{r4, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020f2:	685a      	ldr	r2, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80020f4:	2401      	movs	r4, #1
 80020f6:	237e      	movs	r3, #126	@ 0x7e
 80020f8:	54c4      	strb	r4, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020fa:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020fc:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020fe:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002100:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002102:	3b80      	subs	r3, #128	@ 0x80
 8002104:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002106:	6913      	ldr	r3, [r2, #16]
 8002108:	4219      	tst	r1, r3
 800210a:	d0fc      	beq.n	8002106 <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	430b      	orrs	r3, r1
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8002116:	237d      	movs	r3, #125	@ 0x7d
 8002118:	5cc3      	ldrb	r3, [r0, r3]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10b      	bne.n	8002136 <R1_TurnOnLowSides+0x4a>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800211e:	2248      	movs	r2, #72	@ 0x48
 8002120:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002122:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002124:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002126:	224a      	movs	r2, #74	@ 0x4a
 8002128:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800212a:	5a82      	ldrh	r2, [r0, r2]
 800212c:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800212e:	224c      	movs	r2, #76	@ 0x4c
 8002130:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002132:	5a82      	ldrh	r2, [r0, r2]
 8002134:	619a      	str	r2, [r3, #24]
}
 8002136:	bd10      	pop	{r4, pc}

08002138 <R1_SwitchOnPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002138:	23cc      	movs	r3, #204	@ 0xcc
 800213a:	58c1      	ldr	r1, [r0, r3]
{
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	46de      	mov	lr, fp
 8002140:	4657      	mov	r7, sl
 8002142:	464e      	mov	r6, r9
 8002144:	4645      	mov	r5, r8
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8002146:	680a      	ldr	r2, [r1, #0]
{
 8002148:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800214a:	4693      	mov	fp, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 800214c:	688a      	ldr	r2, [r1, #8]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800214e:	8bce      	ldrh	r6, [r1, #30]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002150:	4694      	mov	ip, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002152:	22b8      	movs	r2, #184	@ 0xb8
 8002154:	5a85      	ldrh	r5, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002156:	8c0a      	ldrh	r2, [r1, #32]
 8002158:	086c      	lsrs	r4, r5, #1
 800215a:	1992      	adds	r2, r2, r6
 800215c:	b292      	uxth	r2, r2
 800215e:	1aa7      	subs	r7, r4, r2
 8002160:	b2be      	uxth	r6, r7
 8002162:	0037      	movs	r7, r6
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002164:	26ba      	movs	r6, #186	@ 0xba
{
 8002166:	b085      	sub	sp, #20
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002168:	684b      	ldr	r3, [r1, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800216a:	9701      	str	r7, [sp, #4]
 800216c:	5387      	strh	r7, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800216e:	2700      	movs	r7, #0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002170:	18a2      	adds	r2, r4, r2
 8002172:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002174:	3602      	adds	r6, #2
 8002176:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002178:	3e3e      	subs	r6, #62	@ 0x3e
 800217a:	5587      	strb	r7, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800217c:	3630      	adds	r6, #48	@ 0x30
 800217e:	5382      	strh	r2, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002180:	22b2      	movs	r2, #178	@ 0xb2
 8002182:	9e01      	ldr	r6, [sp, #4]
 8002184:	5286      	strh	r6, [r0, r2]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 8002186:	1c6a      	adds	r2, r5, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
 800218a:	9203      	str	r2, [sp, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800218c:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 800218e:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002190:	639c      	str	r4, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002192:	63dc      	str	r4, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002194:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4322      	orrs	r2, r4
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 800219c:	227d      	movs	r2, #125	@ 0x7d
 800219e:	5c82      	ldrb	r2, [r0, r2]
 80021a0:	2a02      	cmp	r2, #2
 80021a2:	d100      	bne.n	80021a6 <R1_SwitchOnPWM+0x6e>
 80021a4:	e0cd      	b.n	8002342 <R1_SwitchOnPWM+0x20a>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2410      	movs	r4, #16
 80021aa:	9f01      	ldr	r7, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80021ac:	06d2      	lsls	r2, r2, #27
 80021ae:	d500      	bpl.n	80021b2 <R1_SwitchOnPWM+0x7a>
 80021b0:	e0bf      	b.n	8002332 <R1_SwitchOnPWM+0x1fa>
 80021b2:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80021b4:	4214      	tst	r4, r2
 80021b6:	d0fc      	beq.n	80021b2 <R1_SwitchOnPWM+0x7a>
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 80021b8:	4662      	mov	r2, ip
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021ba:	690d      	ldr	r5, [r1, #16]
 80021bc:	68cc      	ldr	r4, [r1, #12]
 80021be:	3d01      	subs	r5, #1
 80021c0:	9701      	str	r7, [sp, #4]
 80021c2:	9502      	str	r5, [sp, #8]
 80021c4:	3c01      	subs	r4, #1
  if (NULL == DMAx)
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d017      	beq.n	80021fa <R1_SwitchOnPWM+0xc2>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021ca:	00a2      	lsls	r2, r4, #2
 80021cc:	4690      	mov	r8, r2
 80021ce:	2602      	movs	r6, #2
 80021d0:	4645      	mov	r5, r8
 80021d2:	0032      	movs	r2, r6
 80021d4:	40aa      	lsls	r2, r5
 80021d6:	4665      	mov	r5, ip
 80021d8:	606a      	str	r2, [r5, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021da:	2204      	movs	r2, #4
 80021dc:	4645      	mov	r5, r8
 80021de:	0017      	movs	r7, r2
 80021e0:	40af      	lsls	r7, r5
 80021e2:	4665      	mov	r5, ip
 80021e4:	606f      	str	r7, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021e6:	9d02      	ldr	r5, [sp, #8]
 80021e8:	00ad      	lsls	r5, r5, #2
 80021ea:	46a8      	mov	r8, r5
 80021ec:	40ae      	lsls	r6, r5
 80021ee:	4665      	mov	r5, ip
 80021f0:	606e      	str	r6, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021f2:	4645      	mov	r5, r8
 80021f4:	40aa      	lsls	r2, r5
 80021f6:	4665      	mov	r5, ip
 80021f8:	606a      	str	r2, [r5, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021fa:	2202      	movs	r2, #2
  pHandle->TCCnt = 0;
 80021fc:	2600      	movs	r6, #0
 80021fe:	2706      	movs	r7, #6
 8002200:	4252      	negs	r2, r2
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	32c8      	adds	r2, #200	@ 0xc8
 8002206:	5486      	strb	r6, [r0, r2]
  pHandle->TCDoneFlag = false;
 8002208:	3203      	adds	r2, #3
 800220a:	5486      	strb	r6, [r0, r2]
 800220c:	4a5c      	ldr	r2, [pc, #368]	@ (8002380 <R1_SwitchOnPWM+0x248>)
  pHandle->TCCnt = 0;
 800220e:	46b0      	mov	r8, r6
 8002210:	5d14      	ldrb	r4, [r2, r4]
 8002212:	4464      	add	r4, ip
 8002214:	6866      	ldr	r6, [r4, #4]
 8002216:	0c36      	lsrs	r6, r6, #16
 8002218:	0436      	lsls	r6, r6, #16
 800221a:	433e      	orrs	r6, r7
 800221c:	6066      	str	r6, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800221e:	6826      	ldr	r6, [r4, #0]
 8002220:	46b1      	mov	r9, r6
 8002222:	2601      	movs	r6, #1
 8002224:	464f      	mov	r7, r9
 8002226:	4337      	orrs	r7, r6
 8002228:	6027      	str	r7, [r4, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 800222a:	68df      	ldr	r7, [r3, #12]
 800222c:	46ba      	mov	sl, r7
 800222e:	2780      	movs	r7, #128	@ 0x80
 8002230:	007f      	lsls	r7, r7, #1
 8002232:	46b9      	mov	r9, r7
 8002234:	4657      	mov	r7, sl
 8002236:	464d      	mov	r5, r9
 8002238:	432f      	orrs	r7, r5
 800223a:	60df      	str	r7, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 800223c:	68dd      	ldr	r5, [r3, #12]
 800223e:	46aa      	mov	sl, r5
 8002240:	2580      	movs	r5, #128	@ 0x80
 8002242:	4657      	mov	r7, sl
 8002244:	016d      	lsls	r5, r5, #5
 8002246:	432f      	orrs	r7, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002248:	9d02      	ldr	r5, [sp, #8]
 800224a:	60df      	str	r7, [r3, #12]
 800224c:	5d55      	ldrb	r5, [r2, r5]
 800224e:	2703      	movs	r7, #3
 8002250:	4465      	add	r5, ip
 8002252:	46a9      	mov	r9, r5
 8002254:	686d      	ldr	r5, [r5, #4]
 8002256:	46ba      	mov	sl, r7
 8002258:	0c2d      	lsrs	r5, r5, #16
 800225a:	042d      	lsls	r5, r5, #16
 800225c:	433d      	orrs	r5, r7
 800225e:	464f      	mov	r7, r9
 8002260:	607d      	str	r5, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002262:	683d      	ldr	r5, [r7, #0]
 8002264:	4335      	orrs	r5, r6
 8002266:	603d      	str	r5, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002268:	2702      	movs	r7, #2
  WRITE_REG(TIMx->CCR4, CompareValue);
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	641d      	str	r5, [r3, #64]	@ 0x40
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800226e:	698d      	ldr	r5, [r1, #24]
 8002270:	1952      	adds	r2, r2, r5
 8002272:	3a01      	subs	r2, #1
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	4462      	add	r2, ip
 8002278:	6815      	ldr	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800227a:	46bc      	mov	ip, r7
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800227c:	43b5      	bics	r5, r6
 800227e:	6015      	str	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002280:	6855      	ldr	r5, [r2, #4]
 8002282:	0c2d      	lsrs	r5, r5, #16
 8002284:	042d      	lsls	r5, r5, #16
 8002286:	433d      	orrs	r5, r7
 8002288:	6055      	str	r5, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800228a:	6815      	ldr	r5, [r2, #0]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 800228c:	0037      	movs	r7, r6
 800228e:	4335      	orrs	r5, r6
 8002290:	6015      	str	r5, [r2, #0]
 8002292:	2522      	movs	r5, #34	@ 0x22
 8002294:	5d4d      	ldrb	r5, [r1, r5]
 8002296:	40af      	lsls	r7, r5
 8002298:	037d      	lsls	r5, r7, #13
 800229a:	465f      	mov	r7, fp
 800229c:	0b6d      	lsrs	r5, r5, #13
 800229e:	62bd      	str	r5, [r7, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80022a0:	4d38      	ldr	r5, [pc, #224]	@ (8002384 <R1_SwitchOnPWM+0x24c>)
 80022a2:	696f      	ldr	r7, [r5, #20]
 80022a4:	46b9      	mov	r9, r7
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80022a6:	2723      	movs	r7, #35	@ 0x23
 80022a8:	5dcf      	ldrb	r7, [r1, r7]
 80022aa:	9702      	str	r7, [sp, #8]
 80022ac:	2707      	movs	r7, #7
 80022ae:	46bb      	mov	fp, r7
 80022b0:	464f      	mov	r7, r9
 80022b2:	4659      	mov	r1, fp
 80022b4:	438f      	bics	r7, r1
 80022b6:	0039      	movs	r1, r7
 80022b8:	9f02      	ldr	r7, [sp, #8]
 80022ba:	430f      	orrs	r7, r1
 80022bc:	616f      	str	r7, [r5, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80022be:	4657      	mov	r7, sl
 80022c0:	68e9      	ldr	r1, [r5, #12]
 80022c2:	43b9      	bics	r1, r7
 80022c4:	4331      	orrs	r1, r6
 80022c6:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80022c8:	68e9      	ldr	r1, [r5, #12]
 80022ca:	4f2f      	ldr	r7, [pc, #188]	@ (8002388 <R1_SwitchOnPWM+0x250>)
 80022cc:	400f      	ands	r7, r1
 80022ce:	2188      	movs	r1, #136	@ 0x88
 80022d0:	00c9      	lsls	r1, r1, #3
 80022d2:	4339      	orrs	r1, r7
 80022d4:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CR,
 80022d6:	68a9      	ldr	r1, [r5, #8]
 80022d8:	4f2c      	ldr	r7, [pc, #176]	@ (800238c <R1_SwitchOnPWM+0x254>)
 80022da:	4039      	ands	r1, r7
 80022dc:	2704      	movs	r7, #4
 80022de:	4339      	orrs	r1, r7
 80022e0:	60a9      	str	r1, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022e2:	2570      	movs	r5, #112	@ 0x70
 80022e4:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80022e6:	9f01      	ldr	r7, [sp, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022e8:	4329      	orrs	r1, r5
 80022ea:	6059      	str	r1, [r3, #4]
  pHandle->FOCDurationFlag = false;
 80022ec:	4645      	mov	r5, r8
 80022ee:	21c8      	movs	r1, #200	@ 0xc8
 80022f0:	5445      	strb	r5, [r0, r1]
  pHandle->ADCRegularLocked=true;
 80022f2:	3102      	adds	r1, #2
 80022f4:	5446      	strb	r6, [r0, r1]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80022f6:	4660      	mov	r0, ip
 80022f8:	6821      	ldr	r1, [r4, #0]
 80022fa:	4301      	orrs	r1, r0
 80022fc:	6021      	str	r1, [r4, #0]
 80022fe:	6811      	ldr	r1, [r2, #0]
 8002300:	4301      	orrs	r1, r0
 8002302:	6011      	str	r1, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002304:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002306:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002308:	4252      	negs	r2, r2
 800230a:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800230c:	300e      	adds	r0, #14
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	4211      	tst	r1, r2
 8002312:	d0fc      	beq.n	800230e <R1_SwitchOnPWM+0x1d6>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002314:	681a      	ldr	r2, [r3, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 8002316:	4210      	tst	r0, r2
 8002318:	d1f9      	bne.n	800230e <R1_SwitchOnPWM+0x1d6>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800231a:	481d      	ldr	r0, [pc, #116]	@ (8002390 <R1_SwitchOnPWM+0x258>)
 800231c:	68c2      	ldr	r2, [r0, #12]
 800231e:	430a      	orrs	r2, r1
 8002320:	60c2      	str	r2, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002322:	641f      	str	r7, [r3, #64]	@ 0x40
}
 8002324:	b005      	add	sp, #20
 8002326:	bcf0      	pop	{r4, r5, r6, r7}
 8002328:	46bb      	mov	fp, r7
 800232a:	46b2      	mov	sl, r6
 800232c:	46a9      	mov	r9, r5
 800232e:	46a0      	mov	r8, r4
 8002330:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002332:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8002334:	4214      	tst	r4, r2
 8002336:	d1fc      	bne.n	8002332 <R1_SwitchOnPWM+0x1fa>
 8002338:	2410      	movs	r4, #16
 800233a:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800233c:	4214      	tst	r4, r2
 800233e:	d0fc      	beq.n	800233a <R1_SwitchOnPWM+0x202>
 8002340:	e73a      	b.n	80021b8 <R1_SwitchOnPWM+0x80>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002342:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002344:	244c      	movs	r4, #76	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002346:	4690      	mov	r8, r2
 8002348:	2248      	movs	r2, #72	@ 0x48
 800234a:	5a82      	ldrh	r2, [r0, r2]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800234c:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800234e:	4691      	mov	r9, r2
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002350:	224a      	movs	r2, #74	@ 0x4a
 8002352:	5a86      	ldrh	r6, [r0, r2]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002354:	6c42      	ldr	r2, [r0, #68]	@ 0x44
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002356:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002358:	9202      	str	r2, [sp, #8]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800235a:	4a0e      	ldr	r2, [pc, #56]	@ (8002394 <R1_SwitchOnPWM+0x25c>)
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800235c:	5b04      	ldrh	r4, [r0, r4]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800235e:	4217      	tst	r7, r2
 8002360:	d006      	beq.n	8002370 <R1_SwitchOnPWM+0x238>
 8002362:	4642      	mov	r2, r8
 8002364:	464f      	mov	r7, r9
 8002366:	6197      	str	r7, [r2, #24]
 8002368:	9a02      	ldr	r2, [sp, #8]
 800236a:	61ae      	str	r6, [r5, #24]
 800236c:	6194      	str	r4, [r2, #24]
}
 800236e:	e71a      	b.n	80021a6 <R1_SwitchOnPWM+0x6e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002370:	4642      	mov	r2, r8
 8002372:	464f      	mov	r7, r9
 8002374:	6297      	str	r7, [r2, #40]	@ 0x28
 8002376:	9a02      	ldr	r2, [sp, #8]
 8002378:	62ae      	str	r6, [r5, #40]	@ 0x28
 800237a:	6294      	str	r4, [r2, #40]	@ 0x28
}
 800237c:	e713      	b.n	80021a6 <R1_SwitchOnPWM+0x6e>
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	080054dc 	.word	0x080054dc
 8002384:	40012400 	.word	0x40012400
 8002388:	fffff23f 	.word	0xfffff23f
 800238c:	7fffffe8 	.word	0x7fffffe8
 8002390:	40012c00 	.word	0x40012c00
 8002394:	00000555 	.word	0x00000555

08002398 <R1_SwitchOffPWM>:
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	4657      	mov	r7, sl
 800239c:	464e      	mov	r6, r9
 800239e:	4645      	mov	r5, r8
 80023a0:	46de      	mov	lr, fp
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80023a2:	23cc      	movs	r3, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023a4:	22b8      	movs	r2, #184	@ 0xb8
{
 80023a6:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023a8:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80023aa:	58c6      	ldr	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023ac:	0855      	lsrs	r5, r2, #1
 80023ae:	8bf4      	ldrh	r4, [r6, #30]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023b0:	4694      	mov	ip, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023b2:	8c32      	ldrh	r2, [r6, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80023b4:	6873      	ldr	r3, [r6, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023b6:	1912      	adds	r2, r2, r4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023b8:	24ba      	movs	r4, #186	@ 0xba
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023ba:	b292      	uxth	r2, r2
 80023bc:	1aaf      	subs	r7, r5, r2
 80023be:	b2bf      	uxth	r7, r7
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023c0:	18ad      	adds	r5, r5, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80023c2:	68b1      	ldr	r1, [r6, #8]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023c4:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023c6:	5307      	strh	r7, [r0, r4]
{
 80023c8:	b083      	sub	sp, #12
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80023ca:	3402      	adds	r4, #2
 80023cc:	5305      	strh	r5, [r0, r4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023ce:	9501      	str	r5, [sp, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80023d0:	2501      	movs	r5, #1
 80023d2:	68dc      	ldr	r4, [r3, #12]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80023d4:	9700      	str	r7, [sp, #0]
 80023d6:	43ac      	bics	r4, r5
 80023d8:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80023da:	681c      	ldr	r4, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80023dc:	06e4      	lsls	r4, r4, #27
 80023de:	d400      	bmi.n	80023e2 <R1_SwitchOffPWM+0x4a>
 80023e0:	e0c3      	b.n	800256a <R1_SwitchOffPWM+0x1d2>
 80023e2:	2410      	movs	r4, #16
 80023e4:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80023e6:	4645      	mov	r5, r8
 80023e8:	681c      	ldr	r4, [r3, #0]
 80023ea:	4225      	tst	r5, r4
 80023ec:	d1fb      	bne.n	80023e6 <R1_SwitchOffPWM+0x4e>
 80023ee:	2410      	movs	r4, #16
 80023f0:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80023f2:	4645      	mov	r5, r8
 80023f4:	681c      	ldr	r4, [r3, #0]
 80023f6:	4225      	tst	r5, r4
 80023f8:	d0fb      	beq.n	80023f2 <R1_SwitchOffPWM+0x5a>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80023fa:	4c6c      	ldr	r4, [pc, #432]	@ (80025ac <R1_SwitchOffPWM+0x214>)
 80023fc:	46a2      	mov	sl, r4
 80023fe:	68f4      	ldr	r4, [r6, #12]
 8002400:	4454      	add	r4, sl
 8002402:	3c01      	subs	r4, #1
 8002404:	7824      	ldrb	r4, [r4, #0]
 8002406:	1864      	adds	r4, r4, r1
 8002408:	6825      	ldr	r5, [r4, #0]
 800240a:	46a8      	mov	r8, r5
 800240c:	2502      	movs	r5, #2
 800240e:	46a9      	mov	r9, r5
 8002410:	4645      	mov	r5, r8
 8002412:	464f      	mov	r7, r9
 8002414:	43bd      	bics	r5, r7
 8002416:	6025      	str	r5, [r4, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002418:	6825      	ldr	r5, [r4, #0]
 800241a:	46a8      	mov	r8, r5
 800241c:	2504      	movs	r5, #4
 800241e:	46a9      	mov	r9, r5
 8002420:	4645      	mov	r5, r8
 8002422:	464f      	mov	r7, r9
 8002424:	43bd      	bics	r5, r7
 8002426:	6025      	str	r5, [r4, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002428:	257e      	movs	r5, #126	@ 0x7e
 800242a:	46a8      	mov	r8, r5
 800242c:	2500      	movs	r5, #0
 800242e:	46a9      	mov	r9, r5
 8002430:	4645      	mov	r5, r8
 8002432:	464f      	mov	r7, r9
 8002434:	5547      	strb	r7, [r0, r5]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002436:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 8002438:	46a8      	mov	r8, r5
 800243a:	4d5d      	ldr	r5, [pc, #372]	@ (80025b0 <R1_SwitchOffPWM+0x218>)
 800243c:	46a9      	mov	r9, r5
 800243e:	4645      	mov	r5, r8
 8002440:	464f      	mov	r7, r9
 8002442:	403d      	ands	r5, r7
 8002444:	645d      	str	r5, [r3, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 8002446:	2585      	movs	r5, #133	@ 0x85
 8002448:	5d45      	ldrb	r5, [r0, r5]
 800244a:	2d00      	cmp	r5, #0
 800244c:	d104      	bne.n	8002458 <R1_SwitchOffPWM+0xc0>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 800244e:	357d      	adds	r5, #125	@ 0x7d
 8002450:	5d45      	ldrb	r5, [r0, r5]
 8002452:	2d02      	cmp	r5, #2
 8002454:	d100      	bne.n	8002458 <R1_SwitchOffPWM+0xc0>
 8002456:	e08f      	b.n	8002578 <R1_SwitchOffPWM+0x1e0>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002458:	69b5      	ldr	r5, [r6, #24]
 800245a:	46a8      	mov	r8, r5
 800245c:	2501      	movs	r5, #1
 800245e:	426d      	negs	r5, r5
 8002460:	46a9      	mov	r9, r5
 8002462:	44d0      	add	r8, sl
 8002464:	44c8      	add	r8, r9
 8002466:	4645      	mov	r5, r8
 8002468:	782d      	ldrb	r5, [r5, #0]
 800246a:	46a8      	mov	r8, r5
 800246c:	4488      	add	r8, r1
 800246e:	4645      	mov	r5, r8
 8002470:	682d      	ldr	r5, [r5, #0]
 8002472:	46ab      	mov	fp, r5
 8002474:	2501      	movs	r5, #1
 8002476:	46a9      	mov	r9, r5
 8002478:	465d      	mov	r5, fp
 800247a:	464f      	mov	r7, r9
 800247c:	43bd      	bics	r5, r7
 800247e:	46ab      	mov	fp, r5
 8002480:	4645      	mov	r5, r8
 8002482:	465f      	mov	r7, fp
 8002484:	602f      	str	r7, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8002486:	464d      	mov	r5, r9
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002488:	464f      	mov	r7, r9
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800248a:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800248c:	3501      	adds	r5, #1
 800248e:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002490:	3502      	adds	r5, #2
 8002492:	604d      	str	r5, [r1, #4]
 8002494:	46a8      	mov	r8, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	43bd      	bics	r5, r7
 800249a:	6025      	str	r5, [r4, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 800249c:	68dc      	ldr	r4, [r3, #12]
 800249e:	4d45      	ldr	r5, [pc, #276]	@ (80025b4 <R1_SwitchOffPWM+0x21c>)
 80024a0:	402c      	ands	r4, r5
 80024a2:	60dc      	str	r4, [r3, #12]
 80024a4:	6934      	ldr	r4, [r6, #16]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 80024a6:	4666      	mov	r6, ip
 80024a8:	4454      	add	r4, sl
 80024aa:	3c01      	subs	r4, #1
 80024ac:	7824      	ldrb	r4, [r4, #0]
 80024ae:	3601      	adds	r6, #1
 80024b0:	1909      	adds	r1, r1, r4
 80024b2:	680c      	ldr	r4, [r1, #0]
 80024b4:	43bc      	bics	r4, r7
 80024b6:	600c      	str	r4, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	4c3f      	ldr	r4, [pc, #252]	@ (80025b8 <R1_SwitchOffPWM+0x220>)
 80024bc:	4021      	ands	r1, r4
 80024be:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80024c0:	21ae      	movs	r1, #174	@ 0xae
 80024c2:	9c01      	ldr	r4, [sp, #4]
 80024c4:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80024c6:	9c00      	ldr	r4, [sp, #0]
 80024c8:	3104      	adds	r1, #4
 80024ca:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80024cc:	2470      	movs	r4, #112	@ 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 80024ce:	641e      	str	r6, [r3, #64]	@ 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 80024d4:	4644      	mov	r4, r8
 80024d6:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80024d8:	4938      	ldr	r1, [pc, #224]	@ (80025bc <R1_SwitchOffPWM+0x224>)
 80024da:	688b      	ldr	r3, [r1, #8]
 80024dc:	421c      	tst	r4, r3
 80024de:	d009      	beq.n	80024f4 <R1_SwitchOffPWM+0x15c>
  MODIFY_REG(ADCx->CR,
 80024e0:	688b      	ldr	r3, [r1, #8]
 80024e2:	4c37      	ldr	r4, [pc, #220]	@ (80025c0 <R1_SwitchOffPWM+0x228>)
 80024e4:	4023      	ands	r3, r4
 80024e6:	2410      	movs	r4, #16
 80024e8:	4323      	orrs	r3, r4
 80024ea:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80024ec:	3c0c      	subs	r4, #12
 80024ee:	688b      	ldr	r3, [r1, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80024f0:	421c      	tst	r4, r3
 80024f2:	d1fc      	bne.n	80024ee <R1_SwitchOffPWM+0x156>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80024f4:	4931      	ldr	r1, [pc, #196]	@ (80025bc <R1_SwitchOffPWM+0x224>)
 80024f6:	4c33      	ldr	r4, [pc, #204]	@ (80025c4 <R1_SwitchOffPWM+0x22c>)
 80024f8:	68cb      	ldr	r3, [r1, #12]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80024fa:	27ba      	movs	r7, #186	@ 0xba
 80024fc:	4023      	ands	r3, r4
 80024fe:	60cb      	str	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 8002500:	2400      	movs	r4, #0
 8002502:	23ca      	movs	r3, #202	@ 0xca
 8002504:	54c4      	strb	r4, [r0, r3]
  pHandle->iflag = 0;
 8002506:	3b05      	subs	r3, #5
 8002508:	54c4      	strb	r4, [r0, r3]
  pHandle->FOCDurationFlag = false;
 800250a:	3303      	adds	r3, #3
 800250c:	54c4      	strb	r4, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 800250e:	3b56      	subs	r3, #86	@ 0x56
 8002510:	5ac1      	ldrh	r1, [r0, r3]
 8002512:	3346      	adds	r3, #70	@ 0x46
 8002514:	084e      	lsrs	r6, r1, #1
 8002516:	52c6      	strh	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002518:	088b      	lsrs	r3, r1, #2
 800251a:	1a9d      	subs	r5, r3, r2
 800251c:	b2ad      	uxth	r5, r5
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800251e:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002520:	53c5      	strh	r5, [r0, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002522:	b292      	uxth	r2, r2
 8002524:	0419      	lsls	r1, r3, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002526:	3702      	adds	r7, #2
 8002528:	53c2      	strh	r2, [r0, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 800252a:	4319      	orrs	r1, r3
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 800252c:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 800252e:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002530:	53c3      	strh	r3, [r0, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8002532:	2388      	movs	r3, #136	@ 0x88
 8002534:	50c1      	str	r1, [r0, r3]
 8002536:	3304      	adds	r3, #4
 8002538:	50c1      	str	r1, [r0, r3]
 800253a:	3304      	adds	r3, #4
 800253c:	50c1      	str	r1, [r0, r3]
 800253e:	3304      	adds	r3, #4
 8002540:	50c1      	str	r1, [r0, r3]
 8002542:	3304      	adds	r3, #4
 8002544:	50c1      	str	r1, [r0, r3]
 8002546:	3304      	adds	r3, #4
 8002548:	50c1      	str	r1, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 800254a:	3312      	adds	r3, #18
 800254c:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 800254e:	22b0      	movs	r2, #176	@ 0xb0
 8002550:	3e01      	subs	r6, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002552:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002554:	5286      	strh	r6, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002556:	52c5      	strh	r5, [r0, r3]
  pHandle->_Super.BrakeActionLock = false;
 8002558:	3b2d      	subs	r3, #45	@ 0x2d
 800255a:	54c4      	strb	r4, [r0, r3]
}
 800255c:	b003      	add	sp, #12
 800255e:	bcf0      	pop	{r4, r5, r6, r7}
 8002560:	46bb      	mov	fp, r7
 8002562:	46b2      	mov	sl, r6
 8002564:	46a9      	mov	r9, r5
 8002566:	46a0      	mov	r8, r4
 8002568:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800256a:	2410      	movs	r4, #16
 800256c:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800256e:	4645      	mov	r5, r8
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	4225      	tst	r5, r4
 8002574:	d0fb      	beq.n	800256e <R1_SwitchOffPWM+0x1d6>
 8002576:	e740      	b.n	80023fa <R1_SwitchOffPWM+0x62>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002578:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800257a:	46a8      	mov	r8, r5
 800257c:	2548      	movs	r5, #72	@ 0x48
 800257e:	5b45      	ldrh	r5, [r0, r5]
 8002580:	46a9      	mov	r9, r5
  WRITE_REG(GPIOx->BRR, PinMask);
 8002582:	4645      	mov	r5, r8
 8002584:	464f      	mov	r7, r9
 8002586:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002588:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800258a:	46a8      	mov	r8, r5
 800258c:	254a      	movs	r5, #74	@ 0x4a
 800258e:	5b45      	ldrh	r5, [r0, r5]
 8002590:	46a9      	mov	r9, r5
 8002592:	4645      	mov	r5, r8
 8002594:	464f      	mov	r7, r9
 8002596:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002598:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800259a:	46a8      	mov	r8, r5
 800259c:	254c      	movs	r5, #76	@ 0x4c
 800259e:	5b45      	ldrh	r5, [r0, r5]
 80025a0:	46a9      	mov	r9, r5
 80025a2:	4645      	mov	r5, r8
 80025a4:	464f      	mov	r7, r9
 80025a6:	62af      	str	r7, [r5, #40]	@ 0x28
}
 80025a8:	e756      	b.n	8002458 <R1_SwitchOffPWM+0xc0>
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	080054dc 	.word	0x080054dc
 80025b0:	ffff7fff 	.word	0xffff7fff
 80025b4:	fffffeff 	.word	0xfffffeff
 80025b8:	ffffefff 	.word	0xffffefff
 80025bc:	40012400 	.word	0x40012400
 80025c0:	7fffffe8 	.word	0x7fffffe8
 80025c4:	fffff23f 	.word	0xfffff23f

080025c8 <R1_CurrentReadingCalibration>:
{
 80025c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ca:	46c6      	mov	lr, r8
 80025cc:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80025ce:	26cc      	movs	r6, #204	@ 0xcc
  if (false == pHandle->_Super.offsetCalibStatus)
 80025d0:	2781      	movs	r7, #129	@ 0x81
{
 80025d2:	b500      	push	{lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80025d4:	5980      	ldr	r0, [r0, r6]
  if (false == pHandle->_Super.offsetCalibStatus)
 80025d6:	5de3      	ldrb	r3, [r4, r7]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80025d8:	6845      	ldr	r5, [r0, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d037      	beq.n	800264e <R1_CurrentReadingCalibration+0x86>
  SET_BIT(TIMx->CCER, Channels);
 80025de:	6a2a      	ldr	r2, [r5, #32]
 80025e0:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <R1_CurrentReadingCalibration+0xe4>)
  pHandle->iflag = 0;
 80025e2:	2600      	movs	r6, #0
 80025e4:	4313      	orrs	r3, r2
 80025e6:	622b      	str	r3, [r5, #32]
 80025e8:	23c5      	movs	r3, #197	@ 0xc5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025ea:	27ba      	movs	r7, #186	@ 0xba
  pHandle->iflag = 0;
 80025ec:	54e6      	strb	r6, [r4, r3]
  pHandle->FOCDurationFlag = false;
 80025ee:	3303      	adds	r3, #3
 80025f0:	54e6      	strb	r6, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80025f2:	3b56      	subs	r3, #86	@ 0x56
 80025f4:	5ae2      	ldrh	r2, [r4, r3]
 80025f6:	3346      	adds	r3, #70	@ 0x46
 80025f8:	0855      	lsrs	r5, r2, #1
 80025fa:	52e5      	strh	r5, [r4, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025fc:	8c03      	ldrh	r3, [r0, #32]
 80025fe:	8bc0      	ldrh	r0, [r0, #30]
 8002600:	0892      	lsrs	r2, r2, #2
 8002602:	181b      	adds	r3, r3, r0
 8002604:	b29b      	uxth	r3, r3
 8002606:	1ad0      	subs	r0, r2, r3
 8002608:	b280      	uxth	r0, r0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800260a:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800260c:	53e0      	strh	r0, [r4, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800260e:	b29b      	uxth	r3, r3
 8002610:	0411      	lsls	r1, r2, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002612:	3702      	adds	r7, #2
 8002614:	53e3      	strh	r3, [r4, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8002616:	4311      	orrs	r1, r2
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002618:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 800261a:	6521      	str	r1, [r4, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 800261c:	53e2      	strh	r2, [r4, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 800261e:	2288      	movs	r2, #136	@ 0x88
 8002620:	50a1      	str	r1, [r4, r2]
 8002622:	3204      	adds	r2, #4
 8002624:	50a1      	str	r1, [r4, r2]
 8002626:	3204      	adds	r2, #4
 8002628:	50a1      	str	r1, [r4, r2]
 800262a:	3204      	adds	r2, #4
 800262c:	50a1      	str	r1, [r4, r2]
 800262e:	3204      	adds	r2, #4
 8002630:	50a1      	str	r1, [r4, r2]
 8002632:	3204      	adds	r2, #4
 8002634:	50a1      	str	r1, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002636:	3212      	adds	r2, #18
 8002638:	52a3      	strh	r3, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800263a:	23b2      	movs	r3, #178	@ 0xb2
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 800263c:	3d01      	subs	r5, #1
 800263e:	3202      	adds	r2, #2
 8002640:	52a5      	strh	r5, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002642:	52e0      	strh	r0, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 8002644:	3b2d      	subs	r3, #45	@ 0x2d
 8002646:	54e6      	strb	r6, [r4, r3]
}
 8002648:	bc80      	pop	{r7}
 800264a:	46b8      	mov	r8, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 800264e:	22a0      	movs	r2, #160	@ 0xa0
 8002650:	50a3      	str	r3, [r4, r2]
 8002652:	4690      	mov	r8, r2
    pHandle->Index = 0u;
 8002654:	3224      	adds	r2, #36	@ 0x24
 8002656:	54a3      	strb	r3, [r4, r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002658:	6a2b      	ldr	r3, [r5, #32]
 800265a:	4a15      	ldr	r2, [pc, #84]	@ (80026b0 <R1_CurrentReadingCalibration+0xe8>)
    R1_SwitchOnPWM(&pHandle->_Super);
 800265c:	0020      	movs	r0, r4
 800265e:	4013      	ands	r3, r2
 8002660:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8002662:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <R1_CurrentReadingCalibration+0xec>)
 8002664:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8002666:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <R1_CurrentReadingCalibration+0xf0>)
 8002668:	6163      	str	r3, [r4, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 800266a:	f7ff fd65 	bl	8002138 <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 800266e:	2324      	movs	r3, #36	@ 0x24
 8002670:	59a2      	ldr	r2, [r4, r6]
    waitForPolarizationEnd(TIMx,
 8002672:	0021      	movs	r1, r4
 8002674:	5cd2      	ldrb	r2, [r2, r3]
 8002676:	0023      	movs	r3, r4
 8002678:	0028      	movs	r0, r5
 800267a:	33c4      	adds	r3, #196	@ 0xc4
 800267c:	3156      	adds	r1, #86	@ 0x56
 800267e:	f002 fbe1 	bl	8004e44 <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8002682:	0020      	movs	r0, r4
 8002684:	f7ff fe88 	bl	8002398 <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8002688:	4643      	mov	r3, r8
 800268a:	4642      	mov	r2, r8
 800268c:	58e3      	ldr	r3, [r4, r3]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 8002692:	2356      	movs	r3, #86	@ 0x56
 8002694:	5ae3      	ldrh	r3, [r4, r3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <R1_CurrentReadingCalibration+0xd6>
      pHandle->_Super.offsetCalibStatus = true;
 800269a:	3301      	adds	r3, #1
 800269c:	55e3      	strb	r3, [r4, r7]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <R1_CurrentReadingCalibration+0xf4>)
 80026a0:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <R1_CurrentReadingCalibration+0xf8>)
 80026a4:	6163      	str	r3, [r4, #20]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80026a6:	23cc      	movs	r3, #204	@ 0xcc
 80026a8:	58e0      	ldr	r0, [r4, r3]
 80026aa:	e798      	b.n	80025de <R1_CurrentReadingCalibration+0x16>
 80026ac:	00000555 	.word	0x00000555
 80026b0:	fffffaaa 	.word	0xfffffaaa
 80026b4:	080019d1 	.word	0x080019d1
 80026b8:	08001a0d 	.word	0x08001a0d
 80026bc:	08001755 	.word	0x08001755
 80026c0:	08001a79 	.word	0x08001a79

080026c4 <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 80026c4:	23c9      	movs	r3, #201	@ 0xc9
 80026c6:	5cc3      	ldrb	r3, [r0, r3]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <R1_TIM1_UP_IRQHandler+0x26>
  MODIFY_REG(ADCx->CR,
 80026cc:	4a08      	ldr	r2, [pc, #32]	@ (80026f0 <R1_TIM1_UP_IRQHandler+0x2c>)
 80026ce:	4909      	ldr	r1, [pc, #36]	@ (80026f4 <R1_TIM1_UP_IRQHandler+0x30>)
 80026d0:	6893      	ldr	r3, [r2, #8]
 80026d2:	400b      	ands	r3, r1
 80026d4:	2104      	movs	r1, #4
 80026d6:	430b      	orrs	r3, r1
 80026d8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80026da:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <R1_TIM1_UP_IRQHandler+0x34>)
 80026dc:	316c      	adds	r1, #108	@ 0x6c
 80026de:	6853      	ldr	r3, [r2, #4]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 80026e4:	23c8      	movs	r3, #200	@ 0xc8
 80026e6:	2201      	movs	r2, #1
 80026e8:	52c2      	strh	r2, [r0, r3]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 80026ea:	307a      	adds	r0, #122	@ 0x7a
}
 80026ec:	4770      	bx	lr
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40012400 	.word	0x40012400
 80026f4:	7fffffe8 	.word	0x7fffffe8
 80026f8:	40012c00 	.word	0x40012c00

080026fc <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80026fc:	23cc      	movs	r3, #204	@ 0xcc
 80026fe:	58c2      	ldr	r2, [r0, r3]
{
 8002700:	b530      	push	{r4, r5, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002702:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 8002704:	2c00      	cmp	r4, #0
 8002706:	d005      	beq.n	8002714 <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002708:	2104      	movs	r1, #4
 800270a:	68d3      	ldr	r3, [r2, #12]
 800270c:	3b01      	subs	r3, #1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4099      	lsls	r1, r3
 8002712:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 8002714:	21c6      	movs	r1, #198	@ 0xc6
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 8002716:	2424      	movs	r4, #36	@ 0x24
  pHandle->TCCnt++;
 8002718:	5c43      	ldrb	r3, [r0, r1]
 800271a:	3301      	adds	r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 8002720:	5d12      	ldrb	r2, [r2, r4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d110      	bne.n	8002748 <R1_DMAx_TC_IRQHandler+0x4c>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8002726:	2398      	movs	r3, #152	@ 0x98
 8002728:	58c4      	ldr	r4, [r0, r3]
 800272a:	3304      	adds	r3, #4
 800272c:	58c2      	ldr	r2, [r0, r3]
 800272e:	3b08      	subs	r3, #8
 8002730:	58c5      	ldr	r5, [r0, r3]
 8002732:	3b0c      	subs	r3, #12
 8002734:	50c5      	str	r5, [r0, r3]
 8002736:	3304      	adds	r3, #4
 8002738:	50c4      	str	r4, [r0, r3]
 800273a:	3304      	adds	r3, #4
 800273c:	50c2      	str	r2, [r0, r3]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 800273e:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 8002740:	2201      	movs	r2, #1
    pHandle->TCCnt = 0;
 8002742:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 8002744:	33c9      	adds	r3, #201	@ 0xc9
 8002746:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 8002748:	307a      	adds	r0, #122	@ 0x7a
}
 800274a:	bd30      	pop	{r4, r5, pc}

0800274c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800274c:	4954      	ldr	r1, [pc, #336]	@ (80028a0 <RCM_RegisterRegConv+0x154>)
{
 800274e:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002750:	680b      	ldr	r3, [r1, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d030      	beq.n	80027b8 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002756:	791a      	ldrb	r2, [r3, #4]
 8002758:	7904      	ldrb	r4, [r0, #4]
 800275a:	42a2      	cmp	r2, r4
 800275c:	d019      	beq.n	8002792 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800275e:	684d      	ldr	r5, [r1, #4]
 8002760:	2d00      	cmp	r5, #0
 8002762:	d03d      	beq.n	80027e0 <RCM_RegisterRegConv+0x94>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002764:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 8002766:	23ff      	movs	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002768:	42a2      	cmp	r2, r4
 800276a:	d02d      	beq.n	80027c8 <RCM_RegisterRegConv+0x7c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800276c:	688d      	ldr	r5, [r1, #8]
 800276e:	2d00      	cmp	r5, #0
 8002770:	d068      	beq.n	8002844 <RCM_RegisterRegConv+0xf8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002772:	792a      	ldrb	r2, [r5, #4]
 8002774:	42a2      	cmp	r2, r4
 8002776:	d02d      	beq.n	80027d4 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002778:	68cd      	ldr	r5, [r1, #12]
 800277a:	2d00      	cmp	r5, #0
 800277c:	d100      	bne.n	8002780 <RCM_RegisterRegConv+0x34>
 800277e:	e06e      	b.n	800285e <RCM_RegisterRegConv+0x112>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002780:	792a      	ldrb	r2, [r5, #4]
 8002782:	42a2      	cmp	r2, r4
 8002784:	d100      	bne.n	8002788 <RCM_RegisterRegConv+0x3c>
 8002786:	e071      	b.n	800286c <RCM_RegisterRegConv+0x120>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8002788:	2b03      	cmp	r3, #3
 800278a:	d933      	bls.n	80027f4 <RCM_RegisterRegConv+0xa8>
 800278c:	23ff      	movs	r3, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800278e:	7303      	strb	r3, [r0, #12]
}
 8002790:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d030      	beq.n	80027fc <RCM_RegisterRegConv+0xb0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800279a:	684d      	ldr	r5, [r1, #4]
 800279c:	2d00      	cmp	r5, #0
 800279e:	d1e1      	bne.n	8002764 <RCM_RegisterRegConv+0x18>
 80027a0:	688d      	ldr	r5, [r1, #8]
      i++;
 80027a2:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027a4:	2d00      	cmp	r5, #0
 80027a6:	d1e4      	bne.n	8002772 <RCM_RegisterRegConv+0x26>
 80027a8:	68cd      	ldr	r5, [r1, #12]
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d027      	beq.n	80027fe <RCM_RegisterRegConv+0xb2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027ae:	792e      	ldrb	r6, [r5, #4]
 80027b0:	7904      	ldrb	r4, [r0, #4]
 80027b2:	42a6      	cmp	r6, r4
 80027b4:	d123      	bne.n	80027fe <RCM_RegisterRegConv+0xb2>
 80027b6:	e05a      	b.n	800286e <RCM_RegisterRegConv+0x122>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027b8:	684d      	ldr	r5, [r1, #4]
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	d05d      	beq.n	800287a <RCM_RegisterRegConv+0x12e>
 80027be:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027c0:	792a      	ldrb	r2, [r5, #4]
    uint8_t i = 0;
 80027c2:	2300      	movs	r3, #0
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027c4:	42a2      	cmp	r2, r4
 80027c6:	d1d1      	bne.n	800276c <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80027c8:	682d      	ldr	r5, [r5, #0]
 80027ca:	6802      	ldr	r2, [r0, #0]
 80027cc:	4295      	cmp	r5, r2
 80027ce:	d1cd      	bne.n	800276c <RCM_RegisterRegConv+0x20>
      i++;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e014      	b.n	80027fe <RCM_RegisterRegConv+0xb2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80027d4:	682d      	ldr	r5, [r5, #0]
 80027d6:	6802      	ldr	r2, [r0, #0]
 80027d8:	4295      	cmp	r5, r2
 80027da:	d1cd      	bne.n	8002778 <RCM_RegisterRegConv+0x2c>
      i++;
 80027dc:	2302      	movs	r3, #2
 80027de:	e00e      	b.n	80027fe <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027e0:	688d      	ldr	r5, [r1, #8]
      i++;
 80027e2:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	d1c4      	bne.n	8002772 <RCM_RegisterRegConv+0x26>
 80027e8:	68cd      	ldr	r5, [r1, #12]
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d002      	beq.n	80027f4 <RCM_RegisterRegConv+0xa8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027ee:	792a      	ldrb	r2, [r5, #4]
 80027f0:	42a2      	cmp	r2, r4
 80027f2:	d03b      	beq.n	800286c <RCM_RegisterRegConv+0x120>
 80027f4:	021c      	lsls	r4, r3, #8
 80027f6:	6802      	ldr	r2, [r0, #0]
 80027f8:	431c      	orrs	r4, r3
 80027fa:	e002      	b.n	8002802 <RCM_RegisterRegConv+0xb6>
    uint8_t i = 0;
 80027fc:	2300      	movs	r3, #0
    while (i < RCM_MAX_CONV)
 80027fe:	021c      	lsls	r4, r3, #8
 8002800:	431c      	orrs	r4, r3
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002802:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 8002804:	009d      	lsls	r5, r3, #2
 8002806:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002808:	4926      	ldr	r1, [pc, #152]	@ (80028a4 <RCM_RegisterRegConv+0x158>)
 800280a:	00dd      	lsls	r5, r3, #3
 800280c:	506e      	str	r6, [r5, r1]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800280e:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002810:	07c9      	lsls	r1, r1, #31
 8002812:	d40e      	bmi.n	8002832 <RCM_RegisterRegConv+0xe6>
  MODIFY_REG(ADCx->CR,
 8002814:	6895      	ldr	r5, [r2, #8]
 8002816:	4924      	ldr	r1, [pc, #144]	@ (80028a8 <RCM_RegisterRegConv+0x15c>)
 8002818:	400d      	ands	r5, r1
 800281a:	3118      	adds	r1, #24
 800281c:	4329      	orrs	r1, r5
 800281e:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002820:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002822:	2900      	cmp	r1, #0
 8002824:	dbfc      	blt.n	8002820 <RCM_RegisterRegConv+0xd4>
  MODIFY_REG(ADCx->CR,
 8002826:	6891      	ldr	r1, [r2, #8]
 8002828:	4d1f      	ldr	r5, [pc, #124]	@ (80028a8 <RCM_RegisterRegConv+0x15c>)
 800282a:	4029      	ands	r1, r5
 800282c:	2501      	movs	r5, #1
 800282e:	4329      	orrs	r1, r5
 8002830:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 8002832:	2500      	movs	r5, #0
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	491d      	ldr	r1, [pc, #116]	@ (80028ac <RCM_RegisterRegConv+0x160>)
 8002838:	18d2      	adds	r2, r2, r3
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	5455      	strb	r5, [r2, r1]
      RCM_NoInj_array[handle].prev = handle;
 800283e:	3104      	adds	r1, #4
 8002840:	528c      	strh	r4, [r1, r2]
 8002842:	e7a4      	b.n	800278e <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002844:	2b04      	cmp	r3, #4
 8002846:	d91e      	bls.n	8002886 <RCM_RegisterRegConv+0x13a>
 8002848:	68cb      	ldr	r3, [r1, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <RCM_RegisterRegConv+0x108>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800284e:	791a      	ldrb	r2, [r3, #4]
 8002850:	4294      	cmp	r4, r2
 8002852:	d01c      	beq.n	800288e <RCM_RegisterRegConv+0x142>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <RCM_RegisterRegConv+0x164>)
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	1c1c      	adds	r4, r3, #0
      i++;
 800285a:	2302      	movs	r3, #2
 800285c:	e7d1      	b.n	8002802 <RCM_RegisterRegConv+0xb6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800285e:	2b04      	cmp	r3, #4
 8002860:	d9c8      	bls.n	80027f4 <RCM_RegisterRegConv+0xa8>
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <RCM_RegisterRegConv+0x168>)
 8002864:	6802      	ldr	r2, [r0, #0]
 8002866:	1c1c      	adds	r4, r3, #0
 8002868:	2303      	movs	r3, #3
 800286a:	e7ca      	b.n	8002802 <RCM_RegisterRegConv+0xb6>
 800286c:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800286e:	682c      	ldr	r4, [r5, #0]
 8002870:	4294      	cmp	r4, r2
 8002872:	d000      	beq.n	8002876 <RCM_RegisterRegConv+0x12a>
 8002874:	e788      	b.n	8002788 <RCM_RegisterRegConv+0x3c>
      i++;
 8002876:	2303      	movs	r3, #3
    while (i < RCM_MAX_CONV)
 8002878:	e7c1      	b.n	80027fe <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800287a:	688d      	ldr	r5, [r1, #8]
    uint8_t i = 0;
 800287c:	2300      	movs	r3, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800287e:	2d00      	cmp	r5, #0
 8002880:	d003      	beq.n	800288a <RCM_RegisterRegConv+0x13e>
 8002882:	7904      	ldrb	r4, [r0, #4]
 8002884:	e775      	b.n	8002772 <RCM_RegisterRegConv+0x26>
 8002886:	2300      	movs	r3, #0
 8002888:	e7ae      	b.n	80027e8 <RCM_RegisterRegConv+0x9c>
 800288a:	6802      	ldr	r2, [r0, #0]
 800288c:	e78c      	b.n	80027a8 <RCM_RegisterRegConv+0x5c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800288e:	681c      	ldr	r4, [r3, #0]
 8002890:	6802      	ldr	r2, [r0, #0]
      i++;
 8002892:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002894:	42a2      	cmp	r2, r4
 8002896:	d0b2      	beq.n	80027fe <RCM_RegisterRegConv+0xb2>
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <RCM_RegisterRegConv+0x164>)
 800289a:	1c1c      	adds	r4, r3, #0
      i++;
 800289c:	2302      	movs	r3, #2
 800289e:	e7b0      	b.n	8002802 <RCM_RegisterRegConv+0xb6>
 80028a0:	200006cc 	.word	0x200006cc
 80028a4:	200006ac 	.word	0x200006ac
 80028a8:	7fffffe8 	.word	0x7fffffe8
 80028ac:	20000694 	.word	0x20000694
 80028b0:	00000202 	.word	0x00000202
 80028b4:	00000303 	.word	0x00000303

080028b8 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 80028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 80028ba:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 80028bc:	4b57      	ldr	r3, [pc, #348]	@ (8002a1c <RCM_ExecRegularConv+0x164>)
 80028be:	0050      	lsls	r0, r2, #1
 80028c0:	1881      	adds	r1, r0, r2
 80028c2:	0049      	lsls	r1, r1, #1
 80028c4:	5c59      	ldrb	r1, [r3, r1]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d139      	bne.n	800293e <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 80028ca:	7819      	ldrb	r1, [r3, #0]
 80028cc:	2900      	cmp	r1, #0
 80028ce:	d113      	bne.n	80028f8 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 80028d0:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 80028d2:	799c      	ldrb	r4, [r3, #6]
 80028d4:	2c00      	cmp	r4, #0
 80028d6:	d000      	beq.n	80028da <RCM_ExecRegularConv+0x22>
 80028d8:	e071      	b.n	80029be <RCM_ExecRegularConv+0x106>
 80028da:	7b1c      	ldrb	r4, [r3, #12]
 80028dc:	2c00      	cmp	r4, #0
 80028de:	d000      	beq.n	80028e2 <RCM_ExecRegularConv+0x2a>
 80028e0:	e073      	b.n	80029ca <RCM_ExecRegularConv+0x112>
 80028e2:	7c9e      	ldrb	r6, [r3, #18]
 80028e4:	2e00      	cmp	r6, #0
 80028e6:	d100      	bne.n	80028ea <RCM_ExecRegularConv+0x32>
 80028e8:	e08b      	b.n	8002a02 <RCM_ExecRegularConv+0x14a>
      {
        if (RCM_NoInj_array[i].next > handle)
 80028ea:	7ddd      	ldrb	r5, [r3, #23]
 80028ec:	4295      	cmp	r5, r2
 80028ee:	d800      	bhi.n	80028f2 <RCM_ExecRegularConv+0x3a>
 80028f0:	e090      	b.n	8002a14 <RCM_ExecRegularConv+0x15c>
 80028f2:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 80028f4:	2403      	movs	r4, #3
 80028f6:	e005      	b.n	8002904 <RCM_ExecRegularConv+0x4c>
        if (RCM_NoInj_array[i].next > handle)
 80028f8:	795d      	ldrb	r5, [r3, #5]
  uint8_t i=0;
 80028fa:	2100      	movs	r1, #0
        if (RCM_NoInj_array[i].next > handle)
 80028fc:	42aa      	cmp	r2, r5
 80028fe:	d2e8      	bcs.n	80028d2 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 8002900:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 8002902:	2400      	movs	r4, #0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8002904:	1881      	adds	r1, r0, r2
 8002906:	0049      	lsls	r1, r1, #1
 8002908:	1859      	adds	r1, r3, r1
 800290a:	714d      	strb	r5, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 800290c:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 800290e:	0061      	lsls	r1, r4, #1
 8002910:	1909      	adds	r1, r1, r4
 8002912:	0049      	lsls	r1, r1, #1
 8002914:	1859      	adds	r1, r3, r1
       /* We find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
 8002916:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8002918:	0069      	lsls	r1, r5, #1
 800291a:	1949      	adds	r1, r1, r5
 800291c:	0049      	lsls	r1, r1, #1
 800291e:	1859      	adds	r1, r3, r1
 8002920:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002922:	493f      	ldr	r1, [pc, #252]	@ (8002a20 <RCM_ExecRegularConv+0x168>)
 8002924:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 8002926:	2601      	movs	r6, #1
 8002928:	1884      	adds	r4, r0, r2
 800292a:	0064      	lsls	r4, r4, #1
 800292c:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800292e:	006c      	lsls	r4, r5, #1
 8002930:	1964      	adds	r4, r4, r5
 8002932:	0064      	lsls	r4, r4, #1
 8002934:	191c      	adds	r4, r3, r4
 8002936:	7864      	ldrb	r4, [r4, #1]
 8002938:	2c01      	cmp	r4, #1
 800293a:	d000      	beq.n	800293e <RCM_ExecRegularConv+0x86>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 800293c:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800293e:	24ca      	movs	r4, #202	@ 0xca
 8002940:	4938      	ldr	r1, [pc, #224]	@ (8002a24 <RCM_ExecRegularConv+0x16c>)
 8002942:	5d09      	ldrb	r1, [r1, r4]
 8002944:	2900      	cmp	r1, #0
 8002946:	d135      	bne.n	80029b4 <RCM_ExecRegularConv+0xfc>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002948:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 800294a:	4e37      	ldr	r6, [pc, #220]	@ (8002a28 <RCM_ExecRegularConv+0x170>)
 800294c:	0091      	lsls	r1, r2, #2
 800294e:	5875      	ldr	r5, [r6, r1]
 8002950:	6829      	ldr	r1, [r5, #0]
 8002952:	68cc      	ldr	r4, [r1, #12]
 8002954:	43bc      	bics	r4, r7
 8002956:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002958:	68cc      	ldr	r4, [r1, #12]
 800295a:	4f34      	ldr	r7, [pc, #208]	@ (8002a2c <RCM_ExecRegularConv+0x174>)
 800295c:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800295e:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002960:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002962:	694c      	ldr	r4, [r1, #20]
 8002964:	43bc      	bics	r4, r7
 8002966:	68af      	ldr	r7, [r5, #8]
 8002968:	433c      	orrs	r4, r7
 800296a:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800296c:	2480      	movs	r4, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800296e:	792d      	ldrb	r5, [r5, #4]
 8002970:	01a4      	lsls	r4, r4, #6
 8002972:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002974:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002976:	0b64      	lsrs	r4, r4, #13
 8002978:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800297a:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 800297c:	688c      	ldr	r4, [r1, #8]
 800297e:	4f2c      	ldr	r7, [pc, #176]	@ (8002a30 <RCM_ExecRegularConv+0x178>)
 8002980:	403c      	ands	r4, r7
 8002982:	432c      	orrs	r4, r5
 8002984:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002986:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 8002988:	4225      	tst	r5, r4
 800298a:	d0fc      	beq.n	8002986 <RCM_ExecRegularConv+0xce>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 800298c:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800298e:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002990:	1881      	adds	r1, r0, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002992:	4d23      	ldr	r5, [pc, #140]	@ (8002a20 <RCM_ExecRegularConv+0x168>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002994:	0049      	lsls	r1, r1, #1
 8002996:	1859      	adds	r1, r3, r1
 8002998:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 800299a:	782c      	ldrb	r4, [r5, #0]
 800299c:	00a4      	lsls	r4, r4, #2
 800299e:	5934      	ldr	r4, [r6, r4]
 80029a0:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80029a2:	68f4      	ldr	r4, [r6, #12]
 80029a4:	43bc      	bics	r4, r7
 80029a6:	3f02      	subs	r7, #2
 80029a8:	433c      	orrs	r4, r7
 80029aa:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80029ac:	794c      	ldrb	r4, [r1, #5]
 80029ae:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 80029b0:	2402      	movs	r4, #2
 80029b2:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80029b4:	1880      	adds	r0, r0, r2
 80029b6:	0040      	lsls	r0, r0, #1
 80029b8:	181b      	adds	r3, r3, r0
  return (retVal);
 80029ba:	8858      	ldrh	r0, [r3, #2]
}
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCM_NoInj_array[i].next > handle)
 80029be:	7add      	ldrb	r5, [r3, #11]
 80029c0:	42aa      	cmp	r2, r5
 80029c2:	d316      	bcc.n	80029f2 <RCM_ExecRegularConv+0x13a>
      if (true == RCM_NoInj_array [i].enable)
 80029c4:	7b19      	ldrb	r1, [r3, #12]
 80029c6:	2900      	cmp	r1, #0
 80029c8:	d016      	beq.n	80029f8 <RCM_ExecRegularConv+0x140>
        if (RCM_NoInj_array[i].next > handle)
 80029ca:	7c5d      	ldrb	r5, [r3, #17]
 80029cc:	42aa      	cmp	r2, r5
 80029ce:	d31e      	bcc.n	8002a0e <RCM_ExecRegularConv+0x156>
      if (true == RCM_NoInj_array [i].enable)
 80029d0:	7c99      	ldrb	r1, [r3, #18]
 80029d2:	2602      	movs	r6, #2
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d000      	beq.n	80029da <RCM_ExecRegularConv+0x122>
 80029d8:	e787      	b.n	80028ea <RCM_ExecRegularConv+0x32>
         formerNext = RCM_NoInj_array[LastEnable].next;
 80029da:	0034      	movs	r4, r6
 80029dc:	0061      	lsls	r1, r4, #1
 80029de:	1909      	adds	r1, r1, r4
 80029e0:	0049      	lsls	r1, r1, #1
 80029e2:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 80029e4:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 80029e6:	794d      	ldrb	r5, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80029e8:	0064      	lsls	r4, r4, #1
 80029ea:	191c      	adds	r4, r3, r4
 80029ec:	7165      	strb	r5, [r4, #5]
         RCM_NoInj_array[handle].prev = LastEnable;
 80029ee:	7126      	strb	r6, [r4, #4]
 80029f0:	e791      	b.n	8002916 <RCM_ExecRegularConv+0x5e>
        if (RCM_NoInj_array[i].next > handle)
 80029f2:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 80029f4:	2401      	movs	r4, #1
 80029f6:	e785      	b.n	8002904 <RCM_ExecRegularConv+0x4c>
 80029f8:	7c99      	ldrb	r1, [r3, #18]
 80029fa:	2601      	movs	r6, #1
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d0ec      	beq.n	80029da <RCM_ExecRegularConv+0x122>
 8002a00:	e773      	b.n	80028ea <RCM_ExecRegularConv+0x32>
       if (LastEnable != RCM_MAX_CONV )
 8002a02:	2904      	cmp	r1, #4
 8002a04:	d1e9      	bne.n	80029da <RCM_ExecRegularConv+0x122>
         RCM_currentHandle = handle;
 8002a06:	4906      	ldr	r1, [pc, #24]	@ (8002a20 <RCM_ExecRegularConv+0x168>)
 8002a08:	0015      	movs	r5, r2
 8002a0a:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 8002a0c:	e78b      	b.n	8002926 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8002a0e:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 8002a10:	2402      	movs	r4, #2
 8002a12:	e777      	b.n	8002904 <RCM_ExecRegularConv+0x4c>
 8002a14:	2403      	movs	r4, #3
 8002a16:	2603      	movs	r6, #3
 8002a18:	e7e0      	b.n	80029dc <RCM_ExecRegularConv+0x124>
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	20000694 	.word	0x20000694
 8002a20:	20000690 	.word	0x20000690
 8002a24:	20000148 	.word	0x20000148
 8002a28:	200006cc 	.word	0x200006cc
 8002a2c:	fffff23f 	.word	0xfffff23f
 8002a30:	7fffffe8 	.word	0x7fffffe8

08002a34 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <RCM_ExecUserConv+0x50>)
 8002a38:	681c      	ldr	r4, [r3, #0]
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d004      	beq.n	8002a48 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002a3e:	4d12      	ldr	r5, [pc, #72]	@ (8002a88 <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 8002a40:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002a42:	782b      	ldrb	r3, [r5, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d000      	beq.n	8002a4a <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 8002a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002a4a:	0020      	movs	r0, r4
 8002a4c:	f7ff ff34 	bl	80028b8 <RCM_ExecRegularConv>
 8002a50:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a52:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002a54:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a56:	1992      	adds	r2, r2, r6
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <RCM_ExecUserConv+0x5c>)
 8002a5a:	0052      	lsls	r2, r2, #1
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002a60:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8002a66:	2302      	movs	r3, #2
 8002a68:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <RCM_ExecUserConv+0x60>)
 8002a6c:	00f6      	lsls	r6, r6, #3
 8002a6e:	58f7      	ldr	r7, [r6, r3]
 8002a70:	2f00      	cmp	r7, #0
 8002a72:	d0e9      	beq.n	8002a48 <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002a74:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002a76:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002a78:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	47b8      	blx	r7
}
 8002a80:	e7e2      	b.n	8002a48 <RCM_ExecUserConv+0x14>
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	20000688 	.word	0x20000688
 8002a88:	2000068c 	.word	0x2000068c
 8002a8c:	2000068e 	.word	0x2000068e
 8002a90:	20000694 	.word	0x20000694
 8002a94:	200006ac 	.word	0x200006ac

08002a98 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8002a98:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002a9a:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <RCM_ExecNextConv+0x5c>)
 8002a9c:	4916      	ldr	r1, [pc, #88]	@ (8002af8 <RCM_ExecNextConv+0x60>)
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	0053      	lsls	r3, r2, #1
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	5c58      	ldrb	r0, [r3, r1]
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d021      	beq.n	8002af0 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002aac:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002aae:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002ab0:	4812      	ldr	r0, [pc, #72]	@ (8002afc <RCM_ExecNextConv+0x64>)
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002ab6:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002ab8:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002aba:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002abc:	68d0      	ldr	r0, [r2, #12]
 8002abe:	43b0      	bics	r0, r6
 8002ac0:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002ac2:	68d0      	ldr	r0, [r2, #12]
 8002ac4:	4e0e      	ldr	r6, [pc, #56]	@ (8002b00 <RCM_ExecNextConv+0x68>)
 8002ac6:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002ac8:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002aca:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002acc:	6950      	ldr	r0, [r2, #20]
 8002ace:	43b0      	bics	r0, r6
 8002ad0:	68a6      	ldr	r6, [r4, #8]
 8002ad2:	4330      	orrs	r0, r6
 8002ad4:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002ad6:	7920      	ldrb	r0, [r4, #4]
 8002ad8:	2401      	movs	r4, #1
 8002ada:	0026      	movs	r6, r4
 8002adc:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ade:	0370      	lsls	r0, r6, #13
 8002ae0:	0b40      	lsrs	r0, r0, #13
 8002ae2:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 8002ae4:	6890      	ldr	r0, [r2, #8]
 8002ae6:	4e07      	ldr	r6, [pc, #28]	@ (8002b04 <RCM_ExecNextConv+0x6c>)
 8002ae8:	4030      	ands	r0, r6
 8002aea:	4328      	orrs	r0, r5
 8002aec:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002aee:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002af0:	bd70      	pop	{r4, r5, r6, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	20000690 	.word	0x20000690
 8002af8:	20000694 	.word	0x20000694
 8002afc:	200006cc 	.word	0x200006cc
 8002b00:	fffff23f 	.word	0xfffff23f
 8002b04:	7fffffe8 	.word	0x7fffffe8

08002b08 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8002b08:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002b0a:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002b0c:	4d11      	ldr	r5, [pc, #68]	@ (8002b54 <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002b10:	7828      	ldrb	r0, [r5, #0]
 8002b12:	4912      	ldr	r1, [pc, #72]	@ (8002b5c <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002b14:	0082      	lsls	r2, r0, #2
 8002b16:	58d3      	ldr	r3, [r2, r3]
 8002b18:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002b1a:	6833      	ldr	r3, [r6, #0]
 8002b1c:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002b1e:	0043      	lsls	r3, r0, #1
 8002b20:	181a      	adds	r2, r3, r0
 8002b22:	0052      	lsls	r2, r2, #1
 8002b24:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002b26:	7854      	ldrb	r4, [r2, #1]
 8002b28:	43bc      	bics	r4, r7
 8002b2a:	d002      	beq.n	8002b32 <RCM_ReadOngoingConv+0x2a>
 8002b2c:	4664      	mov	r4, ip
 8002b2e:	0764      	lsls	r4, r4, #29
 8002b30:	d405      	bmi.n	8002b3e <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002b32:	181b      	adds	r3, r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	18c9      	adds	r1, r1, r3
 8002b38:	794b      	ldrb	r3, [r1, #5]
 8002b3a:	702b      	strb	r3, [r5, #0]
}
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002b3e:	6c34      	ldr	r4, [r6, #64]	@ 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8002b40:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8002b42:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002b44:	2403      	movs	r4, #3
 8002b46:	68f2      	ldr	r2, [r6, #12]
 8002b48:	43a2      	bics	r2, r4
 8002b4a:	3c02      	subs	r4, #2
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	60f2      	str	r2, [r6, #12]
}
 8002b50:	e7ef      	b.n	8002b32 <RCM_ReadOngoingConv+0x2a>
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	20000690 	.word	0x20000690
 8002b58:	200006cc 	.word	0x200006cc
 8002b5c:	20000694 	.word	0x20000694

08002b60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b60:	2201      	movs	r2, #1
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_MspInit+0x2c>)
{
 8002b64:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	6999      	ldr	r1, [r3, #24]
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	6199      	str	r1, [r3, #24]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	0549      	lsls	r1, r1, #21
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	61da      	str	r2, [r3, #28]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	400b      	ands	r3, r1
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b86:	b002      	add	sp, #8
 8002b88:	4770      	bx	lr
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	0004      	movs	r4, r0
 8002b94:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	2214      	movs	r2, #20
 8002b98:	2100      	movs	r1, #0
 8002b9a:	a804      	add	r0, sp, #16
 8002b9c:	f002 fb34 	bl	8005208 <memset>
  if(hadc->Instance==ADC1)
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_ADC_MspInit+0xb0>)
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ba8:	b00a      	add	sp, #40	@ 0x28
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bac:	2180      	movs	r1, #128	@ 0x80
 8002bae:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_ADC_MspInit+0xb4>)
 8002bb0:	0089      	lsls	r1, r1, #2
 8002bb2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002bb4:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	619a      	str	r2, [r3, #24]
 8002bba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bbe:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	0289      	lsls	r1, r1, #10
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	9202      	str	r2, [sp, #8]
 8002bd8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	02c9      	lsls	r1, r1, #11
 8002bde:	430a      	orrs	r2, r1
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002be4:	2220      	movs	r2, #32
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	400b      	ands	r3, r1
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002bec:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002bee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002bf0:	9204      	str	r2, [sp, #16]
 8002bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002bf4:	f000 fc62 	bl	80034bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002bfc:	4812      	ldr	r0, [pc, #72]	@ (8002c48 <HAL_ADC_MspInit+0xb8>)
 8002bfe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002c00:	9204      	str	r2, [sp, #16]
 8002c02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f000 fc59 	bl	80034bc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002c0a:	4d10      	ldr	r5, [pc, #64]	@ (8002c4c <HAL_ADC_MspInit+0xbc>)
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002c0e:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8002c10:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c16:	3380      	adds	r3, #128	@ 0x80
 8002c18:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002c20:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c22:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c24:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002c26:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002c28:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002c2a:	f000 fc13 	bl	8003454 <HAL_DMA_Init>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002c32:	6325      	str	r5, [r4, #48]	@ 0x30
 8002c34:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002c36:	e7b7      	b.n	8002ba8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002c38:	f7fd fe1a 	bl	8000870 <Error_Handler>
 8002c3c:	e7f9      	b.n	8002c32 <HAL_ADC_MspInit+0xa2>
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	40012400 	.word	0x40012400
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	2000058c 	.word	0x2000058c
 8002c50:	40020008 	.word	0x40020008

08002c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c54:	b510      	push	{r4, lr}
 8002c56:	0004      	movs	r4, r0
 8002c58:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5a:	2214      	movs	r2, #20
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	a804      	add	r0, sp, #16
 8002c60:	f002 fad2 	bl	8005208 <memset>
  if(hspi->Instance==SPI1)
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_SPI_MspInit+0x88>)
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c6c:	b00a      	add	sp, #40	@ 0x28
 8002c6e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_SPI_MspInit+0x8c>)
 8002c74:	0149      	lsls	r1, r1, #5
 8002c76:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c80:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c82:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c86:	9201      	str	r2, [sp, #4]
 8002c88:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	0289      	lsls	r1, r1, #10
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c98:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	9202      	str	r2, [sp, #8]
 8002c9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	02c9      	lsls	r1, r1, #11
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	400b      	ands	r3, r1
 8002cac:	9303      	str	r3, [sp, #12]
 8002cae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cb6:	9204      	str	r2, [sp, #16]
 8002cb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cba:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f000 fbfe 	bl	80034bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cc0:	2338      	movs	r3, #56	@ 0x38
 8002cc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	3b36      	subs	r3, #54	@ 0x36
 8002cc6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cca:	4806      	ldr	r0, [pc, #24]	@ (8002ce4 <HAL_SPI_MspInit+0x90>)
 8002ccc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd0:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002cd2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	f000 fbf2 	bl	80034bc <HAL_GPIO_Init>
}
 8002cd8:	e7c8      	b.n	8002c6c <HAL_SPI_MspInit+0x18>
 8002cda:	46c0      	nop			@ (mov r8, r8)
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	48000400 	.word	0x48000400

08002ce8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ce8:	b530      	push	{r4, r5, lr}
 8002cea:	0004      	movs	r4, r0
 8002cec:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	2214      	movs	r2, #20
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	a802      	add	r0, sp, #8
 8002cf4:	f002 fa88 	bl	8005208 <memset>
  if(htim_pwm->Instance==TIM1)
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_TIM_PWM_MspInit+0xd8>)
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d00:	b009      	add	sp, #36	@ 0x24
 8002d02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d04:	2180      	movs	r1, #128	@ 0x80
 8002d06:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc4 <HAL_TIM_PWM_MspInit+0xdc>)
 8002d08:	0109      	lsls	r1, r1, #4
 8002d0a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	482e      	ldr	r0, [pc, #184]	@ (8002dc8 <HAL_TIM_PWM_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	619a      	str	r2, [r3, #24]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d18:	9200      	str	r2, [sp, #0]
 8002d1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	02c9      	lsls	r1, r1, #11
 8002d20:	430a      	orrs	r2, r1
 8002d22:	615a      	str	r2, [r3, #20]
 8002d24:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002d26:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	400b      	ands	r3, r1
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	0152      	lsls	r2, r2, #5
 8002d32:	9202      	str	r2, [sp, #8]
 8002d34:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d36:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002d38:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f000 fbbc 	bl	80034bc <HAL_GPIO_Init>
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002d44:	4d21      	ldr	r5, [pc, #132]	@ (8002dcc <HAL_TIM_PWM_MspInit+0xe4>)
 8002d46:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <HAL_TIM_PWM_MspInit+0xe8>)
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002d48:	0028      	movs	r0, r5
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002d4a:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002d54:	3380      	adds	r3, #128	@ 0x80
 8002d56:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d58:	3380      	adds	r3, #128	@ 0x80
 8002d5a:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8002d62:	2320      	movs	r3, #32
 8002d64:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002d6c:	f000 fb72 	bl	8003454 <HAL_DMA_Init>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d11f      	bne.n	8002db4 <HAL_TIM_PWM_MspInit+0xcc>
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <HAL_TIM_PWM_MspInit+0xec>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002d76:	6325      	str	r5, [r4, #48]	@ 0x30
 8002d78:	626c      	str	r4, [r5, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002d7a:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002d7c:	6365      	str	r5, [r4, #52]	@ 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002d7e:	4d16      	ldr	r5, [pc, #88]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0xf0>)
 8002d80:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d82:	2310      	movs	r3, #16
 8002d84:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002d8a:	3380      	adds	r3, #128	@ 0x80
 8002d8c:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d8e:	3380      	adds	r3, #128	@ 0x80
 8002d90:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002d98:	2320      	movs	r3, #32
 8002d9a:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002d9c:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002d9e:	0028      	movs	r0, r5
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002da4:	f000 fb56 	bl	8003454 <HAL_DMA_Init>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d106      	bne.n	8002dba <HAL_TIM_PWM_MspInit+0xd2>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002dac:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8002dae:	62e5      	str	r5, [r4, #44]	@ 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002db0:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002db2:	e7a5      	b.n	8002d00 <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 8002db4:	f7fd fd5c 	bl	8000870 <Error_Handler>
 8002db8:	e7dc      	b.n	8002d74 <HAL_TIM_PWM_MspInit+0x8c>
      Error_Handler();
 8002dba:	f7fd fd59 	bl	8000870 <Error_Handler>
 8002dbe:	e7f5      	b.n	8002dac <HAL_TIM_PWM_MspInit+0xc4>
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	20000454 	.word	0x20000454
 8002dd0:	40020044 	.word	0x40020044
 8002dd4:	40020058 	.word	0x40020058
 8002dd8:	20000410 	.word	0x20000410

08002ddc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	0004      	movs	r4, r0
 8002de0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	2214      	movs	r2, #20
 8002de4:	2100      	movs	r1, #0
 8002de6:	a802      	add	r0, sp, #8
 8002de8:	f002 fa0e 	bl	8005208 <memset>
  if(htim_encoder->Instance==TIM2)
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002df6:	b008      	add	sp, #32
 8002df8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <HAL_TIM_Encoder_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e00:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e02:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e04:	4311      	orrs	r1, r2
 8002e06:	61d9      	str	r1, [r3, #28]
 8002e08:	69d9      	ldr	r1, [r3, #28]
 8002e0a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	0289      	lsls	r1, r1, #10
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]
 8002e1a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002e1c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	400b      	ands	r3, r1
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002e24:	2302      	movs	r3, #2
 8002e26:	9202      	str	r2, [sp, #8]
 8002e28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002e2a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002e2e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f000 fb44 	bl	80034bc <HAL_GPIO_Init>
}
 8002e34:	e7df      	b.n	8002df6 <HAL_TIM_Encoder_MspInit+0x1a>
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e3c:	b5d0      	push	{r4, r6, r7, lr}
 8002e3e:	0004      	movs	r4, r0
 8002e40:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	2214      	movs	r2, #20
 8002e44:	2100      	movs	r1, #0
 8002e46:	a802      	add	r0, sp, #8
 8002e48:	f002 f9de 	bl	8005208 <memset>
  if(htim->Instance==TIM1)
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_TIM_MspPostInit+0x7c>)
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e54:	b008      	add	sp, #32
 8002e56:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_TIM_MspPostInit+0x80>)
 8002e5c:	02c9      	lsls	r1, r1, #11
 8002e5e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e60:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	430a      	orrs	r2, r1
 8002e64:	615a      	str	r2, [r3, #20]
 8002e66:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e68:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	0289      	lsls	r1, r1, #10
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e7c:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	400b      	ands	r3, r1
 8002e80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e82:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e86:	2302      	movs	r3, #2
 8002e88:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8a:	a902      	add	r1, sp, #8
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e8e:	9202      	str	r2, [sp, #8]
 8002e90:	9303      	str	r3, [sp, #12]
 8002e92:	9604      	str	r6, [sp, #16]
 8002e94:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e96:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f000 fb10 	bl	80034bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002e9c:	22e0      	movs	r2, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	a902      	add	r1, sp, #8
 8002ea6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002ea8:	9202      	str	r2, [sp, #8]
 8002eaa:	9303      	str	r3, [sp, #12]
 8002eac:	9604      	str	r6, [sp, #16]
 8002eae:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002eb0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f000 fb03 	bl	80034bc <HAL_GPIO_Init>
}
 8002eb6:	e7cd      	b.n	8002e54 <HAL_TIM_MspPostInit+0x18>
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	48000400 	.word	0x48000400

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b530      	push	{r4, r5, lr}
 8002ec6:	0004      	movs	r4, r0
 8002ec8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	2214      	movs	r2, #20
 8002ecc:	2100      	movs	r1, #0
 8002ece:	a802      	add	r0, sp, #8
 8002ed0:	f002 f99a 	bl	8005208 <memset>
  if(huart->Instance==USART1)
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_UART_MspInit+0xb0>)
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002edc:	b009      	add	sp, #36	@ 0x24
 8002ede:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ee0:	2180      	movs	r1, #128	@ 0x80
 8002ee2:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002ee4:	01c9      	lsls	r1, r1, #7
 8002ee6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	4824      	ldr	r0, [pc, #144]	@ (8002f7c <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eea:	430a      	orrs	r2, r1
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef4:	9200      	str	r2, [sp, #0]
 8002ef6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	02c9      	lsls	r1, r1, #11
 8002efc:	430a      	orrs	r2, r1
 8002efe:	615a      	str	r2, [r3, #20]
 8002f00:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002f02:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f04:	400b      	ands	r3, r1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002f0a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f000 fad3 	bl	80034bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002f16:	4d1a      	ldr	r5, [pc, #104]	@ (8002f80 <HAL_UART_MspInit+0xbc>)
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002f1c:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1e:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f20:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f22:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f24:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f26:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f28:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2a:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f2c:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f2e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f30:	f000 fa90 	bl	8003454 <HAL_DMA_Init>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d116      	bne.n	8002f66 <HAL_UART_MspInit+0xa2>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f3a:	6765      	str	r5, [r4, #116]	@ 0x74
 8002f3c:	626c      	str	r4, [r5, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002f3e:	4d13      	ldr	r5, [pc, #76]	@ (8002f8c <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f40:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002f42:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f44:	2310      	movs	r3, #16
 8002f46:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f48:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f4a:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4c:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4e:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f50:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f52:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f54:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f56:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f58:	f000 fa7c 	bl	8003454 <HAL_DMA_Init>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f60:	6725      	str	r5, [r4, #112]	@ 0x70
 8002f62:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002f64:	e7ba      	b.n	8002edc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002f66:	f7fd fc83 	bl	8000870 <Error_Handler>
 8002f6a:	e7e5      	b.n	8002f38 <HAL_UART_MspInit+0x74>
      Error_Handler();
 8002f6c:	f7fd fc80 	bl	8000870 <Error_Handler>
 8002f70:	e7f6      	b.n	8002f60 <HAL_UART_MspInit+0x9c>
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	20000344 	.word	0x20000344
 8002f84:	40020030 	.word	0x40020030
 8002f88:	4002001c 	.word	0x4002001c
 8002f8c:	20000300 	.word	0x20000300

08002f90 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <NMI_Handler>
 8002f92:	46c0      	nop			@ (mov r8, r8)

08002f94 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f94:	4770      	bx	lr
 8002f96:	46c0      	nop			@ (mov r8, r8)

08002f98 <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002f98:	2207      	movs	r2, #7
{
 8002f9a:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8002f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8002fa0:	f7fe f87c 	bl	800109c <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	40020000 	.word	0x40020000

08002fac <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002fac:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4c0e      	ldr	r4, [pc, #56]	@ (8002fec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002fb2:	6922      	ldr	r2, [r4, #16]
 8002fb4:	4213      	tst	r3, r2
 8002fb6:	d002      	beq.n	8002fbe <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002fb8:	68e2      	ldr	r2, [r4, #12]
 8002fba:	4213      	tst	r3, r2
 8002fbc:	d10e      	bne.n	8002fdc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002fc2:	6919      	ldr	r1, [r3, #16]
 8002fc4:	420a      	tst	r2, r1
 8002fc6:	d008      	beq.n	8002fda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	420a      	tst	r2, r1
 8002fcc:	d005      	beq.n	8002fda <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002fce:	3a02      	subs	r2, #2
 8002fd0:	3aff      	subs	r2, #255	@ 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8002fd2:	4807      	ldr	r0, [pc, #28]	@ (8002ff0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8002fd4:	611a      	str	r2, [r3, #16]
 8002fd6:	f7fe fb83 	bl	80016e0 <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8002fda:	bd10      	pop	{r4, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8002fdc:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8002fde:	f7ff fb71 	bl	80026c4 <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	6123      	str	r3, [r4, #16]
}
 8002fe8:	e7e9      	b.n	8002fbe <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	20000148 	.word	0x20000148

08002ff4 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8002ff8:	0292      	lsls	r2, r2, #10
 8002ffa:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 8002ffc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8002ffe:	4211      	tst	r1, r2
 8003000:	d100      	bne.n	8003004 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8003002:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003004:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8003006:	4803      	ldr	r0, [pc, #12]	@ (8003014 <DMA1_Channel4_5_IRQHandler+0x20>)
 8003008:	f7ff fb78 	bl	80026fc <R1_DMAx_TC_IRQHandler>
}
 800300c:	e7f9      	b.n	8003002 <DMA1_Channel4_5_IRQHandler+0xe>
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	40020000 	.word	0x40020000
 8003014:	20000148 	.word	0x20000148

08003018 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003018:	2201      	movs	r2, #1
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 800301a:	4807      	ldr	r0, [pc, #28]	@ (8003038 <TIM2_IRQHandler+0x20>)
{
 800301c:	b510      	push	{r4, lr}
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 800301e:	6a03      	ldr	r3, [r0, #32]
 8003020:	68d9      	ldr	r1, [r3, #12]
 8003022:	420a      	tst	r2, r1
 8003024:	d006      	beq.n	8003034 <TIM2_IRQHandler+0x1c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003026:	6919      	ldr	r1, [r3, #16]
 8003028:	420a      	tst	r2, r1
 800302a:	d003      	beq.n	8003034 <TIM2_IRQHandler+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800302c:	3a03      	subs	r2, #3
 800302e:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 8003030:	f001 fe86 	bl	8004d40 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003034:	bd10      	pop	{r4, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	20000090 	.word	0x20000090

0800303c <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 800303c:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800303e:	f7fe f917 	bl	8001270 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x6>

08003044 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003044:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003046:	4c08      	ldr	r4, [pc, #32]	@ (8003068 <SysTick_Handler+0x24>)
 8003048:	7823      	ldrb	r3, [r4, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d005      	beq.n	800305a <SysTick_Handler+0x16>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 800304e:	3301      	adds	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8003054:	f7fe f8fe 	bl	8001254 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003058:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800305a:	f000 f84d 	bl	80030f8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800305e:	f000 f9f5 	bl	800344c <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003062:	2301      	movs	r3, #1
 8003064:	e7f5      	b.n	8003052 <SysTick_Handler+0xe>
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	200002f0 	.word	0x200002f0

0800306c <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <EXTI4_15_IRQHandler+0x18>)
 8003070:	0212      	lsls	r2, r2, #8
 8003072:	6959      	ldr	r1, [r3, #20]

/**
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI4_15_IRQHandler (void)
{
 8003074:	b510      	push	{r4, lr}
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 8003076:	4211      	tst	r1, r2
 8003078:	d100      	bne.n	800307c <EXTI4_15_IRQHandler+0x10>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    UI_HandleStartStopButton_cb ();
  }

}
 800307a:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800307c:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 800307e:	f7fe f907 	bl	8001290 <UI_HandleStartStopButton_cb>
}
 8003082:	e7fa      	b.n	800307a <EXTI4_15_IRQHandler+0xe>
 8003084:	40010400 	.word	0x40010400

08003088 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003088:	4770      	bx	lr
 800308a:	46c0      	nop			@ (mov r8, r8)

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003090:	20fa      	movs	r0, #250	@ 0xfa
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <HAL_InitTick+0x40>)
 8003094:	0080      	lsls	r0, r0, #2
 8003096:	7819      	ldrb	r1, [r3, #0]
 8003098:	f7fd f810 	bl	80000bc <__udivsi3>
 800309c:	4d0c      	ldr	r5, [pc, #48]	@ (80030d0 <HAL_InitTick+0x44>)
 800309e:	0001      	movs	r1, r0
 80030a0:	6828      	ldr	r0, [r5, #0]
 80030a2:	f7fd f80b 	bl	80000bc <__udivsi3>
 80030a6:	f000 f9b5 	bl	8003414 <HAL_SYSTICK_Config>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d10c      	bne.n	80030c8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80030ae:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b0:	2c03      	cmp	r4, #3
 80030b2:	d900      	bls.n	80030b6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80030b4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b6:	3802      	subs	r0, #2
 80030b8:	2200      	movs	r2, #0
 80030ba:	0021      	movs	r1, r4
 80030bc:	f000 f974 	bl	80033a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <HAL_InitTick+0x48>)
 80030c2:	2000      	movs	r0, #0
 80030c4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80030c6:	e7f5      	b.n	80030b4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
 80030ca:	e7f3      	b.n	80030b4 <HAL_InitTick+0x28>
 80030cc:	200002f8 	.word	0x200002f8
 80030d0:	200002f4 	.word	0x200002f4
 80030d4:	200002fc 	.word	0x200002fc

080030d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	2110      	movs	r1, #16
 80030da:	4a06      	ldr	r2, [pc, #24]	@ (80030f4 <HAL_Init+0x1c>)
{
 80030dc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030de:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e0:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	f7ff ffd1 	bl	800308c <HAL_InitTick>
  HAL_MspInit();
 80030ea:	f7ff fd39 	bl	8002b60 <HAL_MspInit>
}
 80030ee:	2000      	movs	r0, #0
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	40022000 	.word	0x40022000

080030f8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030f8:	4a03      	ldr	r2, [pc, #12]	@ (8003108 <HAL_IncTick+0x10>)
 80030fa:	4b04      	ldr	r3, [pc, #16]	@ (800310c <HAL_IncTick+0x14>)
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	185b      	adds	r3, r3, r1
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	4770      	bx	lr
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	200006dc 	.word	0x200006dc
 800310c:	200002f8 	.word	0x200002f8

08003110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003110:	4b01      	ldr	r3, [pc, #4]	@ (8003118 <HAL_GetTick+0x8>)
 8003112:	6818      	ldr	r0, [r3, #0]
}
 8003114:	4770      	bx	lr
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	200006dc 	.word	0x200006dc

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff fff6 	bl	8003110 <HAL_GetTick>
 8003124:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003126:	1c63      	adds	r3, r4, #1
 8003128:	d002      	beq.n	8003130 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800312a:	4b04      	ldr	r3, [pc, #16]	@ (800313c <HAL_Delay+0x20>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	42a0      	cmp	r0, r4
 8003138:	d3fa      	bcc.n	8003130 <HAL_Delay+0x14>
  {
  }
}
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	200002f8 	.word	0x200002f8

08003140 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8003144:	d064      	beq.n	8003210 <HAL_ADC_Init+0xd0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003146:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d068      	beq.n	800321e <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800314c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800314e:	06db      	lsls	r3, r3, #27
 8003150:	d460      	bmi.n	8003214 <HAL_ADC_Init+0xd4>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003156:	075b      	lsls	r3, r3, #29
 8003158:	d45c      	bmi.n	8003214 <HAL_ADC_Init+0xd4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800315c:	4947      	ldr	r1, [pc, #284]	@ (800327c <HAL_ADC_Init+0x13c>)
 800315e:	400b      	ands	r3, r1
 8003160:	3106      	adds	r1, #6
 8003162:	31ff      	adds	r1, #255	@ 0xff
 8003164:	430b      	orrs	r3, r1
 8003166:	63a3      	str	r3, [r4, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003168:	2303      	movs	r3, #3
 800316a:	6891      	ldr	r1, [r2, #8]
 800316c:	400b      	ands	r3, r1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d05b      	beq.n	800322a <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003172:	2118      	movs	r1, #24
 8003174:	68d3      	ldr	r3, [r2, #12]
 8003176:	438b      	bics	r3, r1
 8003178:	68a1      	ldr	r1, [r4, #8]
 800317a:	430b      	orrs	r3, r1
 800317c:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800317e:	6913      	ldr	r3, [r2, #16]
 8003180:	6861      	ldr	r1, [r4, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	430b      	orrs	r3, r1
 8003188:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800318a:	68d3      	ldr	r3, [r2, #12]
 800318c:	493c      	ldr	r1, [pc, #240]	@ (8003280 <HAL_ADC_Init+0x140>)
 800318e:	400b      	ands	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003192:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003194:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003196:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003198:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800319c:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800319e:	68e1      	ldr	r1, [r4, #12]
 80031a0:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031a2:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031a4:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80031a6:	2124      	movs	r1, #36	@ 0x24
 80031a8:	5c61      	ldrb	r1, [r4, r1]
 80031aa:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031ac:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031ae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80031b0:	3901      	subs	r1, #1
 80031b2:	1e4d      	subs	r5, r1, #1
 80031b4:	41a9      	sbcs	r1, r5
 80031b6:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6921      	ldr	r1, [r4, #16]
 80031bc:	3902      	subs	r1, #2
 80031be:	424d      	negs	r5, r1
 80031c0:	4169      	adcs	r1, r5
 80031c2:	0089      	lsls	r1, r1, #2
 80031c4:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c6:	7ee1      	ldrb	r1, [r4, #27]
 80031c8:	2901      	cmp	r1, #1
 80031ca:	d03e      	beq.n	800324a <HAL_ADC_Init+0x10a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031cc:	20c2      	movs	r0, #194	@ 0xc2
 80031ce:	69e1      	ldr	r1, [r4, #28]
 80031d0:	30ff      	adds	r0, #255	@ 0xff
 80031d2:	4281      	cmp	r1, r0
 80031d4:	d002      	beq.n	80031dc <HAL_ADC_Init+0x9c>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80031d6:	6a20      	ldr	r0, [r4, #32]
 80031d8:	4301      	orrs	r1, r0
 80031da:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80031dc:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031de:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80031e0:	4319      	orrs	r1, r3
 80031e2:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031e4:	2180      	movs	r1, #128	@ 0x80
 80031e6:	0549      	lsls	r1, r1, #21
 80031e8:	428d      	cmp	r5, r1
 80031ea:	d025      	beq.n	8003238 <HAL_ADC_Init+0xf8>
 80031ec:	1e69      	subs	r1, r5, #1
 80031ee:	2906      	cmp	r1, #6
 80031f0:	d922      	bls.n	8003238 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031f2:	68d2      	ldr	r2, [r2, #12]
 80031f4:	4923      	ldr	r1, [pc, #140]	@ (8003284 <HAL_ADC_Init+0x144>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d02c      	beq.n	8003256 <HAL_ADC_Init+0x116>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031fc:	2212      	movs	r2, #18
 80031fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003200:	4393      	bics	r3, r2
 8003202:	3a02      	subs	r2, #2
 8003204:	4313      	orrs	r3, r2
 8003206:	63a3      	str	r3, [r4, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800320a:	3a0f      	subs	r2, #15
 800320c:	4313      	orrs	r3, r2
 800320e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8003210:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8003212:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	2210      	movs	r2, #16
 8003216:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003218:	4313      	orrs	r3, r2
 800321a:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800321c:	e7f8      	b.n	8003210 <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 800321e:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003220:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8003222:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8003224:	f7ff fcb4 	bl	8002b90 <HAL_ADC_MspInit>
 8003228:	e790      	b.n	800314c <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800322a:	6811      	ldr	r1, [r2, #0]
 800322c:	420b      	tst	r3, r1
 800322e:	d1ac      	bne.n	800318a <HAL_ADC_Init+0x4a>
 8003230:	68d3      	ldr	r3, [r2, #12]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	d4a9      	bmi.n	800318a <HAL_ADC_Init+0x4a>
 8003236:	e79c      	b.n	8003172 <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003238:	2107      	movs	r1, #7
 800323a:	6950      	ldr	r0, [r2, #20]
 800323c:	4388      	bics	r0, r1
 800323e:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003240:	6950      	ldr	r0, [r2, #20]
 8003242:	4029      	ands	r1, r5
 8003244:	4301      	orrs	r1, r0
 8003246:	6151      	str	r1, [r2, #20]
 8003248:	e7d3      	b.n	80031f2 <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800324a:	2800      	cmp	r0, #0
 800324c:	d10d      	bne.n	800326a <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800324e:	2180      	movs	r1, #128	@ 0x80
 8003250:	0249      	lsls	r1, r1, #9
 8003252:	430b      	orrs	r3, r1
 8003254:	e7ba      	b.n	80031cc <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003256:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003258:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800325a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800325c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003260:	4393      	bics	r3, r2
 8003262:	3a02      	subs	r2, #2
 8003264:	4313      	orrs	r3, r2
 8003266:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003268:	e7d3      	b.n	8003212 <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326a:	2520      	movs	r5, #32
 800326c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800326e:	4328      	orrs	r0, r5
 8003270:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003274:	4301      	orrs	r1, r0
 8003276:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8003278:	e7a8      	b.n	80031cc <HAL_ADC_Init+0x8c>
 800327a:	46c0      	nop			@ (mov r8, r8)
 800327c:	fffffefd 	.word	0xfffffefd
 8003280:	fffe0219 	.word	0xfffe0219
 8003284:	833fffe7 	.word	0x833fffe7

08003288 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003288:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328a:	2234      	movs	r2, #52	@ 0x34
{
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003290:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003292:	5c83      	ldrb	r3, [r0, r2]
{
 8003294:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003296:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003298:	2b01      	cmp	r3, #1
 800329a:	d057      	beq.n	800334c <HAL_ADC_ConfigChannel+0xc4>
 800329c:	2301      	movs	r3, #1
 800329e:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032a0:	6802      	ldr	r2, [r0, #0]
 80032a2:	6890      	ldr	r0, [r2, #8]
 80032a4:	0740      	lsls	r0, r0, #29
 80032a6:	d509      	bpl.n	80032bc <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a8:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032ae:	4313      	orrs	r3, r2
 80032b0:	63a3      	str	r3, [r4, #56]	@ 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b2:	2334      	movs	r3, #52	@ 0x34
 80032b4:	2200      	movs	r2, #0
 80032b6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80032b8:	b003      	add	sp, #12
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032bc:	2610      	movs	r6, #16
 80032be:	4276      	negs	r6, r6
 80032c0:	46b4      	mov	ip, r6
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032c2:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80032c4:	4e31      	ldr	r6, [pc, #196]	@ (800338c <HAL_ADC_ConfigChannel+0x104>)
 80032c6:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032c8:	4083      	lsls	r3, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032ca:	4484      	add	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 80032cc:	42b7      	cmp	r7, r6
 80032ce:	d025      	beq.n	800331c <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032d0:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 80032d2:	4333      	orrs	r3, r6
 80032d4:	6293      	str	r3, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	055b      	lsls	r3, r3, #21
 80032da:	429d      	cmp	r5, r3
 80032dc:	d00f      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x76>
 80032de:	3d01      	subs	r5, #1
 80032e0:	2d06      	cmp	r5, #6
 80032e2:	d90c      	bls.n	80032fe <HAL_ADC_ConfigChannel+0x76>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032e4:	2307      	movs	r3, #7
 80032e6:	688d      	ldr	r5, [r1, #8]
 80032e8:	6951      	ldr	r1, [r2, #20]
 80032ea:	4019      	ands	r1, r3
 80032ec:	428d      	cmp	r5, r1
 80032ee:	d006      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x76>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032f0:	6951      	ldr	r1, [r2, #20]
 80032f2:	4399      	bics	r1, r3
 80032f4:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80032f6:	6951      	ldr	r1, [r2, #20]
 80032f8:	402b      	ands	r3, r5
 80032fa:	430b      	orrs	r3, r1
 80032fc:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032fe:	4663      	mov	r3, ip
 8003300:	2b02      	cmp	r3, #2
 8003302:	d809      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003304:	4b22      	ldr	r3, [pc, #136]	@ (8003390 <HAL_ADC_ConfigChannel+0x108>)
 8003306:	2180      	movs	r1, #128	@ 0x80
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2810      	cmp	r0, #16
 800330c:	d022      	beq.n	8003354 <HAL_ADC_ConfigChannel+0xcc>
 800330e:	2811      	cmp	r0, #17
 8003310:	d037      	beq.n	8003382 <HAL_ADC_ConfigChannel+0xfa>
 8003312:	0449      	lsls	r1, r1, #17
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003318:	2000      	movs	r0, #0
 800331a:	e7ca      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800331c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800331e:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003320:	4663      	mov	r3, ip
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003322:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003324:	2b02      	cmp	r3, #2
 8003326:	d8f7      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_ADC_ConfigChannel+0x108>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2810      	cmp	r0, #16
 800332e:	d00f      	beq.n	8003350 <HAL_ADC_ConfigChannel+0xc8>
 8003330:	3811      	subs	r0, #17
 8003332:	1e42      	subs	r2, r0, #1
 8003334:	4190      	sbcs	r0, r2
 8003336:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_ADC_ConfigChannel+0x10c>)
 8003338:	4240      	negs	r0, r0
 800333a:	4010      	ands	r0, r2
 800333c:	4a16      	ldr	r2, [pc, #88]	@ (8003398 <HAL_ADC_ConfigChannel+0x110>)
 800333e:	4694      	mov	ip, r2
 8003340:	4460      	add	r0, ip
 8003342:	4018      	ands	r0, r3
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_ADC_ConfigChannel+0x108>)
 8003346:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003348:	2000      	movs	r0, #0
 800334a:	e7b2      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800334c:	2002      	movs	r0, #2
 800334e:	e7b3      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003350:	4812      	ldr	r0, [pc, #72]	@ (800339c <HAL_ADC_ConfigChannel+0x114>)
 8003352:	e7f6      	b.n	8003342 <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003354:	0409      	lsls	r1, r1, #16
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_ADC_ConfigChannel+0x118>)
 800335c:	4911      	ldr	r1, [pc, #68]	@ (80033a4 <HAL_ADC_ConfigChannel+0x11c>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f7fc feac 	bl	80000bc <__udivsi3>
 8003364:	0083      	lsls	r3, r0, #2
 8003366:	181b      	adds	r3, r3, r0
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0d2      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x90>
            wait_loop_index--;
 8003372:	9b01      	ldr	r3, [sp, #4]
 8003374:	3b01      	subs	r3, #1
 8003376:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f9      	bne.n	8003372 <HAL_ADC_ConfigChannel+0xea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2000      	movs	r0, #0
 8003380:	e797      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003382:	03c9      	lsls	r1, r1, #15
 8003384:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003386:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003388:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800338a:	e792      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x2a>
 800338c:	00001001 	.word	0x00001001
 8003390:	40012708 	.word	0x40012708
 8003394:	ff400000 	.word	0xff400000
 8003398:	ffbfffff 	.word	0xffbfffff
 800339c:	ff7fffff 	.word	0xff7fffff
 80033a0:	200002f4 	.word	0x200002f4
 80033a4:	000f4240 	.word	0x000f4240

080033a8 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a8:	22ff      	movs	r2, #255	@ 0xff
 80033aa:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ac:	b510      	push	{r4, lr}
 80033ae:	0014      	movs	r4, r2
 80033b0:	4003      	ands	r3, r0
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033b6:	0189      	lsls	r1, r1, #6
 80033b8:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ba:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033bc:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80033be:	2800      	cmp	r0, #0
 80033c0:	db0b      	blt.n	80033da <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033c2:	4b0c      	ldr	r3, [pc, #48]	@ (80033f4 <HAL_NVIC_SetPriority+0x4c>)
 80033c4:	21c0      	movs	r1, #192	@ 0xc0
 80033c6:	469c      	mov	ip, r3
 80033c8:	0880      	lsrs	r0, r0, #2
 80033ca:	0080      	lsls	r0, r0, #2
 80033cc:	4460      	add	r0, ip
 80033ce:	0089      	lsls	r1, r1, #2
 80033d0:	5843      	ldr	r3, [r0, r1]
 80033d2:	4023      	ands	r3, r4
 80033d4:	4313      	orrs	r3, r2
 80033d6:	5043      	str	r3, [r0, r1]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80033d8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033da:	230f      	movs	r3, #15
 80033dc:	4906      	ldr	r1, [pc, #24]	@ (80033f8 <HAL_NVIC_SetPriority+0x50>)
 80033de:	4003      	ands	r3, r0
 80033e0:	468c      	mov	ip, r1
 80033e2:	3b08      	subs	r3, #8
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4463      	add	r3, ip
 80033ea:	69d9      	ldr	r1, [r3, #28]
 80033ec:	400c      	ands	r4, r1
 80033ee:	4314      	orrs	r4, r2
 80033f0:	61dc      	str	r4, [r3, #28]
 80033f2:	e7f1      	b.n	80033d8 <HAL_NVIC_SetPriority+0x30>
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033fc:	2800      	cmp	r0, #0
 80033fe:	db05      	blt.n	800340c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003400:	221f      	movs	r2, #31
 8003402:	2301      	movs	r3, #1
 8003404:	4002      	ands	r2, r0
 8003406:	4093      	lsls	r3, r2
 8003408:	4a01      	ldr	r2, [pc, #4]	@ (8003410 <HAL_NVIC_EnableIRQ+0x14>)
 800340a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800340c:	4770      	bx	lr
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	e000e100 	.word	0xe000e100

08003414 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	2280      	movs	r2, #128	@ 0x80
 8003416:	1e43      	subs	r3, r0, #1
 8003418:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	4293      	cmp	r3, r2
 800341e:	d20e      	bcs.n	800343e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003420:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a07      	ldr	r2, [pc, #28]	@ (8003440 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003424:	4807      	ldr	r0, [pc, #28]	@ (8003444 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003426:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003428:	6a03      	ldr	r3, [r0, #32]
 800342a:	0609      	lsls	r1, r1, #24
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	430b      	orrs	r3, r1
 8003432:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003436:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003438:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	3307      	adds	r3, #7
 800343c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800343e:	4770      	bx	lr
 8003440:	e000e010 	.word	0xe000e010
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003448:	4770      	bx	lr
 800344a:	46c0      	nop			@ (mov r8, r8)

0800344c <HAL_SYSTICK_IRQHandler>:
{
 800344c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800344e:	f7ff fffb 	bl	8003448 <HAL_SYSTICK_Callback>
}
 8003452:	bd10      	pop	{r4, pc}

08003454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003458:	d027      	beq.n	80034aa <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800345a:	2521      	movs	r5, #33	@ 0x21
 800345c:	2302      	movs	r3, #2
 800345e:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003460:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003462:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8003464:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003466:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003468:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346e:	68e1      	ldr	r1, [r4, #12]
 8003470:	430b      	orrs	r3, r1
 8003472:	6921      	ldr	r1, [r4, #16]
 8003474:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	6961      	ldr	r1, [r4, #20]
 8003478:	430b      	orrs	r3, r1
 800347a:	69a1      	ldr	r1, [r4, #24]
 800347c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	69e1      	ldr	r1, [r4, #28]
 8003480:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003482:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003484:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_DMA_Init+0x60>)
 8003488:	2114      	movs	r1, #20
 800348a:	469c      	mov	ip, r3
 800348c:	4460      	add	r0, ip
 800348e:	f7fc fe15 	bl	80000bc <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003492:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003494:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8003496:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003498:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800349a:	0080      	lsls	r0, r0, #2
 800349c:	6420      	str	r0, [r4, #64]	@ 0x40
  return HAL_OK;
 800349e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80034a2:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80034a4:	321f      	adds	r2, #31
 80034a6:	54a3      	strb	r3, [r4, r2]
}
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e7fc      	b.n	80034a8 <HAL_DMA_Init+0x54>
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	ffffc00f 	.word	0xffffc00f
 80034b4:	bffdfff8 	.word	0xbffdfff8
 80034b8:	40020000 	.word	0x40020000

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034be:	46de      	mov	lr, fp
 80034c0:	4657      	mov	r7, sl
 80034c2:	464e      	mov	r6, r9
 80034c4:	4645      	mov	r5, r8
 80034c6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c8:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
{
 80034cc:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	2c00      	cmp	r4, #0
 80034d0:	d06e      	beq.n	80035b0 <HAL_GPIO_Init+0xf4>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	4a70      	ldr	r2, [pc, #448]	@ (8003694 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d4:	4e70      	ldr	r6, [pc, #448]	@ (8003698 <HAL_GPIO_Init+0x1dc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034d8:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	4694      	mov	ip, r2
 80034e0:	4022      	ands	r2, r4
 80034e2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80034e4:	4662      	mov	r2, ip
 80034e6:	4214      	tst	r4, r2
 80034e8:	d05e      	beq.n	80035a8 <HAL_GPIO_Init+0xec>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ea:	9902      	ldr	r1, [sp, #8]
 80034ec:	005d      	lsls	r5, r3, #1
 80034ee:	684a      	ldr	r2, [r1, #4]
 80034f0:	4692      	mov	sl, r2
 80034f2:	2203      	movs	r2, #3
 80034f4:	4651      	mov	r1, sl
 80034f6:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80034f8:	2103      	movs	r1, #3
 80034fa:	40a9      	lsls	r1, r5
 80034fc:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034fe:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003500:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003502:	2f01      	cmp	r7, #1
 8003504:	d95b      	bls.n	80035be <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003506:	2a03      	cmp	r2, #3
 8003508:	d000      	beq.n	800350c <HAL_GPIO_Init+0x50>
 800350a:	e0ae      	b.n	800366a <HAL_GPIO_Init+0x1ae>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350c:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800350e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003510:	9901      	ldr	r1, [sp, #4]
 8003512:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003514:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003516:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 8003518:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800351a:	4652      	mov	r2, sl
 800351c:	0289      	lsls	r1, r1, #10
 800351e:	420a      	tst	r2, r1
 8003520:	d042      	beq.n	80035a8 <HAL_GPIO_Init+0xec>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003522:	465a      	mov	r2, fp
 8003524:	2101      	movs	r1, #1
 8003526:	465d      	mov	r5, fp
 8003528:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800352a:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352c:	430a      	orrs	r2, r1
 800352e:	61aa      	str	r2, [r5, #24]
 8003530:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003532:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	400a      	ands	r2, r1
 8003536:	4959      	ldr	r1, [pc, #356]	@ (800369c <HAL_GPIO_Init+0x1e0>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003538:	401d      	ands	r5, r3
 800353a:	468c      	mov	ip, r1
 800353c:	00ad      	lsls	r5, r5, #2
 800353e:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003540:	9205      	str	r2, [sp, #20]
 8003542:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003544:	089a      	lsrs	r2, r3, #2
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	4462      	add	r2, ip
 800354a:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800354c:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800354e:	2790      	movs	r7, #144	@ 0x90
 8003550:	05ff      	lsls	r7, r7, #23
 8003552:	42b8      	cmp	r0, r7
 8003554:	d00a      	beq.n	800356c <HAL_GPIO_Init+0xb0>
 8003556:	4f52      	ldr	r7, [pc, #328]	@ (80036a0 <HAL_GPIO_Init+0x1e4>)
 8003558:	42b8      	cmp	r0, r7
 800355a:	d100      	bne.n	800355e <HAL_GPIO_Init+0xa2>
 800355c:	e092      	b.n	8003684 <HAL_GPIO_Init+0x1c8>
 800355e:	4f51      	ldr	r7, [pc, #324]	@ (80036a4 <HAL_GPIO_Init+0x1e8>)
 8003560:	42b8      	cmp	r0, r7
 8003562:	d100      	bne.n	8003566 <HAL_GPIO_Init+0xaa>
 8003564:	e092      	b.n	800368c <HAL_GPIO_Init+0x1d0>
 8003566:	2705      	movs	r7, #5
 8003568:	40af      	lsls	r7, r5
 800356a:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800356c:	2780      	movs	r7, #128	@ 0x80
 800356e:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003570:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 8003572:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003574:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8003576:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8003578:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800357a:	423d      	tst	r5, r7
 800357c:	d000      	beq.n	8003580 <HAL_GPIO_Init+0xc4>
 800357e:	e071      	b.n	8003664 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8003580:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003582:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8003584:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003586:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003588:	02ad      	lsls	r5, r5, #10
 800358a:	d468      	bmi.n	800365e <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800358c:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800358e:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 8003590:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 8003592:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003594:	03ad      	lsls	r5, r5, #14
 8003596:	d45f      	bmi.n	8003658 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003598:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800359a:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 800359c:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 800359e:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a0:	03ed      	lsls	r5, r5, #15
 80035a2:	d455      	bmi.n	8003650 <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 80035a4:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80035a6:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a8:	0022      	movs	r2, r4
      }
    }

    position++;
 80035aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ac:	40da      	lsrs	r2, r3
 80035ae:	d194      	bne.n	80034da <HAL_GPIO_Init+0x1e>
  } 
}
 80035b0:	b007      	add	sp, #28
 80035b2:	bcf0      	pop	{r4, r5, r6, r7}
 80035b4:	46bb      	mov	fp, r7
 80035b6:	46b2      	mov	sl, r6
 80035b8:	46a9      	mov	r9, r5
 80035ba:	46a0      	mov	r8, r4
 80035bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80035be:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035c0:	000f      	movs	r7, r1
 80035c2:	9901      	ldr	r1, [sp, #4]
 80035c4:	400f      	ands	r7, r1
 80035c6:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c8:	9f02      	ldr	r7, [sp, #8]
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	000f      	movs	r7, r1
 80035ce:	40af      	lsls	r7, r5
 80035d0:	46b8      	mov	r8, r7
 80035d2:	464f      	mov	r7, r9
 80035d4:	4641      	mov	r1, r8
 80035d6:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 80035d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80035da:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035dc:	000f      	movs	r7, r1
 80035de:	4661      	mov	r1, ip
 80035e0:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e2:	4651      	mov	r1, sl
 80035e4:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e6:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e8:	000f      	movs	r7, r1
 80035ea:	2101      	movs	r1, #1
 80035ec:	400f      	ands	r7, r1
 80035ee:	409f      	lsls	r7, r3
 80035f0:	46bc      	mov	ip, r7
 80035f2:	4647      	mov	r7, r8
 80035f4:	4661      	mov	r1, ip
 80035f6:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 80035f8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80035fa:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035fc:	000f      	movs	r7, r1
 80035fe:	9901      	ldr	r1, [sp, #4]
 8003600:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003602:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003604:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003606:	6889      	ldr	r1, [r1, #8]
 8003608:	000f      	movs	r7, r1
 800360a:	40af      	lsls	r7, r5
 800360c:	46bc      	mov	ip, r7
 800360e:	4647      	mov	r7, r8
 8003610:	4661      	mov	r1, ip
 8003612:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 8003614:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003616:	2a02      	cmp	r2, #2
 8003618:	d000      	beq.n	800361c <HAL_GPIO_Init+0x160>
 800361a:	e777      	b.n	800350c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 800361c:	08d9      	lsrs	r1, r3, #3
 800361e:	0089      	lsls	r1, r1, #2
 8003620:	468c      	mov	ip, r1
 8003622:	4484      	add	ip, r0
 8003624:	4661      	mov	r1, ip
 8003626:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003628:	2107      	movs	r1, #7
 800362a:	4019      	ands	r1, r3
 800362c:	0089      	lsls	r1, r1, #2
 800362e:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8003630:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003632:	210f      	movs	r1, #15
 8003634:	4647      	mov	r7, r8
 8003636:	40b9      	lsls	r1, r7
 8003638:	9f03      	ldr	r7, [sp, #12]
 800363a:	438f      	bics	r7, r1
 800363c:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800363e:	4647      	mov	r7, r8
 8003640:	9902      	ldr	r1, [sp, #8]
 8003642:	6909      	ldr	r1, [r1, #16]
 8003644:	40b9      	lsls	r1, r7
 8003646:	9f03      	ldr	r7, [sp, #12]
 8003648:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800364a:	4661      	mov	r1, ip
 800364c:	620f      	str	r7, [r1, #32]
 800364e:	e75d      	b.n	800350c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8003650:	9900      	ldr	r1, [sp, #0]
 8003652:	4311      	orrs	r1, r2
 8003654:	000a      	movs	r2, r1
 8003656:	e7a6      	b.n	80035a6 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8003658:	9d00      	ldr	r5, [sp, #0]
 800365a:	432a      	orrs	r2, r5
 800365c:	e79d      	b.n	800359a <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 800365e:	9d00      	ldr	r5, [sp, #0]
 8003660:	432a      	orrs	r2, r5
 8003662:	e794      	b.n	800358e <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8003664:	9d00      	ldr	r5, [sp, #0]
 8003666:	432a      	orrs	r2, r5
 8003668:	e78b      	b.n	8003582 <HAL_GPIO_Init+0xc6>
 800366a:	000f      	movs	r7, r1
        temp = GPIOx->PUPDR;
 800366c:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800366e:	4039      	ands	r1, r7
 8003670:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003672:	9902      	ldr	r1, [sp, #8]
 8003674:	6889      	ldr	r1, [r1, #8]
 8003676:	40a9      	lsls	r1, r5
 8003678:	468c      	mov	ip, r1
 800367a:	4641      	mov	r1, r8
 800367c:	4667      	mov	r7, ip
 800367e:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 8003680:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003682:	e743      	b.n	800350c <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003684:	2701      	movs	r7, #1
 8003686:	40af      	lsls	r7, r5
 8003688:	4339      	orrs	r1, r7
 800368a:	e76f      	b.n	800356c <HAL_GPIO_Init+0xb0>
 800368c:	2702      	movs	r7, #2
 800368e:	40af      	lsls	r7, r5
 8003690:	4339      	orrs	r1, r7
 8003692:	e76b      	b.n	800356c <HAL_GPIO_Init+0xb0>
 8003694:	40021000 	.word	0x40021000
 8003698:	40010400 	.word	0x40010400
 800369c:	40010000 	.word	0x40010000
 80036a0:	48000400 	.word	0x48000400
 80036a4:	48000800 	.word	0x48000800

080036a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036b0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80036b2:	e7fc      	b.n	80036ae <HAL_GPIO_WritePin+0x6>

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	46ce      	mov	lr, r9
 80036b8:	4647      	mov	r7, r8
 80036ba:	b580      	push	{r7, lr}
 80036bc:	0004      	movs	r4, r0
 80036be:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d100      	bne.n	80036c6 <HAL_RCC_OscConfig+0x12>
 80036c4:	e0f2      	b.n	80038ac <HAL_RCC_OscConfig+0x1f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	6803      	ldr	r3, [r0, #0]
 80036c8:	07da      	lsls	r2, r3, #31
 80036ca:	d535      	bpl.n	8003738 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036cc:	210c      	movs	r1, #12
 80036ce:	48c3      	ldr	r0, [pc, #780]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80036d0:	6842      	ldr	r2, [r0, #4]
 80036d2:	400a      	ands	r2, r1
 80036d4:	2a04      	cmp	r2, #4
 80036d6:	d100      	bne.n	80036da <HAL_RCC_OscConfig+0x26>
 80036d8:	e101      	b.n	80038de <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036da:	6842      	ldr	r2, [r0, #4]
 80036dc:	4011      	ands	r1, r2
 80036de:	2908      	cmp	r1, #8
 80036e0:	d100      	bne.n	80036e4 <HAL_RCC_OscConfig+0x30>
 80036e2:	e0f8      	b.n	80038d6 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d00f      	beq.n	800370a <HAL_RCC_OscConfig+0x56>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d100      	bne.n	80036f0 <HAL_RCC_OscConfig+0x3c>
 80036ee:	e11e      	b.n	800392e <HAL_RCC_OscConfig+0x27a>
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d100      	bne.n	80036f6 <HAL_RCC_OscConfig+0x42>
 80036f4:	e1a7      	b.n	8003a46 <HAL_RCC_OscConfig+0x392>
 80036f6:	4bb9      	ldr	r3, [pc, #740]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80036f8:	49b9      	ldr	r1, [pc, #740]	@ (80039e0 <HAL_RCC_OscConfig+0x32c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	400a      	ands	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	49b8      	ldr	r1, [pc, #736]	@ (80039e4 <HAL_RCC_OscConfig+0x330>)
 8003704:	400a      	ands	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	e005      	b.n	8003716 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	4ab3      	ldr	r2, [pc, #716]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 800370e:	025b      	lsls	r3, r3, #9
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	430b      	orrs	r3, r1
 8003714:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7ff fcfb 	bl	8003110 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 800371c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4faf      	ldr	r7, [pc, #700]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 8003720:	02b6      	lsls	r6, r6, #10
 8003722:	e005      	b.n	8003730 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7ff fcf4 	bl	8003110 <HAL_GetTick>
 8003728:	1b40      	subs	r0, r0, r5
 800372a:	2864      	cmp	r0, #100	@ 0x64
 800372c:	d900      	bls.n	8003730 <HAL_RCC_OscConfig+0x7c>
 800372e:	e0fc      	b.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4233      	tst	r3, r6
 8003734:	d0f6      	beq.n	8003724 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	079a      	lsls	r2, r3, #30
 800373a:	d529      	bpl.n	8003790 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800373c:	220c      	movs	r2, #12
 800373e:	49a7      	ldr	r1, [pc, #668]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 8003740:	6848      	ldr	r0, [r1, #4]
 8003742:	4202      	tst	r2, r0
 8003744:	d100      	bne.n	8003748 <HAL_RCC_OscConfig+0x94>
 8003746:	e0aa      	b.n	800389e <HAL_RCC_OscConfig+0x1ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003748:	6848      	ldr	r0, [r1, #4]
 800374a:	4002      	ands	r2, r0
 800374c:	2a08      	cmp	r2, #8
 800374e:	d100      	bne.n	8003752 <HAL_RCC_OscConfig+0x9e>
 8003750:	e0a1      	b.n	8003896 <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003752:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4da1      	ldr	r5, [pc, #644]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003756:	2b00      	cmp	r3, #0
 8003758:	d100      	bne.n	800375c <HAL_RCC_OscConfig+0xa8>
 800375a:	e11f      	b.n	800399c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800375c:	2201      	movs	r2, #1
 800375e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003762:	4313      	orrs	r3, r2
 8003764:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003766:	f7ff fcd3 	bl	8003110 <HAL_GetTick>
 800376a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	e005      	b.n	800377a <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376e:	f7ff fccf 	bl	8003110 <HAL_GetTick>
 8003772:	1b80      	subs	r0, r0, r6
 8003774:	2802      	cmp	r0, #2
 8003776:	d900      	bls.n	800377a <HAL_RCC_OscConfig+0xc6>
 8003778:	e0d7      	b.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	421f      	tst	r7, r3
 800377e:	d0f6      	beq.n	800376e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	21f8      	movs	r1, #248	@ 0xf8
 8003782:	682a      	ldr	r2, [r5, #0]
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	438a      	bics	r2, r1
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4313      	orrs	r3, r2
 800378c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	071a      	lsls	r2, r3, #28
 8003792:	d42d      	bmi.n	80037f0 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003794:	075a      	lsls	r2, r3, #29
 8003796:	d544      	bpl.n	8003822 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003798:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379c:	4b8f      	ldr	r3, [pc, #572]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 800379e:	0552      	lsls	r2, r2, #21
 80037a0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a4:	4211      	tst	r1, r2
 80037a6:	d108      	bne.n	80037ba <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	69d9      	ldr	r1, [r3, #28]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	61d9      	str	r1, [r3, #28]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4013      	ands	r3, r2
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	2780      	movs	r7, #128	@ 0x80
 80037bc:	4e8a      	ldr	r6, [pc, #552]	@ (80039e8 <HAL_RCC_OscConfig+0x334>)
 80037be:	007f      	lsls	r7, r7, #1
 80037c0:	6833      	ldr	r3, [r6, #0]
 80037c2:	423b      	tst	r3, r7
 80037c4:	d100      	bne.n	80037c8 <HAL_RCC_OscConfig+0x114>
 80037c6:	e094      	b.n	80038f2 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d100      	bne.n	80037d0 <HAL_RCC_OscConfig+0x11c>
 80037ce:	e0f8      	b.n	80039c2 <HAL_RCC_OscConfig+0x30e>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d100      	bne.n	80037d6 <HAL_RCC_OscConfig+0x122>
 80037d4:	e0c4      	b.n	8003960 <HAL_RCC_OscConfig+0x2ac>
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d100      	bne.n	80037dc <HAL_RCC_OscConfig+0x128>
 80037da:	e140      	b.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
 80037dc:	2101      	movs	r1, #1
 80037de:	4b7f      	ldr	r3, [pc, #508]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	438a      	bics	r2, r1
 80037e4:	621a      	str	r2, [r3, #32]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	3103      	adds	r1, #3
 80037ea:	438a      	bics	r2, r1
 80037ec:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ee:	e0ec      	b.n	80039ca <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f0:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80037f2:	4d7a      	ldr	r5, [pc, #488]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80037f8:	2201      	movs	r2, #1
 80037fa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4313      	orrs	r3, r2
 8003800:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003802:	f7ff fc85 	bl	8003110 <HAL_GetTick>
 8003806:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003808:	e005      	b.n	8003816 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380a:	f7ff fc81 	bl	8003110 <HAL_GetTick>
 800380e:	1b80      	subs	r0, r0, r6
 8003810:	2802      	cmp	r0, #2
 8003812:	d900      	bls.n	8003816 <HAL_RCC_OscConfig+0x162>
 8003814:	e089      	b.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003818:	421f      	tst	r7, r3
 800381a:	d0f6      	beq.n	800380a <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	075a      	lsls	r2, r3, #29
 8003820:	d4ba      	bmi.n	8003798 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003822:	06db      	lsls	r3, r3, #27
 8003824:	d512      	bpl.n	800384c <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003826:	6963      	ldr	r3, [r4, #20]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d100      	bne.n	800382e <HAL_RCC_OscConfig+0x17a>
 800382c:	e13c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x3f4>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800382e:	3305      	adds	r3, #5
 8003830:	d000      	beq.n	8003834 <HAL_RCC_OscConfig+0x180>
 8003832:	e0e9      	b.n	8003a08 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003834:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003836:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8003838:	4a68      	ldr	r2, [pc, #416]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 800383a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800383c:	438b      	bics	r3, r1
 800383e:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003840:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003842:	69a3      	ldr	r3, [r4, #24]
 8003844:	4381      	bics	r1, r0
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	430b      	orrs	r3, r1
 800384a:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	6a23      	ldr	r3, [r4, #32]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01b      	beq.n	800388a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003852:	220c      	movs	r2, #12
 8003854:	4d61      	ldr	r5, [pc, #388]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 8003856:	6869      	ldr	r1, [r5, #4]
 8003858:	400a      	ands	r2, r1
 800385a:	2a08      	cmp	r2, #8
 800385c:	d100      	bne.n	8003860 <HAL_RCC_OscConfig+0x1ac>
 800385e:	e108      	b.n	8003a72 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	2b02      	cmp	r3, #2
 8003862:	d100      	bne.n	8003866 <HAL_RCC_OscConfig+0x1b2>
 8003864:	e13e      	b.n	8003ae4 <HAL_RCC_OscConfig+0x430>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	682b      	ldr	r3, [r5, #0]
 8003868:	4a60      	ldr	r2, [pc, #384]	@ (80039ec <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800386c:	4013      	ands	r3, r2
 800386e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003870:	f7ff fc4e 	bl	8003110 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003876:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	e004      	b.n	8003884 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7ff fc49 	bl	8003110 <HAL_GetTick>
 800387e:	1b00      	subs	r0, r0, r4
 8003880:	2802      	cmp	r0, #2
 8003882:	d852      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	4233      	tst	r3, r6
 8003888:	d1f7      	bne.n	800387a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	b003      	add	sp, #12
 800388e:	bcc0      	pop	{r6, r7}
 8003890:	46b9      	mov	r9, r7
 8003892:	46b0      	mov	r8, r6
 8003894:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003896:	684a      	ldr	r2, [r1, #4]
 8003898:	03d2      	lsls	r2, r2, #15
 800389a:	d500      	bpl.n	800389e <HAL_RCC_OscConfig+0x1ea>
 800389c:	e759      	b.n	8003752 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4a4f      	ldr	r2, [pc, #316]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	0792      	lsls	r2, r2, #30
 80038a4:	d535      	bpl.n	8003912 <HAL_RCC_OscConfig+0x25e>
 80038a6:	68e2      	ldr	r2, [r4, #12]
 80038a8:	2a01      	cmp	r2, #1
 80038aa:	d032      	beq.n	8003912 <HAL_RCC_OscConfig+0x25e>
    return HAL_ERROR;
 80038ac:	2001      	movs	r0, #1
 80038ae:	e7ed      	b.n	800388c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_LSI_DISABLE();
 80038b0:	2201      	movs	r2, #1
 80038b2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4393      	bics	r3, r2
 80038b8:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80038ba:	f7ff fc29 	bl	8003110 <HAL_GetTick>
 80038be:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	e004      	b.n	80038cc <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7ff fc25 	bl	8003110 <HAL_GetTick>
 80038c6:	1b80      	subs	r0, r0, r6
 80038c8:	2802      	cmp	r0, #2
 80038ca:	d82e      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038cc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80038ce:	421f      	tst	r7, r3
 80038d0:	d1f7      	bne.n	80038c2 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	e7a3      	b.n	800381e <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038d6:	6842      	ldr	r2, [r0, #4]
 80038d8:	03d2      	lsls	r2, r2, #15
 80038da:	d400      	bmi.n	80038de <HAL_RCC_OscConfig+0x22a>
 80038dc:	e702      	b.n	80036e4 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	4a3f      	ldr	r2, [pc, #252]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	0392      	lsls	r2, r2, #14
 80038e4:	d400      	bmi.n	80038e8 <HAL_RCC_OscConfig+0x234>
 80038e6:	e727      	b.n	8003738 <HAL_RCC_OscConfig+0x84>
 80038e8:	6862      	ldr	r2, [r4, #4]
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d000      	beq.n	80038f0 <HAL_RCC_OscConfig+0x23c>
 80038ee:	e723      	b.n	8003738 <HAL_RCC_OscConfig+0x84>
 80038f0:	e7dc      	b.n	80038ac <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	6833      	ldr	r3, [r6, #0]
 80038f4:	433b      	orrs	r3, r7
 80038f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80038f8:	f7ff fc0a 	bl	8003110 <HAL_GetTick>
 80038fc:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fe:	e004      	b.n	800390a <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7ff fc06 	bl	8003110 <HAL_GetTick>
 8003904:	1b40      	subs	r0, r0, r5
 8003906:	2864      	cmp	r0, #100	@ 0x64
 8003908:	d80f      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	6833      	ldr	r3, [r6, #0]
 800390c:	423b      	tst	r3, r7
 800390e:	d0f7      	beq.n	8003900 <HAL_RCC_OscConfig+0x24c>
 8003910:	e75a      	b.n	80037c8 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	25f8      	movs	r5, #248	@ 0xf8
 8003914:	4831      	ldr	r0, [pc, #196]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 8003916:	6922      	ldr	r2, [r4, #16]
 8003918:	6801      	ldr	r1, [r0, #0]
 800391a:	00d2      	lsls	r2, r2, #3
 800391c:	43a9      	bics	r1, r5
 800391e:	430a      	orrs	r2, r1
 8003920:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003922:	071a      	lsls	r2, r3, #28
 8003924:	d400      	bmi.n	8003928 <HAL_RCC_OscConfig+0x274>
 8003926:	e735      	b.n	8003794 <HAL_RCC_OscConfig+0xe0>
 8003928:	e762      	b.n	80037f0 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800392a:	2003      	movs	r0, #3
 800392c:	e7ae      	b.n	800388c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	4d2b      	ldr	r5, [pc, #172]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 8003930:	4a2b      	ldr	r2, [pc, #172]	@ (80039e0 <HAL_RCC_OscConfig+0x32c>)
 8003932:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003934:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003936:	4013      	ands	r3, r2
 8003938:	602b      	str	r3, [r5, #0]
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	4a29      	ldr	r2, [pc, #164]	@ (80039e4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	4013      	ands	r3, r2
 8003942:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003944:	f7ff fbe4 	bl	8003110 <HAL_GetTick>
 8003948:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e004      	b.n	8003956 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7ff fbe0 	bl	8003110 <HAL_GetTick>
 8003950:	1b80      	subs	r0, r0, r6
 8003952:	2864      	cmp	r0, #100	@ 0x64
 8003954:	d8e9      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	423b      	tst	r3, r7
 800395a:	d1f7      	bne.n	800394c <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	e6eb      	b.n	8003738 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	2201      	movs	r2, #1
 8003962:	4e1e      	ldr	r6, [pc, #120]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	4d22      	ldr	r5, [pc, #136]	@ (80039f0 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003966:	6a33      	ldr	r3, [r6, #32]
 8003968:	4393      	bics	r3, r2
 800396a:	6233      	str	r3, [r6, #32]
 800396c:	6a33      	ldr	r3, [r6, #32]
 800396e:	3203      	adds	r2, #3
 8003970:	4393      	bics	r3, r2
 8003972:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003974:	f7ff fbcc 	bl	8003110 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003978:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800397a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	4698      	mov	r8, r3
 800397e:	e004      	b.n	800398a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7ff fbc6 	bl	8003110 <HAL_GetTick>
 8003984:	1bc0      	subs	r0, r0, r7
 8003986:	42a8      	cmp	r0, r5
 8003988:	d8cf      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398a:	4642      	mov	r2, r8
 800398c:	6a33      	ldr	r3, [r6, #32]
 800398e:	421a      	tst	r2, r3
 8003990:	d1f6      	bne.n	8003980 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003992:	464b      	mov	r3, r9
 8003994:	2b01      	cmp	r3, #1
 8003996:	d04f      	beq.n	8003a38 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	e742      	b.n	8003822 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 800399c:	2201      	movs	r2, #1
 800399e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4393      	bics	r3, r2
 80039a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039a6:	f7ff fbb3 	bl	8003110 <HAL_GetTick>
 80039aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ac:	e004      	b.n	80039b8 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ae:	f7ff fbaf 	bl	8003110 <HAL_GetTick>
 80039b2:	1b80      	subs	r0, r0, r6
 80039b4:	2802      	cmp	r0, #2
 80039b6:	d8b8      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	421f      	tst	r7, r3
 80039bc:	d1f7      	bne.n	80039ae <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	e6e6      	b.n	8003790 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c2:	4906      	ldr	r1, [pc, #24]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
 80039c4:	6a0a      	ldr	r2, [r1, #32]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80039ca:	f7ff fba1 	bl	8003110 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80039d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	4698      	mov	r8, r3
 80039d4:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	4d06      	ldr	r5, [pc, #24]	@ (80039f0 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	e011      	b.n	80039fe <HAL_RCC_OscConfig+0x34a>
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	40021000 	.word	0x40021000
 80039e0:	fffeffff 	.word	0xfffeffff
 80039e4:	fffbffff 	.word	0xfffbffff
 80039e8:	40007000 	.word	0x40007000
 80039ec:	feffffff 	.word	0xfeffffff
 80039f0:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7ff fb8c 	bl	8003110 <HAL_GetTick>
 80039f8:	1b80      	subs	r0, r0, r6
 80039fa:	42a8      	cmp	r0, r5
 80039fc:	d895      	bhi.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fe:	4643      	mov	r3, r8
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	421f      	tst	r7, r3
 8003a04:	d0f6      	beq.n	80039f4 <HAL_RCC_OscConfig+0x340>
 8003a06:	e7c4      	b.n	8003992 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4d52      	ldr	r5, [pc, #328]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a0c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a0e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003a10:	4313      	orrs	r3, r2
 8003a12:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003a14:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003a16:	3a03      	subs	r2, #3
 8003a18:	4393      	bics	r3, r2
 8003a1a:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003a1c:	f7ff fb78 	bl	8003110 <HAL_GetTick>
 8003a20:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a22:	e005      	b.n	8003a30 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a24:	f7ff fb74 	bl	8003110 <HAL_GetTick>
 8003a28:	1b80      	subs	r0, r0, r6
 8003a2a:	2802      	cmp	r0, #2
 8003a2c:	d900      	bls.n	8003a30 <HAL_RCC_OscConfig+0x37c>
 8003a2e:	e77c      	b.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003a30:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003a32:	421f      	tst	r7, r3
 8003a34:	d1f6      	bne.n	8003a24 <HAL_RCC_OscConfig+0x370>
 8003a36:	e709      	b.n	800384c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
 8003a3a:	4947      	ldr	r1, [pc, #284]	@ (8003b58 <HAL_RCC_OscConfig+0x4a4>)
 8003a3c:	69d3      	ldr	r3, [r2, #28]
 8003a3e:	400b      	ands	r3, r1
 8003a40:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	e6ed      	b.n	8003822 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a46:	2280      	movs	r2, #128	@ 0x80
 8003a48:	4b42      	ldr	r3, [pc, #264]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
 8003a4a:	02d2      	lsls	r2, r2, #11
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	2280      	movs	r2, #128	@ 0x80
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	0252      	lsls	r2, r2, #9
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a5c:	e65b      	b.n	8003716 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	621a      	str	r2, [r3, #32]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	3903      	subs	r1, #3
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a70:	e7ab      	b.n	80039ca <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d100      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3c4>
 8003a76:	e719      	b.n	80038ac <HAL_RCC_OscConfig+0x1f8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a78:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8003a7a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a7e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8003a80:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	401a      	ands	r2, r3
 8003a84:	428a      	cmp	r2, r1
 8003a86:	d000      	beq.n	8003a8a <HAL_RCC_OscConfig+0x3d6>
 8003a88:	e710      	b.n	80038ac <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a8a:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a8e:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	428a      	cmp	r2, r1
 8003a92:	d000      	beq.n	8003a96 <HAL_RCC_OscConfig+0x3e2>
 8003a94:	e70a      	b.n	80038ac <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a96:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a98:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a9a:	0392      	lsls	r2, r2, #14
 8003a9c:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a9e:	1a18      	subs	r0, r3, r0
 8003aa0:	1e43      	subs	r3, r0, #1
 8003aa2:	4198      	sbcs	r0, r3
 8003aa4:	b2c0      	uxtb	r0, r0
 8003aa6:	e6f1      	b.n	800388c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	4d2a      	ldr	r5, [pc, #168]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003aac:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003aae:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003ab4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003aba:	f7ff fb29 	bl	8003110 <HAL_GetTick>
 8003abe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ac0:	e005      	b.n	8003ace <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ac2:	f7ff fb25 	bl	8003110 <HAL_GetTick>
 8003ac6:	1b80      	subs	r0, r0, r6
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	d900      	bls.n	8003ace <HAL_RCC_OscConfig+0x41a>
 8003acc:	e72d      	b.n	800392a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ace:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003ad0:	421f      	tst	r7, r3
 8003ad2:	d0f6      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ad4:	21f8      	movs	r1, #248	@ 0xf8
 8003ad6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003ad8:	69a3      	ldr	r3, [r4, #24]
 8003ada:	438a      	bics	r2, r1
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	636b      	str	r3, [r5, #52]	@ 0x34
 8003ae2:	e6b3      	b.n	800384c <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_RCC_OscConfig+0x4a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4013      	ands	r3, r2
 8003aec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aee:	f7ff fb0f 	bl	8003110 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003af4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af6:	e005      	b.n	8003b04 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7ff fb0a 	bl	8003110 <HAL_GetTick>
 8003afc:	1b80      	subs	r0, r0, r6
 8003afe:	2802      	cmp	r0, #2
 8003b00:	d900      	bls.n	8003b04 <HAL_RCC_OscConfig+0x450>
 8003b02:	e712      	b.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	423b      	tst	r3, r7
 8003b08:	d1f6      	bne.n	8003af8 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0e:	4e11      	ldr	r6, [pc, #68]	@ (8003b54 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4393      	bics	r3, r2
 8003b12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003b14:	4313      	orrs	r3, r2
 8003b16:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003b18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003b1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b1c:	686a      	ldr	r2, [r5, #4]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	490f      	ldr	r1, [pc, #60]	@ (8003b60 <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	4313      	orrs	r3, r2
 8003b26:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	682a      	ldr	r2, [r5, #0]
 8003b2c:	045b      	lsls	r3, r3, #17
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b32:	f7ff faed 	bl	8003110 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b36:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003b38:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b3a:	04ad      	lsls	r5, r5, #18
 8003b3c:	e005      	b.n	8003b4a <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3e:	f7ff fae7 	bl	8003110 <HAL_GetTick>
 8003b42:	1b00      	subs	r0, r0, r4
 8003b44:	2802      	cmp	r0, #2
 8003b46:	d900      	bls.n	8003b4a <HAL_RCC_OscConfig+0x496>
 8003b48:	e6ef      	b.n	800392a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b4a:	6833      	ldr	r3, [r6, #0]
 8003b4c:	422b      	tst	r3, r5
 8003b4e:	d0f6      	beq.n	8003b3e <HAL_RCC_OscConfig+0x48a>
 8003b50:	e69b      	b.n	800388a <HAL_RCC_OscConfig+0x1d6>
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	40021000 	.word	0x40021000
 8003b58:	efffffff 	.word	0xefffffff
 8003b5c:	feffffff 	.word	0xfeffffff
 8003b60:	ffc2ffff 	.word	0xffc2ffff

08003b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	46ce      	mov	lr, r9
 8003b68:	4647      	mov	r7, r8
 8003b6a:	0004      	movs	r4, r0
 8003b6c:	000d      	movs	r5, r1
 8003b6e:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	2301      	movs	r3, #1
 8003b76:	494a      	ldr	r1, [pc, #296]	@ (8003ca0 <HAL_RCC_ClockConfig+0x13c>)
 8003b78:	680a      	ldr	r2, [r1, #0]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	42aa      	cmp	r2, r5
 8003b7e:	d20c      	bcs.n	8003b9a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b80:	680a      	ldr	r2, [r1, #0]
 8003b82:	439a      	bics	r2, r3
 8003b84:	432a      	orrs	r2, r5
 8003b86:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b88:	680a      	ldr	r2, [r1, #0]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	d004      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8003b90:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003b92:	bcc0      	pop	{r6, r7}
 8003b94:	46b9      	mov	r9, r7
 8003b96:	46b0      	mov	r8, r6
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	079a      	lsls	r2, r3, #30
 8003b9e:	d50e      	bpl.n	8003bbe <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	075a      	lsls	r2, r3, #29
 8003ba2:	d505      	bpl.n	8003bb0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ba4:	22e0      	movs	r2, #224	@ 0xe0
 8003ba6:	493f      	ldr	r1, [pc, #252]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003ba8:	00d2      	lsls	r2, r2, #3
 8003baa:	6848      	ldr	r0, [r1, #4]
 8003bac:	4302      	orrs	r2, r0
 8003bae:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	20f0      	movs	r0, #240	@ 0xf0
 8003bb2:	493c      	ldr	r1, [pc, #240]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003bb4:	684a      	ldr	r2, [r1, #4]
 8003bb6:	4382      	bics	r2, r0
 8003bb8:	68a0      	ldr	r0, [r4, #8]
 8003bba:	4302      	orrs	r2, r0
 8003bbc:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	07db      	lsls	r3, r3, #31
 8003bc0:	d522      	bpl.n	8003c08 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc4:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	2a01      	cmp	r2, #1
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bcc:	2a02      	cmp	r2, #2
 8003bce:	d056      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	079b      	lsls	r3, r3, #30
 8003bd2:	d5dd      	bpl.n	8003b90 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	4e33      	ldr	r6, [pc, #204]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003bd8:	6873      	ldr	r3, [r6, #4]
 8003bda:	438b      	bics	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003be0:	f7ff fa96 	bl	8003110 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be4:	230c      	movs	r3, #12
 8003be6:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8003bea:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e004      	b.n	8003bfa <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7ff fa8e 	bl	8003110 <HAL_GetTick>
 8003bf4:	1bc0      	subs	r0, r0, r7
 8003bf6:	4548      	cmp	r0, r9
 8003bf8:	d847      	bhi.n	8003c8a <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4643      	mov	r3, r8
 8003bfc:	6872      	ldr	r2, [r6, #4]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	6863      	ldr	r3, [r4, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d1f3      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <HAL_RCC_ClockConfig+0x13c>)
 8003c0c:	6813      	ldr	r3, [r2, #0]
 8003c0e:	400b      	ands	r3, r1
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	d905      	bls.n	8003c20 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	438b      	bics	r3, r1
 8003c18:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	6813      	ldr	r3, [r2, #0]
 8003c1c:	4219      	tst	r1, r3
 8003c1e:	d1b7      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	075b      	lsls	r3, r3, #29
 8003c24:	d506      	bpl.n	8003c34 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003c28:	4920      	ldr	r1, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x148>)
 8003c2a:	6853      	ldr	r3, [r2, #4]
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	68e1      	ldr	r1, [r4, #12]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c34:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003c36:	491b      	ldr	r1, [pc, #108]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003c38:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d00e      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c40:	481b      	ldr	r0, [pc, #108]	@ (8003cb0 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c42:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <HAL_RCC_ClockConfig+0x140>)
 8003c44:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <HAL_RCC_ClockConfig+0x150>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	491b      	ldr	r1, [pc, #108]	@ (8003cb8 <HAL_RCC_ClockConfig+0x154>)
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	0f1b      	lsrs	r3, r3, #28
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	40d8      	lsrs	r0, r3
 8003c52:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c54:	2002      	movs	r0, #2
 8003c56:	f7ff fa19 	bl	800308c <HAL_InitTick>
  return HAL_OK;
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e799      	b.n	8003b92 <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c5e:	250f      	movs	r5, #15
 8003c60:	4816      	ldr	r0, [pc, #88]	@ (8003cbc <HAL_RCC_ClockConfig+0x158>)
 8003c62:	0c93      	lsrs	r3, r2, #18
 8003c64:	402b      	ands	r3, r5
 8003c66:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c68:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c6a:	03d2      	lsls	r2, r2, #15
 8003c6c:	d50f      	bpl.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c6e:	4b14      	ldr	r3, [pc, #80]	@ (8003cc0 <HAL_RCC_ClockConfig+0x15c>)
 8003c70:	400d      	ands	r5, r1
 8003c72:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c74:	480e      	ldr	r0, [pc, #56]	@ (8003cb0 <HAL_RCC_ClockConfig+0x14c>)
 8003c76:	f7fc fa21 	bl	80000bc <__udivsi3>
 8003c7a:	4360      	muls	r0, r4
 8003c7c:	e7e1      	b.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	019b      	lsls	r3, r3, #6
 8003c80:	d4a8      	bmi.n	8003bd4 <HAL_RCC_ClockConfig+0x70>
 8003c82:	e785      	b.n	8003b90 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c84:	039b      	lsls	r3, r3, #14
 8003c86:	d4a5      	bmi.n	8003bd4 <HAL_RCC_ClockConfig+0x70>
 8003c88:	e782      	b.n	8003b90 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8003c8a:	2003      	movs	r0, #3
 8003c8c:	e781      	b.n	8003b92 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c8e:	0163      	lsls	r3, r4, #5
 8003c90:	1b1b      	subs	r3, r3, r4
 8003c92:	0198      	lsls	r0, r3, #6
 8003c94:	1ac0      	subs	r0, r0, r3
 8003c96:	00c0      	lsls	r0, r0, #3
 8003c98:	1900      	adds	r0, r0, r4
 8003c9a:	0200      	lsls	r0, r0, #8
 8003c9c:	e7d1      	b.n	8003c42 <HAL_RCC_ClockConfig+0xde>
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	00001388 	.word	0x00001388
 8003cac:	fffff8ff 	.word	0xfffff8ff
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	080054ec 	.word	0x080054ec
 8003cb8:	200002f4 	.word	0x200002f4
 8003cbc:	0800550c 	.word	0x0800550c
 8003cc0:	080054fc 	.word	0x080054fc

08003cc4 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	4a03      	ldr	r2, [pc, #12]	@ (8003cd4 <HAL_RCC_EnableCSS+0x10>)
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	6811      	ldr	r1, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	4770      	bx	lr
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003cda:	4910      	ldr	r1, [pc, #64]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x44>)
{
 8003cdc:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003cde:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8003ce6:	480e      	ldr	r0, [pc, #56]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003cea:	250f      	movs	r5, #15
 8003cec:	480d      	ldr	r0, [pc, #52]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003cee:	0c93      	lsrs	r3, r2, #18
 8003cf0:	402b      	ands	r3, r5
 8003cf2:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cf4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cf6:	03d2      	lsls	r2, r2, #15
 8003cf8:	d507      	bpl.n	8003d0a <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x50>)
 8003cfc:	400d      	ands	r5, r1
 8003cfe:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d00:	4807      	ldr	r0, [pc, #28]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x48>)
 8003d02:	f7fc f9db 	bl	80000bc <__udivsi3>
 8003d06:	4360      	muls	r0, r4
 8003d08:	e7ee      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d0a:	0162      	lsls	r2, r4, #5
 8003d0c:	1b12      	subs	r2, r2, r4
 8003d0e:	0193      	lsls	r3, r2, #6
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	191b      	adds	r3, r3, r4
 8003d16:	0218      	lsls	r0, r3, #8
 8003d18:	e7e6      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x10>
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	007a1200 	.word	0x007a1200
 8003d24:	0800550c 	.word	0x0800550c
 8003d28:	080054fc 	.word	0x080054fc

08003d2c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d2c:	4b01      	ldr	r3, [pc, #4]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
}
 8003d30:	4770      	bx	lr
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	200002f4 	.word	0x200002f4

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d38:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003d3a:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4905      	ldr	r1, [pc, #20]	@ (8003d54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d40:	055b      	lsls	r3, r3, #21
 8003d42:	0f5b      	lsrs	r3, r3, #29
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	6810      	ldr	r0, [r2, #0]
 8003d48:	40d8      	lsrs	r0, r3
}    
 8003d4a:	4770      	bx	lr
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	200002f4 	.word	0x200002f4
 8003d54:	080054e4 	.word	0x080054e4

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	46ce      	mov	lr, r9
 8003d5c:	4647      	mov	r7, r8
 8003d5e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d60:	6803      	ldr	r3, [r0, #0]
{
 8003d62:	0004      	movs	r4, r0
 8003d64:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d66:	03da      	lsls	r2, r3, #15
 8003d68:	d530      	bpl.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	2280      	movs	r2, #128	@ 0x80
 8003d6c:	4b40      	ldr	r3, [pc, #256]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d6e:	0552      	lsls	r2, r2, #21
 8003d70:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d74:	4211      	tst	r1, r2
 8003d76:	d042      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	2680      	movs	r6, #128	@ 0x80
 8003d7a:	4d3e      	ldr	r5, [pc, #248]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003d7c:	0076      	lsls	r6, r6, #1
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	4233      	tst	r3, r6
 8003d82:	d04a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d84:	4d3a      	ldr	r5, [pc, #232]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d86:	23c0      	movs	r3, #192	@ 0xc0
 8003d88:	6a2a      	ldr	r2, [r5, #32]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d8e:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d90:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d92:	421a      	tst	r2, r3
 8003d94:	d011      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d96:	400b      	ands	r3, r1
 8003d98:	4283      	cmp	r3, r0
 8003d9a:	d00e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d9c:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d9e:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da0:	6a2e      	ldr	r6, [r5, #32]
 8003da2:	0240      	lsls	r0, r0, #9
 8003da4:	4330      	orrs	r0, r6
 8003da6:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da8:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003daa:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dac:	4e33      	ldr	r6, [pc, #204]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dae:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db0:	4030      	ands	r0, r6
 8003db2:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003db4:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003db6:	07db      	lsls	r3, r3, #31
 8003db8:	d446      	bmi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dba:	4a2d      	ldr	r2, [pc, #180]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003dbc:	482e      	ldr	r0, [pc, #184]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003dbe:	6a13      	ldr	r3, [r2, #32]
 8003dc0:	4003      	ands	r3, r0
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dc6:	2f01      	cmp	r7, #1
 8003dc8:	d038      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	07da      	lsls	r2, r3, #31
 8003dce:	d506      	bpl.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	4927      	ldr	r1, [pc, #156]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003dd4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003dd6:	4382      	bics	r2, r0
 8003dd8:	68a0      	ldr	r0, [r4, #8]
 8003dda:	4302      	orrs	r2, r0
 8003ddc:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	069b      	lsls	r3, r3, #26
 8003de0:	d405      	bmi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x96>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003de2:	2000      	movs	r0, #0
}
 8003de4:	b003      	add	sp, #12
 8003de6:	bcc0      	pop	{r6, r7}
 8003de8:	46b9      	mov	r9, r7
 8003dea:	46b0      	mov	r8, r6
 8003dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dee:	2110      	movs	r1, #16
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003df2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003df4:	438b      	bics	r3, r1
 8003df6:	68e1      	ldr	r1, [r4, #12]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfc:	e7f1      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4d1c      	ldr	r5, [pc, #112]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4311      	orrs	r1, r2
 8003e06:	61d9      	str	r1, [r3, #28]
 8003e08:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8003e14:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4233      	tst	r3, r6
 8003e18:	d1b4      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	4333      	orrs	r3, r6
 8003e1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003e20:	f7ff f976 	bl	8003110 <HAL_GetTick>
 8003e24:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	4233      	tst	r3, r6
 8003e2a:	d1ab      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7ff f970 	bl	8003110 <HAL_GetTick>
 8003e30:	4643      	mov	r3, r8
 8003e32:	1ac0      	subs	r0, r0, r3
 8003e34:	2864      	cmp	r0, #100	@ 0x64
 8003e36:	d9f6      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xce>
          return HAL_TIMEOUT;
 8003e38:	2003      	movs	r0, #3
 8003e3a:	e7d3      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	69d3      	ldr	r3, [r2, #28]
 8003e3e:	4910      	ldr	r1, [pc, #64]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003e40:	400b      	ands	r3, r1
 8003e42:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	e7c1      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 8003e48:	f7ff f962 	bl	8003110 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
        tickstart = HAL_GetTick();
 8003e52:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7ff f95a 	bl	8003110 <HAL_GetTick>
 8003e5c:	1b80      	subs	r0, r0, r6
 8003e5e:	4548      	cmp	r0, r9
 8003e60:	d8ea      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	4642      	mov	r2, r8
 8003e64:	6a2b      	ldr	r3, [r5, #32]
 8003e66:	421a      	tst	r2, r3
 8003e68:	d0f6      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	6861      	ldr	r1, [r4, #4]
 8003e6c:	e7a5      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40007000 	.word	0x40007000
 8003e78:	fffffcff 	.word	0xfffffcff
 8003e7c:	fffeffff 	.word	0xfffeffff
 8003e80:	efffffff 	.word	0xefffffff
 8003e84:	00001388 	.word	0x00001388

08003e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	46de      	mov	lr, fp
 8003e8c:	4657      	mov	r7, sl
 8003e8e:	464e      	mov	r6, r9
 8003e90:	4645      	mov	r5, r8
 8003e92:	0004      	movs	r4, r0
 8003e94:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d100      	bne.n	8003e9c <HAL_SPI_Init+0x14>
 8003e9a:	e093      	b.n	8003fc4 <HAL_SPI_Init+0x13c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	d069      	beq.n	8003f76 <HAL_SPI_Init+0xee>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea6:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eac:	335d      	adds	r3, #93	@ 0x5d
 8003eae:	5ce3      	ldrb	r3, [r4, r3]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d06c      	beq.n	8003f90 <HAL_SPI_Init+0x108>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb6:	235d      	movs	r3, #93	@ 0x5d
 8003eb8:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eba:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003ebc:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	438b      	bics	r3, r1
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec6:	23e0      	movs	r3, #224	@ 0xe0
 8003ec8:	68e1      	ldr	r1, [r4, #12]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4299      	cmp	r1, r3
 8003ece:	d866      	bhi.n	8003f9e <HAL_SPI_Init+0x116>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ed0:	d000      	beq.n	8003ed4 <HAL_SPI_Init+0x4c>
 8003ed2:	e070      	b.n	8003fb6 <HAL_SPI_Init+0x12e>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee0:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ee2:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee4:	2682      	movs	r6, #130	@ 0x82
 8003ee6:	2784      	movs	r7, #132	@ 0x84
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	0076      	lsls	r6, r6, #1
 8003eec:	4033      	ands	r3, r6
 8003eee:	68a6      	ldr	r6, [r4, #8]
 8003ef0:	023f      	lsls	r7, r7, #8
 8003ef2:	403e      	ands	r6, r7
 8003ef4:	2702      	movs	r7, #2
 8003ef6:	4333      	orrs	r3, r6
 8003ef8:	6926      	ldr	r6, [r4, #16]
 8003efa:	69a0      	ldr	r0, [r4, #24]
 8003efc:	403e      	ands	r6, r7
 8003efe:	4333      	orrs	r3, r6
 8003f00:	2601      	movs	r6, #1
 8003f02:	6967      	ldr	r7, [r4, #20]
 8003f04:	46b2      	mov	sl, r6
 8003f06:	4037      	ands	r7, r6
 8003f08:	433b      	orrs	r3, r7
 8003f0a:	2780      	movs	r7, #128	@ 0x80
 8003f0c:	00bf      	lsls	r7, r7, #2
 8003f0e:	4007      	ands	r7, r0
 8003f10:	433b      	orrs	r3, r7
 8003f12:	69e7      	ldr	r7, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f14:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f16:	46b8      	mov	r8, r7
 8003f18:	2738      	movs	r7, #56	@ 0x38
 8003f1a:	46b9      	mov	r9, r7
 8003f1c:	4647      	mov	r7, r8
 8003f1e:	464e      	mov	r6, r9
 8003f20:	4037      	ands	r7, r6
 8003f22:	6a26      	ldr	r6, [r4, #32]
 8003f24:	433b      	orrs	r3, r7
 8003f26:	46b0      	mov	r8, r6
 8003f28:	2680      	movs	r6, #128	@ 0x80
 8003f2a:	4647      	mov	r7, r8
 8003f2c:	4037      	ands	r7, r6
 8003f2e:	4666      	mov	r6, ip
 8003f30:	433b      	orrs	r3, r7
 8003f32:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f34:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f36:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f3a:	4033      	ands	r3, r6
 8003f3c:	26f0      	movs	r6, #240	@ 0xf0
 8003f3e:	0136      	lsls	r6, r6, #4
 8003f40:	4031      	ands	r1, r6
 8003f42:	4319      	orrs	r1, r3
 8003f44:	2304      	movs	r3, #4
 8003f46:	4003      	ands	r3, r0
 8003f48:	4319      	orrs	r1, r3
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	402b      	ands	r3, r5
 8003f4e:	4319      	orrs	r1, r3
 8003f50:	465b      	mov	r3, fp
 8003f52:	4319      	orrs	r1, r3
 8003f54:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f56:	69d3      	ldr	r3, [r2, #28]
 8003f58:	491d      	ldr	r1, [pc, #116]	@ (8003fd0 <HAL_SPI_Init+0x148>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 8003f5a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f60:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003f62:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f64:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f66:	335d      	adds	r3, #93	@ 0x5d
 8003f68:	54e2      	strb	r2, [r4, r3]
}
 8003f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f6c:	46bb      	mov	fp, r7
 8003f6e:	46b2      	mov	sl, r6
 8003f70:	46a9      	mov	r9, r5
 8003f72:	46a0      	mov	r8, r4
 8003f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	2382      	movs	r3, #130	@ 0x82
 8003f78:	6842      	ldr	r2, [r0, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d093      	beq.n	8003ea8 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f80:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f82:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f86:	335d      	adds	r3, #93	@ 0x5d
 8003f88:	5ce3      	ldrb	r3, [r4, r3]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d192      	bne.n	8003eb6 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8003f90:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003f92:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003f94:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8003f96:	f7fe fe5d 	bl	8002c54 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f9a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003f9c:	e78b      	b.n	8003eb6 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f9e:	23f0      	movs	r3, #240	@ 0xf0
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d110      	bne.n	8003fc8 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003faa:	019b      	lsls	r3, r3, #6
 8003fac:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fae:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb0:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fb2:	469b      	mov	fp, r3
 8003fb4:	e796      	b.n	8003ee4 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fb6:	2380      	movs	r3, #128	@ 0x80
 8003fb8:	015b      	lsls	r3, r3, #5
 8003fba:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	469c      	mov	ip, r3
 8003fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fc2:	e78f      	b.n	8003ee4 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	e7d0      	b.n	8003f6a <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	469b      	mov	fp, r3
 8003fcc:	e7f6      	b.n	8003fbc <HAL_SPI_Init+0x134>
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	fffff7ff 	.word	0xfffff7ff

08003fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	d05c      	beq.n	8004094 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	233d      	movs	r3, #61	@ 0x3d
 8003fdc:	5cc3      	ldrb	r3, [r0, r3]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d041      	beq.n	8004068 <HAL_TIM_PWM_Init+0x94>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	233d      	movs	r3, #61	@ 0x3d
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fea:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	4e2a      	ldr	r6, [pc, #168]	@ (8004098 <HAL_TIM_PWM_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003fee:	6813      	ldr	r3, [r2, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff2:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff4:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff6:	42b2      	cmp	r2, r6
 8003ff8:	d03b      	beq.n	8004072 <HAL_TIM_PWM_Init+0x9e>
 8003ffa:	2680      	movs	r6, #128	@ 0x80
 8003ffc:	05f6      	lsls	r6, r6, #23
 8003ffe:	42b2      	cmp	r2, r6
 8004000:	d029      	beq.n	8004056 <HAL_TIM_PWM_Init+0x82>
 8004002:	4e26      	ldr	r6, [pc, #152]	@ (800409c <HAL_TIM_PWM_Init+0xc8>)
 8004004:	42b2      	cmp	r2, r6
 8004006:	d026      	beq.n	8004056 <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004008:	4e25      	ldr	r6, [pc, #148]	@ (80040a0 <HAL_TIM_PWM_Init+0xcc>)
 800400a:	42b2      	cmp	r2, r6
 800400c:	d027      	beq.n	800405e <HAL_TIM_PWM_Init+0x8a>
 800400e:	4e25      	ldr	r6, [pc, #148]	@ (80040a4 <HAL_TIM_PWM_Init+0xd0>)
 8004010:	42b2      	cmp	r2, r6
 8004012:	d032      	beq.n	800407a <HAL_TIM_PWM_Init+0xa6>
 8004014:	4e24      	ldr	r6, [pc, #144]	@ (80040a8 <HAL_TIM_PWM_Init+0xd4>)
 8004016:	42b2      	cmp	r2, r6
 8004018:	d02f      	beq.n	800407a <HAL_TIM_PWM_Init+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401a:	2680      	movs	r6, #128	@ 0x80
 800401c:	43b3      	bics	r3, r6
 800401e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004020:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004022:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004024:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004026:	2301      	movs	r3, #1
 8004028:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402a:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 800402c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	3a08      	subs	r2, #8
 8004032:	54a3      	strb	r3, [r4, r2]
 8004034:	3201      	adds	r2, #1
 8004036:	54a3      	strb	r3, [r4, r2]
 8004038:	3201      	adds	r2, #1
 800403a:	54a3      	strb	r3, [r4, r2]
 800403c:	3201      	adds	r2, #1
 800403e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	3201      	adds	r2, #1
 8004042:	54a3      	strb	r3, [r4, r2]
 8004044:	3201      	adds	r2, #1
 8004046:	54a3      	strb	r3, [r4, r2]
 8004048:	3201      	adds	r2, #1
 800404a:	54a3      	strb	r3, [r4, r2]
 800404c:	3201      	adds	r2, #1
 800404e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004050:	3a08      	subs	r2, #8
 8004052:	54a3      	strb	r3, [r4, r2]
}
 8004054:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004056:	2670      	movs	r6, #112	@ 0x70
 8004058:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800405a:	68a6      	ldr	r6, [r4, #8]
 800405c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	4e13      	ldr	r6, [pc, #76]	@ (80040ac <HAL_TIM_PWM_Init+0xd8>)
 8004060:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004062:	6926      	ldr	r6, [r4, #16]
 8004064:	4333      	orrs	r3, r6
 8004066:	e7d8      	b.n	800401a <HAL_TIM_PWM_Init+0x46>
    htim->Lock = HAL_UNLOCKED;
 8004068:	333c      	adds	r3, #60	@ 0x3c
 800406a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800406c:	f7fe fe3c 	bl	8002ce8 <HAL_TIM_PWM_MspInit>
 8004070:	e7b8      	b.n	8003fe4 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004072:	2670      	movs	r6, #112	@ 0x70
 8004074:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8004076:	68a6      	ldr	r6, [r4, #8]
 8004078:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	4e0c      	ldr	r6, [pc, #48]	@ (80040ac <HAL_TIM_PWM_Init+0xd8>)
 800407c:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	6926      	ldr	r6, [r4, #16]
 8004080:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004082:	2680      	movs	r6, #128	@ 0x80
 8004084:	43b3      	bics	r3, r6
 8004086:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004088:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800408c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800408e:	6963      	ldr	r3, [r4, #20]
 8004090:	6313      	str	r3, [r2, #48]	@ 0x30
 8004092:	e7c8      	b.n	8004026 <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8004094:	2001      	movs	r0, #1
 8004096:	e7dd      	b.n	8004054 <HAL_TIM_PWM_Init+0x80>
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40002000 	.word	0x40002000
 80040a4:	40014400 	.word	0x40014400
 80040a8:	40014800 	.word	0x40014800
 80040ac:	fffffcff 	.word	0xfffffcff

080040b0 <HAL_TIM_Encoder_Init>:
{
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	46c6      	mov	lr, r8
 80040b4:	0004      	movs	r4, r0
 80040b6:	000d      	movs	r5, r1
 80040b8:	b500      	push	{lr}
  if (htim == NULL)
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d100      	bne.n	80040c0 <HAL_TIM_Encoder_Init+0x10>
 80040be:	e07f      	b.n	80041c0 <HAL_TIM_Encoder_Init+0x110>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040c0:	233d      	movs	r3, #61	@ 0x3d
 80040c2:	5cc3      	ldrb	r3, [r0, r3]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d064      	beq.n	8004194 <HAL_TIM_Encoder_Init+0xe4>
  htim->State = HAL_TIM_STATE_BUSY;
 80040ca:	233d      	movs	r3, #61	@ 0x3d
 80040cc:	2202      	movs	r2, #2
 80040ce:	54e2      	strb	r2, [r4, r3]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	493c      	ldr	r1, [pc, #240]	@ (80041c4 <HAL_TIM_Encoder_Init+0x114>)
 80040d4:	689a      	ldr	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d6:	4f3c      	ldr	r7, [pc, #240]	@ (80041c8 <HAL_TIM_Encoder_Init+0x118>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040d8:	400a      	ands	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 80040dc:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040de:	69a6      	ldr	r6, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80040e0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e2:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e4:	42bb      	cmp	r3, r7
 80040e6:	d05a      	beq.n	800419e <HAL_TIM_Encoder_Init+0xee>
 80040e8:	2780      	movs	r7, #128	@ 0x80
 80040ea:	05ff      	lsls	r7, r7, #23
 80040ec:	42bb      	cmp	r3, r7
 80040ee:	d048      	beq.n	8004182 <HAL_TIM_Encoder_Init+0xd2>
 80040f0:	4f36      	ldr	r7, [pc, #216]	@ (80041cc <HAL_TIM_Encoder_Init+0x11c>)
 80040f2:	42bb      	cmp	r3, r7
 80040f4:	d045      	beq.n	8004182 <HAL_TIM_Encoder_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f6:	4f36      	ldr	r7, [pc, #216]	@ (80041d0 <HAL_TIM_Encoder_Init+0x120>)
 80040f8:	42bb      	cmp	r3, r7
 80040fa:	d046      	beq.n	800418a <HAL_TIM_Encoder_Init+0xda>
 80040fc:	4f35      	ldr	r7, [pc, #212]	@ (80041d4 <HAL_TIM_Encoder_Init+0x124>)
 80040fe:	42bb      	cmp	r3, r7
 8004100:	d051      	beq.n	80041a6 <HAL_TIM_Encoder_Init+0xf6>
 8004102:	4f35      	ldr	r7, [pc, #212]	@ (80041d8 <HAL_TIM_Encoder_Init+0x128>)
 8004104:	42bb      	cmp	r3, r7
 8004106:	d04e      	beq.n	80041a6 <HAL_TIM_Encoder_Init+0xf6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004108:	2780      	movs	r7, #128	@ 0x80
 800410a:	43ba      	bics	r2, r7
 800410c:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 800410e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004112:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004114:	2001      	movs	r0, #1
 8004116:	6158      	str	r0, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8004118:	689e      	ldr	r6, [r3, #8]
  tmpsmcr |= sConfig->EncoderMode;
 800411a:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 800411c:	699a      	ldr	r2, [r3, #24]
  tmpsmcr |= sConfig->EncoderMode;
 800411e:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004120:	492e      	ldr	r1, [pc, #184]	@ (80041dc <HAL_TIM_Encoder_Init+0x12c>)
  tmpsmcr |= sConfig->EncoderMode;
 8004122:	46b0      	mov	r8, r6
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004124:	400a      	ands	r2, r1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004126:	69a9      	ldr	r1, [r5, #24]
 8004128:	68ae      	ldr	r6, [r5, #8]
 800412a:	0209      	lsls	r1, r1, #8
 800412c:	4331      	orrs	r1, r6
 800412e:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004130:	4a2b      	ldr	r2, [pc, #172]	@ (80041e0 <HAL_TIM_Encoder_Init+0x130>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004132:	692e      	ldr	r6, [r5, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004134:	4011      	ands	r1, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004136:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004138:	0136      	lsls	r6, r6, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800413a:	0212      	lsls	r2, r2, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800413c:	4332      	orrs	r2, r6
 800413e:	68ee      	ldr	r6, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8004140:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004142:	4332      	orrs	r2, r6
 8004144:	6a2e      	ldr	r6, [r5, #32]
 8004146:	0336      	lsls	r6, r6, #12
 8004148:	4332      	orrs	r2, r6
 800414a:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800414c:	21aa      	movs	r1, #170	@ 0xaa
 800414e:	438f      	bics	r7, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004150:	6969      	ldr	r1, [r5, #20]
 8004152:	686d      	ldr	r5, [r5, #4]
 8004154:	0109      	lsls	r1, r1, #4
 8004156:	4329      	orrs	r1, r5
  htim->Instance->SMCR = tmpsmcr;
 8004158:	4645      	mov	r5, r8
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800415a:	4339      	orrs	r1, r7
  htim->Instance->SMCR = tmpsmcr;
 800415c:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800415e:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8004160:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004162:	2346      	movs	r3, #70	@ 0x46
 8004164:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	3b08      	subs	r3, #8
 8004168:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	3301      	adds	r3, #1
 800416c:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	3303      	adds	r3, #3
 8004170:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	3301      	adds	r3, #1
 8004174:	54e0      	strb	r0, [r4, r3]
  htim->State = HAL_TIM_STATE_READY;
 8004176:	3b06      	subs	r3, #6
 8004178:	54e0      	strb	r0, [r4, r3]
  return HAL_OK;
 800417a:	2000      	movs	r0, #0
}
 800417c:	bc80      	pop	{r7}
 800417e:	46b8      	mov	r8, r7
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004182:	2770      	movs	r7, #112	@ 0x70
 8004184:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 8004186:	68a7      	ldr	r7, [r4, #8]
 8004188:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	4f16      	ldr	r7, [pc, #88]	@ (80041e4 <HAL_TIM_Encoder_Init+0x134>)
 800418c:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	6927      	ldr	r7, [r4, #16]
 8004190:	433a      	orrs	r2, r7
 8004192:	e7b9      	b.n	8004108 <HAL_TIM_Encoder_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 8004194:	333c      	adds	r3, #60	@ 0x3c
 8004196:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8004198:	f7fe fe20 	bl	8002ddc <HAL_TIM_Encoder_MspInit>
 800419c:	e795      	b.n	80040ca <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419e:	2770      	movs	r7, #112	@ 0x70
 80041a0:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 80041a2:	68a7      	ldr	r7, [r4, #8]
 80041a4:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	4f0f      	ldr	r7, [pc, #60]	@ (80041e4 <HAL_TIM_Encoder_Init+0x134>)
 80041a8:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041aa:	6927      	ldr	r7, [r4, #16]
 80041ac:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ae:	2780      	movs	r7, #128	@ 0x80
 80041b0:	43ba      	bics	r2, r7
 80041b2:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80041b4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80041b8:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80041ba:	6962      	ldr	r2, [r4, #20]
 80041bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80041be:	e7a9      	b.n	8004114 <HAL_TIM_Encoder_Init+0x64>
    return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7db      	b.n	800417c <HAL_TIM_Encoder_Init+0xcc>
 80041c4:	ffffbff8 	.word	0xffffbff8
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40002000 	.word	0x40002000
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	fffffcfc 	.word	0xfffffcfc
 80041e0:	ffff0303 	.word	0xffff0303
 80041e4:	fffffcff 	.word	0xfffffcff

080041e8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80041e8:	233c      	movs	r3, #60	@ 0x3c
{
 80041ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80041ec:	5cc4      	ldrb	r4, [r0, r3]
{
 80041ee:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 80041f0:	2c01      	cmp	r4, #1
 80041f2:	d100      	bne.n	80041f6 <HAL_TIM_PWM_ConfigChannel+0xe>
 80041f4:	e0ea      	b.n	80043cc <HAL_TIM_PWM_ConfigChannel+0x1e4>
 80041f6:	2001      	movs	r0, #1
 80041f8:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 80041fa:	2a08      	cmp	r2, #8
 80041fc:	d100      	bne.n	8004200 <HAL_TIM_PWM_ConfigChannel+0x18>
 80041fe:	e0ab      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004200:	d837      	bhi.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004202:	2a00      	cmp	r2, #0
 8004204:	d100      	bne.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x20>
 8004206:	e07c      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x11a>
 8004208:	2a04      	cmp	r2, #4
 800420a:	d12e      	bne.n	800426a <HAL_TIM_PWM_ConfigChannel+0x82>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420c:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800420e:	682b      	ldr	r3, [r5, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004210:	4c77      	ldr	r4, [pc, #476]	@ (80043f0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	4382      	bics	r2, r0
 8004216:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004218:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800421a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800421c:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800421e:	4020      	ands	r0, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	680c      	ldr	r4, [r1, #0]
 8004222:	0224      	lsls	r4, r4, #8
 8004224:	4304      	orrs	r4, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004226:	2020      	movs	r0, #32
 8004228:	4382      	bics	r2, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800422a:	6888      	ldr	r0, [r1, #8]
 800422c:	0100      	lsls	r0, r0, #4
 800422e:	4310      	orrs	r0, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	4a70      	ldr	r2, [pc, #448]	@ (80043f4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d056      	beq.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	4a70      	ldr	r2, [pc, #448]	@ (80043f8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d05a      	beq.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x10a>
 800423c:	4a6f      	ldr	r2, [pc, #444]	@ (80043fc <HAL_TIM_PWM_ConfigChannel+0x214>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d057      	beq.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x10a>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004242:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004244:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004246:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	639a      	str	r2, [r3, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424a:	2280      	movs	r2, #128	@ 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424c:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424e:	6998      	ldr	r0, [r3, #24]
 8004250:	0112      	lsls	r2, r2, #4
 8004252:	4302      	orrs	r2, r0
 8004254:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	4869      	ldr	r0, [pc, #420]	@ (8004400 <HAL_TIM_PWM_ConfigChannel+0x218>)
 800425a:	4002      	ands	r2, r0
 800425c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800425e:	690a      	ldr	r2, [r1, #16]
 8004260:	6998      	ldr	r0, [r3, #24]
 8004262:	0212      	lsls	r2, r2, #8
 8004264:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800426a:	233c      	movs	r3, #60	@ 0x3c
 800426c:	2200      	movs	r2, #0
 800426e:	54ea      	strb	r2, [r5, r3]
}
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 8004272:	2001      	movs	r0, #1
 8004274:	2a0c      	cmp	r2, #12
 8004276:	d1f8      	bne.n	800426a <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004278:	682b      	ldr	r3, [r5, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	4862      	ldr	r0, [pc, #392]	@ (8004404 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800427c:	6a1a      	ldr	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800427e:	4c5c      	ldr	r4, [pc, #368]	@ (80043f0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004280:	4002      	ands	r2, r0
 8004282:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004284:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004286:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004288:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800428a:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	680c      	ldr	r4, [r1, #0]
 800428e:	0224      	lsls	r4, r4, #8
 8004290:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004292:	4a5d      	ldr	r2, [pc, #372]	@ (8004408 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8004294:	4010      	ands	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004296:	688a      	ldr	r2, [r1, #8]
 8004298:	0312      	lsls	r2, r2, #12
 800429a:	4302      	orrs	r2, r0

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429c:	4855      	ldr	r0, [pc, #340]	@ (80043f4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800429e:	4283      	cmp	r3, r0
 80042a0:	d01a      	beq.n	80042d8 <HAL_TIM_PWM_ConfigChannel+0xf0>
 80042a2:	4855      	ldr	r0, [pc, #340]	@ (80043f8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80042a4:	4283      	cmp	r3, r0
 80042a6:	d017      	beq.n	80042d8 <HAL_TIM_PWM_ConfigChannel+0xf0>
 80042a8:	4854      	ldr	r0, [pc, #336]	@ (80043fc <HAL_TIM_PWM_ConfigChannel+0x214>)
 80042aa:	4283      	cmp	r3, r0
 80042ac:	d014      	beq.n	80042d8 <HAL_TIM_PWM_ConfigChannel+0xf0>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042ae:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80042b0:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80042b2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80042b4:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b8:	2280      	movs	r2, #128	@ 0x80
 80042ba:	69d8      	ldr	r0, [r3, #28]
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	4302      	orrs	r2, r0
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	484e      	ldr	r0, [pc, #312]	@ (8004400 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80042c6:	4002      	ands	r2, r0
 80042c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ca:	690a      	ldr	r2, [r1, #16]
 80042cc:	69d8      	ldr	r0, [r3, #28]
 80042ce:	0212      	lsls	r2, r2, #8
 80042d0:	4302      	orrs	r2, r0
 80042d2:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80042d4:	2000      	movs	r0, #0
 80042d6:	e7c8      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d8:	484c      	ldr	r0, [pc, #304]	@ (800440c <HAL_TIM_PWM_ConfigChannel+0x224>)
 80042da:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042dc:	694e      	ldr	r6, [r1, #20]
 80042de:	01b6      	lsls	r6, r6, #6
 80042e0:	4306      	orrs	r6, r0
 80042e2:	e7e4      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer &= ~TIM_CCER_CC2NP;
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e8:	68ca      	ldr	r2, [r1, #12]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ee:	2240      	movs	r2, #64	@ 0x40
 80042f0:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042f2:	4a47      	ldr	r2, [pc, #284]	@ (8004410 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f4:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042f6:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	698e      	ldr	r6, [r1, #24]
 80042fa:	433e      	orrs	r6, r7
 80042fc:	00b6      	lsls	r6, r6, #2
 80042fe:	4316      	orrs	r6, r2
 8004300:	e79f      	b.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004302:	2673      	movs	r6, #115	@ 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004304:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	4382      	bics	r2, r0
 800430a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800430c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800430e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004310:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004312:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004314:	680e      	ldr	r6, [r1, #0]
 8004316:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8004318:	2602      	movs	r6, #2
 800431a:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 800431c:	688e      	ldr	r6, [r1, #8]
 800431e:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004320:	4e34      	ldr	r6, [pc, #208]	@ (80043f4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004322:	42b3      	cmp	r3, r6
 8004324:	d045      	beq.n	80043b2 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 8004326:	4e34      	ldr	r6, [pc, #208]	@ (80043f8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004328:	42b3      	cmp	r3, r6
 800432a:	d042      	beq.n	80043b2 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800432c:	4e33      	ldr	r6, [pc, #204]	@ (80043fc <HAL_TIM_PWM_ConfigChannel+0x214>)
 800432e:	42b3      	cmp	r3, r6
 8004330:	d03f      	beq.n	80043b2 <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CR2 = tmpcr2;
 8004332:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004334:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004336:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800433a:	6358      	str	r0, [r3, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800433c:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 800433e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	4302      	orrs	r2, r0
 8004344:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	3804      	subs	r0, #4
 800434a:	4382      	bics	r2, r0
 800434c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800434e:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004350:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004352:	430a      	orrs	r2, r1
 8004354:	619a      	str	r2, [r3, #24]
      break;
 8004356:	e788      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x82>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004358:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800435a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800435c:	482d      	ldr	r0, [pc, #180]	@ (8004414 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	4002      	ands	r2, r0
 8004362:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004364:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004366:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004368:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800436a:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 800436c:	680e      	ldr	r6, [r1, #0]
 800436e:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004370:	4829      	ldr	r0, [pc, #164]	@ (8004418 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8004372:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004374:	6888      	ldr	r0, [r1, #8]
 8004376:	0200      	lsls	r0, r0, #8
 8004378:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	481e      	ldr	r0, [pc, #120]	@ (80043f4 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 800437c:	4283      	cmp	r3, r0
 800437e:	d027      	beq.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004380:	481d      	ldr	r0, [pc, #116]	@ (80043f8 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8004382:	4283      	cmp	r3, r0
 8004384:	d02b      	beq.n	80043de <HAL_TIM_PWM_ConfigChannel+0x1f6>
 8004386:	481d      	ldr	r0, [pc, #116]	@ (80043fc <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004388:	4283      	cmp	r3, r0
 800438a:	d028      	beq.n	80043de <HAL_TIM_PWM_ConfigChannel+0x1f6>
  TIMx->CCR3 = OC_Config->Pulse;
 800438c:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800438e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004390:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004392:	63d8      	str	r0, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004394:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 8004396:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004398:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800439a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439c:	4302      	orrs	r2, r0
 800439e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	3804      	subs	r0, #4
 80043a4:	4382      	bics	r2, r0
 80043a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043a8:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ac:	430a      	orrs	r2, r1
 80043ae:	61da      	str	r2, [r3, #28]
      break;
 80043b0:	e75b      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b2:	2608      	movs	r6, #8
 80043b4:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 80043b6:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b8:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80043ba:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80043bc:	2604      	movs	r6, #4
 80043be:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c0:	4e16      	ldr	r6, [pc, #88]	@ (800441c <HAL_TIM_PWM_ConfigChannel+0x234>)
 80043c2:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	694c      	ldr	r4, [r1, #20]
 80043c6:	433c      	orrs	r4, r7
 80043c8:	4334      	orrs	r4, r6
 80043ca:	e7b2      	b.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x14a>
  __HAL_LOCK(htim);
 80043cc:	2002      	movs	r0, #2
 80043ce:	e74f      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpccer &= ~TIM_CCER_CC3NP;
 80043d0:	4813      	ldr	r0, [pc, #76]	@ (8004420 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80043d2:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d4:	68c8      	ldr	r0, [r1, #12]
 80043d6:	0200      	lsls	r0, r0, #8
 80043d8:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80043da:	4a09      	ldr	r2, [pc, #36]	@ (8004400 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80043dc:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043de:	4811      	ldr	r0, [pc, #68]	@ (8004424 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043e0:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043e2:	4020      	ands	r0, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043e4:	698c      	ldr	r4, [r1, #24]
 80043e6:	433c      	orrs	r4, r7
 80043e8:	0124      	lsls	r4, r4, #4
 80043ea:	4304      	orrs	r4, r0
 80043ec:	e7ce      	b.n	800438c <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	ffff8cff 	.word	0xffff8cff
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	fffffbff 	.word	0xfffffbff
 8004404:	ffffefff 	.word	0xffffefff
 8004408:	ffffdfff 	.word	0xffffdfff
 800440c:	ffffbfff 	.word	0xffffbfff
 8004410:	fffff3ff 	.word	0xfffff3ff
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	fffffdff 	.word	0xfffffdff
 800441c:	fffffcff 	.word	0xfffffcff
 8004420:	fffff7ff 	.word	0xfffff7ff
 8004424:	ffffcfff 	.word	0xffffcfff

08004428 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004428:	233c      	movs	r3, #60	@ 0x3c
{
 800442a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800442c:	5cc3      	ldrb	r3, [r0, r3]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d021      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	233d      	movs	r3, #61	@ 0x3d
 8004434:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004436:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800443e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004440:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004442:	680d      	ldr	r5, [r1, #0]
 8004444:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004448:	4a0c      	ldr	r2, [pc, #48]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d006      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800444e:	2280      	movs	r2, #128	@ 0x80
 8004450:	05d2      	lsls	r2, r2, #23
 8004452:	4293      	cmp	r3, r2
 8004454:	d002      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004456:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d104      	bne.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445c:	2280      	movs	r2, #128	@ 0x80
 800445e:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004460:	684a      	ldr	r2, [r1, #4]
 8004462:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004464:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004466:	233d      	movs	r3, #61	@ 0x3d
 8004468:	2201      	movs	r2, #1
 800446a:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800446c:	2200      	movs	r2, #0
 800446e:	3b01      	subs	r3, #1
 8004470:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004472:	2000      	movs	r0, #0
}
 8004474:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004476:	2002      	movs	r0, #2
 8004478:	e7fc      	b.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447a:	46c0      	nop			@ (mov r8, r8)
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400

08004484 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004484:	223c      	movs	r2, #60	@ 0x3c
{
 8004486:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004488:	5c83      	ldrb	r3, [r0, r2]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d01e      	beq.n	80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800448e:	68cb      	ldr	r3, [r1, #12]
 8004490:	4c0f      	ldr	r4, [pc, #60]	@ (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8004492:	4023      	ands	r3, r4
 8004494:	688c      	ldr	r4, [r1, #8]
 8004496:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004498:	4c0e      	ldr	r4, [pc, #56]	@ (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800449a:	4023      	ands	r3, r4
 800449c:	684c      	ldr	r4, [r1, #4]
 800449e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044a0:	4c0d      	ldr	r4, [pc, #52]	@ (80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80044a2:	4023      	ands	r3, r4
 80044a4:	680c      	ldr	r4, [r1, #0]
 80044a6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a8:	4c0c      	ldr	r4, [pc, #48]	@ (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80044aa:	4023      	ands	r3, r4
 80044ac:	690c      	ldr	r4, [r1, #16]
 80044ae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b0:	4c0b      	ldr	r4, [pc, #44]	@ (80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80044b2:	4023      	ands	r3, r4
 80044b4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b6:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044ba:	4c0a      	ldr	r4, [pc, #40]	@ (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80044bc:	4023      	ands	r3, r4
 80044be:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c0:	6801      	ldr	r1, [r0, #0]
 80044c2:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044c4:	2300      	movs	r3, #0
 80044c6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80044c8:	2000      	movs	r0, #0
}
 80044ca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80044cc:	2002      	movs	r0, #2
 80044ce:	e7fc      	b.n	80044ca <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80044d0:	fffffcff 	.word	0xfffffcff
 80044d4:	fffffbff 	.word	0xfffffbff
 80044d8:	fffff7ff 	.word	0xfffff7ff
 80044dc:	ffffefff 	.word	0xffffefff
 80044e0:	ffffdfff 	.word	0xffffdfff
 80044e4:	ffffbfff 	.word	0xffffbfff

080044e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 80044ea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ec:	07da      	lsls	r2, r3, #31
 80044ee:	d506      	bpl.n	80044fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f0:	6801      	ldr	r1, [r0, #0]
 80044f2:	4c28      	ldr	r4, [pc, #160]	@ (8004594 <UART_AdvFeatureConfig+0xac>)
 80044f4:	684a      	ldr	r2, [r1, #4]
 80044f6:	4022      	ands	r2, r4
 80044f8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80044fa:	4322      	orrs	r2, r4
 80044fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044fe:	079a      	lsls	r2, r3, #30
 8004500:	d506      	bpl.n	8004510 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004502:	6801      	ldr	r1, [r0, #0]
 8004504:	4c24      	ldr	r4, [pc, #144]	@ (8004598 <UART_AdvFeatureConfig+0xb0>)
 8004506:	684a      	ldr	r2, [r1, #4]
 8004508:	4022      	ands	r2, r4
 800450a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800450c:	4322      	orrs	r2, r4
 800450e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004510:	075a      	lsls	r2, r3, #29
 8004512:	d506      	bpl.n	8004522 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004514:	6801      	ldr	r1, [r0, #0]
 8004516:	4c21      	ldr	r4, [pc, #132]	@ (800459c <UART_AdvFeatureConfig+0xb4>)
 8004518:	684a      	ldr	r2, [r1, #4]
 800451a:	4022      	ands	r2, r4
 800451c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800451e:	4322      	orrs	r2, r4
 8004520:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004522:	071a      	lsls	r2, r3, #28
 8004524:	d506      	bpl.n	8004534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004526:	6801      	ldr	r1, [r0, #0]
 8004528:	4c1d      	ldr	r4, [pc, #116]	@ (80045a0 <UART_AdvFeatureConfig+0xb8>)
 800452a:	684a      	ldr	r2, [r1, #4]
 800452c:	4022      	ands	r2, r4
 800452e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004530:	4322      	orrs	r2, r4
 8004532:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004534:	06da      	lsls	r2, r3, #27
 8004536:	d506      	bpl.n	8004546 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004538:	6801      	ldr	r1, [r0, #0]
 800453a:	4c1a      	ldr	r4, [pc, #104]	@ (80045a4 <UART_AdvFeatureConfig+0xbc>)
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	4022      	ands	r2, r4
 8004540:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004542:	4322      	orrs	r2, r4
 8004544:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004546:	069a      	lsls	r2, r3, #26
 8004548:	d506      	bpl.n	8004558 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454a:	6801      	ldr	r1, [r0, #0]
 800454c:	4c16      	ldr	r4, [pc, #88]	@ (80045a8 <UART_AdvFeatureConfig+0xc0>)
 800454e:	688a      	ldr	r2, [r1, #8]
 8004550:	4022      	ands	r2, r4
 8004552:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004554:	4322      	orrs	r2, r4
 8004556:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004558:	065a      	lsls	r2, r3, #25
 800455a:	d50a      	bpl.n	8004572 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	6801      	ldr	r1, [r0, #0]
 800455e:	4d13      	ldr	r5, [pc, #76]	@ (80045ac <UART_AdvFeatureConfig+0xc4>)
 8004560:	684a      	ldr	r2, [r1, #4]
 8004562:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004564:	402a      	ands	r2, r5
 8004566:	4322      	orrs	r2, r4
 8004568:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	0352      	lsls	r2, r2, #13
 800456e:	4294      	cmp	r4, r2
 8004570:	d009      	beq.n	8004586 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	d506      	bpl.n	8004584 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004576:	6802      	ldr	r2, [r0, #0]
 8004578:	490d      	ldr	r1, [pc, #52]	@ (80045b0 <UART_AdvFeatureConfig+0xc8>)
 800457a:	6853      	ldr	r3, [r2, #4]
 800457c:	400b      	ands	r3, r1
 800457e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004580:	430b      	orrs	r3, r1
 8004582:	6053      	str	r3, [r2, #4]
  }
}
 8004584:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004586:	684a      	ldr	r2, [r1, #4]
 8004588:	4c0a      	ldr	r4, [pc, #40]	@ (80045b4 <UART_AdvFeatureConfig+0xcc>)
 800458a:	4022      	ands	r2, r4
 800458c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800458e:	4322      	orrs	r2, r4
 8004590:	604a      	str	r2, [r1, #4]
 8004592:	e7ee      	b.n	8004572 <UART_AdvFeatureConfig+0x8a>
 8004594:	fffdffff 	.word	0xfffdffff
 8004598:	fffeffff 	.word	0xfffeffff
 800459c:	fffbffff 	.word	0xfffbffff
 80045a0:	ffff7fff 	.word	0xffff7fff
 80045a4:	ffffefff 	.word	0xffffefff
 80045a8:	ffffdfff 	.word	0xffffdfff
 80045ac:	ffefffff 	.word	0xffefffff
 80045b0:	fff7ffff 	.word	0xfff7ffff
 80045b4:	ff9fffff 	.word	0xff9fffff

080045b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ba:	2384      	movs	r3, #132	@ 0x84
 80045bc:	2200      	movs	r2, #0
{
 80045be:	46c6      	mov	lr, r8
 80045c0:	0004      	movs	r4, r0
 80045c2:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c6:	f7fe fda3 	bl	8003110 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80045cc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	0712      	lsls	r2, r2, #28
 80045d2:	d410      	bmi.n	80045f6 <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	0752      	lsls	r2, r2, #29
 80045d8:	d43c      	bmi.n	8004654 <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045da:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	2280      	movs	r2, #128	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 80045de:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045e0:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80045e4:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e8:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80045ea:	2378      	movs	r3, #120	@ 0x78
 80045ec:	2200      	movs	r2, #0
 80045ee:	54e2      	strb	r2, [r4, r3]
}
 80045f0:	bc80      	pop	{r7}
 80045f2:	46b8      	mov	r8, r7
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	0292      	lsls	r2, r2, #10
 80045fa:	d4eb      	bmi.n	80045d4 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045fe:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004600:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004602:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	04b6      	lsls	r6, r6, #18
 8004606:	e010      	b.n	800462a <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4217      	tst	r7, r2
 800460e:	d009      	beq.n	8004624 <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004610:	4641      	mov	r1, r8
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	4211      	tst	r1, r2
 8004616:	d158      	bne.n	80046ca <UART_CheckIdleState+0x112>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	4211      	tst	r1, r2
 8004620:	d000      	beq.n	8004624 <UART_CheckIdleState+0x6c>
 8004622:	e083      	b.n	800472c <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	0292      	lsls	r2, r2, #10
 8004628:	d4d4      	bmi.n	80045d4 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fe fd71 	bl	8003110 <HAL_GetTick>
 800462e:	1b40      	subs	r0, r0, r5
 8004630:	42b0      	cmp	r0, r6
 8004632:	d3e9      	bcc.n	8004608 <UART_CheckIdleState+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	2301      	movs	r3, #1
 800463a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800463e:	2080      	movs	r0, #128	@ 0x80
 8004640:	6822      	ldr	r2, [r4, #0]
 8004642:	6813      	ldr	r3, [r2, #0]
 8004644:	4383      	bics	r3, r0
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800464c:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800464e:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8004650:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8004652:	e7ca      	b.n	80045ea <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	025b      	lsls	r3, r3, #9
 8004658:	d4bf      	bmi.n	80045da <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465a:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800465c:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800465e:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004660:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	04b6      	lsls	r6, r6, #18
 8004664:	e011      	b.n	800468a <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4217      	tst	r7, r2
 800466c:	d00a      	beq.n	8004684 <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800466e:	4641      	mov	r1, r8
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	4211      	tst	r1, r2
 8004674:	d000      	beq.n	8004678 <UART_CheckIdleState+0xc0>
 8004676:	e089      	b.n	800478c <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004678:	2280      	movs	r2, #128	@ 0x80
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	4211      	tst	r1, r2
 8004680:	d000      	beq.n	8004684 <UART_CheckIdleState+0xcc>
 8004682:	e0b4      	b.n	80047ee <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	025b      	lsls	r3, r3, #9
 8004688:	d4a7      	bmi.n	80045da <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fe fd41 	bl	8003110 <HAL_GetTick>
 800468e:	1b40      	subs	r0, r0, r5
 8004690:	42b0      	cmp	r0, r6
 8004692:	d3e8      	bcc.n	8004666 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004694:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	2201      	movs	r2, #1
 800469a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	4d6b      	ldr	r5, [pc, #428]	@ (8004850 <UART_CheckIdleState+0x298>)
 80046a2:	680b      	ldr	r3, [r1, #0]
 80046a4:	402b      	ands	r3, r5
 80046a6:	600b      	str	r3, [r1, #0]
 80046a8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	688b      	ldr	r3, [r1, #8]
 80046b8:	4393      	bics	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]
 80046bc:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80046c4:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80046c6:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80046c8:	e78f      	b.n	80045ea <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046ca:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d0:	2201      	movs	r2, #1
 80046d2:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d6:	6821      	ldr	r1, [r4, #0]
 80046d8:	4d5d      	ldr	r5, [pc, #372]	@ (8004850 <UART_CheckIdleState+0x298>)
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	402b      	ands	r3, r5
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	688b      	ldr	r3, [r1, #8]
 80046f0:	4393      	bics	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]
 80046f4:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10a      	bne.n	8004714 <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004706:	2010      	movs	r0, #16
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	4383      	bics	r3, r0
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004718:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800471a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800471e:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004720:	6623      	str	r3, [r4, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004722:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004724:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004726:	3a0c      	subs	r2, #12
 8004728:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 800472a:	e783      	b.n	8004634 <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	2201      	movs	r2, #1
 8004734:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004738:	6821      	ldr	r1, [r4, #0]
 800473a:	4d45      	ldr	r5, [pc, #276]	@ (8004850 <UART_CheckIdleState+0x298>)
 800473c:	680b      	ldr	r3, [r1, #0]
 800473e:	402b      	ands	r3, r5
 8004740:	600b      	str	r3, [r1, #0]
 8004742:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004746:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	688b      	ldr	r3, [r1, #8]
 8004752:	4393      	bics	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10a      	bne.n	8004776 <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	2010      	movs	r0, #16
 800476a:	6822      	ldr	r2, [r4, #0]
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	4383      	bics	r3, r0
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	2220      	movs	r2, #32
 8004778:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800477a:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800477c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	2300      	movs	r3, #0
 8004780:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004782:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004784:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004786:	3258      	adds	r2, #88	@ 0x58
 8004788:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 800478a:	e753      	b.n	8004634 <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800478c:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	2201      	movs	r2, #1
 8004794:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004798:	6821      	ldr	r1, [r4, #0]
 800479a:	4d2d      	ldr	r5, [pc, #180]	@ (8004850 <UART_CheckIdleState+0x298>)
 800479c:	680b      	ldr	r3, [r1, #0]
 800479e:	402b      	ands	r3, r5
 80047a0:	600b      	str	r3, [r1, #0]
 80047a2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	688b      	ldr	r3, [r1, #8]
 80047b2:	4393      	bics	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
 80047b6:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ba:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10a      	bne.n	80047d6 <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	2010      	movs	r0, #16
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	4383      	bics	r3, r0
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047da:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80047dc:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047e0:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 80047e4:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047e6:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 80047e8:	3a0c      	subs	r2, #12
 80047ea:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 80047ec:	e752      	b.n	8004694 <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f4:	2201      	movs	r2, #1
 80047f6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	4d14      	ldr	r5, [pc, #80]	@ (8004850 <UART_CheckIdleState+0x298>)
 80047fe:	680b      	ldr	r3, [r1, #0]
 8004800:	402b      	ands	r3, r5
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	6821      	ldr	r1, [r4, #0]
 8004812:	688b      	ldr	r3, [r1, #8]
 8004814:	4393      	bics	r3, r2
 8004816:	608b      	str	r3, [r1, #8]
 8004818:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10a      	bne.n	8004838 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004822:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004826:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482a:	2010      	movs	r0, #16
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	4383      	bics	r3, r0
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	2220      	movs	r2, #32
 800483a:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800483c:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800483e:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	2300      	movs	r3, #0
 8004842:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004844:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004846:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004848:	3258      	adds	r2, #88	@ 0x58
 800484a:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 800484c:	e722      	b.n	8004694 <UART_CheckIdleState+0xdc>
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	fffffedf 	.word	0xfffffedf

08004854 <HAL_UART_Init>:
{
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004858:	d074      	beq.n	8004944 <HAL_UART_Init+0xf0>
  if (huart->gState == HAL_UART_STATE_RESET)
 800485a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d100      	bne.n	8004862 <HAL_UART_Init+0xe>
 8004860:	e072      	b.n	8004948 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8004862:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004864:	2101      	movs	r1, #1
 8004866:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004868:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800486a:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800486c:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800486e:	438b      	bics	r3, r1
 8004870:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004872:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004874:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004876:	432b      	orrs	r3, r5
 8004878:	6965      	ldr	r5, [r4, #20]
 800487a:	69e1      	ldr	r1, [r4, #28]
 800487c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800487e:	4d4a      	ldr	r5, [pc, #296]	@ (80049a8 <HAL_UART_Init+0x154>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004880:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004882:	4028      	ands	r0, r5
 8004884:	4303      	orrs	r3, r0
 8004886:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004888:	6853      	ldr	r3, [r2, #4]
 800488a:	4848      	ldr	r0, [pc, #288]	@ (80049ac <HAL_UART_Init+0x158>)
  tmpreg |= huart->Init.OneBitSampling;
 800488c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488e:	4003      	ands	r3, r0
 8004890:	68e0      	ldr	r0, [r4, #12]
 8004892:	4303      	orrs	r3, r0
 8004894:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004896:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004898:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800489a:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489c:	4d44      	ldr	r5, [pc, #272]	@ (80049b0 <HAL_UART_Init+0x15c>)
 800489e:	4028      	ands	r0, r5
 80048a0:	4303      	orrs	r3, r0
 80048a2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a4:	4b43      	ldr	r3, [pc, #268]	@ (80049b4 <HAL_UART_Init+0x160>)
 80048a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048a8:	2303      	movs	r3, #3
 80048aa:	4013      	ands	r3, r2
 80048ac:	3b01      	subs	r3, #1
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d91f      	bls.n	80048f2 <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b2:	2380      	movs	r3, #128	@ 0x80
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	4299      	cmp	r1, r3
 80048b8:	d100      	bne.n	80048bc <HAL_UART_Init+0x68>
 80048ba:	e072      	b.n	80049a2 <HAL_UART_Init+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7ff fa3c 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d124      	bne.n	800490e <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80048c8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d130      	bne.n	8004932 <HAL_UART_Init+0xde>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	4939      	ldr	r1, [pc, #228]	@ (80049b8 <HAL_UART_Init+0x164>)
 80048d4:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80048d6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048da:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	438a      	bics	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	3929      	subs	r1, #41	@ 0x29
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80048ec:	f7ff fe64 	bl	80045b8 <UART_CheckIdleState>
 80048f0:	e029      	b.n	8004946 <HAL_UART_Init+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f2:	2080      	movs	r0, #128	@ 0x80
 80048f4:	4a31      	ldr	r2, [pc, #196]	@ (80049bc <HAL_UART_Init+0x168>)
 80048f6:	0200      	lsls	r0, r0, #8
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	4281      	cmp	r1, r0
 80048fc:	d029      	beq.n	8004952 <HAL_UART_Init+0xfe>
    switch (clocksource)
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d046      	beq.n	8004990 <HAL_UART_Init+0x13c>
 8004902:	d81a      	bhi.n	800493a <HAL_UART_Init+0xe6>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0d9      	beq.n	80048bc <HAL_UART_Init+0x68>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d118      	bne.n	800493e <HAL_UART_Init+0xea>
        pclk = (uint32_t) HSI_VALUE;
 800490c:	482c      	ldr	r0, [pc, #176]	@ (80049c0 <HAL_UART_Init+0x16c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490e:	6861      	ldr	r1, [r4, #4]
 8004910:	084b      	lsrs	r3, r1, #1
 8004912:	1818      	adds	r0, r3, r0
 8004914:	f7fb fbd2 	bl	80000bc <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004918:	0002      	movs	r2, r0
 800491a:	4b2a      	ldr	r3, [pc, #168]	@ (80049c4 <HAL_UART_Init+0x170>)
 800491c:	3a10      	subs	r2, #16
 800491e:	429a      	cmp	r2, r3
 8004920:	d80d      	bhi.n	800493e <HAL_UART_Init+0xea>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800492a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ce      	beq.n	80048d0 <HAL_UART_Init+0x7c>
    UART_AdvFeatureConfig(huart);
 8004932:	0020      	movs	r0, r4
 8004934:	f7ff fdd8 	bl	80044e8 <UART_AdvFeatureConfig>
 8004938:	e7ca      	b.n	80048d0 <HAL_UART_Init+0x7c>
    switch (clocksource)
 800493a:	2b08      	cmp	r3, #8
 800493c:	d0e7      	beq.n	800490e <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004942:	66e3      	str	r3, [r4, #108]	@ 0x6c
    return HAL_ERROR;
 8004944:	2001      	movs	r0, #1
}
 8004946:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004948:	2278      	movs	r2, #120	@ 0x78
 800494a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800494c:	f7fe faba 	bl	8002ec4 <HAL_UART_MspInit>
 8004950:	e787      	b.n	8004862 <HAL_UART_Init+0xe>
    switch (clocksource)
 8004952:	2b04      	cmp	r3, #4
 8004954:	d01f      	beq.n	8004996 <HAL_UART_Init+0x142>
 8004956:	d816      	bhi.n	8004986 <HAL_UART_Init+0x132>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d022      	beq.n	80049a2 <HAL_UART_Init+0x14e>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d1ee      	bne.n	800493e <HAL_UART_Init+0xea>
 8004960:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <HAL_UART_Init+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004962:	6861      	ldr	r1, [r4, #4]
 8004964:	0848      	lsrs	r0, r1, #1
 8004966:	18c0      	adds	r0, r0, r3
 8004968:	f7fb fba8 	bl	80000bc <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	0002      	movs	r2, r0
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <HAL_UART_Init+0x170>)
 8004970:	3a10      	subs	r2, #16
 8004972:	429a      	cmp	r2, r3
 8004974:	d8e3      	bhi.n	800493e <HAL_UART_Init+0xea>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_UART_Init+0x178>)
        huart->Instance->BRR = brrtemp;
 8004978:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800497a:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800497c:	0700      	lsls	r0, r0, #28
 800497e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004980:	4303      	orrs	r3, r0
 8004982:	60d3      	str	r3, [r2, #12]
  return ret;
 8004984:	e79e      	b.n	80048c4 <HAL_UART_Init+0x70>
    switch (clocksource)
 8004986:	2b08      	cmp	r3, #8
 8004988:	d1d9      	bne.n	800493e <HAL_UART_Init+0xea>
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	e7e8      	b.n	8004962 <HAL_UART_Init+0x10e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004990:	f7ff f9a2 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
        break;
 8004994:	e794      	b.n	80048c0 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7ff f99f 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499a:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 800499c:	2800      	cmp	r0, #0
 800499e:	d1e0      	bne.n	8004962 <HAL_UART_Init+0x10e>
 80049a0:	e790      	b.n	80048c4 <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a2:	f7ff f9c9 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
        break;
 80049a6:	e7f8      	b.n	800499a <HAL_UART_Init+0x146>
 80049a8:	ffff69f3 	.word	0xffff69f3
 80049ac:	ffffcfff 	.word	0xffffcfff
 80049b0:	fffff4ff 	.word	0xfffff4ff
 80049b4:	40021000 	.word	0x40021000
 80049b8:	ffffb7ff 	.word	0xffffb7ff
 80049bc:	0800551c 	.word	0x0800551c
 80049c0:	007a1200 	.word	0x007a1200
 80049c4:	0000ffef 	.word	0x0000ffef
 80049c8:	00f42400 	.word	0x00f42400
 80049cc:	0000fff0 	.word	0x0000fff0

080049d0 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80049d0:	b530      	push	{r4, r5, lr}
 80049d2:	b20b      	sxth	r3, r1
 80049d4:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80049d6:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80049d8:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80049da:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 80049dc:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80049de:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 80049e0:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 80049e2:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 80049e4:	1900      	adds	r0, r0, r4
{
 80049e6:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 80049e8:	4282      	cmp	r2, r0
 80049ea:	da0f      	bge.n	8004a0c <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80049ec:	0028      	movs	r0, r5
 80049ee:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 80049f0:	42ac      	cmp	r4, r5
 80049f2:	dc11      	bgt.n	8004a18 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 80049f4:	1b12      	subs	r2, r2, r4
 80049f6:	17d4      	asrs	r4, r2, #31
 80049f8:	0324      	lsls	r4, r4, #12
 80049fa:	0b24      	lsrs	r4, r4, #12
 80049fc:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 80049fe:	4810      	ldr	r0, [pc, #64]	@ (8004a40 <Circle_Limitation+0x70>)
        square_temp = (square_limit - square_d) / 1048576;
 8004a00:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	db14      	blt.n	8004a34 <Circle_Limitation+0x64>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8004a0a:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8004a0c:	0418      	lsls	r0, r3, #16
 8004a0e:	0409      	lsls	r1, r1, #16
 8004a10:	0c00      	lsrs	r0, r0, #16
 8004a12:	4308      	orrs	r0, r1
}
 8004a14:	b005      	add	sp, #20
 8004a16:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	db0e      	blt.n	8004a3a <Circle_Limitation+0x6a>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004a1c:	1b52      	subs	r2, r2, r5
 8004a1e:	17d4      	asrs	r4, r2, #31
 8004a20:	0324      	lsls	r4, r4, #12
 8004a22:	0b24      	lsrs	r4, r4, #12
 8004a24:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004a26:	4906      	ldr	r1, [pc, #24]	@ (8004a40 <Circle_Limitation+0x70>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004a28:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004a2a:	0052      	lsls	r2, r2, #1
 8004a2c:	5a52      	ldrh	r2, [r2, r1]
      local_vqd.d = (int16_t)new_d;
 8004a2e:	b201      	sxth	r1, r0
        if (Vqd.q < 0)
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	daea      	bge.n	8004a0a <Circle_Limitation+0x3a>
          new_q = - new_q;
 8004a34:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 8004a36:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8004a38:	e7e8      	b.n	8004a0c <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004a3a:	4240      	negs	r0, r0
 8004a3c:	e7ee      	b.n	8004a1c <Circle_Limitation+0x4c>
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	08005520 	.word	0x08005520

08004a44 <EAC_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
 8004a44:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8004a46:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 8004a48:	6001      	str	r1, [r0, #0]
    pHandle->pVSS = pVSS;
 8004a4a:	6042      	str	r2, [r0, #4]
    pHandle->EncAligned = false;
 8004a4c:	81c3      	strh	r3, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004a4e:	4770      	bx	lr

08004a50 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8004a50:	b510      	push	{r4, lr}
 8004a52:	0004      	movs	r4, r0
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8004a54:	2200      	movs	r2, #0
 8004a56:	2100      	movs	r1, #0
 8004a58:	6840      	ldr	r0, [r0, #4]
 8004a5a:	f000 fb8f 	bl	800517c <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8004a5e:	2314      	movs	r3, #20
 8004a60:	5ee1      	ldrsh	r1, [r4, r3]
 8004a62:	6860      	ldr	r0, [r4, #4]
 8004a64:	f000 fb7e 	bl	8005164 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	f000 fada 	bl	8005024 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8004a70:	2200      	movs	r2, #0
 8004a72:	2100      	movs	r1, #0
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	f000 fad9 	bl	800502c <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8004a7a:	2312      	movs	r3, #18
 8004a7c:	5ee1      	ldrsh	r1, [r4, r3]
 8004a7e:	8ae2      	ldrh	r2, [r4, #22]
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	f000 fad3 	bl	800502c <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
    wAux /= 1000U;
 8004a86:	21fa      	movs	r1, #250	@ 0xfa
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004a88:	8ae3      	ldrh	r3, [r4, #22]
 8004a8a:	8a20      	ldrh	r0, [r4, #16]
    wAux /= 1000U;
 8004a8c:	0089      	lsls	r1, r1, #2
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004a8e:	4358      	muls	r0, r3
    wAux /= 1000U;
 8004a90:	f7fb fb14 	bl	80000bc <__udivsi3>
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8004a94:	3001      	adds	r0, #1
 8004a96:	81a0      	strh	r0, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)

08004a9c <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec(EncAlign_Handle_t *pHandle)
{
 8004a9c:	b510      	push	{r4, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8004a9e:	8983      	ldrh	r3, [r0, #12]
{
 8004aa0:	0004      	movs	r4, r0
    if (pHandle->hRemainingTicks > 0U)
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d011      	beq.n	8004aca <EAC_Exec+0x2e>
    {
      pHandle->hRemainingTicks--;
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8183      	strh	r3, [r0, #12]
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8004aac:	2000      	movs	r0, #0
      if (0U == pHandle->hRemainingTicks)
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d000      	beq.n	8004ab4 <EAC_Exec+0x18>
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8004ab2:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8004ab4:	2314      	movs	r3, #20
 8004ab6:	5ee0      	ldrsh	r0, [r4, r3]
 8004ab8:	7e21      	ldrb	r1, [r4, #24]
 8004aba:	f7fb fb89 	bl	80001d0 <__divsi3>
 8004abe:	b201      	sxth	r1, r0
 8004ac0:	68a0      	ldr	r0, [r4, #8]
 8004ac2:	f000 f927 	bl	8004d14 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8004aca:	2001      	movs	r0, #1
 8004acc:	e7f1      	b.n	8004ab2 <EAC_Exec+0x16>
 8004ace:	46c0      	nop			@ (mov r8, r8)

08004ad0 <EAC_IsAligned>:
__weak bool EAC_IsAligned(EncAlign_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 8004ad0:	7b80      	ldrb	r0, [r0, #14]
#endif
}
 8004ad2:	4770      	bx	lr

08004ad4 <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8004ad4:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004ad6:	4770      	bx	lr

08004ad8 <ENC_Init>:
  WRITE_REG(TIMx->CNT, Counter);
 8004ad8:	2300      	movs	r3, #0
            required for the speed position sensor management using ENCODER
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Init(ENCODER_Handle_t *pHandle)
{
 8004ada:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004adc:	6a05      	ldr	r5, [r0, #32]
{
 8004ade:	0004      	movs	r4, r0
 8004ae0:	626b      	str	r3, [r5, #36]	@ 0x24
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004ae2:	336e      	adds	r3, #110	@ 0x6e
 8004ae4:	5ac1      	ldrh	r1, [r0, r3]
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	4240      	negs	r0, r0
 8004aea:	f7fb fae7 	bl	80000bc <__udivsi3>
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004aee:	236c      	movs	r3, #108	@ 0x6c
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004af0:	21f0      	movs	r1, #240	@ 0xf0
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004af2:	66a0      	str	r0, [r4, #104]	@ 0x68
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004af4:	5ae3      	ldrh	r3, [r4, r3]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004afa:	69aa      	ldr	r2, [r5, #24]
 8004afc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004afe:	438a      	bics	r2, r1
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61ab      	str	r3, [r5, #24]
 8004b06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004b08:	69aa      	ldr	r2, [r5, #24]
 8004b0a:	490d      	ldr	r1, [pc, #52]	@ (8004b40 <ENC_Init+0x68>)
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	400a      	ands	r2, r1
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61ab      	str	r3, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004b16:	2302      	movs	r3, #2
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004b18:	2201      	movs	r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004b1a:	425b      	negs	r3, r3
 8004b1c:	612b      	str	r3, [r5, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004b1e:	68eb      	ldr	r3, [r5, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	602b      	str	r3, [r5, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8004b2a:	2374      	movs	r3, #116	@ 0x74
 8004b2c:	5ce2      	ldrb	r2, [r4, r3]

    for (index = 0U; index < bufferSize; index++)
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	d005      	beq.n	8004b3e <ENC_Init+0x66>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004b32:	0020      	movs	r0, r4
 8004b34:	2100      	movs	r1, #0
 8004b36:	0092      	lsls	r2, r2, #2
 8004b38:	3028      	adds	r0, #40	@ 0x28
 8004b3a:	f000 fb65 	bl	8005208 <memset>
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	ffff0fff 	.word	0xffff0fff

08004b44 <ENC_Clear>:
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004b44:	2374      	movs	r3, #116	@ 0x74
{
 8004b46:	b510      	push	{r4, lr}
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004b48:	5cc2      	ldrb	r2, [r0, r3]
{
 8004b4a:	0004      	movs	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d004      	beq.n	8004b5a <ENC_Clear+0x16>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004b50:	2100      	movs	r1, #0
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	3028      	adds	r0, #40	@ 0x28
 8004b56:	f000 fb57 	bl	8005208 <memset>
    }
    pHandle->SensorIsReliable = true;
 8004b5a:	2375      	movs	r3, #117	@ 0x75
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	46c0      	nop			@ (mov r8, r8)

08004b64 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8004b64:	0002      	movs	r2, r0
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8004b66:	6a03      	ldr	r3, [r0, #32]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8004b68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b6a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004b6c:	0409      	lsls	r1, r1, #16
 8004b6e:	0c09      	lsrs	r1, r1, #16
 8004b70:	434b      	muls	r3, r1
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8004b72:	2006      	movs	r0, #6
 8004b74:	5e11      	ldrsh	r1, [r2, r0]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8004b76:	141b      	asrs	r3, r3, #16

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004b78:	7850      	ldrb	r0, [r2, #1]
    pHandle->_Super.hMecAngle = mecAngle;
 8004b7a:	80d3      	strh	r3, [r2, #6]
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	4358      	muls	r0, r3

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8004b80:	1a5b      	subs	r3, r3, r1
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004b82:	6891      	ldr	r1, [r2, #8]
 8004b84:	b21b      	sxth	r3, r3
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8004b86:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004b88:	18cb      	adds	r3, r1, r3
    pHandle->_Super.hElAngle = elAngle;
 8004b8a:	8090      	strh	r0, [r2, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8004b8c:	6093      	str	r3, [r2, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8004b8e:	4770      	bx	lr

08004b90 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b92:	46c6      	mov	lr, r8
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8004b94:	2274      	movs	r2, #116	@ 0x74
{
 8004b96:	b500      	push	{lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004b98:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8004b9a:	5c85      	ldrb	r5, [r0, r2]
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8004b9c:	3a04      	subs	r2, #4
 8004b9e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
{
 8004ba0:	0004      	movs	r4, r0
 8004ba2:	000f      	movs	r7, r1
    OverflowCntSample = pHandle->TimerOverflowNb;
 8004ba4:	5a81      	ldrh	r1, [r0, r2]
    pHandle->TimerOverflowNb = 0;
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	52a0      	strh	r0, [r4, r2]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3a60      	subs	r2, #96	@ 0x60
 8004bae:	401a      	ands	r2, r3
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
    {
      pHandle->TimerOverflowError = true;
 8004bb0:	237d      	movs	r3, #125	@ 0x7d
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8004bb2:	2901      	cmp	r1, #1
 8004bb4:	d800      	bhi.n	8004bb8 <ENC_CalcAvrgMecSpeedUnit+0x28>
 8004bb6:	e0a2      	b.n	8004cfe <ENC_CalcAvrgMecSpeedUnit+0x16e>
      pHandle->TimerOverflowError = true;
 8004bb8:	2101      	movs	r1, #1
 8004bba:	54e1      	strb	r1, [r4, r3]
 8004bbc:	3b7c      	subs	r3, #124	@ 0x7c
 8004bbe:	4698      	mov	r8, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8004bc0:	2372      	movs	r3, #114	@ 0x72
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004bc2:	216e      	movs	r1, #110	@ 0x6e
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8004bc4:	5ae3      	ldrh	r3, [r4, r3]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004bc6:	5a61      	ldrh	r1, [r4, r1]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8004bc8:	1af0      	subs	r0, r6, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d100      	bne.n	8004bd0 <ENC_CalcAvrgMecSpeedUnit+0x40>
 8004bce:	e087      	b.n	8004ce0 <ENC_CalcAvrgMecSpeedUnit+0x150>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004bd0:	227c      	movs	r2, #124	@ 0x7c
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004bd2:	42b3      	cmp	r3, r6
 8004bd4:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004bd6:	5ca2      	ldrb	r2, [r4, r2]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004bd8:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004bda:	320a      	adds	r2, #10
 8004bdc:	0092      	lsls	r2, r2, #2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004bde:	1ac3      	subs	r3, r0, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004be0:	5113      	str	r3, [r2, r4]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	d100      	bne.n	8004be8 <ENC_CalcAvrgMecSpeedUnit+0x58>
 8004be6:	e087      	b.n	8004cf8 <ENC_CalcAvrgMecSpeedUnit+0x168>
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004be8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004bea:	2d01      	cmp	r5, #1
 8004bec:	d039      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004bee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004bf0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004bf2:	2d02      	cmp	r5, #2
 8004bf4:	d035      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004bf6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004bf8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004bfa:	2d03      	cmp	r5, #3
 8004bfc:	d031      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004bfe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004c00:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c02:	2d04      	cmp	r5, #4
 8004c04:	d02d      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c06:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004c08:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c0a:	2d05      	cmp	r5, #5
 8004c0c:	d029      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c0e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004c10:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c12:	2d06      	cmp	r5, #6
 8004c14:	d025      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c16:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004c18:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c1a:	2d07      	cmp	r5, #7
 8004c1c:	d021      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c1e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004c20:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c22:	2d08      	cmp	r5, #8
 8004c24:	d01d      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c26:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004c28:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c2a:	2d09      	cmp	r5, #9
 8004c2c:	d019      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c2e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004c30:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c32:	2d0a      	cmp	r5, #10
 8004c34:	d015      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c36:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004c38:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c3a:	2d0b      	cmp	r5, #11
 8004c3c:	d011      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c40:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c42:	2d0c      	cmp	r5, #12
 8004c44:	d00d      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c46:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004c48:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c4a:	2d0d      	cmp	r5, #13
 8004c4c:	d009      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c4e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004c50:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c52:	2d0e      	cmp	r5, #14
 8004c54:	d005      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c56:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004c58:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004c5a:	2d0f      	cmp	r5, #15
 8004c5c:	d001      	beq.n	8004c62 <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8004c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c60:	189b      	adds	r3, r3, r2
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8004c62:	4369      	muls	r1, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8004c64:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004c66:	4358      	muls	r0, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	d001      	beq.n	8004c70 <ENC_CalcAvrgMecSpeedUnit+0xe0>
 8004c6c:	f7fb fab0 	bl	80001d0 <__divsi3>

    *pMecSpeedUnit = (int16_t)wtemp1;
 8004c70:	b203      	sxth	r3, r0

    /* Computes & stores average mechanical acceleration */
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004c72:	b280      	uxth	r0, r0
    *pMecSpeedUnit = (int16_t)wtemp1;
 8004c74:	803b      	strh	r3, [r7, #0]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004c76:	89a2      	ldrh	r2, [r4, #12]

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8004c78:	81a3      	strh	r3, [r4, #12]

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004c7a:	237c      	movs	r3, #124	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004c7c:	1a80      	subs	r0, r0, r2
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004c7e:	226c      	movs	r2, #108	@ 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8004c80:	8260      	strh	r0, [r4, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004c82:	5ce3      	ldrb	r3, [r4, r3]
 8004c84:	5aa2      	ldrh	r2, [r4, r2]
 8004c86:	330a      	adds	r3, #10
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	591b      	ldr	r3, [r3, r4]
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8004c8c:	7860      	ldrb	r0, [r4, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8004c8e:	4353      	muls	r3, r2
 8004c90:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8004c92:	236e      	movs	r3, #110	@ 0x6e
 8004c94:	5ae1      	ldrh	r1, [r4, r3]
 8004c96:	f7fb fa9b 	bl	80001d0 <__divsi3>
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8004c9a:	69e3      	ldr	r3, [r4, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8004c9c:	8b61      	ldrh	r1, [r4, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8004c9e:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8004ca0:	f7fb fa96 	bl	80001d0 <__divsi3>

    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8004ca4:	2380      	movs	r3, #128	@ 0x80
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8004ca6:	81e0      	strh	r0, [r4, #14]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8004ca8:	025b      	lsls	r3, r3, #9
 8004caa:	429e      	cmp	r6, r3
 8004cac:	d300      	bcc.n	8004cb0 <ENC_CalcAvrgMecSpeedUnit+0x120>
 8004cae:	4e18      	ldr	r6, [pc, #96]	@ (8004d10 <ENC_CalcAvrgMecSpeedUnit+0x180>)
 8004cb0:	2372      	movs	r3, #114	@ 0x72
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 8004cb2:	227c      	movs	r2, #124	@ 0x7c
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8004cb4:	52e6      	strh	r6, [r4, r3]
    pHandle->DeltaCapturesIndex++;
 8004cb6:	5ca3      	ldrb	r3, [r4, r2]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	54a3      	strb	r3, [r4, r2]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8004cbe:	5ca3      	ldrb	r3, [r4, r2]
 8004cc0:	42ab      	cmp	r3, r5
 8004cc2:	d301      	bcc.n	8004cc8 <ENC_CalcAvrgMecSpeedUnit+0x138>
    {
      pHandle->DeltaCapturesIndex = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	54a3      	strb	r3, [r4, r2]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8004cc8:	4643      	mov	r3, r8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01a      	beq.n	8004d04 <ENC_CalcAvrgMecSpeedUnit+0x174>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
 8004cce:	2375      	movs	r3, #117	@ 0x75
 8004cd0:	2200      	movs	r2, #0
      bReliability = false;
 8004cd2:	2000      	movs	r0, #0
      pHandle->SensorIsReliable = false;
 8004cd4:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8004cd6:	78e3      	ldrb	r3, [r4, #3]
 8004cd8:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8004cda:	bc80      	pop	{r7}
 8004cdc:	46b8      	mov	r8, r7
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004ce0:	227c      	movs	r2, #124	@ 0x7c
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004ce2:	429e      	cmp	r6, r3
 8004ce4:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004ce6:	5ca2      	ldrb	r2, [r4, r2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004ce8:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004cea:	320a      	adds	r2, #10
 8004cec:	0092      	lsls	r2, r2, #2
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8004cee:	181b      	adds	r3, r3, r0
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8004cf0:	5113      	str	r3, [r2, r4]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	d000      	beq.n	8004cf8 <ENC_CalcAvrgMecSpeedUnit+0x168>
 8004cf6:	e777      	b.n	8004be8 <ENC_CalcAvrgMecSpeedUnit+0x58>
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e7ba      	b.n	8004c74 <ENC_CalcAvrgMecSpeedUnit+0xe4>
    if (pHandle->TimerOverflowError)
 8004cfe:	5ce3      	ldrb	r3, [r4, r3]
 8004d00:	4698      	mov	r8, r3
 8004d02:	e75d      	b.n	8004bc0 <ENC_CalcAvrgMecSpeedUnit+0x30>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8004d04:	0039      	movs	r1, r7
 8004d06:	0020      	movs	r0, r4
 8004d08:	f000 f93c 	bl	8004f84 <SPD_IsMecSpeedReliable>
 8004d0c:	e7e5      	b.n	8004cda <ENC_CalcAvrgMecSpeedUnit+0x14a>
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	0000ffff 	.word	0x0000ffff

08004d14 <ENC_SetMecAngle>:
  *         As a consequence, timer counter is computed and updated.
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle in [s16degree](measurement_units.md) format.
  */
__weak void ENC_SetMecAngle(ENCODER_Handle_t *pHandle, int16_t hMecAngle)
{
 8004d14:	0003      	movs	r3, r0
 8004d16:	b510      	push	{r4, lr}

    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
 8004d18:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8004d1a:	785a      	ldrb	r2, [r3, #1]
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004d1c:	6a04      	ldr	r4, [r0, #32]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8004d1e:	b288      	uxth	r0, r1
 8004d20:	4342      	muls	r2, r0
 8004d22:	809a      	strh	r2, [r3, #4]
    if (localhMecAngle < 0)
 8004d24:	2900      	cmp	r1, #0
 8004d26:	da01      	bge.n	8004d2c <ENC_SetMecAngle+0x18>
    {
      localhMecAngle *= -1;
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 8004d28:	3801      	subs	r0, #1
 8004d2a:	b280      	uxth	r0, r0
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8004d2c:	226e      	movs	r2, #110	@ 0x6e
 8004d2e:	5a9b      	ldrh	r3, [r3, r2]
 8004d30:	4902      	ldr	r1, [pc, #8]	@ (8004d3c <ENC_SetMecAngle+0x28>)
 8004d32:	4358      	muls	r0, r3
 8004d34:	f7fb f9c2 	bl	80000bc <__udivsi3>

    TIMx->CNT = (uint16_t)hAngleCounts;
 8004d38:	6260      	str	r0, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	0000ffff 	.word	0x0000ffff

08004d40 <ENC_IRQHandler>:
{
  ENCODER_Handle_t *pHandle = (ENCODER_Handle_t *)pHandleVoid; //cstat !MISRAC2012-Rule-11.5

  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;
 8004d40:	2270      	movs	r2, #112	@ 0x70
 8004d42:	5a83      	ldrh	r3, [r0, r2]
 8004d44:	3301      	adds	r3, #1
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	5283      	strh	r3, [r0, r2]

  return (MC_NULL);
}
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	4770      	bx	lr
 8004d4e:	46c0      	nop			@ (mov r8, r8)

08004d50 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8004d54:	4770      	bx	lr
 8004d56:	46c0      	nop			@ (mov r8, r8)

08004d58 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8004d58:	7803      	ldrb	r3, [r0, #0]
{
 8004d5a:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <NTC_Init+0x12>
      pHandle->hFaultState = MC_NO_ERROR;
 8004d60:	2300      	movs	r3, #0
 8004d62:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8004d64:	8883      	ldrh	r3, [r0, #4]
 8004d66:	8043      	strh	r3, [r0, #2]
}
 8004d68:	bd10      	pop	{r4, pc}
      NTC_Clear(pHandle);
 8004d6a:	f7ff fff1 	bl	8004d50 <NTC_Clear>
 8004d6e:	e7fb      	b.n	8004d68 <NTC_Init+0x10>

08004d70 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8004d70:	6803      	ldr	r3, [r0, #0]
 8004d72:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8004d74:	8c03      	ldrh	r3, [r0, #32]
 8004d76:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8004d7c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8004d7e:	4770      	bx	lr

08004d80 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8004d80:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8004d82:	4770      	bx	lr

08004d84 <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 8004d84:	0003      	movs	r3, r0
 8004d86:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8004d88:	2216      	movs	r2, #22
 8004d8a:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8004d8c:	2214      	movs	r2, #20
 8004d8e:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8004d90:	2406      	movs	r4, #6
 8004d92:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8004d94:	2404      	movs	r4, #4
 8004d96:	5f1a      	ldrsh	r2, [r3, r4]
 8004d98:	2400      	movs	r4, #0
 8004d9a:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	d00b      	beq.n	8004db8 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8004da0:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8004da2:	689d      	ldr	r5, [r3, #8]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004da4:	68dc      	ldr	r4, [r3, #12]
      if (wIntegral_sum_temp < 0)
 8004da6:	186f      	adds	r7, r5, r1
 8004da8:	d41a      	bmi.n	8004de0 <PI_Controller+0x5c>
        if (pHandle->wIntegralTerm < 0)
 8004daa:	4029      	ands	r1, r5
 8004dac:	d422      	bmi.n	8004df4 <PI_Controller+0x70>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004dae:	42a7      	cmp	r7, r4
 8004db0:	dc02      	bgt.n	8004db8 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8004db2:	691c      	ldr	r4, [r3, #16]
 8004db4:	42bc      	cmp	r4, r7
 8004db6:	dd1b      	ble.n	8004df0 <PI_Controller+0x6c>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8004db8:	0025      	movs	r5, r4
 8004dba:	8b99      	ldrh	r1, [r3, #28]
 8004dbc:	410a      	asrs	r2, r1
 8004dbe:	8bd9      	ldrh	r1, [r3, #30]
 8004dc0:	410d      	asrs	r5, r1
 8004dc2:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8004dc4:	4290      	cmp	r0, r2
 8004dc6:	da03      	bge.n	8004dd0 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8004dc8:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8004dca:	18a4      	adds	r4, r4, r2
 8004dcc:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8004dd0:	4296      	cmp	r6, r2
 8004dd2:	dd03      	ble.n	8004ddc <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 8004dd4:	1ab2      	subs	r2, r6, r2
 8004dd6:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8004dd8:	18a4      	adds	r4, r4, r2
 8004dda:	e7f7      	b.n	8004dcc <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8004ddc:	b210      	sxth	r0, r2
 8004dde:	e7f5      	b.n	8004dcc <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	dde4      	ble.n	8004dae <PI_Controller+0x2a>
          if (wIntegral_Term > 0)
 8004de4:	2900      	cmp	r1, #0
 8004de6:	dde2      	ble.n	8004dae <PI_Controller+0x2a>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8004de8:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <PI_Controller+0x74>)
 8004dea:	0027      	movs	r7, r4
 8004dec:	428c      	cmp	r4, r1
 8004dee:	d1e3      	bne.n	8004db8 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8004df0:	003c      	movs	r4, r7
 8004df2:	e7e1      	b.n	8004db8 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 8004df4:	4f01      	ldr	r7, [pc, #4]	@ (8004dfc <PI_Controller+0x78>)
 8004df6:	e7da      	b.n	8004dae <PI_Controller+0x2a>
 8004df8:	7fffffff 	.word	0x7fffffff
 8004dfc:	80000001 	.word	0x80000001

08004e00 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8004e00:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004e02:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004e04:	220c      	movs	r2, #12
 8004e06:	5e99      	ldrsh	r1, [r3, r2]
 8004e08:	2416      	movs	r4, #22
 8004e0a:	5f1a      	ldrsh	r2, [r3, r4]
 8004e0c:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8004e0e:	240e      	movs	r4, #14
 8004e10:	5f19      	ldrsh	r1, [r3, r4]
 8004e12:	2418      	movs	r4, #24
 8004e14:	5f1b      	ldrsh	r3, [r3, r4]
 8004e16:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8004e18:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 8004e1e:	17d3      	asrs	r3, r2, #31
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004e26:	220f      	movs	r2, #15
    wAux /= 65536;
 8004e28:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8004e2a:	1a5b      	subs	r3, r3, r1
 8004e2c:	17dc      	asrs	r4, r3, #31
 8004e2e:	4022      	ands	r2, r4
 8004e30:	18d3      	adds	r3, r2, r3
 8004e32:	111b      	asrs	r3, r3, #4
 8004e34:	185b      	adds	r3, r3, r1
 8004e36:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)

08004e3c <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8004e40:	4770      	bx	lr
 8004e42:	46c0      	nop			@ (mov r8, r8)

08004e44 <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e46:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004e48:	3201      	adds	r2, #1
 8004e4a:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004e4c:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8004e4e:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e50:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8004e52:	0176      	lsls	r6, r6, #5
 8004e54:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 8004e56:	781c      	ldrb	r4, [r3, #0]
 8004e58:	2c0f      	cmp	r4, #15
 8004e5a:	d80c      	bhi.n	8004e76 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004e5c:	6904      	ldr	r4, [r0, #16]
 8004e5e:	4225      	tst	r5, r4
 8004e60:	d0f9      	beq.n	8004e56 <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8004e62:	3201      	adds	r2, #1
 8004e64:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004e66:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8004e68:	4296      	cmp	r6, r2
 8004e6a:	d8f4      	bhi.n	8004e56 <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8004e6c:	781c      	ldrb	r4, [r3, #0]
 8004e6e:	2c0f      	cmp	r4, #15
 8004e70:	d8f1      	bhi.n	8004e56 <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 8004e72:	2301      	movs	r3, #1
 8004e74:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8004e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e78 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8004e78:	8a43      	ldrh	r3, [r0, #18]
 8004e7a:	8981      	ldrh	r1, [r0, #12]
{
 8004e7c:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8004e7e:	18c9      	adds	r1, r1, r3
 8004e80:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8004e82:	8943      	ldrh	r3, [r0, #10]
 8004e84:	040d      	lsls	r5, r1, #16
 8004e86:	430d      	orrs	r5, r1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <RVBS_Clear+0x26>
 8004e8c:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 8004e8e:	6944      	ldr	r4, [r0, #20]
 8004e90:	005a      	lsls	r2, r3, #1
 8004e92:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8004e94:	3301      	adds	r3, #1
 8004e96:	8942      	ldrh	r2, [r0, #10]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d8f8      	bhi.n	8004e90 <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8004e9e:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8004ea0:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8004ea2:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8004ea4:	bd30      	pop	{r4, r5, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)

08004ea8 <RVBS_Init>:
{
 8004ea8:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8004eaa:	f7ff ffe5 	bl	8004e78 <RVBS_Clear>
}
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8004eb0:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8004eb2:	8982      	ldrh	r2, [r0, #12]
 8004eb4:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8004eb6:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8004eb8:	428a      	cmp	r2, r1
 8004eba:	d00d      	beq.n	8004ed8 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004ebc:	8a44      	ldrh	r4, [r0, #18]
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d808      	bhi.n	8004ed4 <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8004ec2:	7c04      	ldrb	r4, [r0, #16]
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d10f      	bne.n	8004ee8 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d911      	bls.n	8004ef0 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e000      	b.n	8004ed6 <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 8004ed4:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8004ed6:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d309      	bcc.n	8004ef0 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8004edc:	8a40      	ldrh	r0, [r0, #18]
 8004ede:	4283      	cmp	r3, r0
 8004ee0:	4180      	sbcs	r0, r0
 8004ee2:	4240      	negs	r0, r0
 8004ee4:	0080      	lsls	r0, r0, #2
 8004ee6:	e7f6      	b.n	8004ed6 <RVBS_CheckFaultState+0x26>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d2f1      	bcs.n	8004ed0 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8004eec:	2300      	movs	r3, #0
 8004eee:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8004ef0:	2002      	movs	r0, #2
 8004ef2:	e7f0      	b.n	8004ed6 <RVBS_CheckFaultState+0x26>

08004ef4 <RVBS_CalcAvVbus>:
{
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef6:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 8004ef8:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <RVBS_CalcAvVbus+0x64>)
{
 8004efa:	0004      	movs	r4, r0
 8004efc:	000d      	movs	r5, r1
 8004efe:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d01d      	beq.n	8004f40 <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 8004f04:	7e47      	ldrb	r7, [r0, #25]
 8004f06:	6942      	ldr	r2, [r0, #20]
 8004f08:	007b      	lsls	r3, r7, #1
 8004f0a:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8004f0c:	8943      	ldrh	r3, [r0, #10]
 8004f0e:	7a86      	ldrb	r6, [r0, #10]
 8004f10:	4698      	mov	r8, r3
 8004f12:	2e00      	cmp	r6, #0
 8004f14:	d01e      	beq.n	8004f54 <RVBS_CalcAvVbus+0x60>
 8004f16:	2300      	movs	r3, #0
      wtemp = 0u;
 8004f18:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 8004f1a:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 8004f20:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8004f22:	3202      	adds	r2, #2
 8004f24:	42b3      	cmp	r3, r6
 8004f26:	d1f8      	bne.n	8004f1a <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 8004f28:	4641      	mov	r1, r8
 8004f2a:	f7fb f8c7 	bl	80000bc <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8004f2e:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8004f30:	4646      	mov	r6, r8
 8004f32:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8004f34:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8004f36:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8004f38:	42b7      	cmp	r7, r6
 8004f3a:	d208      	bcs.n	8004f4e <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 8004f3c:	3701      	adds	r7, #1
 8004f3e:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8004f40:	0020      	movs	r0, r4
 8004f42:	f7ff ffb5 	bl	8004eb0 <RVBS_CheckFaultState>
 8004f46:	8120      	strh	r0, [r4, #8]
}
 8004f48:	bc80      	pop	{r7}
 8004f4a:	46b8      	mov	r8, r7
 8004f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	7663      	strb	r3, [r4, #25]
 8004f52:	e7f5      	b.n	8004f40 <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7eb      	b.n	8004f30 <RVBS_CalcAvVbus+0x3c>
 8004f58:	0000ffff 	.word	0x0000ffff

08004f5c <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8004f60:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 8004f62:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8004f64:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 8004f66:	3301      	adds	r3, #1
 8004f68:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8004f6a:	4770      	bx	lr

08004f6c <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004f70:	4770      	bx	lr
 8004f72:	46c0      	nop			@ (mov r8, r8)

08004f74 <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 8004f74:	230c      	movs	r3, #12
 8004f76:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004f78:	4770      	bx	lr
 8004f7a:	46c0      	nop			@ (mov r8, r8)

08004f7c <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8004f80:	4770      	bx	lr
 8004f82:	46c0      	nop			@ (mov r8, r8)

08004f84 <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 8004f84:	0003      	movs	r3, r0
 8004f86:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8004f88:	2500      	movs	r5, #0
 8004f8a:	5f4c      	ldrsh	r4, [r1, r5]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8004f8c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8004f8e:	781a      	ldrb	r2, [r3, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8004f90:	8809      	ldrh	r1, [r1, #0]
    if (*pMecSpeedUnit < 0)
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	da01      	bge.n	8004f9a <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 8004f96:	4249      	negs	r1, r1
 8004f98:	b289      	uxth	r1, r1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8004f9a:	2512      	movs	r5, #18
 8004f9c:	5f5c      	ldrsh	r4, [r3, r5]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8004f9e:	8add      	ldrh	r5, [r3, #22]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8004fa0:	8a9e      	ldrh	r6, [r3, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8004fa2:	428d      	cmp	r5, r1
 8004fa4:	d80f      	bhi.n	8004fc6 <SPD_IsMecSpeedReliable+0x42>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8004fa6:	b2a5      	uxth	r5, r4
    if (pHandle->hMecAccelUnitP < 0)
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	db11      	blt.n	8004fd0 <SPD_IsMecSpeedReliable+0x4c>
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8004fac:	8b1c      	ldrh	r4, [r3, #24]
 8004fae:	42ac      	cmp	r4, r5
 8004fb0:	d309      	bcc.n	8004fc6 <SPD_IsMecSpeedReliable+0x42>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8004fb2:	428e      	cmp	r6, r1
 8004fb4:	d307      	bcc.n	8004fc6 <SPD_IsMecSpeedReliable+0x42>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8004fb6:	4290      	cmp	r0, r2
 8004fb8:	d80d      	bhi.n	8004fd6 <SPD_IsMecSpeedReliable+0x52>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8004fba:	1a10      	subs	r0, r2, r0
 8004fbc:	1e41      	subs	r1, r0, #1
 8004fbe:	4188      	sbcs	r0, r1
 8004fc0:	b2c0      	uxtb	r0, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8004fc2:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8004fc6:	4290      	cmp	r0, r2
 8004fc8:	d9f7      	bls.n	8004fba <SPD_IsMecSpeedReliable+0x36>
        bSpeedErrorNumber++;
 8004fca:	3201      	adds	r2, #1
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	e7f4      	b.n	8004fba <SPD_IsMecSpeedReliable+0x36>
      hAux = -(pHandle->hMecAccelUnitP);
 8004fd0:	426d      	negs	r5, r5
 8004fd2:	b2ad      	uxth	r5, r5
      hAbsMecAccelUnitP = (uint16_t)hAux;
 8004fd4:	e7ea      	b.n	8004fac <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 8004fd6:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 8004fd8:	2001      	movs	r0, #1
 8004fda:	e7f2      	b.n	8004fc2 <SPD_IsMecSpeedReliable+0x3e>

08004fdc <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8004fdc:	232a      	movs	r3, #42	@ 0x2a
    pHandle->SPD = SPD_Handle;
 8004fde:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8004fe0:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 8004fe2:	5cc3      	ldrb	r3, [r0, r3]
 8004fe4:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8004fe6:	222c      	movs	r2, #44	@ 0x2c
 8004fe8:	5e83      	ldrsh	r3, [r0, r2]
 8004fea:	041b      	lsls	r3, r3, #16
 8004fec:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8004fee:	222e      	movs	r2, #46	@ 0x2e
 8004ff0:	5e83      	ldrsh	r3, [r0, r2]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8004ffa:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8004ffc:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004ffe:	4770      	bx	lr

08005000 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005000:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005002:	4770      	bx	lr

08005004 <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8005004:	6940      	ldr	r0, [r0, #20]
#endif
}
 8005006:	4770      	bx	lr

08005008 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005008:	7803      	ldrb	r3, [r0, #0]
{
 800500a:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 800500c:	2b03      	cmp	r3, #3
 800500e:	d000      	beq.n	8005012 <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005010:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8005012:	2100      	movs	r1, #0
 8005014:	6900      	ldr	r0, [r0, #16]
 8005016:	f7ff feb3 	bl	8004d80 <PID_SetIntegralTerm>
}
 800501a:	e7f9      	b.n	8005010 <STC_Clear+0x8>

0800501c <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800501c:	230a      	movs	r3, #10
 800501e:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8005020:	4770      	bx	lr
 8005022:	46c0      	nop			@ (mov r8, r8)

08005024 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005024:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8005026:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8005028:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800502a:	4770      	bx	lr

0800502c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800502e:	7803      	ldrb	r3, [r0, #0]
{
 8005030:	0004      	movs	r4, r0
 8005032:	000d      	movs	r5, r1
 8005034:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005036:	2b04      	cmp	r3, #4
 8005038:	d012      	beq.n	8005060 <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800503a:	2306      	movs	r3, #6
 800503c:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800503e:	8bc3      	ldrh	r3, [r0, #30]
 8005040:	4299      	cmp	r1, r3
 8005042:	dd01      	ble.n	8005048 <STC_ExecRamp+0x1c>
 8005044:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8005046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8005048:	2224      	movs	r2, #36	@ 0x24
 800504a:	5e83      	ldrsh	r3, [r0, r2]
 800504c:	428b      	cmp	r3, r1
 800504e:	dcf9      	bgt.n	8005044 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8005050:	8c03      	ldrh	r3, [r0, #32]
 8005052:	4299      	cmp	r1, r3
 8005054:	da0e      	bge.n	8005074 <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8005056:	2222      	movs	r2, #34	@ 0x22
 8005058:	5e83      	ldrsh	r3, [r0, r2]
 800505a:	428b      	cmp	r3, r1
 800505c:	dbf2      	blt.n	8005044 <STC_ExecRamp+0x18>
 800505e:	e009      	b.n	8005074 <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005060:	f7ff ffdc 	bl	800501c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005064:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8005066:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005068:	42ab      	cmp	r3, r5
 800506a:	dbeb      	blt.n	8005044 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800506c:	2228      	movs	r2, #40	@ 0x28
 800506e:	5ea3      	ldrsh	r3, [r4, r2]
 8005070:	42ab      	cmp	r3, r5
 8005072:	dce7      	bgt.n	8005044 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8005074:	2e00      	cmp	r6, #0
 8005076:	d109      	bne.n	800508c <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005078:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800507a:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800507c:	2b03      	cmp	r3, #3
 800507e:	d013      	beq.n	80050a8 <STC_ExecRamp+0x7c>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005080:	60a5      	str	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8005082:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8005084:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8005086:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8005088:	2001      	movs	r0, #1
 800508a:	e7dc      	b.n	8005046 <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 800508c:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800508e:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005090:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005092:	4370      	muls	r0, r6
        wAux /= 1000U;
 8005094:	0089      	lsls	r1, r1, #2
 8005096:	f7fb f811 	bl	80000bc <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800509a:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 800509c:	1c46      	adds	r6, r0, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800509e:	0031      	movs	r1, r6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80050a0:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80050a2:	f7fb f895 	bl	80001d0 <__divsi3>
        pHandle->IncDecAmount = wAux1;
 80050a6:	e7ed      	b.n	8005084 <STC_ExecRamp+0x58>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80050a8:	6065      	str	r5, [r4, #4]
 80050aa:	e7ea      	b.n	8005082 <STC_ExecRamp+0x56>

080050ac <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80050ac:	7802      	ldrb	r2, [r0, #0]
{
 80050ae:	b570      	push	{r4, r5, r6, lr}
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80050b0:	68c3      	ldr	r3, [r0, #12]
{
 80050b2:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80050b4:	2a04      	cmp	r2, #4
 80050b6:	d01f      	beq.n	80050f8 <STC_CalcTorqueReference+0x4c>
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80050b8:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d908      	bls.n	80050d0 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80050be:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80050c0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80050c2:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 80050c4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80050c6:	2a03      	cmp	r2, #3
 80050c8:	d00a      	beq.n	80050e0 <STC_CalcTorqueReference+0x34>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80050ca:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80050cc:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d1f8      	bne.n	80050c6 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80050d4:	2302      	movs	r3, #2
 80050d6:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 80050d8:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80050da:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80050dc:	60c3      	str	r3, [r0, #12]
 80050de:	e7f2      	b.n	80050c6 <STC_CalcTorqueReference+0x1a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80050e0:	6960      	ldr	r0, [r4, #20]
 80050e2:	f7ff ff47 	bl	8004f74 <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 80050e6:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 80050e8:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80050ea:	b209      	sxth	r1, r1
 80050ec:	6920      	ldr	r0, [r4, #16]
 80050ee:	f7ff fe49 	bl	8004d84 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80050f2:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80050f4:	0405      	lsls	r5, r0, #16
 80050f6:	e7e9      	b.n	80050cc <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 80050f8:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d904      	bls.n	8005108 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 80050fe:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8005100:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8005102:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep--;
 8005104:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005106:	e7e0      	b.n	80050ca <STC_CalcTorqueReference+0x1e>
    else if (1U == pHandle->RampRemainingStep)
 8005108:	2b01      	cmp	r3, #1
 800510a:	d1de      	bne.n	80050ca <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800510c:	2302      	movs	r3, #2
 800510e:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005110:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005112:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005114:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8005116:	e7d8      	b.n	80050ca <STC_CalcTorqueReference+0x1e>

08005118 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 8005118:	232c      	movs	r3, #44	@ 0x2c
 800511a:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 800511c:	4770      	bx	lr
 800511e:	46c0      	nop			@ (mov r8, r8)

08005120 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8005120:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005122:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8005124:	041b      	lsls	r3, r3, #16
{
 8005126:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8005128:	4318      	orrs	r0, r3
}
 800512a:	b002      	add	sp, #8
 800512c:	4770      	bx	lr
 800512e:	46c0      	nop			@ (mov r8, r8)

08005130 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8005130:	b510      	push	{r4, lr}
 8005132:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8005134:	6940      	ldr	r0, [r0, #20]
 8005136:	f7ff ff1d 	bl	8004f74 <SPD_GetAvrgMecSpeedUnit>
 800513a:	0400      	lsls	r0, r0, #16
 800513c:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800513e:	bd10      	pop	{r4, pc}

08005140 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8005140:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005142:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8005144:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 8005146:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8005148:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800514a:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 800514c:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 800514e:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->hRemainingStep = 0U;
 8005150:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8005152:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005154:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8005156:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8005158:	4770      	bx	lr
 800515a:	46c0      	nop			@ (mov r8, r8)

0800515c <VSS_Init>:
{
 800515c:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 800515e:	f7ff ffef 	bl	8005140 <VSS_Clear>
}
 8005162:	bd10      	pop	{r4, pc}

08005164 <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	000d      	movs	r5, r1
 8005168:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 800516a:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800516c:	7841      	ldrb	r1, [r0, #1]
 800516e:	0028      	movs	r0, r5
 8005170:	f7fb f82e 	bl	80001d0 <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 8005174:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005176:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8005178:	bd70      	pop	{r4, r5, r6, pc}
 800517a:	46c0      	nop			@ (mov r8, r8)

0800517c <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	4647      	mov	r7, r8
 8005180:	46ce      	mov	lr, r9
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8005182:	232c      	movs	r3, #44	@ 0x2c
{
 8005184:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 8005186:	5cc3      	ldrb	r3, [r0, r3]
{
 8005188:	0004      	movs	r4, r0
 800518a:	000f      	movs	r7, r1
 800518c:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 800518e:	2b00      	cmp	r3, #0
 8005190:	d110      	bne.n	80051b4 <VSS_SetMecAcceleration+0x38>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005192:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005194:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005196:	4698      	mov	r8, r3
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005198:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800519a:	8b61      	ldrh	r1, [r4, #26]
 800519c:	0109      	lsls	r1, r1, #4
                                              / (((int32_t)SPEED_UNIT)
 800519e:	f7fb f817 	bl	80001d0 <__divsi3>
 80051a2:	0006      	movs	r6, r0
      if (0U == hDurationms)
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	d109      	bne.n	80051bc <VSS_SetMecAcceleration+0x40>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80051a8:	4643      	mov	r3, r8
 80051aa:	435e      	muls	r6, r3
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80051ac:	81a7      	strh	r7, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80051ae:	81e6      	strh	r6, [r4, #14]

        pHandle->hRemainingStep = 0U;
 80051b0:	8525      	strh	r5, [r4, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80051b2:	8567      	strh	r7, [r4, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80051b4:	bcc0      	pop	{r6, r7}
 80051b6:	46b9      	mov	r9, r7
 80051b8:	46b0      	mov	r8, r6
 80051ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 80051bc:	21fa      	movs	r1, #250	@ 0xfa
 80051be:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80051c0:	0089      	lsls	r1, r1, #2
 80051c2:	4368      	muls	r0, r5
 80051c4:	f7fa ff7a 	bl	80000bc <__udivsi3>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80051c8:	220e      	movs	r2, #14
 80051ca:	5ea3      	ldrsh	r3, [r4, r2]
        hNbrStep++;
 80051cc:	3001      	adds	r0, #1
 80051ce:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80051d0:	4699      	mov	r9, r3
        pHandle->hRemainingStep = hNbrStep;
 80051d2:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 80051d4:	2d00      	cmp	r5, #0
 80051d6:	d104      	bne.n	80051e2 <VSS_SetMecAcceleration+0x66>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80051d8:	464b      	mov	r3, r9
 80051da:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80051dc:	8567      	strh	r7, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80051de:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80051e0:	e7e8      	b.n	80051b4 <VSS_SetMecAcceleration+0x38>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80051e2:	0018      	movs	r0, r3
 80051e4:	4641      	mov	r1, r8
 80051e6:	f7fa fff3 	bl	80001d0 <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80051ea:	b236      	sxth	r6, r6
 80051ec:	1a30      	subs	r0, r6, r0
 80051ee:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80051f0:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80051f2:	f7fa ffed 	bl	80001d0 <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80051f6:	4643      	mov	r3, r8
 80051f8:	4343      	muls	r3, r0
 80051fa:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80051fc:	464b      	mov	r3, r9
 80051fe:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005200:	8567      	strh	r7, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005202:	6263      	str	r3, [r4, #36]	@ 0x24
    }
 8005204:	e7d6      	b.n	80051b4 <VSS_SetMecAcceleration+0x38>
 8005206:	46c0      	nop			@ (mov r8, r8)

08005208 <memset>:
 8005208:	0003      	movs	r3, r0
 800520a:	1882      	adds	r2, r0, r2
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	7019      	strb	r1, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <memcpy>:
 8005218:	2300      	movs	r3, #0
 800521a:	b510      	push	{r4, lr}
 800521c:	429a      	cmp	r2, r3
 800521e:	d100      	bne.n	8005222 <memcpy+0xa>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	5ccc      	ldrb	r4, [r1, r3]
 8005224:	54c4      	strb	r4, [r0, r3]
 8005226:	3301      	adds	r3, #1
 8005228:	e7f8      	b.n	800521c <memcpy+0x4>
	...

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
