
motor_driver_eval_graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  080056dc  080056dc  000066dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061bc  080061bc  00008308  2**0
                  CONTENTS
  4 .ARM          00000000  080061bc  080061bc  00008308  2**0
                  CONTENTS
  5 .data         00000308  20000000  080061bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e0  20000308  080064c4  00008308  2**2
                  ALLOC
  7 ._user_heap_stack 00000480  200006e8  080064c4  000086e8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00008308  2**0
                  CONTENTS, READONLY
  9 .debug_line   000240bb  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000008c  00000000  00000000  0002c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0002e001  00000000  00000000  0002c477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005d94  00000000  00000000  0005a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001910  00000000  00000000  00060210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00008ee4  00000000  00000000  00061b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024d0  00000000  00000000  0006aa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0006ced4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004150  00000000  00000000  0006cf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000131ad  00000000  00000000  00071068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__udivsi3>:
 80000bc:	2200      	movs	r2, #0
 80000be:	0843      	lsrs	r3, r0, #1
 80000c0:	428b      	cmp	r3, r1
 80000c2:	d374      	bcc.n	80001ae <__udivsi3+0xf2>
 80000c4:	0903      	lsrs	r3, r0, #4
 80000c6:	428b      	cmp	r3, r1
 80000c8:	d35f      	bcc.n	800018a <__udivsi3+0xce>
 80000ca:	0a03      	lsrs	r3, r0, #8
 80000cc:	428b      	cmp	r3, r1
 80000ce:	d344      	bcc.n	800015a <__udivsi3+0x9e>
 80000d0:	0b03      	lsrs	r3, r0, #12
 80000d2:	428b      	cmp	r3, r1
 80000d4:	d328      	bcc.n	8000128 <__udivsi3+0x6c>
 80000d6:	0c03      	lsrs	r3, r0, #16
 80000d8:	428b      	cmp	r3, r1
 80000da:	d30d      	bcc.n	80000f8 <__udivsi3+0x3c>
 80000dc:	22ff      	movs	r2, #255	@ 0xff
 80000de:	0209      	lsls	r1, r1, #8
 80000e0:	ba12      	rev	r2, r2
 80000e2:	0c03      	lsrs	r3, r0, #16
 80000e4:	428b      	cmp	r3, r1
 80000e6:	d302      	bcc.n	80000ee <__udivsi3+0x32>
 80000e8:	1212      	asrs	r2, r2, #8
 80000ea:	0209      	lsls	r1, r1, #8
 80000ec:	d065      	beq.n	80001ba <__udivsi3+0xfe>
 80000ee:	0b03      	lsrs	r3, r0, #12
 80000f0:	428b      	cmp	r3, r1
 80000f2:	d319      	bcc.n	8000128 <__udivsi3+0x6c>
 80000f4:	e000      	b.n	80000f8 <__udivsi3+0x3c>
 80000f6:	0a09      	lsrs	r1, r1, #8
 80000f8:	0bc3      	lsrs	r3, r0, #15
 80000fa:	428b      	cmp	r3, r1
 80000fc:	d301      	bcc.n	8000102 <__udivsi3+0x46>
 80000fe:	03cb      	lsls	r3, r1, #15
 8000100:	1ac0      	subs	r0, r0, r3
 8000102:	4152      	adcs	r2, r2
 8000104:	0b83      	lsrs	r3, r0, #14
 8000106:	428b      	cmp	r3, r1
 8000108:	d301      	bcc.n	800010e <__udivsi3+0x52>
 800010a:	038b      	lsls	r3, r1, #14
 800010c:	1ac0      	subs	r0, r0, r3
 800010e:	4152      	adcs	r2, r2
 8000110:	0b43      	lsrs	r3, r0, #13
 8000112:	428b      	cmp	r3, r1
 8000114:	d301      	bcc.n	800011a <__udivsi3+0x5e>
 8000116:	034b      	lsls	r3, r1, #13
 8000118:	1ac0      	subs	r0, r0, r3
 800011a:	4152      	adcs	r2, r2
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d301      	bcc.n	8000126 <__udivsi3+0x6a>
 8000122:	030b      	lsls	r3, r1, #12
 8000124:	1ac0      	subs	r0, r0, r3
 8000126:	4152      	adcs	r2, r2
 8000128:	0ac3      	lsrs	r3, r0, #11
 800012a:	428b      	cmp	r3, r1
 800012c:	d301      	bcc.n	8000132 <__udivsi3+0x76>
 800012e:	02cb      	lsls	r3, r1, #11
 8000130:	1ac0      	subs	r0, r0, r3
 8000132:	4152      	adcs	r2, r2
 8000134:	0a83      	lsrs	r3, r0, #10
 8000136:	428b      	cmp	r3, r1
 8000138:	d301      	bcc.n	800013e <__udivsi3+0x82>
 800013a:	028b      	lsls	r3, r1, #10
 800013c:	1ac0      	subs	r0, r0, r3
 800013e:	4152      	adcs	r2, r2
 8000140:	0a43      	lsrs	r3, r0, #9
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x8e>
 8000146:	024b      	lsls	r3, r1, #9
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0a03      	lsrs	r3, r0, #8
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x9a>
 8000152:	020b      	lsls	r3, r1, #8
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	d2cd      	bcs.n	80000f6 <__udivsi3+0x3a>
 800015a:	09c3      	lsrs	r3, r0, #7
 800015c:	428b      	cmp	r3, r1
 800015e:	d301      	bcc.n	8000164 <__udivsi3+0xa8>
 8000160:	01cb      	lsls	r3, r1, #7
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	4152      	adcs	r2, r2
 8000166:	0983      	lsrs	r3, r0, #6
 8000168:	428b      	cmp	r3, r1
 800016a:	d301      	bcc.n	8000170 <__udivsi3+0xb4>
 800016c:	018b      	lsls	r3, r1, #6
 800016e:	1ac0      	subs	r0, r0, r3
 8000170:	4152      	adcs	r2, r2
 8000172:	0943      	lsrs	r3, r0, #5
 8000174:	428b      	cmp	r3, r1
 8000176:	d301      	bcc.n	800017c <__udivsi3+0xc0>
 8000178:	014b      	lsls	r3, r1, #5
 800017a:	1ac0      	subs	r0, r0, r3
 800017c:	4152      	adcs	r2, r2
 800017e:	0903      	lsrs	r3, r0, #4
 8000180:	428b      	cmp	r3, r1
 8000182:	d301      	bcc.n	8000188 <__udivsi3+0xcc>
 8000184:	010b      	lsls	r3, r1, #4
 8000186:	1ac0      	subs	r0, r0, r3
 8000188:	4152      	adcs	r2, r2
 800018a:	08c3      	lsrs	r3, r0, #3
 800018c:	428b      	cmp	r3, r1
 800018e:	d301      	bcc.n	8000194 <__udivsi3+0xd8>
 8000190:	00cb      	lsls	r3, r1, #3
 8000192:	1ac0      	subs	r0, r0, r3
 8000194:	4152      	adcs	r2, r2
 8000196:	0883      	lsrs	r3, r0, #2
 8000198:	428b      	cmp	r3, r1
 800019a:	d301      	bcc.n	80001a0 <__udivsi3+0xe4>
 800019c:	008b      	lsls	r3, r1, #2
 800019e:	1ac0      	subs	r0, r0, r3
 80001a0:	4152      	adcs	r2, r2
 80001a2:	0843      	lsrs	r3, r0, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xf0>
 80001a8:	004b      	lsls	r3, r1, #1
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	1a41      	subs	r1, r0, r1
 80001b0:	d200      	bcs.n	80001b4 <__udivsi3+0xf8>
 80001b2:	4601      	mov	r1, r0
 80001b4:	4152      	adcs	r2, r2
 80001b6:	4610      	mov	r0, r2
 80001b8:	4770      	bx	lr
 80001ba:	e7ff      	b.n	80001bc <__udivsi3+0x100>
 80001bc:	b501      	push	{r0, lr}
 80001be:	2000      	movs	r0, #0
 80001c0:	f000 f8f0 	bl	80003a4 <__aeabi_idiv0>
 80001c4:	bd02      	pop	{r1, pc}
 80001c6:	46c0      	nop			@ (mov r8, r8)

080001c8 <__aeabi_uidivmod>:
 80001c8:	2900      	cmp	r1, #0
 80001ca:	d0f7      	beq.n	80001bc <__udivsi3+0x100>
 80001cc:	e776      	b.n	80000bc <__udivsi3>
 80001ce:	4770      	bx	lr

080001d0 <__divsi3>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	430b      	orrs	r3, r1
 80001d4:	d47f      	bmi.n	80002d6 <__divsi3+0x106>
 80001d6:	2200      	movs	r2, #0
 80001d8:	0843      	lsrs	r3, r0, #1
 80001da:	428b      	cmp	r3, r1
 80001dc:	d374      	bcc.n	80002c8 <__divsi3+0xf8>
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d35f      	bcc.n	80002a4 <__divsi3+0xd4>
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d344      	bcc.n	8000274 <__divsi3+0xa4>
 80001ea:	0b03      	lsrs	r3, r0, #12
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d328      	bcc.n	8000242 <__divsi3+0x72>
 80001f0:	0c03      	lsrs	r3, r0, #16
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d30d      	bcc.n	8000212 <__divsi3+0x42>
 80001f6:	22ff      	movs	r2, #255	@ 0xff
 80001f8:	0209      	lsls	r1, r1, #8
 80001fa:	ba12      	rev	r2, r2
 80001fc:	0c03      	lsrs	r3, r0, #16
 80001fe:	428b      	cmp	r3, r1
 8000200:	d302      	bcc.n	8000208 <__divsi3+0x38>
 8000202:	1212      	asrs	r2, r2, #8
 8000204:	0209      	lsls	r1, r1, #8
 8000206:	d065      	beq.n	80002d4 <__divsi3+0x104>
 8000208:	0b03      	lsrs	r3, r0, #12
 800020a:	428b      	cmp	r3, r1
 800020c:	d319      	bcc.n	8000242 <__divsi3+0x72>
 800020e:	e000      	b.n	8000212 <__divsi3+0x42>
 8000210:	0a09      	lsrs	r1, r1, #8
 8000212:	0bc3      	lsrs	r3, r0, #15
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__divsi3+0x4c>
 8000218:	03cb      	lsls	r3, r1, #15
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0b83      	lsrs	r3, r0, #14
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__divsi3+0x58>
 8000224:	038b      	lsls	r3, r1, #14
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0b43      	lsrs	r3, r0, #13
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__divsi3+0x64>
 8000230:	034b      	lsls	r3, r1, #13
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__divsi3+0x70>
 800023c:	030b      	lsls	r3, r1, #12
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0ac3      	lsrs	r3, r0, #11
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__divsi3+0x7c>
 8000248:	02cb      	lsls	r3, r1, #11
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0a83      	lsrs	r3, r0, #10
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x88>
 8000254:	028b      	lsls	r3, r1, #10
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0a43      	lsrs	r3, r0, #9
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x94>
 8000260:	024b      	lsls	r3, r1, #9
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0a03      	lsrs	r3, r0, #8
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0xa0>
 800026c:	020b      	lsls	r3, r1, #8
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	d2cd      	bcs.n	8000210 <__divsi3+0x40>
 8000274:	09c3      	lsrs	r3, r0, #7
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__divsi3+0xae>
 800027a:	01cb      	lsls	r3, r1, #7
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	0983      	lsrs	r3, r0, #6
 8000282:	428b      	cmp	r3, r1
 8000284:	d301      	bcc.n	800028a <__divsi3+0xba>
 8000286:	018b      	lsls	r3, r1, #6
 8000288:	1ac0      	subs	r0, r0, r3
 800028a:	4152      	adcs	r2, r2
 800028c:	0943      	lsrs	r3, r0, #5
 800028e:	428b      	cmp	r3, r1
 8000290:	d301      	bcc.n	8000296 <__divsi3+0xc6>
 8000292:	014b      	lsls	r3, r1, #5
 8000294:	1ac0      	subs	r0, r0, r3
 8000296:	4152      	adcs	r2, r2
 8000298:	0903      	lsrs	r3, r0, #4
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0xd2>
 800029e:	010b      	lsls	r3, r1, #4
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	08c3      	lsrs	r3, r0, #3
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d301      	bcc.n	80002ae <__divsi3+0xde>
 80002aa:	00cb      	lsls	r3, r1, #3
 80002ac:	1ac0      	subs	r0, r0, r3
 80002ae:	4152      	adcs	r2, r2
 80002b0:	0883      	lsrs	r3, r0, #2
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d301      	bcc.n	80002ba <__divsi3+0xea>
 80002b6:	008b      	lsls	r3, r1, #2
 80002b8:	1ac0      	subs	r0, r0, r3
 80002ba:	4152      	adcs	r2, r2
 80002bc:	0843      	lsrs	r3, r0, #1
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xf6>
 80002c2:	004b      	lsls	r3, r1, #1
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	1a41      	subs	r1, r0, r1
 80002ca:	d200      	bcs.n	80002ce <__divsi3+0xfe>
 80002cc:	4601      	mov	r1, r0
 80002ce:	4152      	adcs	r2, r2
 80002d0:	4610      	mov	r0, r2
 80002d2:	4770      	bx	lr
 80002d4:	e05d      	b.n	8000392 <__divsi3+0x1c2>
 80002d6:	0fca      	lsrs	r2, r1, #31
 80002d8:	d000      	beq.n	80002dc <__divsi3+0x10c>
 80002da:	4249      	negs	r1, r1
 80002dc:	1003      	asrs	r3, r0, #32
 80002de:	d300      	bcc.n	80002e2 <__divsi3+0x112>
 80002e0:	4240      	negs	r0, r0
 80002e2:	4053      	eors	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	469c      	mov	ip, r3
 80002e8:	0903      	lsrs	r3, r0, #4
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d32d      	bcc.n	800034a <__divsi3+0x17a>
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d312      	bcc.n	800031a <__divsi3+0x14a>
 80002f4:	22fc      	movs	r2, #252	@ 0xfc
 80002f6:	0189      	lsls	r1, r1, #6
 80002f8:	ba12      	rev	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d30c      	bcc.n	800031a <__divsi3+0x14a>
 8000300:	0189      	lsls	r1, r1, #6
 8000302:	1192      	asrs	r2, r2, #6
 8000304:	428b      	cmp	r3, r1
 8000306:	d308      	bcc.n	800031a <__divsi3+0x14a>
 8000308:	0189      	lsls	r1, r1, #6
 800030a:	1192      	asrs	r2, r2, #6
 800030c:	428b      	cmp	r3, r1
 800030e:	d304      	bcc.n	800031a <__divsi3+0x14a>
 8000310:	0189      	lsls	r1, r1, #6
 8000312:	d03a      	beq.n	800038a <__divsi3+0x1ba>
 8000314:	1192      	asrs	r2, r2, #6
 8000316:	e000      	b.n	800031a <__divsi3+0x14a>
 8000318:	0989      	lsrs	r1, r1, #6
 800031a:	09c3      	lsrs	r3, r0, #7
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__divsi3+0x154>
 8000320:	01cb      	lsls	r3, r1, #7
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	0983      	lsrs	r3, r0, #6
 8000328:	428b      	cmp	r3, r1
 800032a:	d301      	bcc.n	8000330 <__divsi3+0x160>
 800032c:	018b      	lsls	r3, r1, #6
 800032e:	1ac0      	subs	r0, r0, r3
 8000330:	4152      	adcs	r2, r2
 8000332:	0943      	lsrs	r3, r0, #5
 8000334:	428b      	cmp	r3, r1
 8000336:	d301      	bcc.n	800033c <__divsi3+0x16c>
 8000338:	014b      	lsls	r3, r1, #5
 800033a:	1ac0      	subs	r0, r0, r3
 800033c:	4152      	adcs	r2, r2
 800033e:	0903      	lsrs	r3, r0, #4
 8000340:	428b      	cmp	r3, r1
 8000342:	d301      	bcc.n	8000348 <__divsi3+0x178>
 8000344:	010b      	lsls	r3, r1, #4
 8000346:	1ac0      	subs	r0, r0, r3
 8000348:	4152      	adcs	r2, r2
 800034a:	08c3      	lsrs	r3, r0, #3
 800034c:	428b      	cmp	r3, r1
 800034e:	d301      	bcc.n	8000354 <__divsi3+0x184>
 8000350:	00cb      	lsls	r3, r1, #3
 8000352:	1ac0      	subs	r0, r0, r3
 8000354:	4152      	adcs	r2, r2
 8000356:	0883      	lsrs	r3, r0, #2
 8000358:	428b      	cmp	r3, r1
 800035a:	d301      	bcc.n	8000360 <__divsi3+0x190>
 800035c:	008b      	lsls	r3, r1, #2
 800035e:	1ac0      	subs	r0, r0, r3
 8000360:	4152      	adcs	r2, r2
 8000362:	d2d9      	bcs.n	8000318 <__divsi3+0x148>
 8000364:	0843      	lsrs	r3, r0, #1
 8000366:	428b      	cmp	r3, r1
 8000368:	d301      	bcc.n	800036e <__divsi3+0x19e>
 800036a:	004b      	lsls	r3, r1, #1
 800036c:	1ac0      	subs	r0, r0, r3
 800036e:	4152      	adcs	r2, r2
 8000370:	1a41      	subs	r1, r0, r1
 8000372:	d200      	bcs.n	8000376 <__divsi3+0x1a6>
 8000374:	4601      	mov	r1, r0
 8000376:	4663      	mov	r3, ip
 8000378:	4152      	adcs	r2, r2
 800037a:	105b      	asrs	r3, r3, #1
 800037c:	4610      	mov	r0, r2
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x1b4>
 8000380:	4240      	negs	r0, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d500      	bpl.n	8000388 <__divsi3+0x1b8>
 8000386:	4249      	negs	r1, r1
 8000388:	4770      	bx	lr
 800038a:	4663      	mov	r3, ip
 800038c:	105b      	asrs	r3, r3, #1
 800038e:	d300      	bcc.n	8000392 <__divsi3+0x1c2>
 8000390:	4240      	negs	r0, r0
 8000392:	b501      	push	{r0, lr}
 8000394:	2000      	movs	r0, #0
 8000396:	f000 f805 	bl	80003a4 <__aeabi_idiv0>
 800039a:	bd02      	pop	{r1, pc}

0800039c <__aeabi_idivmod>:
 800039c:	2900      	cmp	r1, #0
 800039e:	d0f8      	beq.n	8000392 <__divsi3+0x1c2>
 80003a0:	e716      	b.n	80001d0 <__divsi3>
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_idiv0>:
 80003a4:	4770      	bx	lr
 80003a6:	46c0      	nop			@ (mov r8, r8)

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f002 fe46 	bl	800303c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490c      	ldr	r1, [pc, #48]	@ (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a09      	ldr	r2, [pc, #36]	@ (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c09      	ldr	r4, [pc, #36]	@ (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
/*  bl __libc_init_array */
/* Call the application's entry point.*/
  bl main
 80003d6:	f000 f853 	bl	8000480 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 80003e8:	080061bc 	.word	0x080061bc
  ldr r2, =_sbss
 80003ec:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80003f0:	200006e8 	.word	0x200006e8

080003f4 <ADC1_IRQHandler>:
 * @retval : None
*/
.section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_IRQHandler>
	...

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b510      	push	{r4, lr}
 80003fa:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fc:	2228      	movs	r2, #40	@ 0x28
 80003fe:	2100      	movs	r1, #0
 8000400:	a80a      	add	r0, sp, #40	@ 0x28
 8000402:	f005 f94d 	bl	80056a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	2210      	movs	r2, #16
 8000408:	2100      	movs	r1, #0
 800040a:	4668      	mov	r0, sp
 800040c:	f005 f948 	bl	80056a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000410:	2210      	movs	r2, #16
 8000412:	2100      	movs	r1, #0
 8000414:	a804      	add	r0, sp, #16
 8000416:	f005 f943 	bl	80056a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 800041a:	2211      	movs	r2, #17
 800041c:	2301      	movs	r3, #1
 800041e:	9208      	str	r2, [sp, #32]
 8000420:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000422:	2310      	movs	r3, #16
 8000424:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2380      	movs	r3, #128	@ 0x80
 8000428:	2202      	movs	r2, #2
 800042a:	025b      	lsls	r3, r3, #9
 800042c:	9210      	str	r2, [sp, #64]	@ 0x40
 800042e:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000430:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000432:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000434:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000438:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800043a:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043c:	f003 f902 	bl	8003644 <HAL_RCC_OscConfig>
 8000440:	2800      	cmp	r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000446:	e7fe      	b.n	8000446 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000450:	3b05      	subs	r3, #5
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	2101      	movs	r1, #1
 8000454:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000458:	f003 fb4c 	bl	8003af4 <HAL_RCC_ClockConfig>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x6c>
 8000460:	b672      	cpsid	i
  while (1)
 8000462:	e7fe      	b.n	8000462 <SystemClock_Config+0x6a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000464:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000468:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	f003 fc3d 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	2800      	cmp	r0, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x7e>
 8000472:	b672      	cpsid	i
  while (1)
 8000474:	e7fe      	b.n	8000474 <SystemClock_Config+0x7c>
  HAL_RCC_EnableCSS();
 8000476:	f003 fbed 	bl	8003c54 <HAL_RCC_EnableCSS>
}
 800047a:	b014      	add	sp, #80	@ 0x50
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <main>:
{
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46de      	mov	lr, fp
 8000484:	4645      	mov	r5, r8
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 800048e:	f002 fdfd 	bl	800308c <HAL_Init>
  SystemClock_Config();
 8000492:	f7ff ffb1 	bl	80003f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	2214      	movs	r2, #20
 8000498:	2100      	movs	r1, #0
 800049a:	a811      	add	r0, sp, #68	@ 0x44
 800049c:	f005 f900 	bl	80056a0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	4ed6      	ldr	r6, [pc, #856]	@ (80007fc <main+0x37c>)
 80004a4:	0312      	lsls	r2, r2, #12
 80004a6:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004a8:	2580      	movs	r5, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4313      	orrs	r3, r2
 80004ac:	6173      	str	r3, [r6, #20]
 80004ae:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004b0:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b4:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	9304      	str	r3, [sp, #16]
 80004b8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	6973      	ldr	r3, [r6, #20]
 80004bc:	03d2      	lsls	r2, r2, #15
 80004be:	4313      	orrs	r3, r2
 80004c0:	6173      	str	r3, [r6, #20]
 80004c2:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004c4:	012d      	lsls	r5, r5, #4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	9305      	str	r3, [sp, #20]
 80004cc:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	6973      	ldr	r3, [r6, #20]
 80004d0:	0292      	lsls	r2, r2, #10
 80004d2:	4313      	orrs	r3, r2
 80004d4:	6173      	str	r3, [r6, #20]
 80004d6:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004d8:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004dc:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	9306      	str	r3, [sp, #24]
 80004e0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	6973      	ldr	r3, [r6, #20]
 80004e4:	02d2      	lsls	r2, r2, #11
 80004e6:	4313      	orrs	r3, r2
 80004e8:	6173      	str	r3, [r6, #20]
 80004ea:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004ec:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4013      	ands	r3, r2
 80004f0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin, GPIO_PIN_SET);
 80004f6:	f003 f89f 	bl	8003638 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80004fa:	2380      	movs	r3, #128	@ 0x80
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000500:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000502:	2401      	movs	r4, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000504:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000506:	48be      	ldr	r0, [pc, #760]	@ (8000800 <main+0x380>)
 8000508:	a911      	add	r1, sp, #68	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800050a:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050c:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800050e:	f002 ff9d 	bl	800344c <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000512:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2700      	movs	r7, #0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000516:	2302      	movs	r3, #2
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000518:	a911      	add	r1, sp, #68	@ 0x44
 800051a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051c:	9313      	str	r3, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	9714      	str	r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = M1_EN_DRIVER_Pin;
 8000520:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(M1_EN_DRIVER_GPIO_Port, &GPIO_InitStruct);
 8000524:	f002 ff92 	bl	800344c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000528:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052a:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052c:	4323      	orrs	r3, r4
 800052e:	6173      	str	r3, [r6, #20]
 8000530:	6973      	ldr	r3, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000532:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000534:	4023      	ands	r3, r4
 8000536:	9303      	str	r3, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000538:	a811      	add	r0, sp, #68	@ 0x44
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	9b03      	ldr	r3, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053c:	f005 f8b0 	bl	80056a0 <memset>
  hadc.Instance = ADC1;
 8000540:	4eb0      	ldr	r6, [pc, #704]	@ (8000804 <main+0x384>)
 8000542:	4bb1      	ldr	r3, [pc, #708]	@ (8000808 <main+0x388>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000544:	6077      	str	r7, [r6, #4]
  hadc.Instance = ADC1;
 8000546:	6033      	str	r3, [r6, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000548:	2320      	movs	r3, #32
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	60b7      	str	r7, [r6, #8]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800054c:	61b7      	str	r7, [r6, #24]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800054e:	61f7      	str	r7, [r6, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000550:	2780      	movs	r7, #128	@ 0x80
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000552:	4698      	mov	r8, r3
 8000554:	60f3      	str	r3, [r6, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000556:	3b1c      	subs	r3, #28
 8000558:	6173      	str	r3, [r6, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800055a:	00ff      	lsls	r7, r7, #3
  hadc.Init.DMAContinuousRequests = ENABLE;
 800055c:	3320      	adds	r3, #32
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800055e:	0030      	movs	r0, r6
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000560:	6134      	str	r4, [r6, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000562:	6237      	str	r7, [r6, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000564:	54f4      	strb	r4, [r6, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000566:	62b4      	str	r4, [r6, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000568:	f002 fdb2 	bl	80030d0 <HAL_ADC_Init>
 800056c:	2800      	cmp	r0, #0
 800056e:	d001      	beq.n	8000574 <main+0xf4>
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0xf2>
  sConfig.Channel = ADC_CHANNEL_5;
 8000574:	2305      	movs	r3, #5
 8000576:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000578:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057a:	0030      	movs	r0, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800057c:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057e:	a911      	add	r1, sp, #68	@ 0x44
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000580:	469a      	mov	sl, r3
 8000582:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000584:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000586:	f002 fe47 	bl	8003218 <HAL_ADC_ConfigChannel>
 800058a:	2800      	cmp	r0, #0
 800058c:	d001      	beq.n	8000592 <main+0x112>
 800058e:	b672      	cpsid	i
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x110>
  sConfig.Channel = ADC_CHANNEL_9;
 8000592:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000594:	0030      	movs	r0, r6
 8000596:	a911      	add	r1, sp, #68	@ 0x44
  sConfig.Channel = ADC_CHANNEL_9;
 8000598:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059a:	f002 fe3d 	bl	8003218 <HAL_ADC_ConfigChannel>
 800059e:	4683      	mov	fp, r0
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x128>
 80005a4:	b672      	cpsid	i
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x126>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	2608      	movs	r6, #8
 80005aa:	0001      	movs	r1, r0
 80005ac:	0032      	movs	r2, r6
 80005ae:	a808      	add	r0, sp, #32
 80005b0:	f005 f876 	bl	80056a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b4:	221c      	movs	r2, #28
 80005b6:	4659      	mov	r1, fp
 80005b8:	a80a      	add	r0, sp, #40	@ 0x28
 80005ba:	f005 f871 	bl	80056a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005be:	2220      	movs	r2, #32
 80005c0:	4659      	mov	r1, fp
 80005c2:	a811      	add	r0, sp, #68	@ 0x44
 80005c4:	f005 f86c 	bl	80056a0 <memset>
  htim1.Instance = TIM1;
 80005c8:	4b90      	ldr	r3, [pc, #576]	@ (800080c <main+0x38c>)
 80005ca:	4699      	mov	r9, r3
 80005cc:	464a      	mov	r2, r9
 80005ce:	4b90      	ldr	r3, [pc, #576]	@ (8000810 <main+0x390>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d0:	4648      	mov	r0, r9
  htim1.Instance = TIM1;
 80005d2:	6013      	str	r3, [r2, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80005d4:	464b      	mov	r3, r9
 80005d6:	465a      	mov	r2, fp
 80005d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80005da:	464a      	mov	r2, r9
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	6093      	str	r3, [r2, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80005e0:	23e5      	movs	r3, #229	@ 0xe5
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	464b      	mov	r3, r9
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	465a      	mov	r2, fp
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80005f0:	615c      	str	r4, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005f4:	f003 ff3a 	bl	800446c <HAL_TIM_PWM_Init>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d001      	beq.n	8000600 <main+0x180>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x17e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000600:	4643      	mov	r3, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000604:	a908      	add	r1, sp, #32
 8000606:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000608:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060a:	f004 f959 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 800060e:	1e02      	subs	r2, r0, #0
 8000610:	d001      	beq.n	8000616 <main+0x196>
 8000612:	b672      	cpsid	i
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x194>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	2360      	movs	r3, #96	@ 0x60
 8000618:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800061a:	23e5      	movs	r3, #229	@ 0xe5
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000620:	2302      	movs	r3, #2
 8000622:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000624:	33fe      	adds	r3, #254	@ 0xfe
 8000626:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000628:	3301      	adds	r3, #1
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062a:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800062c:	33ff      	adds	r3, #255	@ 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062e:	4648      	mov	r0, r9
 8000630:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000632:	960d      	str	r6, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000634:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	f004 f823 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 800063a:	2800      	cmp	r0, #0
 800063c:	d001      	beq.n	8000642 <main+0x1c2>
 800063e:	b672      	cpsid	i
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x1c0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000642:	2204      	movs	r2, #4
 8000644:	4648      	mov	r0, r9
 8000646:	a90a      	add	r1, sp, #40	@ 0x28
 8000648:	f004 f81a 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 800064c:	2800      	cmp	r0, #0
 800064e:	d001      	beq.n	8000654 <main+0x1d4>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x1d2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000654:	0032      	movs	r2, r6
 8000656:	4648      	mov	r0, r9
 8000658:	a90a      	add	r1, sp, #40	@ 0x28
 800065a:	f004 f811 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 800065e:	2800      	cmp	r0, #0
 8000660:	d001      	beq.n	8000666 <main+0x1e6>
 8000662:	b672      	cpsid	i
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x1e4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000666:	2370      	movs	r3, #112	@ 0x70
 8000668:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800066a:	4b6a      	ldr	r3, [pc, #424]	@ (8000814 <main+0x394>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800066e:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000670:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000672:	220c      	movs	r2, #12
 8000674:	4648      	mov	r0, r9
 8000676:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000678:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800067a:	f004 f801 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 800067e:	2800      	cmp	r0, #0
 8000680:	d001      	beq.n	8000686 <main+0x206>
 8000682:	b672      	cpsid	i
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x204>
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000686:	230e      	movs	r3, #14
 8000688:	9314      	str	r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800068a:	4653      	mov	r3, sl
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800068c:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800068e:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000690:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000692:	a911      	add	r1, sp, #68	@ 0x44
 8000694:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000696:	9511      	str	r5, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000698:	9712      	str	r7, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800069a:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800069c:	f004 f93e 	bl	800491c <HAL_TIMEx_ConfigBreakDeadTime>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x228>
 80006a4:	b672      	cpsid	i
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x226>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	2508      	movs	r5, #8
  HAL_TIM_MspPostInit(&htim1);
 80006aa:	4648      	mov	r0, r9
 80006ac:	f002 fba0 	bl	8002df0 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80006b0:	221c      	movs	r2, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	a812      	add	r0, sp, #72	@ 0x48
 80006b6:	f004 fff3 	bl	80056a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	002a      	movs	r2, r5
 80006bc:	2100      	movs	r1, #0
 80006be:	a80a      	add	r0, sp, #40	@ 0x28
 80006c0:	f004 ffee 	bl	80056a0 <memset>
  htim2.Instance = TIM2;
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	4c54      	ldr	r4, [pc, #336]	@ (8000818 <main+0x398>)
 80006c8:	05db      	lsls	r3, r3, #23
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ca:	2701      	movs	r7, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006cc:	2603      	movs	r6, #3
  htim2.Instance = TIM2;
 80006ce:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80006d0:	2300      	movs	r3, #0
  htim2.Init.Period = M1_PULSE_NBR;
 80006d2:	4a52      	ldr	r2, [pc, #328]	@ (800081c <main+0x39c>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006d4:	0020      	movs	r0, r4
 80006d6:	a911      	add	r1, sp, #68	@ 0x44
  htim2.Init.Prescaler = 0;
 80006d8:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = M1_PULSE_NBR;
 80006dc:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006e2:	9611      	str	r6, [sp, #68]	@ 0x44
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e4:	9713      	str	r7, [sp, #76]	@ 0x4c
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 80006e6:	9515      	str	r5, [sp, #84]	@ 0x54
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006e8:	9717      	str	r7, [sp, #92]	@ 0x5c
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 80006ea:	9519      	str	r5, [sp, #100]	@ 0x64
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006ec:	f003 ff2c 	bl	8004548 <HAL_TIM_Encoder_Init>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d001      	beq.n	80006f8 <main+0x278>
 80006f4:	b672      	cpsid	i
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <main+0x276>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	900a      	str	r0, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fc:	a90a      	add	r1, sp, #40	@ 0x28
 80006fe:	0020      	movs	r0, r4
 8000700:	f004 f8de 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000704:	1e02      	subs	r2, r0, #0
 8000706:	d001      	beq.n	800070c <main+0x28c>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x28a>
  huart1.Instance = USART1;
 800070c:	4b44      	ldr	r3, [pc, #272]	@ (8000820 <main+0x3a0>)
 800070e:	4945      	ldr	r1, [pc, #276]	@ (8000824 <main+0x3a4>)
 8000710:	0018      	movs	r0, r3
 8000712:	6019      	str	r1, [r3, #0]
  huart1.Init.BaudRate = 1843200;
 8000714:	23e1      	movs	r3, #225	@ 0xe1
 8000716:	035b      	lsls	r3, r3, #13
 8000718:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071c:	6082      	str	r2, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c2      	str	r2, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000722:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000724:	6182      	str	r2, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000726:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000728:	6202      	str	r2, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	6242      	str	r2, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072c:	f004 fade 	bl	8004cec <HAL_UART_Init>
 8000730:	1e05      	subs	r5, r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x2b8>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x2b6>
  MX_MotorControl_Init();
 8000738:	f000 fe0e 	bl	8001358 <MX_MotorControl_Init>
  hspi1.Instance = SPI1;
 800073c:	4c3a      	ldr	r4, [pc, #232]	@ (8000828 <main+0x3a8>)
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <main+0x3ac>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	0020      	movs	r0, r4
  hspi1.Instance = SPI1;
 8000742:	6023      	str	r3, [r4, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	23e0      	movs	r3, #224	@ 0xe0
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	60e3      	str	r3, [r4, #12]
  hspi1.Init.CRCPolynomial = 7;
 800074a:	2307      	movs	r3, #7
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800074c:	6065      	str	r5, [r4, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	60a5      	str	r5, [r4, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	6165      	str	r5, [r4, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000754:	61a5      	str	r5, [r4, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	6265      	str	r5, [r4, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	62a5      	str	r5, [r4, #40]	@ 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075c:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800075e:	6365      	str	r5, [r4, #52]	@ 0x34
  hspi1.Init.CRCPolynomial = 7;
 8000760:	4698      	mov	r8, r3
 8000762:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	f003 fc8e 	bl	8004084 <HAL_SPI_Init>
 8000768:	1e05      	subs	r5, r0, #0
 800076a:	d001      	beq.n	8000770 <main+0x2f0>
 800076c:	b672      	cpsid	i
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0x2ee>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000770:	0002      	movs	r2, r0
 8000772:	0031      	movs	r1, r6
 8000774:	201b      	movs	r0, #27
 8000776:	f002 fddf 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800077a:	201b      	movs	r0, #27
 800077c:	f002 fe06 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000780:	002a      	movs	r2, r5
 8000782:	0039      	movs	r1, r7
 8000784:	2009      	movs	r0, #9
 8000786:	f002 fdd7 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800078a:	2009      	movs	r0, #9
 800078c:	f002 fdfe 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000790:	002a      	movs	r2, r5
 8000792:	0029      	movs	r1, r5
 8000794:	200b      	movs	r0, #11
 8000796:	f002 fdcf 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800079a:	200b      	movs	r0, #11
 800079c:	f002 fdf6 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80007a0:	002a      	movs	r2, r5
 80007a2:	0031      	movs	r1, r6
 80007a4:	200a      	movs	r0, #10
 80007a6:	f002 fdc7 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f002 fdee 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007b0:	002a      	movs	r2, r5
 80007b2:	0029      	movs	r1, r5
 80007b4:	200d      	movs	r0, #13
 80007b6:	f002 fdbf 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007ba:	200d      	movs	r0, #13
 80007bc:	f002 fde6 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80007c0:	002a      	movs	r2, r5
 80007c2:	0031      	movs	r1, r6
 80007c4:	200f      	movs	r0, #15
 80007c6:	f002 fdb7 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f002 fdde 	bl	800338c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80007d0:	002a      	movs	r2, r5
 80007d2:	0031      	movs	r1, r6
 80007d4:	4640      	mov	r0, r8
 80007d6:	f002 fdaf 	bl	8003338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007da:	4640      	mov	r0, r8
 80007dc:	f002 fdd6 	bl	800338c <HAL_NVIC_EnableIRQ>
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <main+0x3b0>)
	  HAL_SPI_TransmitReceive(&hspi1, TX_Buffer, RX_Buffer, sizeof(TX_Buffer), 3000);
 80007e2:	2502      	movs	r5, #2
 80007e4:	4698      	mov	r8, r3
 80007e6:	4f13      	ldr	r7, [pc, #76]	@ (8000834 <main+0x3b4>)
 80007e8:	4e13      	ldr	r6, [pc, #76]	@ (8000838 <main+0x3b8>)
 80007ea:	002b      	movs	r3, r5
 80007ec:	4642      	mov	r2, r8
 80007ee:	0039      	movs	r1, r7
 80007f0:	0020      	movs	r0, r4
 80007f2:	9600      	str	r6, [sp, #0]
 80007f4:	f003 fcec 	bl	80041d0 <HAL_SPI_TransmitReceive>
  while (1)
 80007f8:	e7f7      	b.n	80007ea <main+0x36a>
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000800 	.word	0x48000800
 8000804:	200005d8 	.word	0x200005d8
 8000808:	40012400 	.word	0x40012400
 800080c:	200004e8 	.word	0x200004e8
 8000810:	40012c00 	.word	0x40012c00
 8000814:	000006ea 	.word	0x000006ea
 8000818:	200004a0 	.word	0x200004a0
 800081c:	00003fff 	.word	0x00003fff
 8000820:	20000390 	.word	0x20000390
 8000824:	40013800 	.word	0x40013800
 8000828:	20000530 	.word	0x20000530
 800082c:	40013000 	.word	0x40013000
 8000830:	20000000 	.word	0x20000000
 8000834:	20000004 	.word	0x20000004
 8000838:	00000bb8 	.word	0x00000bb8

0800083c <Error_Handler>:
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <Error_Handler+0x2>

08000840 <MC_StartMotor1>:
  * Note also that if the startup sequence fails the #RUN state may never be reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 8000840:	b510      	push	{r4, lr}
  return (MCI_StartMotor(pMCI[M1]));
 8000842:	4b02      	ldr	r3, [pc, #8]	@ (800084c <MC_StartMotor1+0xc>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f000 f879 	bl	800093c <MCI_StartMotor>
}
 800084a:	bd10      	pop	{r4, pc}
 800084c:	2000068c 	.word	0x2000068c

08000850 <MC_StopMotor1>:
  * machine and check if the #IDLE state has been reached.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 8000850:	b510      	push	{r4, lr}
  return (MCI_StopMotor(pMCI[M1]));
 8000852:	4b02      	ldr	r3, [pc, #8]	@ (800085c <MC_StopMotor1+0xc>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	f000 f889 	bl	800096c <MCI_StopMotor>
}
 800085a:	bd10      	pop	{r4, pc}
 800085c:	2000068c 	.word	0x2000068c

08000860 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
 8000860:	b510      	push	{r4, lr}
  return (MCI_GetSTMState(pMCI[M1]));
 8000862:	4b02      	ldr	r3, [pc, #8]	@ (800086c <MC_GetSTMStateMotor1+0xc>)
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	f000 f863 	bl	8000930 <MCI_GetSTMState>
}
 800086a:	bd10      	pop	{r4, pc}
 800086c:	2000068c 	.word	0x2000068c

08000870 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8000870:	4770      	bx	lr
 8000872:	46c0      	nop			@ (mov r8, r8)

08000874 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8000874:	4770      	bx	lr
 8000876:	46c0      	nop			@ (mov r8, r8)

08000878 <MCI_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;
 8000878:	6083      	str	r3, [r0, #8]

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800087a:	2300      	movs	r3, #0
    pHandle->pFOCVars = pFOCVars;
 800087c:	6042      	str	r2, [r0, #4]
    pHandle->hFinalSpeed = 0;
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800087e:	2200      	movs	r2, #0
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000880:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8000882:	81c3      	strh	r3, [r0, #14]
    pHandle->hFinalTorque = 0;
 8000884:	8203      	strh	r3, [r0, #16]
    pHandle->hDurationms = 0;
 8000886:	61c3      	str	r3, [r0, #28]
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8000888:	6203      	str	r3, [r0, #32]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800088a:	3324      	adds	r3, #36	@ 0x24
    pHandle->pSTC = pSTC;
 800088c:	6001      	str	r1, [r0, #0]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800088e:	54c2      	strb	r2, [r0, r3]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000890:	4770      	bx	lr
 8000892:	46c0      	nop			@ (mov r8, r8)

08000894 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000894:	2301      	movs	r3, #1
 8000896:	7303      	strb	r3, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <MCI_ExecSpeedRamp+0x10>)
    pHandle->hFinalSpeed = hFinalSpeed;
 800089a:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 800089c:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800089e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80008a0:	4770      	bx	lr
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	00000301 	.word	0x00000301

080008a8 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80008a8:	8c03      	ldrh	r3, [r0, #32]
 80008aa:	430b      	orrs	r3, r1
 80008ac:	4393      	bics	r3, r2
 80008ae:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80008b0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80008b2:	4319      	orrs	r1, r3
 80008b4:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80008b6:	4770      	bx	lr

080008b8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80008b8:	2324      	movs	r3, #36	@ 0x24
{
 80008ba:	b510      	push	{r4, lr}
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80008bc:	5cc2      	ldrb	r2, [r0, r3]
{
 80008be:	0004      	movs	r4, r0
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80008c0:	2a01      	cmp	r2, #1
 80008c2:	d000      	beq.n	80008c6 <MCI_ExecBufferedCommands+0xe>
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80008c4:	bd10      	pop	{r4, pc}
      switch (pHandle->lastCommand)
 80008c6:	7b01      	ldrb	r1, [r0, #12]
 80008c8:	2902      	cmp	r1, #2
 80008ca:	d007      	beq.n	80008dc <MCI_ExecBufferedCommands+0x24>
 80008cc:	2903      	cmp	r1, #3
 80008ce:	d026      	beq.n	800091e <MCI_ExecBufferedCommands+0x66>
 80008d0:	2901      	cmp	r1, #1
 80008d2:	d016      	beq.n	8000902 <MCI_ExecBufferedCommands+0x4a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80008d4:	2324      	movs	r3, #36	@ 0x24
 80008d6:	2203      	movs	r2, #3
 80008d8:	54e2      	strb	r2, [r4, r3]
}
 80008da:	e7f3      	b.n	80008c4 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80008dc:	2100      	movs	r1, #0
 80008de:	6842      	ldr	r2, [r0, #4]
 80008e0:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80008e2:	6800      	ldr	r0, [r0, #0]
 80008e4:	3104      	adds	r1, #4
 80008e6:	f004 fde9 	bl	80054bc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80008ea:	8ba2      	ldrh	r2, [r4, #28]
 80008ec:	2310      	movs	r3, #16
 80008ee:	5ee1      	ldrsh	r1, [r4, r3]
 80008f0:	6820      	ldr	r0, [r4, #0]
 80008f2:	f004 fde7 	bl	80054c4 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d0ec      	beq.n	80008d4 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80008fa:	2324      	movs	r3, #36	@ 0x24
 80008fc:	2202      	movs	r2, #2
 80008fe:	54e2      	strb	r2, [r4, r3]
 8000900:	e7e0      	b.n	80008c4 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000902:	2100      	movs	r1, #0
 8000904:	6842      	ldr	r2, [r0, #4]
 8000906:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8000908:	6800      	ldr	r0, [r0, #0]
 800090a:	3103      	adds	r1, #3
 800090c:	f004 fdd6 	bl	80054bc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8000910:	8ba2      	ldrh	r2, [r4, #28]
 8000912:	230e      	movs	r3, #14
 8000914:	5ee1      	ldrsh	r1, [r4, r3]
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	f004 fdd4 	bl	80054c4 <STC_ExecRamp>
          break;
 800091c:	e7eb      	b.n	80008f6 <MCI_ExecBufferedCommands+0x3e>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800091e:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000920:	6840      	ldr	r0, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000922:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000924:	54c2      	strb	r2, [r0, r3]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000926:	2204      	movs	r2, #4
 8000928:	3010      	adds	r0, #16
 800092a:	f004 fec1 	bl	80056b0 <memcpy>
      if (commandHasBeenExecuted)
 800092e:	e7e4      	b.n	80008fa <MCI_ExecBufferedCommands+0x42>

08000930 <MCI_GetSTMState>:
__weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
 8000930:	7fc0      	ldrb	r0, [r0, #31]
#endif
}
 8000932:	4770      	bx	lr

08000934 <MCI_GetOccurredFaults>:
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
 8000934:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
#endif
}
 8000936:	4770      	bx	lr

08000938 <MCI_GetCurrentFaults>:
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
 8000938:	8c00      	ldrh	r0, [r0, #32]
#endif
}
 800093a:	4770      	bx	lr

0800093c <MCI_StartMotor>:
{
 800093c:	b510      	push	{r4, lr}
 800093e:	0004      	movs	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000940:	f7ff fff6 	bl	8000930 <MCI_GetSTMState>
 8000944:	2800      	cmp	r0, #0
 8000946:	d001      	beq.n	800094c <MCI_StartMotor+0x10>
  bool retVal = false;
 8000948:	2000      	movs	r0, #0
}
 800094a:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800094c:	0020      	movs	r0, r4
 800094e:	f7ff fff1 	bl	8000934 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8000952:	2800      	cmp	r0, #0
 8000954:	d1f8      	bne.n	8000948 <MCI_StartMotor+0xc>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8000956:	0020      	movs	r0, r4
 8000958:	f7ff ffee 	bl	8000938 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800095c:	2800      	cmp	r0, #0
 800095e:	d1f3      	bne.n	8000948 <MCI_StartMotor+0xc>
      pHandle->DirectCommand = MCI_START;
 8000960:	2301      	movs	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000962:	2224      	movs	r2, #36	@ 0x24
      pHandle->DirectCommand = MCI_START;
 8000964:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 8000966:	3001      	adds	r0, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000968:	54a3      	strb	r3, [r4, r2]
      retVal = true;
 800096a:	e7ee      	b.n	800094a <MCI_StartMotor+0xe>

0800096c <MCI_StopMotor>:
{
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	0004      	movs	r4, r0
    State = MCI_GetSTMState(pHandle);
 8000970:	f7ff ffde 	bl	8000930 <MCI_GetSTMState>
      status = false;
 8000974:	2500      	movs	r5, #0
    if ((IDLE == State) || (ICLWAIT == State))
 8000976:	2800      	cmp	r0, #0
 8000978:	d004      	beq.n	8000984 <MCI_StopMotor+0x18>
 800097a:	0003      	movs	r3, r0
 800097c:	3b0c      	subs	r3, #12
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	4193      	sbcs	r3, r2
 8000982:	b2dd      	uxtb	r5, r3
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8000984:	0020      	movs	r0, r4
 8000986:	f7ff ffd5 	bl	8000934 <MCI_GetOccurredFaults>
 800098a:	2800      	cmp	r0, #0
 800098c:	d002      	beq.n	8000994 <MCI_StopMotor+0x28>
  bool retVal = false;
 800098e:	2500      	movs	r5, #0
}
 8000990:	0028      	movs	r0, r5
 8000992:	bd70      	pop	{r4, r5, r6, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8000994:	0020      	movs	r0, r4
 8000996:	f7ff ffcf 	bl	8000938 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800099a:	2800      	cmp	r0, #0
 800099c:	d1f7      	bne.n	800098e <MCI_StopMotor+0x22>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0f5      	beq.n	800098e <MCI_StopMotor+0x22>
      pHandle->DirectCommand = MCI_STOP;
 80009a2:	2305      	movs	r3, #5
 80009a4:	77a3      	strb	r3, [r4, #30]
      retVal = true;
 80009a6:	e7f3      	b.n	8000990 <MCI_StopMotor+0x24>

080009a8 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80009a8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80009aa:	8c00      	ldrh	r0, [r0, #32]
 80009ac:	0400      	lsls	r0, r0, #16
 80009ae:	4318      	orrs	r0, r3
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80009b0:	4770      	bx	lr
 80009b2:	46c0      	nop			@ (mov r8, r8)

080009b4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80009b4:	b201      	sxth	r1, r0
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009b6:	014a      	lsls	r2, r1, #5
 80009b8:	1852      	adds	r2, r2, r1
 80009ba:	00d2      	lsls	r2, r2, #3
 80009bc:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80009be:	1403      	asrs	r3, r0, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009c0:	0092      	lsls	r2, r2, #2
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80009c2:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <MCM_Clarke+0x58>)
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009c4:	1a52      	subs	r2, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80009c6:	4358      	muls	r0, r3
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009c8:	00d3      	lsls	r3, r2, #3
 80009ca:	18d3      	adds	r3, r2, r3
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80009cc:	2280      	movs	r2, #128	@ 0x80
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	425b      	negs	r3, r3
 80009d2:	1a1b      	subs	r3, r3, r0
 80009d4:	1a1b      	subs	r3, r3, r0
{
 80009d6:	b084      	sub	sp, #16
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80009d8:	13db      	asrs	r3, r3, #15
  if (wbeta_tmp > INT16_MAX)
 80009da:	0212      	lsls	r2, r2, #8
 80009dc:	4293      	cmp	r3, r2
 80009de:	da04      	bge.n	80009ea <MCM_Clarke+0x36>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80009e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <MCM_Clarke+0x5c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	da08      	bge.n	80009f8 <MCM_Clarke+0x44>
 80009e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <MCM_Clarke+0x60>)
 80009e8:	e000      	b.n	80009ec <MCM_Clarke+0x38>
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MCM_Clarke+0x64>)
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80009ec:	0408      	lsls	r0, r1, #16
 80009ee:	041b      	lsls	r3, r3, #16
 80009f0:	0c00      	lsrs	r0, r0, #16
 80009f2:	4318      	orrs	r0, r3
}
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80009f8:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MCM_Clarke+0x60>)
 80009fa:	1c1a      	adds	r2, r3, #0
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	4283      	cmp	r3, r0
 8000a00:	db01      	blt.n	8000a06 <MCM_Clarke+0x52>
 8000a02:	b213      	sxth	r3, r2
 8000a04:	e7f2      	b.n	80009ec <MCM_Clarke+0x38>
 8000a06:	1c02      	adds	r2, r0, #0
 8000a08:	b213      	sxth	r3, r2
 8000a0a:	e7ef      	b.n	80009ec <MCM_Clarke+0x38>
 8000a0c:	000049e6 	.word	0x000049e6
 8000a10:	ffff8000 	.word	0xffff8000
 8000a14:	ffff8001 	.word	0xffff8001
 8000a18:	00007fff 	.word	0x00007fff

08000a1c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	18c3      	adds	r3, r0, r3
  uhindex = (uint16_t)shindex;
 8000a22:	b29b      	uxth	r3, r3
{
 8000a24:	b530      	push	{r4, r5, lr}
  uhindex /= ((uint16_t)64);
 8000a26:	099b      	lsrs	r3, r3, #6

  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a28:	24c0      	movs	r4, #192	@ 0xc0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2580      	movs	r5, #128	@ 0x80
 8000a2e:	00a4      	lsls	r4, r4, #2
{
 8000a30:	2100      	movs	r1, #0
 8000a32:	2200      	movs	r2, #0
 8000a34:	b083      	sub	sp, #12
 8000a36:	4020      	ands	r0, r4
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a38:	00ad      	lsls	r5, r5, #2
 8000a3a:	42a8      	cmp	r0, r5
 8000a3c:	d023      	beq.n	8000a86 <MCM_Trig_Functions+0x6a>
 8000a3e:	d815      	bhi.n	8000a6c <MCM_Trig_Functions+0x50>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d029      	beq.n	8000a98 <MCM_Trig_Functions+0x7c>
 8000a44:	2480      	movs	r4, #128	@ 0x80
 8000a46:	0064      	lsls	r4, r4, #1
 8000a48:	42a0      	cmp	r0, r4
 8000a4a:	d109      	bne.n	8000a60 <MCM_Trig_Functions+0x44>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	4918      	ldr	r1, [pc, #96]	@ (8000ab4 <MCM_Trig_Functions+0x98>)
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	0052      	lsls	r2, r2, #1
 8000a56:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a58:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a5a:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a5c:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a5e:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8000a60:	0408      	lsls	r0, r1, #16
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c00      	lsrs	r0, r0, #16
 8000a66:	4310      	orrs	r0, r2
}
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd30      	pop	{r4, r5, pc}
  switch (((uint16_t)uhindex) & SIN_MASK)
 8000a6c:	42a0      	cmp	r0, r4
 8000a6e:	d1f7      	bne.n	8000a60 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	490f      	ldr	r1, [pc, #60]	@ (8000ab4 <MCM_Trig_Functions+0x98>)
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a7a:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a7c:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a7e:	5a59      	ldrh	r1, [r3, r1]
 8000a80:	4249      	negs	r1, r1
 8000a82:	b209      	sxth	r1, r1
      break;
 8000a84:	e7ec      	b.n	8000a60 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a8a:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a8c:	4909      	ldr	r1, [pc, #36]	@ (8000ab4 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a92:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a94:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8000a96:	e7e3      	b.n	8000a60 <MCM_Trig_Functions+0x44>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000a9c:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000a9e:	4905      	ldr	r1, [pc, #20]	@ (8000ab4 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aa4:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aa6:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aa8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aaa:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aac:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aae:	b209      	sxth	r1, r1
      break;
 8000ab0:	e7d6      	b.n	8000a60 <MCM_Trig_Functions+0x44>
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	080056dc 	.word	0x080056dc

08000ab8 <MCM_Park>:
{
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	b205      	sxth	r5, r0
 8000abc:	1404      	asrs	r4, r0, #16
 8000abe:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000ac0:	0008      	movs	r0, r1
 8000ac2:	f7ff ffab 	bl	8000a1c <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000ac6:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000ac8:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000aca:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000acc:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8000ace:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ((int32_t)Local_Vector_Components.hSin);
 8000ad0:	4360      	muls	r0, r4
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000ad2:	1a12      	subs	r2, r2, r0
  if (wqd_tmp > INT16_MAX)
 8000ad4:	2080      	movs	r0, #128	@ 0x80
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000ad6:	13d2      	asrs	r2, r2, #15
  if (wqd_tmp > INT16_MAX)
 8000ad8:	0200      	lsls	r0, r0, #8
 8000ada:	4282      	cmp	r2, r0
 8000adc:	da12      	bge.n	8000b04 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 8000ade:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <MCM_Park+0x90>)
 8000ae0:	4282      	cmp	r2, r0
 8000ae2:	da24      	bge.n	8000b2e <MCM_Park+0x76>
  if (wqd_tmp > INT16_MAX)
 8000ae4:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000ae6:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000ae8:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000aea:	185b      	adds	r3, r3, r1
 8000aec:	4817      	ldr	r0, [pc, #92]	@ (8000b4c <MCM_Park+0x94>)
 8000aee:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000af0:	0212      	lsls	r2, r2, #8
 8000af2:	4293      	cmp	r3, r2
 8000af4:	db0f      	blt.n	8000b16 <MCM_Park+0x5e>
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MCM_Park+0x98>)
  return (Output);
 8000af8:	0400      	lsls	r0, r0, #16
 8000afa:	041b      	lsls	r3, r3, #16
 8000afc:	0c00      	lsrs	r0, r0, #16
 8000afe:	4318      	orrs	r0, r3
}
 8000b00:	b004      	add	sp, #16
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	4812      	ldr	r0, [pc, #72]	@ (8000b50 <MCM_Park+0x98>)
  if (wqd_tmp > INT16_MAX)
 8000b06:	2280      	movs	r2, #128	@ 0x80
  d_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hSin);
 8000b08:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8000b0a:	4361      	muls	r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8000b0c:	185b      	adds	r3, r3, r1
 8000b0e:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8000b10:	0212      	lsls	r2, r2, #8
 8000b12:	4293      	cmp	r3, r2
 8000b14:	daef      	bge.n	8000af6 <MCM_Park+0x3e>
  else if (wqd_tmp < (-32768))
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <MCM_Park+0x90>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	da01      	bge.n	8000b20 <MCM_Park+0x68>
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MCM_Park+0x94>)
 8000b1e:	e7eb      	b.n	8000af8 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b20:	490a      	ldr	r1, [pc, #40]	@ (8000b4c <MCM_Park+0x94>)
 8000b22:	1c1a      	adds	r2, r3, #0
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	428b      	cmp	r3, r1
 8000b28:	db0b      	blt.n	8000b42 <MCM_Park+0x8a>
 8000b2a:	b213      	sxth	r3, r2
 8000b2c:	e7e4      	b.n	8000af8 <MCM_Park+0x40>
    hqd_tmp = ((int16_t)wqd_tmp);
 8000b2e:	4e07      	ldr	r6, [pc, #28]	@ (8000b4c <MCM_Park+0x94>)
 8000b30:	1c10      	adds	r0, r2, #0
 8000b32:	b212      	sxth	r2, r2
 8000b34:	42b2      	cmp	r2, r6
 8000b36:	db01      	blt.n	8000b3c <MCM_Park+0x84>
 8000b38:	b200      	sxth	r0, r0
 8000b3a:	e7e4      	b.n	8000b06 <MCM_Park+0x4e>
 8000b3c:	1c30      	adds	r0, r6, #0
 8000b3e:	b200      	sxth	r0, r0
 8000b40:	e7e1      	b.n	8000b06 <MCM_Park+0x4e>
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	b213      	sxth	r3, r2
 8000b46:	e7d7      	b.n	8000af8 <MCM_Park+0x40>
 8000b48:	ffff8000 	.word	0xffff8000
 8000b4c:	ffff8001 	.word	0xffff8001
 8000b50:	00007fff 	.word	0x00007fff

08000b54 <MCM_Rev_Park>:
{
 8000b54:	b530      	push	{r4, r5, lr}
 8000b56:	b205      	sxth	r5, r0
 8000b58:	b085      	sub	sp, #20
 8000b5a:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	f7ff ff5d 	bl	8000a1c <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000b62:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000b64:	1403      	asrs	r3, r0, #16
 8000b66:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000b68:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8000b6a:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hCos);
 8000b6c:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8000b6e:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ((int32_t)Local_Vector_Components.hSin);
 8000b70:	436b      	muls	r3, r5
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8000b72:	1840      	adds	r0, r0, r1
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8000b74:	1ae4      	subs	r4, r4, r3
 8000b76:	13e4      	asrs	r4, r4, #15
  return (Output);
 8000b78:	0040      	lsls	r0, r0, #1
 8000b7a:	0424      	lsls	r4, r4, #16
 8000b7c:	0c00      	lsrs	r0, r0, #16
 8000b7e:	4320      	orrs	r0, r4
}
 8000b80:	b005      	add	sp, #20
 8000b82:	bd30      	pop	{r4, r5, pc}

08000b84 <FOC_Clear>:

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8000b84:	2126      	movs	r1, #38	@ 0x26
 8000b86:	2200      	movs	r2, #0
 8000b88:	4341      	muls	r1, r0
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <FOC_Clear+0x50>)
{
 8000b8c:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000b8e:	52ca      	strh	r2, [r1, r3]
 8000b90:	185b      	adds	r3, r3, r1
 8000b92:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000b94:	809a      	strh	r2, [r3, #4]
 8000b96:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000b98:	819a      	strh	r2, [r3, #12]
 8000b9a:	81da      	strh	r2, [r3, #14]
    FOCVars[bMotor].Iqdref = NULL_qd;
 8000b9c:	821a      	strh	r2, [r3, #16]
 8000b9e:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000ba0:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000ba2:	82da      	strh	r2, [r3, #22]
 8000ba4:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000ba6:	835a      	strh	r2, [r3, #26]
 8000ba8:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000baa:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <FOC_Clear+0x54>)
 8000bae:	0084      	lsls	r4, r0, #2
 8000bb0:	58e0      	ldr	r0, [r4, r3]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f004 fb30 	bl	8005218 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <FOC_Clear+0x58>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	58e0      	ldr	r0, [r4, r3]
 8000bbe:	f004 fb2b 	bl	8005218 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <FOC_Clear+0x5c>)
 8000bc4:	58e0      	ldr	r0, [r4, r3]
 8000bc6:	f004 fc6b 	bl	80054a0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <FOC_Clear+0x60>)
 8000bcc:	58e0      	ldr	r0, [r4, r3]
 8000bce:	f000 fd0b 	bl	80015e8 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	20000664 	.word	0x20000664
 8000bd8:	20000010 	.word	0x20000010
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000014 	.word	0x20000014
 8000be4:	2000065c 	.word	0x2000065c

08000be8 <MCboot>:
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	46de      	mov	lr, fp
 8000bec:	4657      	mov	r7, sl
 8000bee:	464e      	mov	r6, r9
 8000bf0:	4645      	mov	r5, r8
 8000bf2:	b5e0      	push	{r5, r6, r7, lr}
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	b083      	sub	sp, #12
  if (MC_NULL == pMCIList)
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d066      	beq.n	8000cca <MCboot+0xe2>
    bMCBootCompleted = (uint8_t )0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	4a36      	ldr	r2, [pc, #216]	@ (8000cd8 <MCboot+0xf0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c00:	4d36      	ldr	r5, [pc, #216]	@ (8000cdc <MCboot+0xf4>)
 8000c02:	4837      	ldr	r0, [pc, #220]	@ (8000ce0 <MCboot+0xf8>)
    bMCBootCompleted = (uint8_t )0;
 8000c04:	4690      	mov	r8, r2
 8000c06:	7013      	strb	r3, [r2, #0]
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c08:	6028      	str	r0, [r5, #0]
    R1_Init(&PWM_Handle_M1);
 8000c0a:	f001 f8f5 	bl	8001df8 <R1_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <MCboot+0xfc>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	469b      	mov	fp, r3
 8000c14:	f004 faf8 	bl	8005208 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <MCboot+0x100>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	f004 f9a7 	bl	8004f70 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8000c22:	4832      	ldr	r0, [pc, #200]	@ (8000cec <MCboot+0x104>)
 8000c24:	4e32      	ldr	r6, [pc, #200]	@ (8000cf0 <MCboot+0x108>)
 8000c26:	4681      	mov	r9, r0
 8000c28:	4f32      	ldr	r7, [pc, #200]	@ (8000cf4 <MCboot+0x10c>)
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	003a      	movs	r2, r7
 8000c2e:	6831      	ldr	r1, [r6, #0]
 8000c30:	f004 f954 	bl	8004edc <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8000c34:	464a      	mov	r2, r9
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MCboot+0x110>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c38:	4659      	mov	r1, fp
    pEAC[M1] = &EncAlignCtrlM1;
 8000c3a:	601a      	str	r2, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8000c3c:	6830      	ldr	r0, [r6, #0]
 8000c3e:	4652      	mov	r2, sl
 8000c40:	f004 fc18 	bl	8005474 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8000c44:	0038      	movs	r0, r7
 8000c46:	f004 fcd5 	bl	80055f4 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8000c4a:	482c      	ldr	r0, [pc, #176]	@ (8000cfc <MCboot+0x114>)
 8000c4c:	f004 fadc 	bl	8005208 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8000c50:	482b      	ldr	r0, [pc, #172]	@ (8000d00 <MCboot+0x118>)
 8000c52:	f004 fad9 	bl	8005208 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8000c56:	482b      	ldr	r0, [pc, #172]	@ (8000d04 <MCboot+0x11c>)
 8000c58:	f001 fd52 	bl	8002700 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8000c5c:	4f2a      	ldr	r7, [pc, #168]	@ (8000d08 <MCboot+0x120>)
 8000c5e:	0038      	movs	r0, r7
 8000c60:	f004 fb6e 	bl	8005340 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <MCboot+0x124>)
    NTC_Init(&TempSensor_M1);
 8000c66:	482a      	ldr	r0, [pc, #168]	@ (8000d10 <MCboot+0x128>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60df      	str	r7, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000c6c:	4f29      	ldr	r7, [pc, #164]	@ (8000d14 <MCboot+0x12c>)
 8000c6e:	609f      	str	r7, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8000c70:	f004 fabe 	bl	80051f0 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8000c74:	4828      	ldr	r0, [pc, #160]	@ (8000d18 <MCboot+0x130>)
 8000c76:	f004 fbbd 	bl	80053f4 <REMNG_Init>
    FOC_Clear(M1);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff ff82 	bl	8000b84 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000c80:	2301      	movs	r3, #1
 8000c82:	4699      	mov	r9, r3
 8000c84:	464a      	mov	r2, r9
 8000c86:	3323      	adds	r3, #35	@ 0x23
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000c88:	6830      	ldr	r0, [r6, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8000c8a:	54fa      	strb	r2, [r7, r3]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000c8c:	f004 fc94 	bl	80055b8 <STC_GetDefaultIqdref>
 8000c90:	6138      	str	r0, [r7, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c92:	6830      	ldr	r0, [r6, #0]
 8000c94:	f004 fc90 	bl	80055b8 <STC_GetDefaultIqdref>
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	4d20      	ldr	r5, [pc, #128]	@ (8000d1c <MCboot+0x134>)
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000c9c:	0c00      	lsrs	r0, r0, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	6831      	ldr	r1, [r6, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000ca2:	82b8      	strh	r0, [r7, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8000ca4:	0028      	movs	r0, r5
 8000ca6:	f7ff fde7 	bl	8000878 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MCboot+0x138>)
    MCI_ExecSpeedRamp(&Mci[M1],
 8000cac:	6830      	ldr	r0, [r6, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8000cae:	61ab      	str	r3, [r5, #24]
    MCI_ExecSpeedRamp(&Mci[M1],
 8000cb0:	f004 fc7e 	bl	80055b0 <STC_GetMecSpeedRefUnitDefault>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	0001      	movs	r1, r0
 8000cb8:	0028      	movs	r0, r5
 8000cba:	f7ff fdeb 	bl	8000894 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8000cbe:	6025      	str	r5, [r4, #0]
    MC_APP_BootHook();
 8000cc0:	f7ff fdd6 	bl	8000870 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	b003      	add	sp, #12
 8000ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cce:	46bb      	mov	fp, r7
 8000cd0:	46b2      	mov	sl, r6
 8000cd2:	46a9      	mov	r9, r5
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd8:	20000654 	.word	0x20000654
 8000cdc:	2000065c 	.word	0x2000065c
 8000ce0:	20000150 	.word	0x20000150
 8000ce4:	200002ac 	.word	0x200002ac
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	2000007c 	.word	0x2000007c
 8000cf0:	20000014 	.word	0x20000014
 8000cf4:	20000118 	.word	0x20000118
 8000cf8:	20000660 	.word	0x20000660
 8000cfc:	20000280 	.word	0x20000280
 8000d00:	20000254 	.word	0x20000254
 8000d04:	20000050 	.word	0x20000050
 8000d08:	20000034 	.word	0x20000034
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000060 	.word	0x20000060
 8000d14:	20000664 	.word	0x20000664
 8000d18:	2000001c 	.word	0x2000001c
 8000d1c:	20000618 	.word	0x20000618
 8000d20:	200002e8 	.word	0x200002e8

08000d24 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8000d24:	4770      	bx	lr
 8000d26:	46c0      	nop			@ (mov r8, r8)

08000d28 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d28:	2326      	movs	r3, #38	@ 0x26
 8000d2a:	4343      	muls	r3, r0
{
 8000d2c:	b510      	push	{r4, lr}
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8000d2e:	4c08      	ldr	r4, [pc, #32]	@ (8000d50 <FOC_CalcCurrRef+0x28>)
 8000d30:	18e4      	adds	r4, r4, r3
 8000d32:	0023      	movs	r3, r4
 8000d34:	3324      	adds	r3, #36	@ 0x24
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d000      	beq.n	8000d3e <FOC_CalcCurrRef+0x16>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000d3c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <FOC_CalcCurrRef+0x2c>)
 8000d40:	0080      	lsls	r0, r0, #2
 8000d42:	58c0      	ldr	r0, [r0, r3]
 8000d44:	f004 fbfe 	bl	8005544 <STC_CalcTorqueReference>
 8000d48:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000d4a:	8220      	strh	r0, [r4, #16]
}
 8000d4c:	e7f6      	b.n	8000d3c <FOC_CalcCurrRef+0x14>
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	20000664 	.word	0x20000664
 8000d54:	20000014 	.word	0x20000014

08000d58 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000d58:	4b01      	ldr	r3, [pc, #4]	@ (8000d60 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000d5a:	8018      	strh	r0, [r3, #0]
}
 8000d5c:	4770      	bx	lr
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	20000658 	.word	0x20000658

08000d64 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8000d64:	4b02      	ldr	r3, [pc, #8]	@ (8000d70 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000d66:	8818      	ldrh	r0, [r3, #0]
 8000d68:	4243      	negs	r3, r0
 8000d6a:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000d6c:	b2c0      	uxtb	r0, r0
}
 8000d6e:	4770      	bx	lr
 8000d70:	20000658 	.word	0x20000658

08000d74 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000d74:	4b01      	ldr	r3, [pc, #4]	@ (8000d7c <TSK_SetStopPermanencyTimeM1+0x8>)
 8000d76:	8018      	strh	r0, [r3, #0]
}
 8000d78:	4770      	bx	lr
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000656 	.word	0x20000656

08000d80 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8000d80:	4b02      	ldr	r3, [pc, #8]	@ (8000d8c <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000d82:	8818      	ldrh	r0, [r3, #0]
 8000d84:	4243      	negs	r3, r0
 8000d86:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000d88:	b2c0      	uxtb	r0, r0
}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000656 	.word	0x20000656

08000d90 <TSK_MediumFrequencyTaskM1>:
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	46c6      	mov	lr, r8
 8000d94:	b500      	push	{lr}
 8000d96:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8000d98:	466b      	mov	r3, sp
 8000d9a:	1d99      	adds	r1, r3, #6
 8000d9c:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000d9e:	4e8d      	ldr	r6, [pc, #564]	@ (8000fd4 <TSK_MediumFrequencyTaskM1+0x244>)
  int16_t wAux = 0;
 8000da0:	800b      	strh	r3, [r1, #0]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8000da2:	0030      	movs	r0, r6
 8000da4:	f004 f940 	bl	8005028 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8000da8:	4d8b      	ldr	r5, [pc, #556]	@ (8000fd8 <TSK_MediumFrequencyTaskM1+0x248>)
 8000daa:	6828      	ldr	r0, [r5, #0]
 8000dac:	f004 fa74 	bl	8005298 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000db0:	4c8a      	ldr	r4, [pc, #552]	@ (8000fdc <TSK_MediumFrequencyTaskM1+0x24c>)
 8000db2:	0020      	movs	r0, r4
 8000db4:	f7ff fdc0 	bl	8000938 <MCI_GetCurrentFaults>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d005      	beq.n	8000dc8 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	77e3      	strb	r3, [r4, #31]
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	46b8      	mov	r8, r7
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8000dc8:	0020      	movs	r0, r4
 8000dca:	f7ff fdb3 	bl	8000934 <MCI_GetOccurredFaults>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d106      	bne.n	8000de0 <TSK_MediumFrequencyTaskM1+0x50>
      switch (Mci[M1].State)
 8000dd2:	7fe3      	ldrb	r3, [r4, #31]
 8000dd4:	2b14      	cmp	r3, #20
 8000dd6:	d8f3      	bhi.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
 8000dd8:	4a81      	ldr	r2, [pc, #516]	@ (8000fe0 <TSK_MediumFrequencyTaskM1+0x250>)
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	58d3      	ldr	r3, [r2, r3]
 8000dde:	469f      	mov	pc, r3
      Mci[M1].State = FAULT_OVER;
 8000de0:	230b      	movs	r3, #11
 8000de2:	77e3      	strb	r3, [r4, #31]
 8000de4:	e7ec      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000de6:	7fa3      	ldrb	r3, [r4, #30]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d100      	bne.n	8000dee <TSK_MediumFrequencyTaskM1+0x5e>
 8000dec:	e0b2      	b.n	8000f54 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8000dee:	f7ff ffc7 	bl	8000d80 <TSK_StopPermanencyTimeHasElapsedM1>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d0e4      	beq.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
              ENC_Clear(&ENCODER_M1);
 8000df6:	0030      	movs	r0, r6
 8000df8:	f004 f8f0 	bl	8004fdc <ENC_Clear>
              R1_SwitchOnPWM(pwmcHandle[M1]);
 8000dfc:	4b79      	ldr	r3, [pc, #484]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	f001 f974 	bl	80020ec <R1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff ff8d 	bl	8000d24 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8000e0a:	4b77      	ldr	r3, [pc, #476]	@ (8000fe8 <TSK_MediumFrequencyTaskM1+0x258>)
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	f004 fbdb 	bl	80055c8 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8000e12:	0020      	movs	r0, r4
 8000e14:	f7ff fd50 	bl	80008b8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff85 	bl	8000d28 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	77e3      	strb	r3, [r4, #31]
 8000e22:	e7cd      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e24:	4e6f      	ldr	r6, [pc, #444]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e26:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000e28:	6830      	ldr	r0, [r6, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d100      	bne.n	8000e30 <TSK_MediumFrequencyTaskM1+0xa0>
 8000e2e:	e093      	b.n	8000f58 <TSK_MediumFrequencyTaskM1+0x1c8>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8000e30:	2101      	movs	r1, #1
 8000e32:	f000 fbe1 	bl	80015f8 <PWMC_CurrentReadingCalibr>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d0c2      	beq.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8000e3a:	7fa3      	ldrb	r3, [r4, #30]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d100      	bne.n	8000e42 <TSK_MediumFrequencyTaskM1+0xb2>
 8000e40:	e0a8      	b.n	8000f94 <TSK_MediumFrequencyTaskM1+0x204>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000e42:	6830      	ldr	r0, [r6, #0]
 8000e44:	2100      	movs	r1, #0
 8000e46:	f001 f92b 	bl	80020a0 <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8000e4a:	2014      	movs	r0, #20
 8000e4c:	f7ff ff84 	bl	8000d58 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8000e50:	2310      	movs	r3, #16
 8000e52:	77e3      	strb	r3, [r4, #31]
 8000e54:	e7b4      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000e56:	7fa3      	ldrb	r3, [r4, #30]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d07b      	beq.n	8000f54 <TSK_MediumFrequencyTaskM1+0x1c4>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8000e5c:	f7ff ff82 	bl	8000d64 <TSK_ChargeBootCapDelayHasElapsedM1>
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0ad      	beq.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 8000e64:	4d5f      	ldr	r5, [pc, #380]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
 8000e66:	6828      	ldr	r0, [r5, #0]
 8000e68:	f001 fa70 	bl	800234c <R1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000e6c:	2224      	movs	r2, #36	@ 0x24
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4b5e      	ldr	r3, [pc, #376]	@ (8000fec <TSK_MediumFrequencyTaskM1+0x25c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000e72:	4f5d      	ldr	r7, [pc, #372]	@ (8000fe8 <TSK_MediumFrequencyTaskM1+0x258>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8000e74:	5499      	strb	r1, [r3, r2]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8000e76:	6838      	ldr	r0, [r7, #0]
 8000e78:	495d      	ldr	r1, [pc, #372]	@ (8000ff0 <TSK_MediumFrequencyTaskM1+0x260>)
 8000e7a:	f004 fb0d 	bl	8005498 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8000e7e:	0030      	movs	r0, r6
 8000e80:	f004 f8ac 	bl	8004fdc <ENC_Clear>
              FOC_Clear( M1 );
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fe7d 	bl	8000b84 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff4 <TSK_MediumFrequencyTaskM1+0x264>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	4698      	mov	r8, r3
 8000e90:	f004 f86a 	bl	8004f68 <EAC_IsAligned>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d000      	beq.n	8000e9a <TSK_MediumFrequencyTaskM1+0x10a>
 8000e98:	e085      	b.n	8000fa6 <TSK_MediumFrequencyTaskM1+0x216>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8000e9a:	4640      	mov	r0, r8
 8000e9c:	f004 f824 	bl	8004ee8 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8000ea0:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000ea2:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8000ea4:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8000ea6:	f000 fba3 	bl	80015f0 <PWMC_SwitchOnPWM>
 8000eaa:	e789      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8000eac:	7fa3      	ldrb	r3, [r4, #30]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d000      	beq.n	8000eb4 <TSK_MediumFrequencyTaskM1+0x124>
 8000eb2:	e785      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83e3      	strh	r3, [r4, #30]
 8000eb8:	e782      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8000eba:	f7ff ff61 	bl	8000d80 <TSK_StopPermanencyTimeHasElapsedM1>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d100      	bne.n	8000ec4 <TSK_MediumFrequencyTaskM1+0x134>
 8000ec2:	e77d      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
 8000ec4:	e7f6      	b.n	8000eb4 <TSK_MediumFrequencyTaskM1+0x124>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000ec6:	7fa3      	ldrb	r3, [r4, #30]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d043      	beq.n	8000f54 <TSK_MediumFrequencyTaskM1+0x1c4>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8000ecc:	0020      	movs	r0, r4
 8000ece:	f7ff fcf3 	bl	80008b8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff ff28 	bl	8000d28 <FOC_CalcCurrRef>
 8000ed8:	e772      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8000eda:	7fa3      	ldrb	r3, [r4, #30]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d039      	beq.n	8000f54 <TSK_MediumFrequencyTaskM1+0x1c4>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 8000ee0:	4f44      	ldr	r7, [pc, #272]	@ (8000ff4 <TSK_MediumFrequencyTaskM1+0x264>)
 8000ee2:	0038      	movs	r0, r7
 8000ee4:	f004 f840 	bl	8004f68 <EAC_IsAligned>
 8000ee8:	0005      	movs	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8000eea:	0038      	movs	r0, r7
 8000eec:	f004 f822 	bl	8004f34 <EAC_Exec>
 8000ef0:	0007      	movs	r7, r0
            if ((isAligned == false)  && (EACDone == false))
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d101      	bne.n	8000efa <TSK_MediumFrequencyTaskM1+0x16a>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d044      	beq.n	8000f84 <TSK_MediumFrequencyTaskM1+0x1f4>
              R1_SwitchOffPWM( pwmcHandle[M1] );
 8000efa:	4d3a      	ldr	r5, [pc, #232]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
 8000efc:	6828      	ldr	r0, [r5, #0]
 8000efe:	f001 fa25 	bl	800234c <R1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000f02:	4f39      	ldr	r7, [pc, #228]	@ (8000fe8 <TSK_MediumFrequencyTaskM1+0x258>)
 8000f04:	2103      	movs	r1, #3
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f004 fad8 	bl	80054bc <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000f0c:	0031      	movs	r1, r6
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f004 fac2 	bl	8005498 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fe35 	bl	8000b84 <FOC_Clear>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	6828      	ldr	r0, [r5, #0]
 8000f1e:	f001 f8bf 	bl	80020a0 <R1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000f22:	20c8      	movs	r0, #200	@ 0xc8
 8000f24:	0080      	lsls	r0, r0, #2
 8000f26:	f7ff ff25 	bl	8000d74 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8000f2a:	2314      	movs	r3, #20
 8000f2c:	77e3      	strb	r3, [r4, #31]
 8000f2e:	e747      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8000f30:	2202      	movs	r2, #2
 8000f32:	7fa3      	ldrb	r3, [r4, #30]
 8000f34:	4393      	bics	r3, r2
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d000      	beq.n	8000f3c <TSK_MediumFrequencyTaskM1+0x1ac>
 8000f3a:	e741      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8000f3c:	4d29      	ldr	r5, [pc, #164]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f3e:	327f      	adds	r2, #127	@ 0x7f
 8000f40:	6828      	ldr	r0, [r5, #0]
 8000f42:	5c82      	ldrb	r2, [r0, r2]
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d116      	bne.n	8000f76 <TSK_MediumFrequencyTaskM1+0x1e6>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f000 fb55 	bl	80015f8 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8000f4e:	2311      	movs	r3, #17
 8000f50:	77e3      	strb	r3, [r4, #31]
 8000f52:	e735      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
    R1_SwitchOffPWM(pwmcHandle[motor]);
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <TSK_MediumFrequencyTaskM1+0x254>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f001 f9f8 	bl	800234c <R1_SwitchOffPWM>
  FOC_Clear(motor);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fe11 	bl	8000b84 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8000f62:	6828      	ldr	r0, [r5, #0]
 8000f64:	f004 f9b6 	bl	80052d4 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8000f68:	20c8      	movs	r0, #200	@ 0xc8
 8000f6a:	0080      	lsls	r0, r0, #2
 8000f6c:	f7ff ff02 	bl	8000d74 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8000f70:	2308      	movs	r3, #8
 8000f72:	77e3      	strb	r3, [r4, #31]
}
 8000f74:	e724      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000f76:	2260      	movs	r2, #96	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000f78:	2101      	movs	r1, #1
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8000f7a:	5283      	strh	r3, [r0, r2]
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8000f7c:	f000 fb3c 	bl	80015f8 <PWMC_CurrentReadingCalibr>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8000f80:	6828      	ldr	r0, [r5, #0]
 8000f82:	e75f      	b.n	8000e44 <TSK_MediumFrequencyTaskM1+0xb4>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <TSK_MediumFrequencyTaskM1+0x258>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f004 fadc 	bl	8005544 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <TSK_MediumFrequencyTaskM1+0x25c>)
 8000f8e:	821f      	strh	r7, [r3, #16]
 8000f90:	8258      	strh	r0, [r3, #18]
            {
 8000f92:	e715      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
                FOC_Clear(M1);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff fdf5 	bl	8000b84 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8000f9a:	6828      	ldr	r0, [r5, #0]
 8000f9c:	f004 f99a 	bl	80052d4 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	83e3      	strh	r3, [r4, #30]
 8000fa4:	e70c      	b.n	8000dc0 <TSK_MediumFrequencyTaskM1+0x30>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f004 fa87 	bl	80054bc <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8000fae:	0031      	movs	r1, r6
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f004 fa71 	bl	8005498 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff feb4 	bl	8000d24 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff feb3 	bl	8000d28 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f004 fb00 	bl	80055c8 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8000fc8:	0020      	movs	r0, r4
 8000fca:	f7ff fc75 	bl	80008b8 <MCI_ExecBufferedCommands>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e767      	b.n	8000ea2 <TSK_MediumFrequencyTaskM1+0x112>
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	20000098 	.word	0x20000098
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000618 	.word	0x20000618
 8000fe0:	08005904 	.word	0x08005904
 8000fe4:	2000065c 	.word	0x2000065c
 8000fe8:	20000014 	.word	0x20000014
 8000fec:	20000664 	.word	0x20000664
 8000ff0:	20000118 	.word	0x20000118
 8000ff4:	2000007c 	.word	0x2000007c

08000ff8 <MC_Scheduler>:
{
 8000ff8:	b510      	push	{r4, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <MC_Scheduler+0x48>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d000      	beq.n	8001004 <MC_Scheduler+0xc>
}
 8001002:	bd10      	pop	{r4, pc}
    if(hMFTaskCounterM1 > 0u)
 8001004:	4c0f      	ldr	r4, [pc, #60]	@ (8001044 <MC_Scheduler+0x4c>)
 8001006:	8823      	ldrh	r3, [r4, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 800100c:	3b01      	subs	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <MC_Scheduler+0x50>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	2a00      	cmp	r2, #0
 8001018:	d003      	beq.n	8001022 <MC_Scheduler+0x2a>
      hBootCapDelayCounterM1--;
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	3a01      	subs	r2, #1
 800101e:	b292      	uxth	r2, r2
 8001020:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MC_Scheduler+0x54>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	2a00      	cmp	r2, #0
 8001028:	d0eb      	beq.n	8001002 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	3a01      	subs	r2, #1
 800102e:	b292      	uxth	r2, r2
 8001030:	801a      	strh	r2, [r3, #0]
}
 8001032:	e7e6      	b.n	8001002 <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 8001034:	f7ff feac 	bl	8000d90 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001038:	f7ff fc1c 	bl	8000874 <MC_APP_PostMediumFrequencyHook_M1>
 800103c:	2301      	movs	r3, #1
 800103e:	e7e7      	b.n	8001010 <MC_Scheduler+0x18>
 8001040:	20000654 	.word	0x20000654
 8001044:	2000065a 	.word	0x2000065a
 8001048:	20000658 	.word	0x20000658
 800104c:	20000656 	.word	0x20000656

08001050 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	46ce      	mov	lr, r9
 8001054:	4647      	mov	r7, r8
 8001056:	b580      	push	{r7, lr}
  uint8_t bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001058:	4837      	ldr	r0, [pc, #220]	@ (8001138 <TSK_HighFrequencyTask+0xe8>)
{
 800105a:	b087      	sub	sp, #28
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 800105c:	f003 ffce 	bl	8004ffc <ENC_CalcAngle>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <TSK_HighFrequencyTask+0xec>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f004 fa1a 	bl	800549c <STC_GetSpeedSensor>
 8001068:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800106a:	f004 f9cb 	bl	8005404 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800106e:	4f34      	ldr	r7, [pc, #208]	@ (8001140 <TSK_HighFrequencyTask+0xf0>)
  hElAngle = SPD_GetElAngle(speedHandle);
 8001070:	0005      	movs	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001072:	a903      	add	r1, sp, #12
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f000 f989 	bl	800138c <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 800107a:	f001 fce7 	bl	8002a4c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800107e:	9803      	ldr	r0, [sp, #12]
 8001080:	f7ff fc98 	bl	80009b4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001084:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001086:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001088:	f7ff fd16 	bl	8000ab8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800108c:	4c2d      	ldr	r4, [pc, #180]	@ (8001144 <TSK_HighFrequencyTask+0xf4>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800108e:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001090:	2310      	movs	r3, #16
 8001092:	5ee1      	ldrsh	r1, [r4, r3]
 8001094:	b203      	sxth	r3, r0
 8001096:	1ac9      	subs	r1, r1, r3
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <TSK_HighFrequencyTask+0xf8>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f004 f8be 	bl	800521c <PI_Controller>
 80010a0:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80010a2:	2312      	movs	r3, #18
 80010a4:	5ee1      	ldrsh	r1, [r4, r3]
 80010a6:	ab01      	add	r3, sp, #4
 80010a8:	2202      	movs	r2, #2
 80010aa:	5e9b      	ldrsh	r3, [r3, r2]
 80010ac:	1ac9      	subs	r1, r1, r3
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <TSK_HighFrequencyTask+0xfc>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f004 f8b3 	bl	800521c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80010b6:	4642      	mov	r2, r8
 80010b8:	ab02      	add	r3, sp, #8
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	8058      	strh	r0, [r3, #2]
 80010be:	9902      	ldr	r1, [sp, #8]
 80010c0:	4823      	ldr	r0, [pc, #140]	@ (8001150 <TSK_HighFrequencyTask+0x100>)
 80010c2:	f003 fed1 	bl	8004e68 <Circle_Limitation>
 80010c6:	b203      	sxth	r3, r0
 80010c8:	4699      	mov	r9, r3
 80010ca:	9002      	str	r0, [sp, #8]
 80010cc:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80010ce:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80010d0:	4698      	mov	r8, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80010d2:	f004 f99f 	bl	8005414 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80010d6:	0029      	movs	r1, r5
 80010d8:	9802      	ldr	r0, [sp, #8]
 80010da:	f7ff fd3b 	bl	8000b54 <MCM_Rev_Park>
 80010de:	9005      	str	r0, [sp, #20]
  RCM_ReadOngoingConv();
 80010e0:	f001 fcec 	bl	8002abc <RCM_ReadOngoingConv>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80010e4:	9905      	ldr	r1, [sp, #20]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f000 f954 	bl	8001394 <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 80010ec:	002a      	movs	r2, r5
 80010ee:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80010f0:	0006      	movs	r6, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f000 fa9c 	bl	8001630 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
 80010f8:	464b      	mov	r3, r9
 80010fa:	82e3      	strh	r3, [r4, #22]
 80010fc:	4643      	mov	r3, r8
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80010fe:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 8001100:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 8001102:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001104:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 8001106:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001108:	9b04      	ldr	r3, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 800110a:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800110c:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800110e:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001110:	a905      	add	r1, sp, #20
  FOCVars[M1].Iqd = Iqd;
 8001112:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001114:	f004 facc 	bl	80056b0 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 8001118:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 800111a:	2e01      	cmp	r6, #1
 800111c:	d005      	beq.n	800112a <TSK_HighFrequencyTask+0xda>
}
 800111e:	2000      	movs	r0, #0
 8001120:	b007      	add	sp, #28
 8001122:	bcc0      	pop	{r6, r7}
 8001124:	46b9      	mov	r9, r7
 8001126:	46b0      	mov	r8, r6
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <TSK_HighFrequencyTask+0x104>)
 8001130:	f7ff fbba 	bl	80008a8 <MCI_FaultProcessing>
 8001134:	e7f3      	b.n	800111e <TSK_HighFrequencyTask+0xce>
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000098 	.word	0x20000098
 800113c:	20000014 	.word	0x20000014
 8001140:	2000065c 	.word	0x2000065c
 8001144:	20000664 	.word	0x20000664
 8001148:	20000010 	.word	0x20000010
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000018 	.word	0x20000018
 8001154:	20000618 	.word	0x20000618

08001158 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	46c6      	mov	lr, r8

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <TSK_SafetyTask_PWMOFF+0x7c>)
 800115e:	0087      	lsls	r7, r0, #2
{
 8001160:	0005      	movs	r5, r0
 8001162:	b500      	push	{lr}
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001164:	59d8      	ldr	r0, [r3, r7]
 8001166:	4698      	mov	r8, r3
 8001168:	f000 faae 	bl	80016c8 <PWMC_IsFaultOccurred>
 800116c:	0006      	movs	r6, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 800116e:	2d00      	cmp	r5, #0
 8001170:	d023      	beq.n	80011ba <TSK_SafetyTask_PWMOFF+0x62>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001172:	43f2      	mvns	r2, r6
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <TSK_SafetyTask_PWMOFF+0x80>)
 8001176:	197c      	adds	r4, r7, r5
 8001178:	00e4      	lsls	r4, r4, #3
 800117a:	18e4      	adds	r4, r4, r3
 800117c:	0020      	movs	r0, r4
 800117e:	0031      	movs	r1, r6
 8001180:	b292      	uxth	r2, r2
 8001182:	f7ff fb91 	bl	80008a8 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001186:	0020      	movs	r0, r4
 8001188:	f7ff fc0e 	bl	80009a8 <MCI_GetFaultState>
 800118c:	2800      	cmp	r0, #0
 800118e:	d011      	beq.n	80011b4 <TSK_SafetyTask_PWMOFF+0x5c>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <TSK_SafetyTask_PWMOFF+0x84>)
 8001192:	59d8      	ldr	r0, [r3, r7]
 8001194:	2800      	cmp	r0, #0
 8001196:	d002      	beq.n	800119e <TSK_SafetyTask_PWMOFF+0x46>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001198:	2100      	movs	r1, #0
 800119a:	f003 fee7 	bl	8004f6c <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800119e:	4643      	mov	r3, r8
 80011a0:	59d8      	ldr	r0, [r3, r7]
 80011a2:	f000 fa21 	bl	80015e8 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80011a6:	0028      	movs	r0, r5
 80011a8:	f7ff fcec 	bl	8000b84 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <TSK_SafetyTask_PWMOFF+0x88>)
 80011ae:	59d8      	ldr	r0, [r3, r7]
 80011b0:	f004 f890 	bl	80052d4 <PQD_Clear>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80011b4:	bc80      	pop	{r7}
 80011b6:	46b8      	mov	r8, r7
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80011ba:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <TSK_SafetyTask_PWMOFF+0x8c>)
 80011bc:	f001 fb56 	bl	800286c <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <TSK_SafetyTask_PWMOFF+0x90>)
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80011c2:	0001      	movs	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80011c4:	0018      	movs	r0, r3
 80011c6:	f004 f8e1 	bl	800538c <RVBS_CalcAvVbus>
 80011ca:	2308      	movs	r3, #8
 80011cc:	4398      	bics	r0, r3
 80011ce:	4306      	orrs	r6, r0
 80011d0:	b2b6      	uxth	r6, r6
 80011d2:	e7ce      	b.n	8001172 <TSK_SafetyTask_PWMOFF+0x1a>
 80011d4:	2000065c 	.word	0x2000065c
 80011d8:	20000618 	.word	0x20000618
 80011dc:	20000660 	.word	0x20000660
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000050 	.word	0x20000050
 80011e8:	20000034 	.word	0x20000034

080011ec <TSK_SafetyTask>:
{
 80011ec:	b510      	push	{r4, lr}
  if (1U == bMCBootCompleted)
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <TSK_SafetyTask+0x18>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d000      	beq.n	80011f8 <TSK_SafetyTask+0xc>
}
 80011f6:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ffad 	bl	8001158 <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv();
 80011fe:	f001 fbf3 	bl	80029e8 <RCM_ExecUserConv>
}
 8001202:	e7f8      	b.n	80011f6 <TSK_SafetyTask+0xa>
 8001204:	20000654 	.word	0x20000654

08001208 <MC_RunMotorControlTasks>:
{
 8001208:	b510      	push	{r4, lr}
  if (0U == bMCBootCompleted)
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <MC_RunMotorControlTasks+0x18>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <MC_RunMotorControlTasks+0xc>
}
 8001212:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001214:	f7ff fef0 	bl	8000ff8 <MC_Scheduler>
    TSK_SafetyTask();
 8001218:	f7ff ffe8 	bl	80011ec <TSK_SafetyTask>
}
 800121c:	e7f9      	b.n	8001212 <MC_RunMotorControlTasks+0xa>
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	20000654 	.word	0x20000654

08001224 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001224:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R1_SwitchOffPWM(pwmcHandle[M1]);
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <TSK_HardwareFaultTask+0x18>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f001 f88f 	bl	800234c <R1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <TSK_HardwareFaultTask+0x1c>)
 8001234:	f7ff fb38 	bl	80008a8 <MCI_FaultProcessing>

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001238:	bd10      	pop	{r4, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	2000065c 	.word	0x2000065c
 8001240:	20000618 	.word	0x20000618

08001244 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001244:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001246:	f7ff fb0b 	bl	8000860 <MC_GetSTMStateMotor1>
 800124a:	2800      	cmp	r0, #0
 800124c:	d102      	bne.n	8001254 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    (void)MC_StartMotor1();
 800124e:	f7ff faf7 	bl	8000840 <MC_StartMotor1>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001252:	bd10      	pop	{r4, pc}
    (void)MC_StopMotor1();
 8001254:	f7ff fafc 	bl	8000850 <MC_StopMotor1>
}
 8001258:	e7fb      	b.n	8001252 <UI_HandleStartStopButton_cb+0xe>
 800125a:	46c0      	nop			@ (mov r8, r8)

0800125c <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800125c:	2390      	movs	r3, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800125e:	2120      	movs	r1, #32
 8001260:	2002      	movs	r0, #2

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001262:	b510      	push	{r4, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001264:	4a37      	ldr	r2, [pc, #220]	@ (8001344 <mc_lock_pins+0xe8>)
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800126a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800126c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	b08c      	sub	sp, #48	@ 0x30
 8001272:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void) temp;
 8001274:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001276:	4934      	ldr	r1, [pc, #208]	@ (8001348 <mc_lock_pins+0xec>)
 8001278:	4a34      	ldr	r2, [pc, #208]	@ (800134c <mc_lock_pins+0xf0>)
 800127a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800127c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800127e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001280:	69d4      	ldr	r4, [r2, #28]
 8001282:	940a      	str	r4, [sp, #40]	@ 0x28
  (void) temp;
 8001284:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001286:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001288:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800128a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800128c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800128e:	3801      	subs	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 8001290:	9109      	str	r1, [sp, #36]	@ 0x24
  (void) temp;
 8001292:	9909      	ldr	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001294:	492e      	ldr	r1, [pc, #184]	@ (8001350 <mc_lock_pins+0xf4>)
 8001296:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001298:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800129a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800129c:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800129e:	30ff      	adds	r0, #255	@ 0xff
  temp = READ_REG(GPIOx->LCKR);
 80012a0:	9108      	str	r1, [sp, #32]
  (void) temp;
 80012a2:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012a4:	492b      	ldr	r1, [pc, #172]	@ (8001354 <mc_lock_pins+0xf8>)
 80012a6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012a8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012aa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012ac:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ae:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80012b0:	9107      	str	r1, [sp, #28]
  (void) temp;
 80012b2:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b4:	2181      	movs	r1, #129	@ 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012b6:	30ff      	adds	r0, #255	@ 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012b8:	0249      	lsls	r1, r1, #9
 80012ba:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012bc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012be:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012c0:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012c2:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80012c4:	9106      	str	r1, [sp, #24]
  (void) temp;
 80012c6:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012c8:	2188      	movs	r1, #136	@ 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ca:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012cc:	0249      	lsls	r1, r1, #9
 80012ce:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012d0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012d2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012d4:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012d6:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80012d8:	9105      	str	r1, [sp, #20]
  (void) temp;
 80012da:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012dc:	21a0      	movs	r1, #160	@ 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012de:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e0:	0249      	lsls	r1, r1, #9
 80012e2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012e4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012e6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012e8:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012ea:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 80012ec:	9104      	str	r1, [sp, #16]
  (void) temp;
 80012ee:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f0:	2182      	movs	r1, #130	@ 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f2:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012f4:	0249      	lsls	r1, r1, #9
 80012f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012f8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80012fa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80012fc:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80012fe:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001300:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001302:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001304:	21c0      	movs	r1, #192	@ 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001306:	0200      	lsls	r0, r0, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001308:	0249      	lsls	r1, r1, #9
 800130a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800130c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800130e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001310:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001312:	2080      	movs	r0, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001314:	9102      	str	r1, [sp, #8]
  (void) temp;
 8001316:	9902      	ldr	r1, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001318:	2190      	movs	r1, #144	@ 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 800131a:	0180      	lsls	r0, r0, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800131c:	0249      	lsls	r1, r1, #9
 800131e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001320:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001322:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001324:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001326:	2180      	movs	r1, #128	@ 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001328:	9201      	str	r2, [sp, #4]
  (void) temp;
 800132a:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800132c:	2284      	movs	r2, #132	@ 0x84
  WRITE_REG(GPIOx->LCKR, PinMask);
 800132e:	0109      	lsls	r1, r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001330:	0252      	lsls	r2, r2, #9
 8001332:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001334:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001336:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	9300      	str	r3, [sp, #0]
  (void) temp;
 800133c:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_EN_DRIVER_GPIO_Port, M1_EN_DRIVER_Pin);
}
 800133e:	b00c      	add	sp, #48	@ 0x30
 8001340:	bd10      	pop	{r4, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	00010020 	.word	0x00010020
 8001348:	00010002 	.word	0x00010002
 800134c:	48000400 	.word	0x48000400
 8001350:	00010001 	.word	0x00010001
 8001354:	00010100 	.word	0x00010100

08001358 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001358:	b510      	push	{r4, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800135a:	f002 fcaf 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 800135e:	21fa      	movs	r1, #250	@ 0xfa
 8001360:	00c9      	lsls	r1, r1, #3
 8001362:	f7fe feab 	bl	80000bc <__udivsi3>
 8001366:	f002 f81d 	bl	80033a4 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800136a:	2001      	movs	r0, #1
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <MX_MotorControl_Init+0x2c>)
 800136e:	2200      	movs	r2, #0
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	4240      	negs	r0, r0
 8001374:	f001 ffe0 	bl	8003338 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <MX_MotorControl_Init+0x30>)
 800137a:	f7ff fc35 	bl	8000be8 <MCboot>
  mc_lock_pins();
 800137e:	f7ff ff6d 	bl	800125c <mc_lock_pins>
}
 8001382:	bd10      	pop	{r4, pc}
 8001384:	20000304 	.word	0x20000304
 8001388:	2000068c 	.word	0x2000068c

0800138c <PWMC_GetPhaseCurrents>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phases A & B in ElectricalValue format.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
{
 800138c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800138e:	6803      	ldr	r3, [r0, #0]
 8001390:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001392:	bd10      	pop	{r4, pc}

08001394 <PWMC_SetPhaseVoltage>:
    int32_t wUBeta;
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001394:	224e      	movs	r2, #78	@ 0x4e
{
 8001396:	b5f0      	push	{r4, r5, r6, r7, lr}
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001398:	5a82      	ldrh	r2, [r0, r2]
 800139a:	b20b      	sxth	r3, r1
 800139c:	435a      	muls	r2, r3
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800139e:	2372      	movs	r3, #114	@ 0x72
 80013a0:	5ac3      	ldrh	r3, [r0, r3]
 80013a2:	140c      	asrs	r4, r1, #16
 80013a4:	435c      	muls	r4, r3
 80013a6:	0064      	lsls	r4, r4, #1
 80013a8:	4266      	negs	r6, r4

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80013aa:	1b14      	subs	r4, r2, r4
 80013ac:	0fe1      	lsrs	r1, r4, #31
 80013ae:	1909      	adds	r1, r1, r4
    wZ = (wUBeta - wUAlpha) / 2;
 80013b0:	1ab2      	subs	r2, r6, r2
    wY = (wUBeta + wUAlpha) / 2;
 80013b2:	104f      	asrs	r7, r1, #1
    wZ = (wUBeta - wUAlpha) / 2;
 80013b4:	0fd1      	lsrs	r1, r2, #31
 80013b6:	1889      	adds	r1, r1, r2
{
 80013b8:	b083      	sub	sp, #12
    wZ = (wUBeta - wUAlpha) / 2;
 80013ba:	104d      	asrs	r5, r1, #1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013bc:	089b      	lsrs	r3, r3, #2
    if (wY < 0)
 80013be:	1c61      	adds	r1, r4, #1
 80013c0:	db60      	blt.n	8001484 <PWMC_SetPhaseVoltage+0xf0>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80013c2:	1c51      	adds	r1, r2, #1
 80013c4:	db3d      	blt.n	8001442 <PWMC_SetPhaseVoltage+0xae>
      {
        pHandle->Sector = SECTOR_2;
 80013c6:	217c      	movs	r1, #124	@ 0x7c
 80013c8:	2601      	movs	r6, #1
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013ca:	1b7f      	subs	r7, r7, r5
 80013cc:	17fd      	asrs	r5, r7, #31
 80013ce:	03ad      	lsls	r5, r5, #14
 80013d0:	0bad      	lsrs	r5, r5, #14
 80013d2:	19ed      	adds	r5, r5, r7
 80013d4:	14ad      	asrs	r5, r5, #18
        pHandle->Sector = SECTOR_2;
 80013d6:	5446      	strb	r6, [r0, r1]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80013d8:	18e9      	adds	r1, r5, r3
        wTimePhB = wTimePhA + (wZ / 131072);
 80013da:	17d3      	asrs	r3, r2, #31
 80013dc:	039b      	lsls	r3, r3, #14
 80013de:	0b9b      	lsrs	r3, r3, #14
 80013e0:	189a      	adds	r2, r3, r2
        wTimePhC = wTimePhA - (wY / 131072);
 80013e2:	17e3      	asrs	r3, r4, #31
 80013e4:	039b      	lsls	r3, r3, #14
 80013e6:	0b9b      	lsrs	r3, r3, #14
 80013e8:	191b      	adds	r3, r3, r4

        if(true == pHandle->SingleShuntTopology)
 80013ea:	2487      	movs	r4, #135	@ 0x87
 80013ec:	5d04      	ldrb	r4, [r0, r4]
        wTimePhB = wTimePhA + (wZ / 131072);
 80013ee:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072);
 80013f0:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 80013f2:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072);
 80013f4:	1acb      	subs	r3, r1, r3
        if(true == pHandle->SingleShuntTopology)
 80013f6:	2c00      	cmp	r4, #0
 80013f8:	d165      	bne.n	80014c6 <PWMC_SetPhaseVoltage+0x132>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 80013fa:	b297      	uxth	r7, r2
        pHandle->midDuty = (uint16_t)wTimePhA;
 80013fc:	b28e      	uxth	r6, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 80013fe:	b29d      	uxth	r5, r3
            pHandle->lowDuty = 0U;
 8001400:	2458      	movs	r4, #88	@ 0x58
 8001402:	5307      	strh	r7, [r0, r4]
            pHandle->midDuty = 1U;
 8001404:	3402      	adds	r4, #2
 8001406:	5306      	strh	r6, [r0, r4]
            pHandle->highDuty = 2U;
 8001408:	3402      	adds	r4, #2
 800140a:	5305      	strh	r5, [r0, r4]
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800140c:	43cc      	mvns	r4, r1
 800140e:	17e4      	asrs	r4, r4, #31
 8001410:	4021      	ands	r1, r4
 8001412:	2450      	movs	r4, #80	@ 0x50
 8001414:	b289      	uxth	r1, r1
 8001416:	5301      	strh	r1, [r0, r4]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001418:	43d4      	mvns	r4, r2
 800141a:	17e4      	asrs	r4, r4, #31
 800141c:	4022      	ands	r2, r4
 800141e:	2452      	movs	r4, #82	@ 0x52
 8001420:	b292      	uxth	r2, r2
 8001422:	5302      	strh	r2, [r0, r4]
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001424:	43dc      	mvns	r4, r3
 8001426:	17e4      	asrs	r4, r4, #31
 8001428:	4023      	ands	r3, r4
 800142a:	2454      	movs	r4, #84	@ 0x54
 800142c:	b29b      	uxth	r3, r3
 800142e:	5303      	strh	r3, [r0, r4]

    if (1U == pHandle->DTTest)
 8001430:	341c      	adds	r4, #28
 8001432:	5b04      	ldrh	r4, [r0, r4]
 8001434:	2c01      	cmp	r4, #1
 8001436:	d100      	bne.n	800143a <PWMC_SetPhaseVoltage+0xa6>
 8001438:	e080      	b.n	800153c <PWMC_SetPhaseVoltage+0x1a8>
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800143a:	6943      	ldr	r3, [r0, #20]
 800143c:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800143e:	b003      	add	sp, #12
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( wX <= 0 )
 8001442:	2e00      	cmp	r6, #0
 8001444:	dd60      	ble.n	8001508 <PWMC_SetPhaseVoltage+0x174>
          pHandle->Sector = SECTOR_1;
 8001446:	217c      	movs	r1, #124	@ 0x7c
 8001448:	2400      	movs	r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800144a:	1b75      	subs	r5, r6, r5
 800144c:	14ad      	asrs	r5, r5, #18
          pHandle->Sector = SECTOR_1;
 800144e:	5444      	strb	r4, [r0, r1]
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001450:	18e9      	adds	r1, r5, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 8001452:	17d3      	asrs	r3, r2, #31
 8001454:	039b      	lsls	r3, r3, #14
 8001456:	0b9b      	lsrs	r3, r3, #14
 8001458:	189a      	adds	r2, r3, r2
          wTimePhC = wTimePhB - (wX / 131072);
 800145a:	17f3      	asrs	r3, r6, #31
 800145c:	03db      	lsls	r3, r3, #15
 800145e:	0bdb      	lsrs	r3, r3, #15
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001460:	347f      	adds	r4, #127	@ 0x7f
          wTimePhB = wTimePhA + (wZ / 131072);
 8001462:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001464:	199b      	adds	r3, r3, r6
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001466:	5d04      	ldrb	r4, [r0, r4]
          wTimePhB = wTimePhA + (wZ / 131072);
 8001468:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 800146a:	145b      	asrs	r3, r3, #17
 800146c:	1ad3      	subs	r3, r2, r3
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800146e:	2c00      	cmp	r4, #0
 8001470:	d104      	bne.n	800147c <PWMC_SetPhaseVoltage+0xe8>
 8001472:	3487      	adds	r4, #135	@ 0x87
 8001474:	5d04      	ldrb	r4, [r0, r4]
 8001476:	2c00      	cmp	r4, #0
 8001478:	d100      	bne.n	800147c <PWMC_SetPhaseVoltage+0xe8>
 800147a:	e0b0      	b.n	80015de <PWMC_SetPhaseVoltage+0x24a>
 800147c:	2702      	movs	r7, #2
 800147e:	2601      	movs	r6, #1
 8001480:	2500      	movs	r5, #0
 8001482:	e7bd      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
        if(true == pHandle->SingleShuntTopology)
 8001484:	2187      	movs	r1, #135	@ 0x87
 8001486:	5c41      	ldrb	r1, [r0, r1]
 8001488:	468c      	mov	ip, r1
      if (wZ < 0)
 800148a:	1c51      	adds	r1, r2, #1
 800148c:	db70      	blt.n	8001570 <PWMC_SetPhaseVoltage+0x1dc>
        if (wX <= 0)
 800148e:	2e00      	cmp	r6, #0
 8001490:	dd1d      	ble.n	80014ce <PWMC_SetPhaseVoltage+0x13a>
          pHandle->Sector = SECTOR_3;
 8001492:	227c      	movs	r2, #124	@ 0x7c
 8001494:	2102      	movs	r1, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001496:	1bbf      	subs	r7, r7, r6
          pHandle->Sector = SECTOR_3;
 8001498:	5481      	strb	r1, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800149a:	17fa      	asrs	r2, r7, #31
 800149c:	0392      	lsls	r2, r2, #14
 800149e:	0b92      	lsrs	r2, r2, #14
 80014a0:	19d2      	adds	r2, r2, r7
 80014a2:	1492      	asrs	r2, r2, #18
 80014a4:	18d1      	adds	r1, r2, r3
          wTimePhC = wTimePhA - (wY / 131072);
 80014a6:	17e3      	asrs	r3, r4, #31
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	0b9b      	lsrs	r3, r3, #14
 80014ac:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 80014ae:	4664      	mov	r4, ip
          wTimePhC = wTimePhA - (wY / 131072);
 80014b0:	149b      	asrs	r3, r3, #18
 80014b2:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 80014b4:	1472      	asrs	r2, r6, #17
 80014b6:	18d2      	adds	r2, r2, r3
          if(true == pHandle->SingleShuntTopology)
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d000      	beq.n	80014be <PWMC_SetPhaseVoltage+0x12a>
 80014bc:	e083      	b.n	80015c6 <PWMC_SetPhaseVoltage+0x232>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80014be:	b297      	uxth	r7, r2
          pHandle->midDuty = (uint16_t)wTimePhC;
 80014c0:	b29e      	uxth	r6, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 80014c2:	b28d      	uxth	r5, r1
 80014c4:	e79c      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
 80014c6:	2702      	movs	r7, #2
 80014c8:	2600      	movs	r6, #0
 80014ca:	2501      	movs	r5, #1
 80014cc:	e798      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
          pHandle->Sector = SECTOR_4;
 80014ce:	217c      	movs	r1, #124	@ 0x7c
 80014d0:	2403      	movs	r4, #3
 80014d2:	5444      	strb	r4, [r0, r1]
          if(true == pHandle->SingleShuntTopology)
 80014d4:	4664      	mov	r4, ip
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80014d6:	1b75      	subs	r5, r6, r5
 80014d8:	17e9      	asrs	r1, r5, #31
 80014da:	0389      	lsls	r1, r1, #14
 80014dc:	0b89      	lsrs	r1, r1, #14
 80014de:	1949      	adds	r1, r1, r5
 80014e0:	1489      	asrs	r1, r1, #18
 80014e2:	18c9      	adds	r1, r1, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 80014e4:	17d3      	asrs	r3, r2, #31
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	0b9b      	lsrs	r3, r3, #14
 80014ea:	189a      	adds	r2, r3, r2
          wTimePhC = wTimePhB - (wX / 131072);
 80014ec:	17f3      	asrs	r3, r6, #31
 80014ee:	03db      	lsls	r3, r3, #15
 80014f0:	0bdb      	lsrs	r3, r3, #15
          wTimePhB = wTimePhA + (wZ / 131072);
 80014f2:	1492      	asrs	r2, r2, #18
          wTimePhC = wTimePhB - (wX / 131072);
 80014f4:	199b      	adds	r3, r3, r6
          wTimePhB = wTimePhA + (wZ / 131072);
 80014f6:	1852      	adds	r2, r2, r1
          wTimePhC = wTimePhB - (wX / 131072);
 80014f8:	145b      	asrs	r3, r3, #17
 80014fa:	1ad3      	subs	r3, r2, r3
          if(true == pHandle->SingleShuntTopology)
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d06a      	beq.n	80015d6 <PWMC_SetPhaseVoltage+0x242>
 8001500:	2700      	movs	r7, #0
 8001502:	2601      	movs	r6, #1
 8001504:	2502      	movs	r5, #2
 8001506:	e77b      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
          pHandle->Sector = SECTOR_6;
 8001508:	227c      	movs	r2, #124	@ 0x7c
 800150a:	2105      	movs	r1, #5
 800150c:	5481      	strb	r1, [r0, r2]
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800150e:	1bb9      	subs	r1, r7, r6
 8001510:	1489      	asrs	r1, r1, #18
 8001512:	18c9      	adds	r1, r1, r3
          wTimePhC = wTimePhA - (wY / 131072);
 8001514:	17e3      	asrs	r3, r4, #31
 8001516:	039b      	lsls	r3, r3, #14
 8001518:	0b9b      	lsrs	r3, r3, #14
 800151a:	191b      	adds	r3, r3, r4
          if(true == pHandle->SingleShuntTopology)
 800151c:	2487      	movs	r4, #135	@ 0x87
          wTimePhB = wTimePhC + (wX / 131072);
 800151e:	17f2      	asrs	r2, r6, #31
 8001520:	03d2      	lsls	r2, r2, #15
 8001522:	0bd2      	lsrs	r2, r2, #15
          wTimePhC = wTimePhA - (wY / 131072);
 8001524:	149b      	asrs	r3, r3, #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001526:	1992      	adds	r2, r2, r6
          if(true == pHandle->SingleShuntTopology)
 8001528:	5d04      	ldrb	r4, [r0, r4]
          wTimePhC = wTimePhA - (wY / 131072);
 800152a:	1acb      	subs	r3, r1, r3
          wTimePhB = wTimePhC + (wX / 131072);
 800152c:	1452      	asrs	r2, r2, #17
 800152e:	18d2      	adds	r2, r2, r3
          if(true == pHandle->SingleShuntTopology)
 8001530:	2c00      	cmp	r4, #0
 8001532:	d04c      	beq.n	80015ce <PWMC_SetPhaseVoltage+0x23a>
 8001534:	2701      	movs	r7, #1
 8001536:	2602      	movs	r6, #2
 8001538:	2500      	movs	r5, #0
 800153a:	e761      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
      if (pHandle->Ia > 0)
 800153c:	2562      	movs	r5, #98	@ 0x62
 800153e:	5f45      	ldrsh	r5, [r0, r5]
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001540:	3473      	adds	r4, #115	@ 0x73
 8001542:	5b04      	ldrh	r4, [r0, r4]
      if (pHandle->Ia > 0)
 8001544:	2d00      	cmp	r5, #0
 8001546:	dd37      	ble.n	80015b8 <PWMC_SetPhaseVoltage+0x224>
        pHandle->CntPhA += pHandle->DTCompCnt;
 8001548:	1909      	adds	r1, r1, r4
 800154a:	b289      	uxth	r1, r1
 800154c:	2550      	movs	r5, #80	@ 0x50
 800154e:	5341      	strh	r1, [r0, r5]
      if (pHandle->Ib > 0)
 8001550:	2164      	movs	r1, #100	@ 0x64
 8001552:	5e41      	ldrsh	r1, [r0, r1]
 8001554:	2900      	cmp	r1, #0
 8001556:	dd2c      	ble.n	80015b2 <PWMC_SetPhaseVoltage+0x21e>
        pHandle->CntPhB += pHandle->DTCompCnt;
 8001558:	1912      	adds	r2, r2, r4
 800155a:	b292      	uxth	r2, r2
 800155c:	2152      	movs	r1, #82	@ 0x52
 800155e:	5242      	strh	r2, [r0, r1]
      if (pHandle->Ic > 0)
 8001560:	2266      	movs	r2, #102	@ 0x66
 8001562:	5e82      	ldrsh	r2, [r0, r2]
 8001564:	2a00      	cmp	r2, #0
 8001566:	dd20      	ble.n	80015aa <PWMC_SetPhaseVoltage+0x216>
        pHandle->CntPhC += pHandle->DTCompCnt;
 8001568:	191c      	adds	r4, r3, r4
 800156a:	2354      	movs	r3, #84	@ 0x54
 800156c:	52c4      	strh	r4, [r0, r3]
 800156e:	e764      	b.n	800143a <PWMC_SetPhaseVoltage+0xa6>
        pHandle->Sector = SECTOR_5;
 8001570:	217c      	movs	r1, #124	@ 0x7c
 8001572:	2604      	movs	r6, #4
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001574:	1b7d      	subs	r5, r7, r5
        pHandle->Sector = SECTOR_5;
 8001576:	5446      	strb	r6, [r0, r1]
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001578:	17e9      	asrs	r1, r5, #31
 800157a:	0389      	lsls	r1, r1, #14
 800157c:	0b89      	lsrs	r1, r1, #14
 800157e:	1949      	adds	r1, r1, r5
 8001580:	1489      	asrs	r1, r1, #18
 8001582:	18c9      	adds	r1, r1, r3
        wTimePhB = wTimePhA + (wZ / 131072);
 8001584:	17d3      	asrs	r3, r2, #31
 8001586:	039b      	lsls	r3, r3, #14
 8001588:	0b9b      	lsrs	r3, r3, #14
 800158a:	189a      	adds	r2, r3, r2
        wTimePhC = wTimePhA - (wY / 131072) ;
 800158c:	17e3      	asrs	r3, r4, #31
 800158e:	039b      	lsls	r3, r3, #14
 8001590:	0b9b      	lsrs	r3, r3, #14
 8001592:	191b      	adds	r3, r3, r4
        if(true == pHandle->SingleShuntTopology)
 8001594:	4664      	mov	r4, ip
        wTimePhB = wTimePhA + (wZ / 131072);
 8001596:	1492      	asrs	r2, r2, #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001598:	149b      	asrs	r3, r3, #18
        wTimePhB = wTimePhA + (wZ / 131072);
 800159a:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhA - (wY / 131072) ;
 800159c:	1acb      	subs	r3, r1, r3
        if(true == pHandle->SingleShuntTopology)
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d10d      	bne.n	80015be <PWMC_SetPhaseVoltage+0x22a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80015a2:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 80015a4:	b28e      	uxth	r6, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 80015a6:	b295      	uxth	r5, r2
 80015a8:	e72a      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80015aa:	2254      	movs	r2, #84	@ 0x54
 80015ac:	1b1b      	subs	r3, r3, r4
 80015ae:	5283      	strh	r3, [r0, r2]
 80015b0:	e743      	b.n	800143a <PWMC_SetPhaseVoltage+0xa6>
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80015b2:	1b12      	subs	r2, r2, r4
 80015b4:	b292      	uxth	r2, r2
 80015b6:	e7d1      	b.n	800155c <PWMC_SetPhaseVoltage+0x1c8>
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80015b8:	1b09      	subs	r1, r1, r4
 80015ba:	b289      	uxth	r1, r1
 80015bc:	e7c6      	b.n	800154c <PWMC_SetPhaseVoltage+0x1b8>
 80015be:	2701      	movs	r7, #1
 80015c0:	2600      	movs	r6, #0
 80015c2:	2502      	movs	r5, #2
 80015c4:	e71c      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
 80015c6:	2700      	movs	r7, #0
 80015c8:	2602      	movs	r6, #2
 80015ca:	2501      	movs	r5, #1
 80015cc:	e718      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80015ce:	b28f      	uxth	r7, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 80015d0:	b29e      	uxth	r6, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 80015d2:	b295      	uxth	r5, r2
 80015d4:	e714      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80015d6:	b29f      	uxth	r7, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 80015d8:	b296      	uxth	r6, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80015da:	b28d      	uxth	r5, r1
 80015dc:	e710      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80015de:	b28f      	uxth	r7, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 80015e0:	b296      	uxth	r6, r2
            pHandle->highDuty = (uint16_t)wTimePhC;
 80015e2:	b29d      	uxth	r5, r3
 80015e4:	e70c      	b.n	8001400 <PWMC_SetPhaseVoltage+0x6c>
 80015e6:	46c0      	nop			@ (mov r8, r8)

080015e8 <PWMC_SwitchOffPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle)
{
 80015e8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80015ea:	6843      	ldr	r3, [r0, #4]
 80015ec:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80015ee:	bd10      	pop	{r4, pc}

080015f0 <PWMC_SwitchOnPWM>:
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
//cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
__weak void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle)
{
 80015f0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80015f2:	6883      	ldr	r3, [r0, #8]
 80015f4:	4798      	blx	r3
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 80015f6:	bd10      	pop	{r4, pc}

080015f8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80015fc:	2900      	cmp	r1, #0
 80015fe:	d010      	beq.n	8001622 <PWMC_CurrentReadingCalibr+0x2a>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8001600:	2901      	cmp	r1, #1
 8001602:	d001      	beq.n	8001608 <PWMC_CurrentReadingCalibr+0x10>
  bool retVal = false;
 8001604:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8001606:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8001608:	2260      	movs	r2, #96	@ 0x60
 800160a:	5a83      	ldrh	r3, [r0, r2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <PWMC_CurrentReadingCalibr+0x26>
        pHandle->OffCalibrWaitTimeCounter--;
 8001610:	3b01      	subs	r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	5283      	strh	r3, [r0, r2]
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f4      	bne.n	8001604 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800161a:	68c3      	ldr	r3, [r0, #12]
 800161c:	4798      	blx	r3
      retVal = true;
 800161e:	2001      	movs	r0, #1
 8001620:	e7f1      	b.n	8001606 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8001622:	f7ff ffe1 	bl	80015e8 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8001626:	0020      	movs	r0, r4
 8001628:	68e3      	ldr	r3, [r4, #12]
 800162a:	4798      	blx	r3
      retVal = true;
 800162c:	2001      	movs	r0, #1
 800162e:	e7ea      	b.n	8001606 <PWMC_CurrentReadingCalibr+0xe>

08001630 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	0004      	movs	r4, r0
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001634:	206e      	movs	r0, #110	@ 0x6e
 8001636:	5e20      	ldrsh	r0, [r4, r0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001638:	6b65      	ldr	r5, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 800163a:	b20b      	sxth	r3, r1
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800163c:	13ee      	asrs	r6, r5, #15
 800163e:	1b9b      	subs	r3, r3, r6
 8001640:	4343      	muls	r3, r0
{
 8001642:	b084      	sub	sp, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001644:	195b      	adds	r3, r3, r5
 8001646:	6363      	str	r3, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001648:	ad02      	add	r5, sp, #8
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800164a:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 800164c:	802b      	strh	r3, [r5, #0]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 800164e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001650:	1409      	asrs	r1, r1, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001652:	13de      	asrs	r6, r3, #15
 8001654:	1b89      	subs	r1, r1, r6
 8001656:	4348      	muls	r0, r1
 8001658:	18c0      	adds	r0, r0, r3
 800165a:	63a0      	str	r0, [r4, #56]	@ 0x38
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800165c:	13c0      	asrs	r0, r0, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 800165e:	8068      	strh	r0, [r5, #2]

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001660:	0011      	movs	r1, r2
 8001662:	9802      	ldr	r0, [sp, #8]
 8001664:	f7ff fa76 	bl	8000b54 <MCM_Rev_Park>

    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;
 8001668:	2268      	movs	r2, #104	@ 0x68
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 800166a:	b203      	sxth	r3, r0
    pHandle->IaEst = ialpha_beta.alpha;
 800166c:	52a3      	strh	r3, [r4, r2]

    temp1 = - ialpha_beta.alpha;
 800166e:	425b      	negs	r3, r3
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001670:	0c00      	lsrs	r0, r0, #16
 8001672:	b29b      	uxth	r3, r3
 8001674:	1a19      	subs	r1, r3, r0
 8001676:	b209      	sxth	r1, r1
 8001678:	0fca      	lsrs	r2, r1, #31
 800167a:	1852      	adds	r2, r2, r1
 800167c:	216a      	movs	r1, #106	@ 0x6a

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 800167e:	181b      	adds	r3, r3, r0
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001680:	1052      	asrs	r2, r2, #1
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001682:	b21b      	sxth	r3, r3
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001684:	5262      	strh	r2, [r4, r1]
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001686:	0fda      	lsrs	r2, r3, #31
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	226c      	movs	r2, #108	@ 0x6c
 800168c:	105b      	asrs	r3, r3, #1
 800168e:	52a3      	strh	r3, [r4, r2]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001690:	b004      	add	sp, #16
 8001692:	bd70      	pop	{r4, r5, r6, pc}

08001694 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8001694:	2385      	movs	r3, #133	@ 0x85
 8001696:	5cc3      	ldrb	r3, [r0, r3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <PWMC_OCP_Handler+0x10>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 800169c:	337d      	adds	r3, #125	@ 0x7d
 800169e:	5cc3      	ldrb	r3, [r0, r3]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d004      	beq.n	80016ae <PWMC_OCP_Handler+0x1a>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 80016a4:	2382      	movs	r3, #130	@ 0x82
 80016a6:	2201      	movs	r2, #1
 80016a8:	54c2      	strb	r2, [r0, r3]
    tempPointer = &(pHandle->Motor);
 80016aa:	307a      	adds	r0, #122	@ 0x7a
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80016ac:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 80016ae:	2248      	movs	r2, #72	@ 0x48
 80016b0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80016b2:	5a82      	ldrh	r2, [r0, r2]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80016b4:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 80016b6:	224a      	movs	r2, #74	@ 0x4a
 80016b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80016ba:	5a82      	ldrh	r2, [r0, r2]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 80016be:	224c      	movs	r2, #76	@ 0x4c
 80016c0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80016c2:	5a82      	ldrh	r2, [r0, r2]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c6:	e7ed      	b.n	80016a4 <PWMC_OCP_Handler+0x10>

080016c8 <PWMC_IsFaultOccurred>:
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80016c8:	2283      	movs	r2, #131	@ 0x83
{
 80016ca:	b510      	push	{r4, lr}
  if (true == pHandle->OverVoltageFlag)
 80016cc:	5c81      	ldrb	r1, [r0, r2]
{
 80016ce:	0003      	movs	r3, r0
  if (true == pHandle->OverVoltageFlag)
 80016d0:	2900      	cmp	r1, #0
 80016d2:	d015      	beq.n	8001700 <PWMC_IsFaultOccurred+0x38>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80016d4:	2100      	movs	r1, #0
 80016d6:	2442      	movs	r4, #66	@ 0x42
 80016d8:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 80016da:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80016dc:	2282      	movs	r2, #130	@ 0x82
 80016de:	5c99      	ldrb	r1, [r3, r2]
 80016e0:	2900      	cmp	r1, #0
 80016e2:	d002      	beq.n	80016ea <PWMC_IsFaultOccurred+0x22>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80016e4:	2100      	movs	r1, #0
    retVal |= MC_OVER_CURR;
 80016e6:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 80016e8:	5499      	strb	r1, [r3, r2]
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80016ea:	2284      	movs	r2, #132	@ 0x84
 80016ec:	5c99      	ldrb	r1, [r3, r2]
 80016ee:	2900      	cmp	r1, #0
 80016f0:	d005      	beq.n	80016fe <PWMC_IsFaultOccurred+0x36>
  {
    retVal |= MC_DP_FAULT;
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	00c9      	lsls	r1, r1, #3
 80016f6:	4308      	orrs	r0, r1
    pHandle->driverProtectionFlag = false;
 80016f8:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 80016fa:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80016fc:	5499      	strb	r1, [r3, r2]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80016fe:	bd10      	pop	{r4, pc}
 8001700:	2440      	movs	r4, #64	@ 0x40
  uint16_t retVal = MC_NO_FAULTS;
 8001702:	2000      	movs	r0, #0
 8001704:	e7ea      	b.n	80016dc <PWMC_IsFaultOccurred+0x14>
 8001706:	46c0      	nop			@ (mov r8, r8)

08001708 <R1_GetPhaseCurrents>:
  * @retval Ia and Ib current in Curr_Components format
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t * pHdl, ab_t * pStator_Currents)
{
  PWMC_R1_Handle_t * pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001708:	23cc      	movs	r3, #204	@ 0xcc
 800170a:	58c3      	ldr	r3, [r0, r3]
{
 800170c:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800170e:	685a      	ldr	r2, [r3, #4]
  int16_t hCurrA = 0;
  int16_t hCurrB = 0;
  int16_t hCurrC = 0;

  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 8001710:	2400      	movs	r4, #0
 8001712:	23c8      	movs	r3, #200	@ 0xc8
 8001714:	54c4      	strb	r4, [r0, r3]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001716:	6853      	ldr	r3, [r2, #4]
 8001718:	3470      	adds	r4, #112	@ 0x70
 800171a:	43a3      	bics	r3, r4
 800171c:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  /* First sampling point */
  wAux1 = (int32_t) pHandle->CurConv[0] ;
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800171e:	22a0      	movs	r2, #160	@ 0xa0
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001720:	23b4      	movs	r3, #180	@ 0xb4
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001722:	5884      	ldr	r4, [r0, r2]

  /* Check saturation */
  if (wAux1 > -INT16_MAX)
  {
    if (wAux1 < INT16_MAX)
 8001724:	2280      	movs	r2, #128	@ 0x80
  wAux1 = (int32_t) pHandle->CurConv[0] ;
 8001726:	5ac3      	ldrh	r3, [r0, r3]
    if (wAux1 < INT16_MAX)
 8001728:	0212      	lsls	r2, r2, #8
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 800172a:	1b1b      	subs	r3, r3, r4
    if (wAux1 < INT16_MAX)
 800172c:	4293      	cmp	r3, r2
 800172e:	db00      	blt.n	8001732 <R1_GetPhaseCurrents+0x2a>
 8001730:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <R1_GetPhaseCurrents+0x270>)
 8001732:	4a92      	ldr	r2, [pc, #584]	@ (800197c <R1_GetPhaseCurrents+0x274>)
 8001734:	4293      	cmp	r3, r2
 8001736:	da00      	bge.n	800173a <R1_GetPhaseCurrents+0x32>
 8001738:	0013      	movs	r3, r2
  else
  {
    wAux1 = -INT16_MAX;
  }
   /* Second sampling point */
  wAux2 = (int32_t) pHandle->CurConv[1] ;
 800173a:	22b6      	movs	r2, #182	@ 0xb6
 800173c:	5a82      	ldrh	r2, [r0, r2]
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 800173e:	1b12      	subs	r2, r2, r4

  /* Check saturation */
  if (wAux2 > -INT16_MAX)
  {
    if (wAux2 < INT16_MAX)
 8001740:	2480      	movs	r4, #128	@ 0x80
 8001742:	0224      	lsls	r4, r4, #8
 8001744:	42a2      	cmp	r2, r4
 8001746:	db00      	blt.n	800174a <R1_GetPhaseCurrents+0x42>
 8001748:	4a8b      	ldr	r2, [pc, #556]	@ (8001978 <R1_GetPhaseCurrents+0x270>)
 800174a:	4c8c      	ldr	r4, [pc, #560]	@ (800197c <R1_GetPhaseCurrents+0x274>)
 800174c:	42a2      	cmp	r2, r4
 800174e:	da00      	bge.n	8001752 <R1_GetPhaseCurrents+0x4a>
 8001750:	0022      	movs	r2, r4
  else
  {
    wAux2 = -INT16_MAX;
  }

  switch (pHandle->_Super.Sector)
 8001752:	247c      	movs	r4, #124	@ 0x7c
 8001754:	5d04      	ldrb	r4, [r0, r4]
 8001756:	2c05      	cmp	r4, #5
 8001758:	d900      	bls.n	800175c <R1_GetPhaseCurrents+0x54>
 800175a:	e109      	b.n	8001970 <R1_GetPhaseCurrents+0x268>
 800175c:	4d88      	ldr	r5, [pc, #544]	@ (8001980 <R1_GetPhaseCurrents+0x278>)
 800175e:	00a4      	lsls	r4, r4, #2
 8001760:	592c      	ldr	r4, [r5, r4]
 8001762:	46a7      	mov	pc, r4
      break;
    }

    case SECTOR_5:
    {
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iC,-iB are available to be sampled */
 8001764:	24c5      	movs	r4, #197	@ 0xc5
 8001766:	2506      	movs	r5, #6
 8001768:	5d04      	ldrb	r4, [r0, r4]
 800176a:	4025      	ands	r5, r4
 800176c:	2d06      	cmp	r5, #6
 800176e:	d100      	bne.n	8001772 <R1_GetPhaseCurrents+0x6a>
 8001770:	e0ad      	b.n	80018ce <R1_GetPhaseCurrents+0x1c6>
        hCurrB = (int16_t) wAux1;
        hCurrA = -hCurrB-hCurrC;
      }
      else
      {
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iC, or -iB is available to be sampled */
 8001772:	2d00      	cmp	r5, #0
 8001774:	d100      	bne.n	8001778 <R1_GetPhaseCurrents+0x70>
 8001776:	e085      	b.n	8001884 <R1_GetPhaseCurrents+0x17c>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=270 degree */
 8001778:	247b      	movs	r4, #123	@ 0x7b
 800177a:	5d04      	ldrb	r4, [r0, r4]
 800177c:	2c01      	cmp	r4, #1
 800177e:	d100      	bne.n	8001782 <R1_GetPhaseCurrents+0x7a>
 8001780:	e0c6      	b.n	8001910 <R1_GetPhaseCurrents+0x208>
          hCurrA = pHandle->_Super.IaEst;
 8001782:	2468      	movs	r4, #104	@ 0x68
 8001784:	5f04      	ldrsh	r4, [r0, r4]
              hCurrA = 0;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001786:	2d04      	cmp	r5, #4
 8001788:	d100      	bne.n	800178c <R1_GetPhaseCurrents+0x84>
 800178a:	e0d7      	b.n	800193c <R1_GetPhaseCurrents+0x234>
    case SECTOR_6:
    {
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
      {
        hCurrA = (int16_t) wAux2;
        wAux1 = -wAux1;
 800178c:	425d      	negs	r5, r3
        hCurrB = (int16_t) wAux1;
 800178e:	b22d      	sxth	r5, r5
 8001790:	e071      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iA,-iB are available to be sampled */
 8001792:	24c5      	movs	r4, #197	@ 0xc5
 8001794:	5d05      	ldrb	r5, [r0, r4]
 8001796:	3cc2      	subs	r4, #194	@ 0xc2
 8001798:	402c      	ands	r4, r5
 800179a:	2c03      	cmp	r4, #3
 800179c:	d100      	bne.n	80017a0 <R1_GetPhaseCurrents+0x98>
 800179e:	e083      	b.n	80018a8 <R1_GetPhaseCurrents+0x1a0>
      }
      else
      {
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iA, or -iB is available to be sampled */
 80017a0:	2c00      	cmp	r4, #0
 80017a2:	d100      	bne.n	80017a6 <R1_GetPhaseCurrents+0x9e>
 80017a4:	e07b      	b.n	800189e <R1_GetPhaseCurrents+0x196>
        {
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=330 degree */
 80017a6:	257b      	movs	r5, #123	@ 0x7b
 80017a8:	5d45      	ldrb	r5, [r0, r5]
 80017aa:	2d01      	cmp	r5, #1
 80017ac:	d100      	bne.n	80017b0 <R1_GetPhaseCurrents+0xa8>
 80017ae:	e093      	b.n	80018d8 <R1_GetPhaseCurrents+0x1d0>
              hCurrA = -hCurrB;
            }
          }
          else  /* Not START Position */
          {
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80017b0:	2c01      	cmp	r4, #1
 80017b2:	d100      	bne.n	80017b6 <R1_GetPhaseCurrents+0xae>
 80017b4:	e0b2      	b.n	800191c <R1_GetPhaseCurrents+0x214>
              hCurrA = (int16_t) wAux2;
              hCurrB = pHandle->_Super.IbEst;
            }
            else  /* 0x02 -ib */
            {
              wAux1 = -wAux1;
 80017b6:	425b      	negs	r3, r3
              hCurrB = (int16_t) wAux1;
 80017b8:	b21d      	sxth	r5, r3
              hCurrA = pHandle->_Super.IaEst;
 80017ba:	2368      	movs	r3, #104	@ 0x68
 80017bc:	5ec4      	ldrsh	r4, [r0, r3]
 80017be:	e05a      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iA and -iC are available to be sampled */
 80017c0:	24c5      	movs	r4, #197	@ 0xc5
 80017c2:	5d05      	ldrb	r5, [r0, r4]
 80017c4:	3cc0      	subs	r4, #192	@ 0xc0
 80017c6:	402c      	ands	r4, r5
 80017c8:	2c05      	cmp	r4, #5
 80017ca:	d100      	bne.n	80017ce <R1_GetPhaseCurrents+0xc6>
 80017cc:	e07b      	b.n	80018c6 <R1_GetPhaseCurrents+0x1be>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iA or -iC is available to be sampled */
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d04a      	beq.n	8001868 <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=30 degree */
 80017d2:	257b      	movs	r5, #123	@ 0x7b
 80017d4:	5d45      	ldrb	r5, [r0, r5]
 80017d6:	2d01      	cmp	r5, #1
 80017d8:	d100      	bne.n	80017dc <R1_GetPhaseCurrents+0xd4>
 80017da:	e094      	b.n	8001906 <R1_GetPhaseCurrents+0x1fe>
              hCurrB = pHandle->_Super.IbEst;
 80017dc:	256a      	movs	r5, #106	@ 0x6a
 80017de:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA, is available to be sampled */
 80017e0:	2c01      	cmp	r4, #1
 80017e2:	d100      	bne.n	80017e6 <R1_GetPhaseCurrents+0xde>
 80017e4:	e0a6      	b.n	8001934 <R1_GetPhaseCurrents+0x22c>
              hCurrA = -hCurrB-hCurrC;
 80017e6:	1b5c      	subs	r4, r3, r5
 80017e8:	b224      	sxth	r4, r4
 80017ea:	e044      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IB_OK | IC_OK)) == (IB_OK | IC_OK)) /* iB,-iC are available to be sampled */
 80017ec:	24c5      	movs	r4, #197	@ 0xc5
 80017ee:	2506      	movs	r5, #6
 80017f0:	5d04      	ldrb	r4, [r0, r4]
 80017f2:	4025      	ands	r5, r4
 80017f4:	2d06      	cmp	r5, #6
 80017f6:	d100      	bne.n	80017fa <R1_GetPhaseCurrents+0xf2>
 80017f8:	e061      	b.n	80018be <R1_GetPhaseCurrents+0x1b6>
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0x00) /* iB, or -iC is available to be sampled */
 80017fa:	2d00      	cmp	r5, #0
 80017fc:	d042      	beq.n	8001884 <R1_GetPhaseCurrents+0x17c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=90 degree */
 80017fe:	247b      	movs	r4, #123	@ 0x7b
 8001800:	5d04      	ldrb	r4, [r0, r4]
 8001802:	2c01      	cmp	r4, #1
 8001804:	d100      	bne.n	8001808 <R1_GetPhaseCurrents+0x100>
 8001806:	e079      	b.n	80018fc <R1_GetPhaseCurrents+0x1f4>
          hCurrA = pHandle->_Super.IaEst;
 8001808:	2468      	movs	r4, #104	@ 0x68
 800180a:	5f04      	ldrsh	r4, [r0, r4]
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 800180c:	2d02      	cmp	r5, #2
 800180e:	d100      	bne.n	8001812 <R1_GetPhaseCurrents+0x10a>
 8001810:	e092      	b.n	8001938 <R1_GetPhaseCurrents+0x230>
              hCurrB = -hCurrA-hCurrC;
 8001812:	1b1d      	subs	r5, r3, r4
 8001814:	b22d      	sxth	r5, r5
 8001816:	e02e      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IB_OK)) == (IA_OK | IB_OK)) /* iB,-iA are available to be sampled */
 8001818:	24c5      	movs	r4, #197	@ 0xc5
 800181a:	5d05      	ldrb	r5, [r0, r4]
 800181c:	3cc2      	subs	r4, #194	@ 0xc2
 800181e:	402c      	ands	r4, r5
 8001820:	2c03      	cmp	r4, #3
 8001822:	d048      	beq.n	80018b6 <R1_GetPhaseCurrents+0x1ae>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0x00) /* iB, or -iA is available to be sampled */
 8001824:	2c00      	cmp	r4, #0
 8001826:	d035      	beq.n	8001894 <R1_GetPhaseCurrents+0x18c>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=150 degree */
 8001828:	257b      	movs	r5, #123	@ 0x7b
 800182a:	5d45      	ldrb	r5, [r0, r5]
 800182c:	2d01      	cmp	r5, #1
 800182e:	d059      	beq.n	80018e4 <R1_GetPhaseCurrents+0x1dc>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 8001830:	2c02      	cmp	r4, #2
 8001832:	d100      	bne.n	8001836 <R1_GetPhaseCurrents+0x12e>
 8001834:	e076      	b.n	8001924 <R1_GetPhaseCurrents+0x21c>
              wAux1 = -wAux1;
 8001836:	425c      	negs	r4, r3
              hCurrB = pHandle->_Super.IbEst;
 8001838:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux1;
 800183a:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 800183c:	5ec5      	ldrsh	r5, [r0, r3]
 800183e:	e01a      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
      if((pHandle->iflag & (IA_OK | IC_OK)) == (IA_OK | IC_OK)) /* iC,-iA are available to be sampled */
 8001840:	24c5      	movs	r4, #197	@ 0xc5
 8001842:	5d05      	ldrb	r5, [r0, r4]
 8001844:	3cc0      	subs	r4, #192	@ 0xc0
 8001846:	402c      	ands	r4, r5
 8001848:	2c05      	cmp	r4, #5
 800184a:	d02f      	beq.n	80018ac <R1_GetPhaseCurrents+0x1a4>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0x00) /* iC, or -iA is available to be sampled */
 800184c:	2c00      	cmp	r4, #0
 800184e:	d00b      	beq.n	8001868 <R1_GetPhaseCurrents+0x160>
          if(pHandle->_Super.AlignFlag == 0x01) /* START Position Aligning_angle=210 degree */
 8001850:	257b      	movs	r5, #123	@ 0x7b
 8001852:	5d45      	ldrb	r5, [r0, r5]
 8001854:	2d01      	cmp	r5, #1
 8001856:	d04b      	beq.n	80018f0 <R1_GetPhaseCurrents+0x1e8>
              hCurrB = pHandle->_Super.IbEst;
 8001858:	256a      	movs	r5, #106	@ 0x6a
 800185a:	5f45      	ldrsh	r5, [r0, r5]
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 800185c:	2c04      	cmp	r4, #4
 800185e:	d100      	bne.n	8001862 <R1_GetPhaseCurrents+0x15a>
 8001860:	e064      	b.n	800192c <R1_GetPhaseCurrents+0x224>
              wAux1 = -wAux1;
 8001862:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 8001864:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8001866:	e006      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 8001868:	2368      	movs	r3, #104	@ 0x68
 800186a:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 800186c:	236c      	movs	r3, #108	@ 0x6c
          hCurrB = -hCurrA-hCurrC;
 800186e:	5ac5      	ldrh	r5, [r0, r3]
 8001870:	192d      	adds	r5, r5, r4
 8001872:	426d      	negs	r5, r5
 8001874:	b22d      	sxth	r5, r5

    default:
      break;
    }

  pHandle->CurrAOld = hCurrA;
 8001876:	23c0      	movs	r3, #192	@ 0xc0
 8001878:	52c4      	strh	r4, [r0, r3]
  pHandle->CurrBOld = hCurrB;
 800187a:	3302      	adds	r3, #2
 800187c:	52c5      	strh	r5, [r0, r3]

  pStator_Currents->a = hCurrA;
  pStator_Currents->b = hCurrB;
 800187e:	804d      	strh	r5, [r1, #2]
  pStator_Currents->a = hCurrA;
 8001880:	800c      	strh	r4, [r1, #0]
}
 8001882:	bd70      	pop	{r4, r5, r6, pc}
          hCurrB = pHandle->_Super.IbEst;
 8001884:	236a      	movs	r3, #106	@ 0x6a
 8001886:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrC = pHandle->_Super.IcEst;
 8001888:	236c      	movs	r3, #108	@ 0x6c
          hCurrA = -hCurrB-hCurrC;
 800188a:	5ac4      	ldrh	r4, [r0, r3]
 800188c:	1964      	adds	r4, r4, r5
 800188e:	4264      	negs	r4, r4
 8001890:	b224      	sxth	r4, r4
 8001892:	e7f0      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
          hCurrB = pHandle->_Super.IbEst;
 8001894:	236a      	movs	r3, #106	@ 0x6a
 8001896:	5ec5      	ldrsh	r5, [r0, r3]
          hCurrA = pHandle->_Super.IaEst;
 8001898:	2368      	movs	r3, #104	@ 0x68
 800189a:	5ec4      	ldrsh	r4, [r0, r3]
 800189c:	e7eb      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
          hCurrA = pHandle->_Super.IaEst;
 800189e:	2368      	movs	r3, #104	@ 0x68
 80018a0:	5ec4      	ldrsh	r4, [r0, r3]
          hCurrB = pHandle->_Super.IbEst;
 80018a2:	236a      	movs	r3, #106	@ 0x6a
 80018a4:	5ec5      	ldrsh	r5, [r0, r3]
 80018a6:	e7e6      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
        hCurrA = (int16_t) wAux2;
 80018a8:	b214      	sxth	r4, r2
 80018aa:	e76f      	b.n	800178c <R1_GetPhaseCurrents+0x84>
        wAux1 = -wAux1;
 80018ac:	425c      	negs	r4, r3
        hCurrB = -hCurrA-hCurrC;
 80018ae:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux1;
 80018b0:	b224      	sxth	r4, r4
        hCurrB = -hCurrA-hCurrC;
 80018b2:	b22d      	sxth	r5, r5
 80018b4:	e7df      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 80018b6:	425c      	negs	r4, r3
        hCurrB = (int16_t) wAux2;
 80018b8:	b215      	sxth	r5, r2
        hCurrA = (int16_t) wAux1;
 80018ba:	b224      	sxth	r4, r4
 80018bc:	e7db      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
        hCurrA = -hCurrB-hCurrC;
 80018be:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux2;
 80018c0:	b215      	sxth	r5, r2
        hCurrA = -hCurrB-hCurrC;
 80018c2:	b224      	sxth	r4, r4
 80018c4:	e7d7      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
        hCurrB = -hCurrA-hCurrC;
 80018c6:	1a9d      	subs	r5, r3, r2
        hCurrA = (int16_t) wAux2;
 80018c8:	b214      	sxth	r4, r2
        hCurrB = -hCurrA-hCurrC;
 80018ca:	b22d      	sxth	r5, r5
 80018cc:	e7d3      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
        wAux1 = -wAux1;
 80018ce:	425d      	negs	r5, r3
        hCurrA = -hCurrB-hCurrC;
 80018d0:	1a9c      	subs	r4, r3, r2
        hCurrB = (int16_t) wAux1;
 80018d2:	b22d      	sxth	r5, r5
        hCurrA = -hCurrB-hCurrC;
 80018d4:	b224      	sxth	r4, r4
 80018d6:	e7ce      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IA_OK) /* iA, is available to be sampled */
 80018d8:	2c01      	cmp	r4, #1
 80018da:	d041      	beq.n	8001960 <R1_GetPhaseCurrents+0x258>
              wAux1 = -wAux1;
 80018dc:	425d      	negs	r5, r3
              hCurrB = (int16_t) wAux1;
 80018de:	b22d      	sxth	r5, r5
              hCurrA = -hCurrB;
 80018e0:	b21c      	sxth	r4, r3
 80018e2:	e7c8      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IB_OK)) == IB_OK) /* iB, is available to be sampled */
 80018e4:	2c02      	cmp	r4, #2
 80018e6:	d03f      	beq.n	8001968 <R1_GetPhaseCurrents+0x260>
              wAux1 = -wAux1;
 80018e8:	425c      	negs	r4, r3
              hCurrA = (int16_t) wAux1;
 80018ea:	b224      	sxth	r4, r4
              hCurrB = -hCurrA;
 80018ec:	b21d      	sxth	r5, r3
 80018ee:	e7c2      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 80018f0:	2c04      	cmp	r4, #4
 80018f2:	d02d      	beq.n	8001950 <R1_GetPhaseCurrents+0x248>
              wAux1 = -wAux1;
 80018f4:	425c      	negs	r4, r3
              hCurrB = 0;
 80018f6:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux1;
 80018f8:	b224      	sxth	r4, r4
              hCurrB = 0;
 80018fa:	e7bc      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IB_OK) /* iB, is available to be sampled */
 80018fc:	2d02      	cmp	r5, #2
 80018fe:	d024      	beq.n	800194a <R1_GetPhaseCurrents+0x242>
              hCurrA = 0;
 8001900:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 8001902:	b21d      	sxth	r5, r3
 8001904:	e7b7      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IA_OK | IC_OK)) == IA_OK) /* iA is available to be sampled and not iC */
 8001906:	2c01      	cmp	r4, #1
 8001908:	d01c      	beq.n	8001944 <R1_GetPhaseCurrents+0x23c>
              hCurrB = 0;
 800190a:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 800190c:	b21c      	sxth	r4, r3
              hCurrB = 0;
 800190e:	e7b2      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
            if((pHandle->iflag & (IB_OK | IC_OK)) == IC_OK) /* iC, is available to be sampled */
 8001910:	2d04      	cmp	r5, #4
 8001912:	d021      	beq.n	8001958 <R1_GetPhaseCurrents+0x250>
              wAux1 = -wAux1;
 8001914:	425d      	negs	r5, r3
              hCurrA = 0;
 8001916:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux1;
 8001918:	b22d      	sxth	r5, r5
              hCurrA = 0;
 800191a:	e7ac      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = pHandle->_Super.IbEst;
 800191c:	236a      	movs	r3, #106	@ 0x6a
              hCurrA = (int16_t) wAux2;
 800191e:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 8001920:	5ec5      	ldrsh	r5, [r0, r3]
 8001922:	e7a8      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = pHandle->_Super.IaEst;
 8001924:	2368      	movs	r3, #104	@ 0x68
              hCurrB = (int16_t) wAux2;
 8001926:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 8001928:	5ec4      	ldrsh	r4, [r0, r3]
 800192a:	e7a4      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB-hCurrC;
 800192c:	18ac      	adds	r4, r5, r2
 800192e:	4264      	negs	r4, r4
 8001930:	b224      	sxth	r4, r4
 8001932:	e7a0      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = (int16_t) wAux2;
 8001934:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 8001936:	e79e      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = (int16_t) wAux2;
 8001938:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 800193a:	e79c      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA-hCurrC;
 800193c:	18a5      	adds	r5, r4, r2
 800193e:	426d      	negs	r5, r5
 8001940:	b22d      	sxth	r5, r5
 8001942:	e798      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = 0;
 8001944:	2500      	movs	r5, #0
              hCurrA = (int16_t) wAux2;
 8001946:	b214      	sxth	r4, r2
              hCurrC = -hCurrA;
 8001948:	e795      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = 0;
 800194a:	2400      	movs	r4, #0
              hCurrB = (int16_t) wAux2;
 800194c:	b215      	sxth	r5, r2
              hCurrA = 0;
 800194e:	e792      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrC;
 8001950:	4254      	negs	r4, r2
              hCurrB = 0;
 8001952:	2500      	movs	r5, #0
              hCurrA = -hCurrC;
 8001954:	b224      	sxth	r4, r4
              hCurrB = 0;
 8001956:	e78e      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrC;
 8001958:	4255      	negs	r5, r2
              hCurrA = 0;
 800195a:	2400      	movs	r4, #0
              hCurrB = -hCurrC;
 800195c:	b22d      	sxth	r5, r5
 800195e:	e78a      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrB = -hCurrA;
 8001960:	4255      	negs	r5, r2
              hCurrA = (int16_t) wAux2;
 8001962:	b214      	sxth	r4, r2
              hCurrB = -hCurrA;
 8001964:	b22d      	sxth	r5, r5
 8001966:	e786      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
              hCurrA = -hCurrB;
 8001968:	4254      	negs	r4, r2
              hCurrB = (int16_t) wAux2;
 800196a:	b215      	sxth	r5, r2
              hCurrA = -hCurrB;
 800196c:	b224      	sxth	r4, r4
 800196e:	e782      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
  switch (pHandle->_Super.Sector)
 8001970:	2500      	movs	r5, #0
 8001972:	002c      	movs	r4, r5
 8001974:	e77f      	b.n	8001876 <R1_GetPhaseCurrents+0x16e>
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	00007fff 	.word	0x00007fff
 800197c:	ffff8001 	.word	0xffff8001
 8001980:	08005958 	.word	0x08005958

08001984 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8001984:	23cc      	movs	r3, #204	@ 0xcc
 8001986:	58c3      	ldr	r3, [r0, r3]
{
 8001988:	b530      	push	{r4, r5, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800198a:	685a      	ldr	r2, [r3, #4]
  /* Clear flag used for FOC duration check */
  pHandle->FOCDurationFlag = false;
 800198c:	2400      	movs	r4, #0
 800198e:	23c8      	movs	r3, #200	@ 0xc8
 8001990:	54c4      	strb	r4, [r0, r3]
 8001992:	6853      	ldr	r3, [r2, #4]
 8001994:	3470      	adds	r4, #112	@ 0x70
 8001996:	43a3      	bics	r3, r4
 8001998:	6053      	str	r3, [r2, #4]

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  if (pHandle->Index < NB_CONVERSIONS)
 800199a:	23c4      	movs	r3, #196	@ 0xc4
 800199c:	5cc2      	ldrb	r2, [r0, r3]
 800199e:	2a0f      	cmp	r2, #15
 80019a0:	d809      	bhi.n	80019b6 <R1_HFCurrentsCalibration+0x32>
  {
    pHandle->PhaseOffset += pHandle->CurConv[1] ;
 80019a2:	22b6      	movs	r2, #182	@ 0xb6
 80019a4:	3430      	adds	r4, #48	@ 0x30
 80019a6:	5a85      	ldrh	r5, [r0, r2]
 80019a8:	5902      	ldr	r2, [r0, r4]
 80019aa:	1952      	adds	r2, r2, r5
 80019ac:	5102      	str	r2, [r0, r4]
    pHandle->Index++;
 80019ae:	5cc2      	ldrb	r2, [r0, r3]
 80019b0:	3201      	adds	r2, #1
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	54c2      	strb	r2, [r0, r3]
  }

  /* During offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80019ba:	804b      	strh	r3, [r1, #2]

}
 80019bc:	bd30      	pop	{r4, r5, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)

080019c0 <R1_SetADCSampPointPolarization>:
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;

  uint16_t hAux;
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80019c0:	21cc      	movs	r1, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80019c2:	22b8      	movs	r2, #184	@ 0xb8
{
 80019c4:	b530      	push	{r4, r5, lr}
 80019c6:	0003      	movs	r3, r0
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80019c8:	5a82      	ldrh	r2, [r0, r2]
 80019ca:	5840      	ldr	r0, [r0, r1]
 80019cc:	0852      	lsrs	r2, r2, #1
 80019ce:	8bc4      	ldrh	r4, [r0, #30]
 80019d0:	8c01      	ldrh	r1, [r0, #32]
 80019d2:	1909      	adds	r1, r1, r4
 80019d4:	b289      	uxth	r1, r1
 80019d6:	1a55      	subs	r5, r2, r1
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80019d8:	24ba      	movs	r4, #186	@ 0xba
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80019da:	1852      	adds	r2, r2, r1
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80019dc:	21bc      	movs	r1, #188	@ 0xbc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80019de:	531d      	strh	r5, [r3, r4]
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80019e0:	525a      	strh	r2, [r3, r1]
  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 80019e2:	2222      	movs	r2, #34	@ 0x22
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	5c82      	ldrb	r2, [r0, r2]
 80019e8:	0189      	lsls	r1, r1, #6
 80019ea:	4091      	lsls	r1, r2
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <R1_SetADCSampPointPolarization+0x64>)
 80019ee:	0b49      	lsrs	r1, r1, #13
 80019f0:	6291      	str	r1, [r2, #40]	@ 0x28
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 80019f2:	2123      	movs	r1, #35	@ 0x23
 80019f4:	5c41      	ldrb	r1, [r0, r1]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80019f6:	2007      	movs	r0, #7
 80019f8:	6954      	ldr	r4, [r2, #20]
 80019fa:	4384      	bics	r4, r0
 80019fc:	4321      	orrs	r1, r4
 80019fe:	6151      	str	r1, [r2, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001a00:	68d0      	ldr	r0, [r2, #12]
 8001a02:	4909      	ldr	r1, [pc, #36]	@ (8001a28 <R1_SetADCSampPointPolarization+0x68>)
 8001a04:	4008      	ands	r0, r1
 8001a06:	2188      	movs	r1, #136	@ 0x88
 8001a08:	00c9      	lsls	r1, r1, #3
 8001a0a:	4301      	orrs	r1, r0
 8001a0c:	60d1      	str	r1, [r2, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8001a0e:	22c8      	movs	r2, #200	@ 0xc8
 8001a10:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8001a12:	3a72      	subs	r2, #114	@ 0x72
 8001a14:	5a98      	ldrh	r0, [r3, r2]
 8001a16:	2801      	cmp	r0, #1
 8001a18:	d001      	beq.n	8001a1e <R1_SetADCSampPointPolarization+0x5e>
  if (pHandle->FOCDurationFlag == true)
 8001a1a:	0008      	movs	r0, r1
  else
  {
    /* Nothing to do */
  }
  return (hAux);
}
 8001a1c:	bd30      	pop	{r4, r5, pc}
    pHandle->_Super.SWerror = 0u;
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5299      	strh	r1, [r3, r2]
 8001a22:	e7fb      	b.n	8001a1c <R1_SetADCSampPointPolarization+0x5c>
 8001a24:	40012400 	.word	0x40012400
 8001a28:	fffff23f 	.word	0xfffff23f

08001a2c <R1_CalcDutyCycles>:
  * @param  pHandle related object of class CPWMC
  * @retval uint16_t It returns MC_DURATION if the TIMx update occurs
  *         before the end of FOC algorithm else returns MC_NO_ERROR
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl;
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a36:	22cc      	movs	r2, #204	@ 0xcc
  uint8_t midVal;
  uint8_t minVal;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a38:	2150      	movs	r1, #80	@ 0x50
{
 8001a3a:	b5e0      	push	{r5, r6, r7, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a3c:	5887      	ldr	r7, [r0, r2]
{
 8001a3e:	b091      	sub	sp, #68	@ 0x44
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a40:	68ba      	ldr	r2, [r7, #8]
{
 8001a42:	0003      	movs	r3, r0
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8001a44:	920a      	str	r2, [sp, #40]	@ 0x28
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a46:	5a42      	ldrh	r2, [r0, r1]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a48:	3102      	adds	r1, #2
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a4a:	4690      	mov	r8, r2
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a4c:	5a42      	ldrh	r2, [r0, r1]
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a4e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 8001a50:	4692      	mov	sl, r2
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 8001a52:	910e      	str	r1, [sp, #56]	@ 0x38
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8001a54:	2154      	movs	r1, #84	@ 0x54
 8001a56:	5a42      	ldrh	r2, [r0, r1]

  maxVal = (uint8_t)pHandle->_Super.highDuty;
  midVal = (uint8_t)pHandle->_Super.midDuty;
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag=0x00;
 8001a58:	2600      	movs	r6, #0
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8001a5a:	4691      	mov	r9, r2
 8001a5c:	4649      	mov	r1, r9
 8001a5e:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a60:	8091      	strh	r1, [r2, #4]
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8001a62:	215c      	movs	r1, #92	@ 0x5c
  pHandle->iflag=0x00;
 8001a64:	22c5      	movs	r2, #197	@ 0xc5
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8001a66:	5c44      	ldrb	r4, [r0, r1]
  midVal = (uint8_t)pHandle->_Super.midDuty;
 8001a68:	3902      	subs	r1, #2
 8001a6a:	5c40      	ldrb	r0, [r0, r1]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 8001a6c:	3902      	subs	r1, #2
 8001a6e:	5c5d      	ldrb	r5, [r3, r1]
  pHandle->iflag=0x00;
 8001a70:	549e      	strb	r6, [r3, r2]

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001a72:	0061      	lsls	r1, r4, #1
 8001a74:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a76:	9405      	str	r4, [sp, #20]
 8001a78:	5e8a      	ldrsh	r2, [r1, r2]
 8001a7a:	0040      	lsls	r0, r0, #1
 8001a7c:	4694      	mov	ip, r2
 8001a7e:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a80:	5a51      	ldrh	r1, [r2, r1]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001a82:	9701      	str	r7, [sp, #4]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001a84:	910d      	str	r1, [sp, #52]	@ 0x34
 8001a86:	000c      	movs	r4, r1
 8001a88:	5e81      	ldrsh	r1, [r0, r2]
 8001a8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a8c:	5a12      	ldrh	r2, [r2, r0]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001a8e:	8bb8      	ldrh	r0, [r7, #28]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8001a90:	4693      	mov	fp, r2
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	9004      	str	r0, [sp, #16]
 8001a96:	1aa4      	subs	r4, r4, r2
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8001a98:	0068      	lsls	r0, r5, #1
 8001a9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8001a9c:	5e80      	ldrsh	r0, [r0, r2]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001a9e:	465a      	mov	r2, fp
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8001aa0:	0007      	movs	r7, r0
 8001aa2:	900b      	str	r0, [sp, #44]	@ 0x2c
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001aa4:	9804      	ldr	r0, [sp, #16]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8001aa6:	b224      	sxth	r4, r4
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001aa8:	1a10      	subs	r0, r2, r0
 8001aaa:	1bc0      	subs	r0, r0, r7
 8001aac:	b282      	uxth	r2, r0
 8001aae:	920c      	str	r2, [sp, #48]	@ 0x30
  pHandle->aShiftval[0]=0;
 8001ab0:	22a8      	movs	r2, #168	@ 0xa8
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001ab2:	9f01      	ldr	r7, [sp, #4]
  pHandle->aShiftval[0]=0;
 8001ab4:	509e      	str	r6, [r3, r2]
  pHandle->aShiftval[2]=0;
 8001ab6:	3204      	adds	r2, #4
 8001ab8:	529e      	strh	r6, [r3, r2]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001aba:	8c3a      	ldrh	r2, [r7, #32]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 8001abc:	b200      	sxth	r0, r0
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ac0:	2620      	movs	r6, #32
 8001ac2:	5fba      	ldrsh	r2, [r7, r6]
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001ac4:	26b8      	movs	r6, #184	@ 0xb8
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001ac6:	9207      	str	r2, [sp, #28]
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001ac8:	5f9a      	ldrsh	r2, [r3, r6]
    }
  }

  if(submid_min_deltmin > 0)
  {
    pHandle->iflag |= ALFLAG[minVal];
 8001aca:	4ec6      	ldr	r6, [pc, #792]	@ (8001de4 <R1_CalcDutyCycles+0x3b8>)
       > (int16_t)(pHandle->Half_PWMPeriod))
 8001acc:	9202      	str	r2, [sp, #8]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
  }
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
  {
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001ace:	8bfa      	ldrh	r2, [r7, #30]
    pHandle->iflag |= ALFLAG[minVal];
 8001ad0:	9608      	str	r6, [sp, #32]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001ad2:	9206      	str	r2, [sp, #24]
    pHandle->iflag |= ALFLAG[minVal];
 8001ad4:	5772      	ldrsb	r2, [r6, r5]
 8001ad6:	9203      	str	r2, [sp, #12]
  if(submax_mid_deltmin > 0)
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	dc00      	bgt.n	8001ade <R1_CalcDutyCycles+0xb2>
 8001adc:	e09e      	b.n	8001c1c <R1_CalcDutyCycles+0x1f0>
    pHandle->iflag |= ALFLAG[maxVal];
 8001ade:	9c05      	ldr	r4, [sp, #20]
 8001ae0:	5734      	ldrsb	r4, [r6, r4]
  if(submid_min_deltmin > 0)
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	dc00      	bgt.n	8001ae8 <R1_CalcDutyCycles+0xbc>
 8001ae6:	e0ae      	b.n	8001c46 <R1_CalcDutyCycles+0x21a>
    pHandle->iflag |= ALFLAG[minVal];
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	22c5      	movs	r2, #197	@ 0xc5
 8001aec:	4655      	mov	r5, sl
 8001aee:	549c      	strb	r4, [r3, r2]
 8001af0:	4646      	mov	r6, r8
 8001af2:	464c      	mov	r4, r9
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001af4:	4659      	mov	r1, fp
 8001af6:	9a06      	ldr	r2, [sp, #24]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001af8:	9804      	ldr	r0, [sp, #16]
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001afa:	1a89      	subs	r1, r1, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001afc:	1a80      	subs	r0, r0, r2
 8001afe:	4458      	add	r0, fp
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001b00:	b209      	sxth	r1, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001b02:	b200      	sxth	r0, r0
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 8001b04:	9a07      	ldr	r2, [sp, #28]
 8001b06:	1a47      	subs	r7, r0, r1
 8001b08:	4297      	cmp	r7, r2
 8001b0a:	da13      	bge.n	8001b34 <R1_CalcDutyCycles+0x108>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
 8001b0c:	20c5      	movs	r0, #197	@ 0xc5
 8001b0e:	9a08      	ldr	r2, [sp, #32]
 8001b10:	9905      	ldr	r1, [sp, #20]
 8001b12:	5c1f      	ldrb	r7, [r3, r0]
 8001b14:	5c51      	ldrb	r1, [r2, r1]
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b16:	9a03      	ldr	r2, [sp, #12]
    pHandle->iflag &=  ALFLAG[maxVal];
 8001b18:	4039      	ands	r1, r7
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b1a:	4391      	bics	r1, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b1c:	9a02      	ldr	r2, [sp, #8]
    pHandle->iflag &= ~ALFLAG[minVal];
 8001b1e:	5419      	strb	r1, [r3, r0]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b20:	4694      	mov	ip, r2
 8001b22:	0fd1      	lsrs	r1, r2, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b26:	4461      	add	r1, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b28:	4694      	mov	ip, r2
 8001b2a:	9806      	ldr	r0, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8001b2c:	1049      	asrs	r1, r1, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001b2e:	4460      	add	r0, ip
 8001b30:	1840      	adds	r0, r0, r1
 8001b32:	b200      	sxth	r0, r0
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 8001b34:	9a02      	ldr	r2, [sp, #8]
 8001b36:	4290      	cmp	r0, r2
 8001b38:	db00      	blt.n	8001b3c <R1_CalcDutyCycles+0x110>
 8001b3a:	e0b4      	b.n	8001ca6 <R1_CalcDutyCycles+0x27a>
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	dc00      	bgt.n	8001b42 <R1_CalcDutyCycles+0x116>
 8001b40:	e0b1      	b.n	8001ca6 <R1_CalcDutyCycles+0x27a>
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8001b42:	9a02      	ldr	r2, [sp, #8]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001b44:	b280      	uxth	r0, r0
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8001b46:	4291      	cmp	r1, r2
 8001b48:	db00      	blt.n	8001b4c <R1_CalcDutyCycles+0x120>
 8001b4a:	e0a6      	b.n	8001c9a <R1_CalcDutyCycles+0x26e>
 8001b4c:	2900      	cmp	r1, #0
 8001b4e:	dc00      	bgt.n	8001b52 <R1_CalcDutyCycles+0x126>
 8001b50:	e0a3      	b.n	8001c9a <R1_CalcDutyCycles+0x26e>
  else
  {
    /* Nothing to do */
  }

  pHandle->CntSmp1 = SamplePoint1;
 8001b52:	b28a      	uxth	r2, r1
 8001b54:	4693      	mov	fp, r2
 8001b56:	21ba      	movs	r1, #186	@ 0xba
 8001b58:	465a      	mov	r2, fp
 8001b5a:	525a      	strh	r2, [r3, r1]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001b5c:	9a01      	ldr	r2, [sp, #4]
  pHandle->CntSmp2 = SamplePoint2;
 8001b5e:	3102      	adds	r1, #2
 8001b60:	68d7      	ldr	r7, [r2, #12]
 8001b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001b64:	5258      	strh	r0, [r3, r1]
 8001b66:	4694      	mov	ip, r2
 8001b68:	2202      	movs	r2, #2
 8001b6a:	499f      	ldr	r1, [pc, #636]	@ (8001de8 <R1_CalcDutyCycles+0x3bc>)
 8001b6c:	5c79      	ldrb	r1, [r7, r1]
 8001b6e:	4461      	add	r1, ip
 8001b70:	680f      	ldr	r7, [r1, #0]
 8001b72:	4397      	bics	r7, r2
 8001b74:	600f      	str	r7, [r1, #0]

  /* Critical section start */
  LL_DMA_DisableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001b76:	4642      	mov	r2, r8
 8001b78:	2794      	movs	r7, #148	@ 0x94
 8001b7a:	53da      	strh	r2, [r3, r7]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001b7c:	4652      	mov	r2, sl
 8001b7e:	3702      	adds	r7, #2
 8001b80:	53da      	strh	r2, [r3, r7]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001b82:	464a      	mov	r2, r9
 8001b84:	3702      	adds	r7, #2
 8001b86:	53da      	strh	r2, [r3, r7]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001b88:	3702      	adds	r7, #2
 8001b8a:	53de      	strh	r6, [r3, r7]
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001b8c:	3702      	adds	r7, #2
 8001b8e:	53dd      	strh	r5, [r3, r7]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001b90:	3702      	adds	r7, #2
 8001b92:	53dc      	strh	r4, [r3, r7]

  if (pHandle->TCDoneFlag == true)
 8001b94:	372b      	adds	r7, #43	@ 0x2b
 8001b96:	5ddf      	ldrb	r7, [r3, r7]
 8001b98:	2f00      	cmp	r7, #0
 8001b9a:	d011      	beq.n	8001bc0 <R1_CalcDutyCycles+0x194>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8001b9c:	2788      	movs	r7, #136	@ 0x88
 8001b9e:	4642      	mov	r2, r8
 8001ba0:	53da      	strh	r2, [r3, r7]
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 8001ba2:	4652      	mov	r2, sl
 8001ba4:	3702      	adds	r7, #2
 8001ba6:	53da      	strh	r2, [r3, r7]
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8001ba8:	464a      	mov	r2, r9
 8001baa:	3702      	adds	r7, #2
 8001bac:	53da      	strh	r2, [r3, r7]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
 8001bae:	3702      	adds	r7, #2
 8001bb0:	53de      	strh	r6, [r3, r7]
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8001bb2:	2690      	movs	r6, #144	@ 0x90
 8001bb4:	539d      	strh	r5, [r3, r6]
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 8001bb6:	2592      	movs	r5, #146	@ 0x92
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001bb8:	465a      	mov	r2, fp
 8001bba:	535c      	strh	r4, [r3, r5]
 8001bbc:	4c8b      	ldr	r4, [pc, #556]	@ (8001dec <R1_CalcDutyCycles+0x3c0>)
 8001bbe:	6422      	str	r2, [r4, #64]	@ 0x40
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001bc0:	2502      	movs	r5, #2
 8001bc2:	680c      	ldr	r4, [r1, #0]
    /* Do nothing, it will be applied during DMA transfer complete IRQ */
  }
  /* Critical section end */
  LL_DMA_EnableIT_TC(DMAx, pHandle->pParams_str->DMAChannelX);

  LL_ADC_REG_SetSequencerChannels(ADC1, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8001bc4:	9a01      	ldr	r2, [sp, #4]
 8001bc6:	432c      	orrs	r4, r5
 8001bc8:	600c      	str	r4, [r1, #0]
 8001bca:	2122      	movs	r1, #34	@ 0x22
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bcc:	2480      	movs	r4, #128	@ 0x80
 8001bce:	5c51      	ldrb	r1, [r2, r1]
 8001bd0:	01a4      	lsls	r4, r4, #6
 8001bd2:	408c      	lsls	r4, r1
 8001bd4:	4986      	ldr	r1, [pc, #536]	@ (8001df0 <R1_CalcDutyCycles+0x3c4>)
 8001bd6:	0b64      	lsrs	r4, r4, #13
 8001bd8:	628c      	str	r4, [r1, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001bda:	694c      	ldr	r4, [r1, #20]
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 8001bdc:	3521      	adds	r5, #33	@ 0x21
 8001bde:	5d52      	ldrb	r2, [r2, r5]
 8001be0:	3d1c      	subs	r5, #28
 8001be2:	43ac      	bics	r4, r5
 8001be4:	4322      	orrs	r2, r4
 8001be6:	614a      	str	r2, [r1, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001be8:	68cc      	ldr	r4, [r1, #12]
 8001bea:	4a82      	ldr	r2, [pc, #520]	@ (8001df4 <R1_CalcDutyCycles+0x3c8>)
 8001bec:	4014      	ands	r4, r2
 8001bee:	2288      	movs	r2, #136	@ 0x88
 8001bf0:	00d2      	lsls	r2, r2, #3
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	60ca      	str	r2, [r1, #12]
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_CH4);

  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8001bf6:	22ae      	movs	r2, #174	@ 0xae
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8001bf8:	4659      	mov	r1, fp
  pHandle->DmaBuffCCR_ADCTrig[0] = SamplePoint2;
 8001bfa:	5298      	strh	r0, [r3, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = SamplePoint1;
 8001bfc:	3204      	adds	r2, #4
 8001bfe:	5299      	strh	r1, [r3, r2]

  /* Check software error */
  if (pHandle->FOCDurationFlag == true)
 8001c00:	3216      	adds	r2, #22
 8001c02:	5c99      	ldrb	r1, [r3, r2]
  }
  else
  {
    hAux = MC_NO_ERROR;
  }
  if (pHandle->_Super.SWerror == 1u)
 8001c04:	3a72      	subs	r2, #114	@ 0x72
 8001c06:	5a98      	ldrh	r0, [r3, r2]
 8001c08:	2801      	cmp	r0, #1
 8001c0a:	d058      	beq.n	8001cbe <R1_CalcDutyCycles+0x292>
  if (pHandle->FOCDurationFlag == true)
 8001c0c:	0008      	movs	r0, r1
  {
    /* Nothing to do */
  }

  return (hAux);
}
 8001c0e:	b011      	add	sp, #68	@ 0x44
 8001c10:	bcf0      	pop	{r4, r5, r6, r7}
 8001c12:	46bb      	mov	fp, r7
 8001c14:	46b2      	mov	sl, r6
 8001c16:	46a9      	mov	r9, r5
 8001c18:	46a0      	mov	r8, r4
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8001c1c:	4662      	mov	r2, ip
 8001c1e:	1b14      	subs	r4, r2, r4
 8001c20:	9a07      	ldr	r2, [sp, #28]
 8001c22:	3401      	adds	r4, #1
 8001c24:	4694      	mov	ip, r2
 8001c26:	9a02      	ldr	r2, [sp, #8]
 8001c28:	4464      	add	r4, ip
 8001c2a:	4294      	cmp	r4, r2
 8001c2c:	dc73      	bgt.n	8001d16 <R1_CalcDutyCycles+0x2ea>
      pHandle->iflag |= ALFLAG[maxVal];
 8001c2e:	9a05      	ldr	r2, [sp, #20]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8001c30:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
      pHandle->iflag |= ALFLAG[maxVal];
 8001c32:	56b4      	ldrsb	r4, [r6, r2]
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8001c34:	9e04      	ldr	r6, [sp, #16]
 8001c36:	3254      	adds	r2, #84	@ 0x54
 8001c38:	3601      	adds	r6, #1
 8001c3a:	445e      	add	r6, fp
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	1bf6      	subs	r6, r6, r7
 8001c40:	52d6      	strh	r6, [r2, r3]
  if(submid_min_deltmin > 0)
 8001c42:	2800      	cmp	r0, #0
 8001c44:	dc77      	bgt.n	8001d36 <R1_CalcDutyCycles+0x30a>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8001c46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001c48:	3801      	subs	r0, #1
 8001c4a:	b2e4      	uxtb	r4, r4
 8001c4c:	42d0      	cmn	r0, r2
 8001c4e:	d439      	bmi.n	8001cc4 <R1_CalcDutyCycles+0x298>
      pHandle->iflag |= ALFLAG[minVal];
 8001c50:	21c5      	movs	r1, #197	@ 0xc5
 8001c52:	9a03      	ldr	r2, [sp, #12]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001c54:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8001c56:	4314      	orrs	r4, r2
 8001c58:	545c      	strb	r4, [r3, r1]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001c5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001c5c:	006d      	lsls	r5, r5, #1
 8001c5e:	3901      	subs	r1, #1
 8001c60:	52e9      	strh	r1, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001c62:	21a8      	movs	r1, #168	@ 0xa8
 8001c64:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c66:	20aa      	movs	r0, #170	@ 0xaa
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001c68:	5a5e      	ldrh	r6, [r3, r1]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c6a:	5a1d      	ldrh	r5, [r3, r0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001c6c:	1991      	adds	r1, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c6e:	4652      	mov	r2, sl
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c70:	24ac      	movs	r4, #172	@ 0xac
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001c72:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001c74:	464a      	mov	r2, r9
 8001c76:	5b1c      	ldrh	r4, [r3, r4]
 8001c78:	1917      	adds	r7, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001c7a:	4642      	mov	r2, r8
 8001c7c:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c7e:	4652      	mov	r2, sl
 8001c80:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c82:	464a      	mov	r2, r9
 8001c84:	1b14      	subs	r4, r2, r4
 8001c86:	b2ba      	uxth	r2, r7
 8001c88:	4691      	mov	r9, r2
 8001c8a:	b282      	uxth	r2, r0
 8001c8c:	4692      	mov	sl, r2
 8001c8e:	b28a      	uxth	r2, r1
 8001c90:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001c92:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001c94:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001c96:	b2a4      	uxth	r4, r4
 8001c98:	e72c      	b.n	8001af4 <R1_CalcDutyCycles+0xc8>
    pHandle->iflag &= ~ALFLAG[minVal];
 8001c9a:	27c5      	movs	r7, #197	@ 0xc5
 8001c9c:	9a03      	ldr	r2, [sp, #12]
 8001c9e:	5dd9      	ldrb	r1, [r3, r7]
 8001ca0:	4391      	bics	r1, r2
 8001ca2:	55d9      	strb	r1, [r3, r7]
    SamplePoint1 = aCCRval[midVal];
 8001ca4:	e757      	b.n	8001b56 <R1_CalcDutyCycles+0x12a>
    pHandle->iflag &=  ALFLAG[maxVal];
 8001ca6:	27c5      	movs	r7, #197	@ 0xc5
 8001ca8:	5dda      	ldrb	r2, [r3, r7]
 8001caa:	9808      	ldr	r0, [sp, #32]
 8001cac:	9204      	str	r2, [sp, #16]
 8001cae:	9a05      	ldr	r2, [sp, #20]
 8001cb0:	5c80      	ldrb	r0, [r0, r2]
 8001cb2:	9a04      	ldr	r2, [sp, #16]
 8001cb4:	4010      	ands	r0, r2
 8001cb6:	55d8      	strb	r0, [r3, r7]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001cb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001cba:	4458      	add	r0, fp
 8001cbc:	e741      	b.n	8001b42 <R1_CalcDutyCycles+0x116>
    pHandle->_Super.SWerror = 0u;
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5299      	strh	r1, [r3, r2]
  return (hAux);
 8001cc2:	e7a4      	b.n	8001c0e <R1_CalcDutyCycles+0x1e2>
      pHandle->iflag &= ~ALFLAG[minVal];
 8001cc4:	20c5      	movs	r0, #197	@ 0xc5
 8001cc6:	9a03      	ldr	r2, [sp, #12]
 8001cc8:	4394      	bics	r4, r2
 8001cca:	541c      	strb	r4, [r3, r0]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001ccc:	24a8      	movs	r4, #168	@ 0xa8
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001cce:	9a04      	ldr	r2, [sp, #16]
 8001cd0:	9806      	ldr	r0, [sp, #24]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cd2:	5b1e      	ldrh	r6, [r3, r4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001cd4:	1a10      	subs	r0, r2, r0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cd6:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cd8:	3402      	adds	r4, #2
 8001cda:	5b1d      	ldrh	r5, [r3, r4]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001cdc:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001cde:	002a      	movs	r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001ce0:	3402      	adds	r4, #2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001ce2:	4452      	add	r2, sl
 8001ce4:	9204      	str	r2, [sp, #16]
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001ce6:	5b1a      	ldrh	r2, [r3, r4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001ce8:	4458      	add	r0, fp
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001cea:	0014      	movs	r4, r2
 8001cec:	444c      	add	r4, r9
 8001cee:	940b      	str	r4, [sp, #44]	@ 0x2c
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001cf0:	4644      	mov	r4, r8
 8001cf2:	1ba6      	subs	r6, r4, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001cf4:	4654      	mov	r4, sl
 8001cf6:	1b65      	subs	r5, r4, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001cf8:	464c      	mov	r4, r9
 8001cfa:	1aa4      	subs	r4, r4, r2
 8001cfc:	466a      	mov	r2, sp
 8001cfe:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8001d00:	b200      	sxth	r0, r0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d02:	4691      	mov	r9, r2
 8001d04:	466a      	mov	r2, sp
 8001d06:	8a12      	ldrh	r2, [r2, #16]
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001d08:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d0a:	4692      	mov	sl, r2
 8001d0c:	b2ba      	uxth	r2, r7
 8001d0e:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d10:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d12:	b2a4      	uxth	r4, r4
 8001d14:	e6f6      	b.n	8001b04 <R1_CalcDutyCycles+0xd8>
  if(submid_min_deltmin > 0)
 8001d16:	2800      	cmp	r0, #0
 8001d18:	dd2d      	ble.n	8001d76 <R1_CalcDutyCycles+0x34a>
    pHandle->iflag |= ALFLAG[minVal];
 8001d1a:	21c5      	movs	r1, #197	@ 0xc5
 8001d1c:	464c      	mov	r4, r9
 8001d1e:	4655      	mov	r5, sl
 8001d20:	4646      	mov	r6, r8
 8001d22:	9a03      	ldr	r2, [sp, #12]
 8001d24:	545a      	strb	r2, [r3, r1]
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d26:	465a      	mov	r2, fp
 8001d28:	9906      	ldr	r1, [sp, #24]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d2c:	1a51      	subs	r1, r2, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d2e:	4458      	add	r0, fp
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8001d30:	b209      	sxth	r1, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8001d32:	b200      	sxth	r0, r0
 8001d34:	e6e6      	b.n	8001b04 <R1_CalcDutyCycles+0xd8>
    pHandle->iflag |= ALFLAG[minVal];
 8001d36:	9a03      	ldr	r2, [sp, #12]
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d38:	21aa      	movs	r1, #170	@ 0xaa
    pHandle->iflag |= ALFLAG[minVal];
 8001d3a:	4314      	orrs	r4, r2
 8001d3c:	22c5      	movs	r2, #197	@ 0xc5
 8001d3e:	549c      	strb	r4, [r3, r2]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001d40:	3a1d      	subs	r2, #29
 8001d42:	5a9e      	ldrh	r6, [r3, r2]
 8001d44:	4642      	mov	r2, r8
 8001d46:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001d48:	4652      	mov	r2, sl
 8001d4a:	5a5d      	ldrh	r5, [r3, r1]
 8001d4c:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001d4e:	22ac      	movs	r2, #172	@ 0xac
 8001d50:	5a9c      	ldrh	r4, [r3, r2]
 8001d52:	464a      	mov	r2, r9
 8001d54:	1911      	adds	r1, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001d56:	4642      	mov	r2, r8
 8001d58:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d5a:	4652      	mov	r2, sl
 8001d5c:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d5e:	464a      	mov	r2, r9
 8001d60:	1b14      	subs	r4, r2, r4
 8001d62:	b28a      	uxth	r2, r1
 8001d64:	4691      	mov	r9, r2
 8001d66:	b282      	uxth	r2, r0
 8001d68:	4692      	mov	sl, r2
 8001d6a:	b2ba      	uxth	r2, r7
 8001d6c:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001d6e:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001d70:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001d72:	b2a4      	uxth	r4, r4
 8001d74:	e6be      	b.n	8001af4 <R1_CalcDutyCycles+0xc8>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8001d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001d78:	3801      	subs	r0, #1
 8001d7a:	42d0      	cmn	r0, r2
 8001d7c:	d50e      	bpl.n	8001d9c <R1_CalcDutyCycles+0x370>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001d7e:	9a02      	ldr	r2, [sp, #8]
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001d80:	9809      	ldr	r0, [sp, #36]	@ 0x24
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001d82:	4694      	mov	ip, r2
 8001d84:	0fd1      	lsrs	r1, r2, #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001d86:	9a06      	ldr	r2, [sp, #24]
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001d88:	4461      	add	r1, ip
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001d8a:	4694      	mov	ip, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8001d8c:	1049      	asrs	r1, r1, #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8001d8e:	4460      	add	r0, ip
 8001d90:	1840      	adds	r0, r0, r1
 8001d92:	464c      	mov	r4, r9
 8001d94:	4655      	mov	r5, sl
 8001d96:	4646      	mov	r6, r8
 8001d98:	b200      	sxth	r0, r0
 8001d9a:	e6b3      	b.n	8001b04 <R1_CalcDutyCycles+0xd8>
      pHandle->iflag |= ALFLAG[minVal];
 8001d9c:	21c5      	movs	r1, #197	@ 0xc5
 8001d9e:	9a03      	ldr	r2, [sp, #12]
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001da0:	3554      	adds	r5, #84	@ 0x54
      pHandle->iflag |= ALFLAG[minVal];
 8001da2:	545a      	strb	r2, [r3, r1]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001da4:	22a8      	movs	r2, #168	@ 0xa8
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8001da6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001da8:	006d      	lsls	r5, r5, #1
 8001daa:	3901      	subs	r1, #1
 8001dac:	52e9      	strh	r1, [r5, r3]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001dae:	5a9e      	ldrh	r6, [r3, r2]
 8001db0:	4642      	mov	r2, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001db2:	21aa      	movs	r1, #170	@ 0xaa
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8001db4:	1997      	adds	r7, r2, r6
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8001db6:	4652      	mov	r2, sl
 8001db8:	5a5d      	ldrh	r5, [r3, r1]
 8001dba:	1950      	adds	r0, r2, r5
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8001dbc:	22ac      	movs	r2, #172	@ 0xac
 8001dbe:	5a9c      	ldrh	r4, [r3, r2]
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	1911      	adds	r1, r2, r4
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	1b96      	subs	r6, r2, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001dc8:	4652      	mov	r2, sl
 8001dca:	1b55      	subs	r5, r2, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001dcc:	464a      	mov	r2, r9
 8001dce:	1b14      	subs	r4, r2, r4
 8001dd0:	b28a      	uxth	r2, r1
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	b282      	uxth	r2, r0
 8001dd6:	4692      	mov	sl, r2
 8001dd8:	b2ba      	uxth	r2, r7
 8001dda:	4690      	mov	r8, r2
  pHandle->DmaBuffCCR_latch[3]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8001ddc:	b2b6      	uxth	r6, r6
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8001dde:	b2ad      	uxth	r5, r5
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8001de0:	b2a4      	uxth	r4, r4
 8001de2:	e7a0      	b.n	8001d26 <R1_CalcDutyCycles+0x2fa>
 8001de4:	08005970 	.word	0x08005970
 8001de8:	08005973 	.word	0x08005973
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40012400 	.word	0x40012400
 8001df4:	fffff23f 	.word	0xfffff23f

08001df8 <R1_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001df8:	23cc      	movs	r3, #204	@ 0xcc
 8001dfa:	58c3      	ldr	r3, [r0, r3]
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	46de      	mov	lr, fp
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e00:	469b      	mov	fp, r3
{
 8001e02:	4657      	mov	r7, sl
 8001e04:	464e      	mov	r6, r9
 8001e06:	4645      	mov	r5, r8
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8001e08:	465a      	mov	r2, fp
{
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8001e0c:	6815      	ldr	r5, [r2, #0]
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001e0e:	6892      	ldr	r2, [r2, #8]
  pHandle->iflag = 0;
 8001e10:	2700      	movs	r7, #0
  DMA_TypeDef * DMAx = pHandle->pParams_str->DMAx;
 8001e12:	4694      	mov	ip, r2
  pHandle->iflag = 0;
 8001e14:	22c5      	movs	r2, #197	@ 0xc5
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e16:	685b      	ldr	r3, [r3, #4]
  pHandle->iflag = 0;
 8001e18:	5487      	strb	r7, [r0, r2]
  pHandle->FOCDurationFlag = false;
 8001e1a:	3203      	adds	r2, #3
 8001e1c:	5487      	strb	r7, [r0, r2]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001e1e:	3a56      	subs	r2, #86	@ 0x56
 8001e20:	5a84      	ldrh	r4, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e22:	465e      	mov	r6, fp
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 8001e24:	0862      	lsrs	r2, r4, #1
 8001e26:	4690      	mov	r8, r2
 8001e28:	22b8      	movs	r2, #184	@ 0xb8
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	5281      	strh	r1, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e2e:	8bf6      	ldrh	r6, [r6, #30]
 8001e30:	465a      	mov	r2, fp
 8001e32:	46b1      	mov	r9, r6
 8001e34:	8c12      	ldrh	r2, [r2, #32]
 8001e36:	08a4      	lsrs	r4, r4, #2
 8001e38:	444a      	add	r2, r9
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	1aa6      	subs	r6, r4, r2
 8001e3e:	b2b6      	uxth	r6, r6
 8001e40:	46b1      	mov	r9, r6
{
 8001e42:	b085      	sub	sp, #20
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e44:	9201      	str	r2, [sp, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001e46:	26ba      	movs	r6, #186	@ 0xba
 8001e48:	464a      	mov	r2, r9
 8001e4a:	5382      	strh	r2, [r0, r6]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8001e4c:	9a01      	ldr	r2, [sp, #4]
 8001e4e:	0421      	lsls	r1, r4, #16
 8001e50:	18a2      	adds	r2, r4, r2
 8001e52:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8001e54:	3602      	adds	r6, #2
 8001e56:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 8001e58:	4321      	orrs	r1, r4
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001e5a:	3e68      	subs	r6, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8001e5c:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8001e5e:	5384      	strh	r4, [r0, r6]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 8001e60:	2488      	movs	r4, #136	@ 0x88
 8001e62:	5101      	str	r1, [r0, r4]
 8001e64:	3404      	adds	r4, #4
 8001e66:	5101      	str	r1, [r0, r4]
 8001e68:	3404      	adds	r4, #4
 8001e6a:	5101      	str	r1, [r0, r4]
 8001e6c:	3404      	adds	r4, #4
 8001e6e:	5101      	str	r1, [r0, r4]
 8001e70:	3404      	adds	r4, #4
 8001e72:	5101      	str	r1, [r0, r4]
 8001e74:	3404      	adds	r4, #4
 8001e76:	5101      	str	r1, [r0, r4]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8001e78:	21ae      	movs	r1, #174	@ 0xae
 8001e7a:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	3102      	adds	r1, #2
 8001e80:	3a01      	subs	r2, #1
 8001e82:	5242      	strh	r2, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8001e84:	4649      	mov	r1, r9
 8001e86:	22b2      	movs	r2, #178	@ 0xb2
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e88:	2480      	movs	r4, #128	@ 0x80
 8001e8a:	5281      	strh	r1, [r0, r2]
  pHandle->_Super.BrakeActionLock = false;
 8001e8c:	3a2d      	subs	r2, #45	@ 0x2d
 8001e8e:	5487      	strb	r7, [r0, r2]
 8001e90:	4a70      	ldr	r2, [pc, #448]	@ (8002054 <R1_Init+0x25c>)
 8001e92:	03e4      	lsls	r4, r4, #15
 8001e94:	6991      	ldr	r1, [r2, #24]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e96:	4e70      	ldr	r6, [pc, #448]	@ (8002058 <R1_Init+0x260>)
 8001e98:	4321      	orrs	r1, r4
 8001e9a:	6191      	str	r1, [r2, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e9c:	6992      	ldr	r2, [r2, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8001e9e:	496f      	ldr	r1, [pc, #444]	@ (800205c <R1_Init+0x264>)
 8001ea0:	4022      	ands	r2, r4
 8001ea2:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001ea4:	9a03      	ldr	r2, [sp, #12]
 8001ea6:	2280      	movs	r2, #128	@ 0x80
 8001ea8:	68cc      	ldr	r4, [r1, #12]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	4322      	orrs	r2, r4
 8001eae:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001eb0:	2101      	movs	r1, #1
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001eb2:	2440      	movs	r4, #64	@ 0x40
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	46b1      	mov	r9, r6
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	316f      	adds	r1, #111	@ 0x6f
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	4322      	orrs	r2, r4
 8001ec4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001ec6:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001ec8:	3c38      	subs	r4, #56	@ 0x38
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001eca:	438a      	bics	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	4963      	ldr	r1, [pc, #396]	@ (8002060 <R1_Init+0x268>)
 8001ed2:	43a2      	bics	r2, r4
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	43a2      	bics	r2, r4
 8001ee0:	61da      	str	r2, [r3, #28]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8001ee8:	2280      	movs	r2, #128	@ 0x80
 8001eea:	6a19      	ldr	r1, [r3, #32]
 8001eec:	0152      	lsls	r2, r2, #5
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	621a      	str	r2, [r3, #32]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001ef2:	2281      	movs	r2, #129	@ 0x81
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001ef4:	2180      	movs	r1, #128	@ 0x80
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001ef6:	4252      	negs	r2, r2
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001ef8:	631f      	str	r7, [r3, #48]	@ 0x30
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001efa:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CCER, Channels);
 8001f02:	6a19      	ldr	r1, [r3, #32]
 8001f04:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <R1_Init+0x26c>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	621a      	str	r2, [r3, #32]
 8001f0a:	4957      	ldr	r1, [pc, #348]	@ (8002068 <R1_Init+0x270>)
 8001f0c:	465a      	mov	r2, fp
 8001f0e:	468a      	mov	sl, r1
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	4452      	add	r2, sl
 8001f14:	3a01      	subs	r2, #1
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	4462      	add	r2, ip
 8001f1a:	6817      	ldr	r7, [r2, #0]
 8001f1c:	4037      	ands	r7, r6
 8001f1e:	4e53      	ldr	r6, [pc, #332]	@ (800206c <R1_Init+0x274>)
 8001f20:	4337      	orrs	r7, r6
 8001f22:	6017      	str	r7, [r2, #0]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 8001f24:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
 8001f26:	46b0      	mov	r8, r6
 8001f28:	4e51      	ldr	r6, [pc, #324]	@ (8002070 <R1_Init+0x278>)
 8001f2a:	403e      	ands	r6, r7
 8001f2c:	4f51      	ldr	r7, [pc, #324]	@ (8002074 <R1_Init+0x27c>)
 8001f2e:	4337      	orrs	r7, r6
 8001f30:	649f      	str	r7, [r3, #72]	@ 0x48
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 8001f32:	0007      	movs	r7, r0
 8001f34:	3788      	adds	r7, #136	@ 0x88
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f36:	60d7      	str	r7, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t) &TIMx->DMAR);
 8001f38:	001f      	movs	r7, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f3a:	2606      	movs	r6, #6
 8001f3c:	374c      	adds	r7, #76	@ 0x4c
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001f3e:	6097      	str	r7, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f40:	6857      	ldr	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f42:	9101      	str	r1, [sp, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f44:	0c3f      	lsrs	r7, r7, #16
 8001f46:	043f      	lsls	r7, r7, #16
 8001f48:	4337      	orrs	r7, r6
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f4a:	465e      	mov	r6, fp
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f4c:	6057      	str	r7, [r2, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f4e:	6937      	ldr	r7, [r6, #16]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t) &TIMx->CCR4);
 8001f50:	3340      	adds	r3, #64	@ 0x40
 8001f52:	4457      	add	r7, sl
 8001f54:	3f01      	subs	r7, #1
 8001f56:	783f      	ldrb	r7, [r7, #0]
 8001f58:	4467      	add	r7, ip
 8001f5a:	683e      	ldr	r6, [r7, #0]
 8001f5c:	46b2      	mov	sl, r6
 8001f5e:	464e      	mov	r6, r9
 8001f60:	4651      	mov	r1, sl
 8001f62:	400e      	ands	r6, r1
 8001f64:	46b1      	mov	r9, r6
 8001f66:	4646      	mov	r6, r8
 8001f68:	4649      	mov	r1, r9
 8001f6a:	430e      	orrs	r6, r1
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMASamplingPtChannelX, (uint32_t)&pHandle->DmaBuffCCR_ADCTrig[0]);
 8001f6c:	21ae      	movs	r1, #174	@ 0xae
 8001f6e:	4688      	mov	r8, r1
 8001f70:	4480      	add	r8, r0
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f72:	4641      	mov	r1, r8
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f74:	603e      	str	r6, [r7, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f76:	60f9      	str	r1, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f78:	2103      	movs	r1, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	430b      	orrs	r3, r1
 8001f84:	607b      	str	r3, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001f86:	2702      	movs	r7, #2
 8001f88:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f8a:	9901      	ldr	r1, [sp, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	6013      	str	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001f90:	465a      	mov	r2, fp
  LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)pHandle->CurConv);
 8001f92:	0003      	movs	r3, r0
 8001f94:	6992      	ldr	r2, [r2, #24]
 8001f96:	33b4      	adds	r3, #180	@ 0xb4
 8001f98:	1889      	adds	r1, r1, r2
 8001f9a:	3901      	subs	r1, #1
 8001f9c:	780a      	ldrb	r2, [r1, #0]
 8001f9e:	4462      	add	r2, ip
 8001fa0:	60d3      	str	r3, [r2, #12]
  LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMA_ADC_DR_ChannelX, (uint32_t)&ADCx->DR);
 8001fa2:	002b      	movs	r3, r5
 8001fa4:	3340      	adds	r3, #64	@ 0x40
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001fa6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001fa8:	6853      	ldr	r3, [r2, #4]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	433b      	orrs	r3, r7
 8001fb0:	6053      	str	r3, [r2, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	686b      	ldr	r3, [r5, #4]
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001fba:	602a      	str	r2, [r5, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001fbc:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(ADCx->CR,
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002078 <R1_Init+0x280>)
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001fc0:	43a3      	bics	r3, r4
 8001fc2:	606b      	str	r3, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8001fc4:	602c      	str	r4, [r5, #0]
  MODIFY_REG(ADCx->CR,
 8001fc6:	6891      	ldr	r1, [r2, #8]
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <R1_Init+0x284>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8001fca:	3408      	adds	r4, #8
  MODIFY_REG(ADCx->CR,
 8001fcc:	4019      	ands	r1, r3
 8001fce:	3318      	adds	r3, #24
 8001fd0:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001fd2:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8001fd4:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001fd6:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	dbfc      	blt.n	8001fd6 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001fdc:	6893      	ldr	r3, [r2, #8]
  while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8001fde:	4219      	tst	r1, r3
 8001fe0:	d1f9      	bne.n	8001fd6 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8001fe2:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8001fe4:	421c      	tst	r4, r3
 8001fe6:	d1f6      	bne.n	8001fd6 <R1_Init+0x1de>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8001fe8:	6893      	ldr	r3, [r2, #8]
         (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8001fea:	421f      	tst	r7, r3
 8001fec:	d1f3      	bne.n	8001fd6 <R1_Init+0x1de>
  MODIFY_REG(ADCx->CR,
 8001fee:	6893      	ldr	r3, [r2, #8]
 8001ff0:	4922      	ldr	r1, [pc, #136]	@ (800207c <R1_Init+0x284>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001ff2:	4c23      	ldr	r4, [pc, #140]	@ (8002080 <R1_Init+0x288>)
  MODIFY_REG(ADCx->CR,
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001ffc:	68eb      	ldr	r3, [r5, #12]
 8001ffe:	4023      	ands	r3, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002000:	2403      	movs	r4, #3
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002002:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002004:	68d3      	ldr	r3, [r2, #12]
 8002006:	43a3      	bics	r3, r4
 8002008:	430b      	orrs	r3, r1
 800200a:	60d3      	str	r3, [r2, #12]
  while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == RESET)
 800200c:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800200e:	491a      	ldr	r1, [pc, #104]	@ (8002078 <R1_Init+0x280>)
 8002010:	680b      	ldr	r3, [r1, #0]
 8002012:	421a      	tst	r2, r3
 8002014:	d0fc      	beq.n	8002010 <R1_Init+0x218>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002016:	68e9      	ldr	r1, [r5, #12]
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <R1_Init+0x288>)
 800201a:	4019      	ands	r1, r3
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	430b      	orrs	r3, r1
 8002022:	60eb      	str	r3, [r5, #12]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002024:	4659      	mov	r1, fp
 8002026:	2322      	movs	r3, #34	@ 0x22
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	0011      	movs	r1, r2
 800202c:	4099      	lsls	r1, r3
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800202e:	034b      	lsls	r3, r1, #13
 8002030:	0b5b      	lsrs	r3, r3, #13
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002032:	4914      	ldr	r1, [pc, #80]	@ (8002084 <R1_Init+0x28c>)
 8002034:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002036:	680b      	ldr	r3, [r1, #0]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
  pHandle->ADCRegularLocked=false; /* We allow ADC usage for regular conversion on Systick */
 800203c:	22ca      	movs	r2, #202	@ 0xca
 800203e:	2300      	movs	r3, #0
 8002040:	5483      	strb	r3, [r0, r2]
  pHandle->_Super.DTTest = 0u;
 8002042:	3a5a      	subs	r2, #90	@ 0x5a
 8002044:	5283      	strh	r3, [r0, r2]
}
 8002046:	b005      	add	sp, #20
 8002048:	bcf0      	pop	{r4, r5, r6, r7}
 800204a:	46bb      	mov	fp, r7
 800204c:	46b2      	mov	sl, r6
 800204e:	46a9      	mov	r9, r5
 8002050:	46a0      	mov	r8, r4
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	ffff800f 	.word	0xffff800f
 800205c:	40015800 	.word	0x40015800
 8002060:	fffff7ff 	.word	0xfffff7ff
 8002064:	00000555 	.word	0x00000555
 8002068:	08005974 	.word	0x08005974
 800206c:	000035b0 	.word	0x000035b0
 8002070:	ffffe0e0 	.word	0xffffe0e0
 8002074:	0000020d 	.word	0x0000020d
 8002078:	40012400 	.word	0x40012400
 800207c:	7fffffe8 	.word	0x7fffffe8
 8002080:	fffff23f 	.word	0xfffff23f
 8002084:	40012c00 	.word	0x40012c00

08002088 <R1_SetOffsetCalib>:
  pHandle->PhaseOffset = offsets->phaseAOffset;
 8002088:	23a0      	movs	r3, #160	@ 0xa0
 800208a:	680a      	ldr	r2, [r1, #0]
 800208c:	50c2      	str	r2, [r0, r3]
  pHdl->offsetCalibStatus = true;
 800208e:	2201      	movs	r2, #1
 8002090:	3b1f      	subs	r3, #31
 8002092:	54c2      	strb	r2, [r0, r3]
}
 8002094:	4770      	bx	lr
 8002096:	46c0      	nop			@ (mov r8, r8)

08002098 <R1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseOffset;
 8002098:	23a0      	movs	r3, #160	@ 0xa0
 800209a:	58c3      	ldr	r3, [r0, r3]
 800209c:	600b      	str	r3, [r1, #0]
}
 800209e:	4770      	bx	lr

080020a0 <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020a0:	23cc      	movs	r3, #204	@ 0xcc
 80020a2:	58c3      	ldr	r3, [r0, r3]
{
 80020a4:	b510      	push	{r4, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020a6:	685a      	ldr	r2, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80020a8:	2401      	movs	r4, #1
 80020aa:	237e      	movs	r3, #126	@ 0x7e
 80020ac:	54c4      	strb	r4, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020ae:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020b0:	6391      	str	r1, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020b2:	63d1      	str	r1, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80020b4:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020b6:	3b80      	subs	r3, #128	@ 0x80
 80020b8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80020ba:	6913      	ldr	r3, [r2, #16]
 80020bc:	4219      	tst	r1, r3
 80020be:	d0fc      	beq.n	80020ba <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80020c0:	2380      	movs	r3, #128	@ 0x80
 80020c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	430b      	orrs	r3, r1
 80020c8:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 80020ca:	237d      	movs	r3, #125	@ 0x7d
 80020cc:	5cc3      	ldrb	r3, [r0, r3]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d10b      	bne.n	80020ea <R1_TurnOnLowSides+0x4a>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80020d2:	2248      	movs	r2, #72	@ 0x48
 80020d4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020d6:	5a82      	ldrh	r2, [r0, r2]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80020d8:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80020da:	224a      	movs	r2, #74	@ 0x4a
 80020dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80020de:	5a82      	ldrh	r2, [r0, r2]
 80020e0:	619a      	str	r2, [r3, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80020e2:	224c      	movs	r2, #76	@ 0x4c
 80020e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80020e6:	5a82      	ldrh	r2, [r0, r2]
 80020e8:	619a      	str	r2, [r3, #24]
}
 80020ea:	bd10      	pop	{r4, pc}

080020ec <R1_SwitchOnPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020ec:	23cc      	movs	r3, #204	@ 0xcc
 80020ee:	58c1      	ldr	r1, [r0, r3]
{
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	46de      	mov	lr, fp
 80020f4:	4657      	mov	r7, sl
 80020f6:	464e      	mov	r6, r9
 80020f8:	4645      	mov	r5, r8
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80020fa:	680a      	ldr	r2, [r1, #0]
{
 80020fc:	b5e0      	push	{r5, r6, r7, lr}
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80020fe:	4693      	mov	fp, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002100:	688a      	ldr	r2, [r1, #8]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002102:	8bce      	ldrh	r6, [r1, #30]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002104:	4694      	mov	ip, r2
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002106:	22b8      	movs	r2, #184	@ 0xb8
 8002108:	5a85      	ldrh	r5, [r0, r2]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800210a:	8c0a      	ldrh	r2, [r1, #32]
 800210c:	086c      	lsrs	r4, r5, #1
 800210e:	1992      	adds	r2, r2, r6
 8002110:	b292      	uxth	r2, r2
 8002112:	1aa7      	subs	r7, r4, r2
 8002114:	b2be      	uxth	r6, r7
 8002116:	0037      	movs	r7, r6
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002118:	26ba      	movs	r6, #186	@ 0xba
{
 800211a:	b085      	sub	sp, #20
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800211c:	684b      	ldr	r3, [r1, #4]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800211e:	9701      	str	r7, [sp, #4]
 8002120:	5387      	strh	r7, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002122:	2700      	movs	r7, #0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002124:	18a2      	adds	r2, r4, r2
 8002126:	b292      	uxth	r2, r2
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002128:	3602      	adds	r6, #2
 800212a:	5382      	strh	r2, [r0, r6]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800212c:	3e3e      	subs	r6, #62	@ 0x3e
 800212e:	5587      	strb	r7, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002130:	3630      	adds	r6, #48	@ 0x30
 8002132:	5382      	strh	r2, [r0, r6]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002134:	22b2      	movs	r2, #178	@ 0xb2
 8002136:	9e01      	ldr	r6, [sp, #4]
 8002138:	5286      	strh	r6, [r0, r2]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 800213a:	1c6a      	adds	r2, r5, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
 800213e:	9203      	str	r2, [sp, #12]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002140:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002142:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002144:	639c      	str	r4, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002146:	63dc      	str	r4, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002148:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800214a:	0212      	lsls	r2, r2, #8
 800214c:	4322      	orrs	r2, r4
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8002150:	227d      	movs	r2, #125	@ 0x7d
 8002152:	5c82      	ldrb	r2, [r0, r2]
 8002154:	2a02      	cmp	r2, #2
 8002156:	d100      	bne.n	800215a <R1_SwitchOnPWM+0x6e>
 8002158:	e0cd      	b.n	80022f6 <R1_SwitchOnPWM+0x20a>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2410      	movs	r4, #16
 800215e:	9f01      	ldr	r7, [sp, #4]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002160:	06d2      	lsls	r2, r2, #27
 8002162:	d500      	bpl.n	8002166 <R1_SwitchOnPWM+0x7a>
 8002164:	e0bf      	b.n	80022e6 <R1_SwitchOnPWM+0x1fa>
 8002166:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002168:	4214      	tst	r4, r2
 800216a:	d0fc      	beq.n	8002166 <R1_SwitchOnPWM+0x7a>
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 800216c:	4662      	mov	r2, ip
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800216e:	690d      	ldr	r5, [r1, #16]
 8002170:	68cc      	ldr	r4, [r1, #12]
 8002172:	3d01      	subs	r5, #1
 8002174:	9701      	str	r7, [sp, #4]
 8002176:	9502      	str	r5, [sp, #8]
 8002178:	3c01      	subs	r4, #1
  if (NULL == DMAx)
 800217a:	2a00      	cmp	r2, #0
 800217c:	d017      	beq.n	80021ae <R1_SwitchOnPWM+0xc2>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800217e:	00a2      	lsls	r2, r4, #2
 8002180:	4690      	mov	r8, r2
 8002182:	2602      	movs	r6, #2
 8002184:	4645      	mov	r5, r8
 8002186:	0032      	movs	r2, r6
 8002188:	40aa      	lsls	r2, r5
 800218a:	4665      	mov	r5, ip
 800218c:	606a      	str	r2, [r5, #4]
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800218e:	2204      	movs	r2, #4
 8002190:	4645      	mov	r5, r8
 8002192:	0017      	movs	r7, r2
 8002194:	40af      	lsls	r7, r5
 8002196:	4665      	mov	r5, ip
 8002198:	606f      	str	r7, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800219a:	9d02      	ldr	r5, [sp, #8]
 800219c:	00ad      	lsls	r5, r5, #2
 800219e:	46a8      	mov	r8, r5
 80021a0:	40ae      	lsls	r6, r5
 80021a2:	4665      	mov	r5, ip
 80021a4:	606e      	str	r6, [r5, #4]
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80021a6:	4645      	mov	r5, r8
 80021a8:	40aa      	lsls	r2, r5
 80021aa:	4665      	mov	r5, ip
 80021ac:	606a      	str	r2, [r5, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021ae:	2202      	movs	r2, #2
  pHandle->TCCnt = 0;
 80021b0:	2600      	movs	r6, #0
 80021b2:	2706      	movs	r7, #6
 80021b4:	4252      	negs	r2, r2
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	32c8      	adds	r2, #200	@ 0xc8
 80021ba:	5486      	strb	r6, [r0, r2]
  pHandle->TCDoneFlag = false;
 80021bc:	3203      	adds	r2, #3
 80021be:	5486      	strb	r6, [r0, r2]
 80021c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002334 <R1_SwitchOnPWM+0x248>)
  pHandle->TCCnt = 0;
 80021c2:	46b0      	mov	r8, r6
 80021c4:	5d14      	ldrb	r4, [r2, r4]
 80021c6:	4464      	add	r4, ip
 80021c8:	6866      	ldr	r6, [r4, #4]
 80021ca:	0c36      	lsrs	r6, r6, #16
 80021cc:	0436      	lsls	r6, r6, #16
 80021ce:	433e      	orrs	r6, r7
 80021d0:	6066      	str	r6, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80021d2:	6826      	ldr	r6, [r4, #0]
 80021d4:	46b1      	mov	r9, r6
 80021d6:	2601      	movs	r6, #1
 80021d8:	464f      	mov	r7, r9
 80021da:	4337      	orrs	r7, r6
 80021dc:	6027      	str	r7, [r4, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 80021de:	68df      	ldr	r7, [r3, #12]
 80021e0:	46ba      	mov	sl, r7
 80021e2:	2780      	movs	r7, #128	@ 0x80
 80021e4:	007f      	lsls	r7, r7, #1
 80021e6:	46b9      	mov	r9, r7
 80021e8:	4657      	mov	r7, sl
 80021ea:	464d      	mov	r5, r9
 80021ec:	432f      	orrs	r7, r5
 80021ee:	60df      	str	r7, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 80021f0:	68dd      	ldr	r5, [r3, #12]
 80021f2:	46aa      	mov	sl, r5
 80021f4:	2580      	movs	r5, #128	@ 0x80
 80021f6:	4657      	mov	r7, sl
 80021f8:	016d      	lsls	r5, r5, #5
 80021fa:	432f      	orrs	r7, r5
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80021fc:	9d02      	ldr	r5, [sp, #8]
 80021fe:	60df      	str	r7, [r3, #12]
 8002200:	5d55      	ldrb	r5, [r2, r5]
 8002202:	2703      	movs	r7, #3
 8002204:	4465      	add	r5, ip
 8002206:	46a9      	mov	r9, r5
 8002208:	686d      	ldr	r5, [r5, #4]
 800220a:	46ba      	mov	sl, r7
 800220c:	0c2d      	lsrs	r5, r5, #16
 800220e:	042d      	lsls	r5, r5, #16
 8002210:	433d      	orrs	r5, r7
 8002212:	464f      	mov	r7, r9
 8002214:	607d      	str	r5, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002216:	683d      	ldr	r5, [r7, #0]
 8002218:	4335      	orrs	r5, r6
 800221a:	603d      	str	r5, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800221c:	2702      	movs	r7, #2
  WRITE_REG(TIMx->CCR4, CompareValue);
 800221e:	9d03      	ldr	r5, [sp, #12]
 8002220:	641d      	str	r5, [r3, #64]	@ 0x40
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002222:	698d      	ldr	r5, [r1, #24]
 8002224:	1952      	adds	r2, r2, r5
 8002226:	3a01      	subs	r2, #1
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	4462      	add	r2, ip
 800222c:	6815      	ldr	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800222e:	46bc      	mov	ip, r7
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002230:	43b5      	bics	r5, r6
 8002232:	6015      	str	r5, [r2, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002234:	6855      	ldr	r5, [r2, #4]
 8002236:	0c2d      	lsrs	r5, r5, #16
 8002238:	042d      	lsls	r5, r5, #16
 800223a:	433d      	orrs	r5, r7
 800223c:	6055      	str	r5, [r2, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800223e:	6815      	ldr	r5, [r2, #0]
  LL_ADC_REG_SetSequencerChannels (ADCx, __LL_ADC_DECIMAL_NB_TO_CHANNEL (pHandle->pParams_str->IChannel));
 8002240:	0037      	movs	r7, r6
 8002242:	4335      	orrs	r5, r6
 8002244:	6015      	str	r5, [r2, #0]
 8002246:	2522      	movs	r5, #34	@ 0x22
 8002248:	5d4d      	ldrb	r5, [r1, r5]
 800224a:	40af      	lsls	r7, r5
 800224c:	037d      	lsls	r5, r7, #13
 800224e:	465f      	mov	r7, fp
 8002250:	0b6d      	lsrs	r5, r5, #13
 8002252:	62bd      	str	r5, [r7, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002254:	4d38      	ldr	r5, [pc, #224]	@ (8002338 <R1_SwitchOnPWM+0x24c>)
 8002256:	696f      	ldr	r7, [r5, #20]
 8002258:	46b9      	mov	r9, r7
  LL_ADC_SetSamplingTimeCommonChannels (ADC1, pHandle->pParams_str->ISamplingTime);
 800225a:	2723      	movs	r7, #35	@ 0x23
 800225c:	5dcf      	ldrb	r7, [r1, r7]
 800225e:	9702      	str	r7, [sp, #8]
 8002260:	2707      	movs	r7, #7
 8002262:	46bb      	mov	fp, r7
 8002264:	464f      	mov	r7, r9
 8002266:	4659      	mov	r1, fp
 8002268:	438f      	bics	r7, r1
 800226a:	0039      	movs	r1, r7
 800226c:	9f02      	ldr	r7, [sp, #8]
 800226e:	430f      	orrs	r7, r1
 8002270:	616f      	str	r7, [r5, #20]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002272:	4657      	mov	r7, sl
 8002274:	68e9      	ldr	r1, [r5, #12]
 8002276:	43b9      	bics	r1, r7
 8002278:	4331      	orrs	r1, r6
 800227a:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800227c:	68e9      	ldr	r1, [r5, #12]
 800227e:	4f2f      	ldr	r7, [pc, #188]	@ (800233c <R1_SwitchOnPWM+0x250>)
 8002280:	400f      	ands	r7, r1
 8002282:	2188      	movs	r1, #136	@ 0x88
 8002284:	00c9      	lsls	r1, r1, #3
 8002286:	4339      	orrs	r1, r7
 8002288:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(ADCx->CR,
 800228a:	68a9      	ldr	r1, [r5, #8]
 800228c:	4f2c      	ldr	r7, [pc, #176]	@ (8002340 <R1_SwitchOnPWM+0x254>)
 800228e:	4039      	ands	r1, r7
 8002290:	2704      	movs	r7, #4
 8002292:	4339      	orrs	r1, r7
 8002294:	60a9      	str	r1, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002296:	2570      	movs	r5, #112	@ 0x70
 8002298:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800229a:	9f01      	ldr	r7, [sp, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800229c:	4329      	orrs	r1, r5
 800229e:	6059      	str	r1, [r3, #4]
  pHandle->FOCDurationFlag = false;
 80022a0:	4645      	mov	r5, r8
 80022a2:	21c8      	movs	r1, #200	@ 0xc8
 80022a4:	5445      	strb	r5, [r0, r1]
  pHandle->ADCRegularLocked=true;
 80022a6:	3102      	adds	r1, #2
 80022a8:	5446      	strb	r6, [r0, r1]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80022aa:	4660      	mov	r0, ip
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	4301      	orrs	r1, r0
 80022b0:	6021      	str	r1, [r4, #0]
 80022b2:	6811      	ldr	r1, [r2, #0]
 80022b4:	4301      	orrs	r1, r0
 80022b6:	6011      	str	r1, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022b8:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022ba:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022bc:	4252      	negs	r2, r2
 80022be:	611a      	str	r2, [r3, #16]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80022c0:	300e      	adds	r0, #14
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	4211      	tst	r1, r2
 80022c6:	d0fc      	beq.n	80022c2 <R1_SwitchOnPWM+0x1d6>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80022c8:	681a      	ldr	r2, [r3, #0]
  while ((LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET) || (LL_TIM_GetDirection(TIMx) == LL_TIM_COUNTERDIRECTION_DOWN))
 80022ca:	4210      	tst	r0, r2
 80022cc:	d1f9      	bne.n	80022c2 <R1_SwitchOnPWM+0x1d6>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80022ce:	481d      	ldr	r0, [pc, #116]	@ (8002344 <R1_SwitchOnPWM+0x258>)
 80022d0:	68c2      	ldr	r2, [r0, #12]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	60c2      	str	r2, [r0, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80022d6:	641f      	str	r7, [r3, #64]	@ 0x40
}
 80022d8:	b005      	add	sp, #20
 80022da:	bcf0      	pop	{r4, r5, r6, r7}
 80022dc:	46bb      	mov	fp, r7
 80022de:	46b2      	mov	sl, r6
 80022e0:	46a9      	mov	r9, r5
 80022e2:	46a0      	mov	r8, r4
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80022e6:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80022e8:	4214      	tst	r4, r2
 80022ea:	d1fc      	bne.n	80022e6 <R1_SwitchOnPWM+0x1fa>
 80022ec:	2410      	movs	r4, #16
 80022ee:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80022f0:	4214      	tst	r4, r2
 80022f2:	d0fc      	beq.n	80022ee <R1_SwitchOnPWM+0x202>
 80022f4:	e73a      	b.n	800216c <R1_SwitchOnPWM+0x80>
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80022f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80022f8:	244c      	movs	r4, #76	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80022fa:	4690      	mov	r8, r2
 80022fc:	2248      	movs	r2, #72	@ 0x48
 80022fe:	5a82      	ldrh	r2, [r0, r2]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8002300:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002302:	4691      	mov	r9, r2
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002304:	224a      	movs	r2, #74	@ 0x4a
 8002306:	5a86      	ldrh	r6, [r0, r2]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002308:	6c42      	ldr	r2, [r0, #68]	@ 0x44
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800230a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800230c:	9202      	str	r2, [sp, #8]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800230e:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <R1_SwitchOnPWM+0x25c>)
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002310:	5b04      	ldrh	r4, [r0, r4]
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8002312:	4217      	tst	r7, r2
 8002314:	d006      	beq.n	8002324 <R1_SwitchOnPWM+0x238>
 8002316:	4642      	mov	r2, r8
 8002318:	464f      	mov	r7, r9
 800231a:	6197      	str	r7, [r2, #24]
 800231c:	9a02      	ldr	r2, [sp, #8]
 800231e:	61ae      	str	r6, [r5, #24]
 8002320:	6194      	str	r4, [r2, #24]
}
 8002322:	e71a      	b.n	800215a <R1_SwitchOnPWM+0x6e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002324:	4642      	mov	r2, r8
 8002326:	464f      	mov	r7, r9
 8002328:	6297      	str	r7, [r2, #40]	@ 0x28
 800232a:	9a02      	ldr	r2, [sp, #8]
 800232c:	62ae      	str	r6, [r5, #40]	@ 0x28
 800232e:	6294      	str	r4, [r2, #40]	@ 0x28
}
 8002330:	e713      	b.n	800215a <R1_SwitchOnPWM+0x6e>
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	08005974 	.word	0x08005974
 8002338:	40012400 	.word	0x40012400
 800233c:	fffff23f 	.word	0xfffff23f
 8002340:	7fffffe8 	.word	0x7fffffe8
 8002344:	40012c00 	.word	0x40012c00
 8002348:	00000555 	.word	0x00000555

0800234c <R1_SwitchOffPWM>:
{
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234e:	4657      	mov	r7, sl
 8002350:	464e      	mov	r6, r9
 8002352:	4645      	mov	r5, r8
 8002354:	46de      	mov	lr, fp
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002356:	23cc      	movs	r3, #204	@ 0xcc
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002358:	22b8      	movs	r2, #184	@ 0xb8
{
 800235a:	b5e0      	push	{r5, r6, r7, lr}
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800235c:	5a82      	ldrh	r2, [r0, r2]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800235e:	58c6      	ldr	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002360:	0855      	lsrs	r5, r2, #1
 8002362:	8bf4      	ldrh	r4, [r6, #30]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 8002364:	4694      	mov	ip, r2
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002366:	8c32      	ldrh	r2, [r6, #32]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002368:	6873      	ldr	r3, [r6, #4]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800236a:	1912      	adds	r2, r2, r4
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800236c:	24ba      	movs	r4, #186	@ 0xba
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800236e:	b292      	uxth	r2, r2
 8002370:	1aaf      	subs	r7, r5, r2
 8002372:	b2bf      	uxth	r7, r7
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002374:	18ad      	adds	r5, r5, r2
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002376:	68b1      	ldr	r1, [r6, #8]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002378:	b2ad      	uxth	r5, r5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800237a:	5307      	strh	r7, [r0, r4]
{
 800237c:	b083      	sub	sp, #12
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800237e:	3402      	adds	r4, #2
 8002380:	5305      	strh	r5, [r0, r4]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002382:	9501      	str	r5, [sp, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002384:	2501      	movs	r5, #1
 8002386:	68dc      	ldr	r4, [r3, #12]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002388:	9700      	str	r7, [sp, #0]
 800238a:	43ac      	bics	r4, r5
 800238c:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800238e:	681c      	ldr	r4, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002390:	06e4      	lsls	r4, r4, #27
 8002392:	d400      	bmi.n	8002396 <R1_SwitchOffPWM+0x4a>
 8002394:	e0c3      	b.n	800251e <R1_SwitchOffPWM+0x1d2>
 8002396:	2410      	movs	r4, #16
 8002398:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 800239a:	4645      	mov	r5, r8
 800239c:	681c      	ldr	r4, [r3, #0]
 800239e:	4225      	tst	r5, r4
 80023a0:	d1fb      	bne.n	800239a <R1_SwitchOffPWM+0x4e>
 80023a2:	2410      	movs	r4, #16
 80023a4:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80023a6:	4645      	mov	r5, r8
 80023a8:	681c      	ldr	r4, [r3, #0]
 80023aa:	4225      	tst	r5, r4
 80023ac:	d0fb      	beq.n	80023a6 <R1_SwitchOffPWM+0x5a>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80023ae:	4c6c      	ldr	r4, [pc, #432]	@ (8002560 <R1_SwitchOffPWM+0x214>)
 80023b0:	46a2      	mov	sl, r4
 80023b2:	68f4      	ldr	r4, [r6, #12]
 80023b4:	4454      	add	r4, sl
 80023b6:	3c01      	subs	r4, #1
 80023b8:	7824      	ldrb	r4, [r4, #0]
 80023ba:	1864      	adds	r4, r4, r1
 80023bc:	6825      	ldr	r5, [r4, #0]
 80023be:	46a8      	mov	r8, r5
 80023c0:	2502      	movs	r5, #2
 80023c2:	46a9      	mov	r9, r5
 80023c4:	4645      	mov	r5, r8
 80023c6:	464f      	mov	r7, r9
 80023c8:	43bd      	bics	r5, r7
 80023ca:	6025      	str	r5, [r4, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80023cc:	6825      	ldr	r5, [r4, #0]
 80023ce:	46a8      	mov	r8, r5
 80023d0:	2504      	movs	r5, #4
 80023d2:	46a9      	mov	r9, r5
 80023d4:	4645      	mov	r5, r8
 80023d6:	464f      	mov	r7, r9
 80023d8:	43bd      	bics	r5, r7
 80023da:	6025      	str	r5, [r4, #0]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80023dc:	257e      	movs	r5, #126	@ 0x7e
 80023de:	46a8      	mov	r8, r5
 80023e0:	2500      	movs	r5, #0
 80023e2:	46a9      	mov	r9, r5
 80023e4:	4645      	mov	r5, r8
 80023e6:	464f      	mov	r7, r9
 80023e8:	5547      	strb	r7, [r0, r5]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80023ea:	6c5d      	ldr	r5, [r3, #68]	@ 0x44
 80023ec:	46a8      	mov	r8, r5
 80023ee:	4d5d      	ldr	r5, [pc, #372]	@ (8002564 <R1_SwitchOffPWM+0x218>)
 80023f0:	46a9      	mov	r9, r5
 80023f2:	4645      	mov	r5, r8
 80023f4:	464f      	mov	r7, r9
 80023f6:	403d      	ands	r5, r7
 80023f8:	645d      	str	r5, [r3, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80023fa:	2585      	movs	r5, #133	@ 0x85
 80023fc:	5d45      	ldrb	r5, [r0, r5]
 80023fe:	2d00      	cmp	r5, #0
 8002400:	d104      	bne.n	800240c <R1_SwitchOffPWM+0xc0>
    if ((pHandle->_Super.LowSideOutputs) == ES_GPIO)
 8002402:	357d      	adds	r5, #125	@ 0x7d
 8002404:	5d45      	ldrb	r5, [r0, r5]
 8002406:	2d02      	cmp	r5, #2
 8002408:	d100      	bne.n	800240c <R1_SwitchOffPWM+0xc0>
 800240a:	e08f      	b.n	800252c <R1_SwitchOffPWM+0x1e0>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800240c:	69b5      	ldr	r5, [r6, #24]
 800240e:	46a8      	mov	r8, r5
 8002410:	2501      	movs	r5, #1
 8002412:	426d      	negs	r5, r5
 8002414:	46a9      	mov	r9, r5
 8002416:	44d0      	add	r8, sl
 8002418:	44c8      	add	r8, r9
 800241a:	4645      	mov	r5, r8
 800241c:	782d      	ldrb	r5, [r5, #0]
 800241e:	46a8      	mov	r8, r5
 8002420:	4488      	add	r8, r1
 8002422:	4645      	mov	r5, r8
 8002424:	682d      	ldr	r5, [r5, #0]
 8002426:	46ab      	mov	fp, r5
 8002428:	2501      	movs	r5, #1
 800242a:	46a9      	mov	r9, r5
 800242c:	465d      	mov	r5, fp
 800242e:	464f      	mov	r7, r9
 8002430:	43bd      	bics	r5, r7
 8002432:	46ab      	mov	fp, r5
 8002434:	4645      	mov	r5, r8
 8002436:	465f      	mov	r7, fp
 8002438:	602f      	str	r7, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800243a:	464d      	mov	r5, r9
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800243c:	464f      	mov	r7, r9
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800243e:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002440:	3501      	adds	r5, #1
 8002442:	604d      	str	r5, [r1, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002444:	3502      	adds	r5, #2
 8002446:	604d      	str	r5, [r1, #4]
 8002448:	46a8      	mov	r8, r5
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800244a:	6825      	ldr	r5, [r4, #0]
 800244c:	43bd      	bics	r5, r7
 800244e:	6025      	str	r5, [r4, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UDE);
 8002450:	68dc      	ldr	r4, [r3, #12]
 8002452:	4d45      	ldr	r5, [pc, #276]	@ (8002568 <R1_SwitchOffPWM+0x21c>)
 8002454:	402c      	ands	r4, r5
 8002456:	60dc      	str	r4, [r3, #12]
 8002458:	6934      	ldr	r4, [r6, #16]
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod + 1));
 800245a:	4666      	mov	r6, ip
 800245c:	4454      	add	r4, sl
 800245e:	3c01      	subs	r4, #1
 8002460:	7824      	ldrb	r4, [r4, #0]
 8002462:	3601      	adds	r6, #1
 8002464:	1909      	adds	r1, r1, r4
 8002466:	680c      	ldr	r4, [r1, #0]
 8002468:	43bc      	bics	r4, r7
 800246a:	600c      	str	r4, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 800246c:	68d9      	ldr	r1, [r3, #12]
 800246e:	4c3f      	ldr	r4, [pc, #252]	@ (800256c <R1_SwitchOffPWM+0x220>)
 8002470:	4021      	ands	r1, r4
 8002472:	60d9      	str	r1, [r3, #12]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 8002474:	21ae      	movs	r1, #174	@ 0xae
 8002476:	9c01      	ldr	r4, [sp, #4]
 8002478:	5244      	strh	r4, [r0, r1]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800247a:	9c00      	ldr	r4, [sp, #0]
 800247c:	3104      	adds	r1, #4
 800247e:	5244      	strh	r4, [r0, r1]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002480:	2470      	movs	r4, #112	@ 0x70
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002482:	641e      	str	r6, [r3, #64]	@ 0x40
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	43a1      	bics	r1, r4
  if (LL_ADC_REG_IsConversionOngoing (ADC1))
 8002488:	4644      	mov	r4, r8
 800248a:	6059      	str	r1, [r3, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800248c:	4938      	ldr	r1, [pc, #224]	@ (8002570 <R1_SwitchOffPWM+0x224>)
 800248e:	688b      	ldr	r3, [r1, #8]
 8002490:	421c      	tst	r4, r3
 8002492:	d009      	beq.n	80024a8 <R1_SwitchOffPWM+0x15c>
  MODIFY_REG(ADCx->CR,
 8002494:	688b      	ldr	r3, [r1, #8]
 8002496:	4c37      	ldr	r4, [pc, #220]	@ (8002574 <R1_SwitchOffPWM+0x228>)
 8002498:	4023      	ands	r3, r4
 800249a:	2410      	movs	r4, #16
 800249c:	4323      	orrs	r3, r4
 800249e:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80024a0:	3c0c      	subs	r4, #12
 80024a2:	688b      	ldr	r3, [r1, #8]
    while (LL_ADC_REG_IsConversionOngoing(ADC1))
 80024a4:	421c      	tst	r4, r3
 80024a6:	d1fc      	bne.n	80024a2 <R1_SwitchOffPWM+0x156>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 80024a8:	4931      	ldr	r1, [pc, #196]	@ (8002570 <R1_SwitchOffPWM+0x224>)
 80024aa:	4c33      	ldr	r4, [pc, #204]	@ (8002578 <R1_SwitchOffPWM+0x22c>)
 80024ac:	68cb      	ldr	r3, [r1, #12]
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80024ae:	27ba      	movs	r7, #186	@ 0xba
 80024b0:	4023      	ands	r3, r4
 80024b2:	60cb      	str	r3, [r1, #12]
  pHandle->ADCRegularLocked=false;
 80024b4:	2400      	movs	r4, #0
 80024b6:	23ca      	movs	r3, #202	@ 0xca
 80024b8:	54c4      	strb	r4, [r0, r3]
  pHandle->iflag = 0;
 80024ba:	3b05      	subs	r3, #5
 80024bc:	54c4      	strb	r4, [r0, r3]
  pHandle->FOCDurationFlag = false;
 80024be:	3303      	adds	r3, #3
 80024c0:	54c4      	strb	r4, [r0, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80024c2:	3b56      	subs	r3, #86	@ 0x56
 80024c4:	5ac1      	ldrh	r1, [r0, r3]
 80024c6:	3346      	adds	r3, #70	@ 0x46
 80024c8:	084e      	lsrs	r6, r1, #1
 80024ca:	52c6      	strh	r6, [r0, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024cc:	088b      	lsrs	r3, r1, #2
 80024ce:	1a9d      	subs	r5, r3, r2
 80024d0:	b2ad      	uxth	r5, r5
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024d2:	18d2      	adds	r2, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80024d4:	53c5      	strh	r5, [r0, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024d6:	b292      	uxth	r2, r2
 80024d8:	0419      	lsls	r1, r3, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80024da:	3702      	adds	r7, #2
 80024dc:	53c2      	strh	r2, [r0, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80024de:	4319      	orrs	r1, r3
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80024e0:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80024e2:	6501      	str	r1, [r0, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80024e4:	53c3      	strh	r3, [r0, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 80024e6:	2388      	movs	r3, #136	@ 0x88
 80024e8:	50c1      	str	r1, [r0, r3]
 80024ea:	3304      	adds	r3, #4
 80024ec:	50c1      	str	r1, [r0, r3]
 80024ee:	3304      	adds	r3, #4
 80024f0:	50c1      	str	r1, [r0, r3]
 80024f2:	3304      	adds	r3, #4
 80024f4:	50c1      	str	r1, [r0, r3]
 80024f6:	3304      	adds	r3, #4
 80024f8:	50c1      	str	r1, [r0, r3]
 80024fa:	3304      	adds	r3, #4
 80024fc:	50c1      	str	r1, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80024fe:	3312      	adds	r3, #18
 8002500:	52c2      	strh	r2, [r0, r3]
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002502:	22b0      	movs	r2, #176	@ 0xb0
 8002504:	3e01      	subs	r6, #1
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 8002506:	3304      	adds	r3, #4
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 8002508:	5286      	strh	r6, [r0, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 800250a:	52c5      	strh	r5, [r0, r3]
  pHandle->_Super.BrakeActionLock = false;
 800250c:	3b2d      	subs	r3, #45	@ 0x2d
 800250e:	54c4      	strb	r4, [r0, r3]
}
 8002510:	b003      	add	sp, #12
 8002512:	bcf0      	pop	{r4, r5, r6, r7}
 8002514:	46bb      	mov	fp, r7
 8002516:	46b2      	mov	sl, r6
 8002518:	46a9      	mov	r9, r5
 800251a:	46a0      	mov	r8, r4
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800251e:	2410      	movs	r4, #16
 8002520:	46a0      	mov	r8, r4
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002522:	4645      	mov	r5, r8
 8002524:	681c      	ldr	r4, [r3, #0]
 8002526:	4225      	tst	r5, r4
 8002528:	d0fb      	beq.n	8002522 <R1_SwitchOffPWM+0x1d6>
 800252a:	e740      	b.n	80023ae <R1_SwitchOffPWM+0x62>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800252c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800252e:	46a8      	mov	r8, r5
 8002530:	2548      	movs	r5, #72	@ 0x48
 8002532:	5b45      	ldrh	r5, [r0, r5]
 8002534:	46a9      	mov	r9, r5
  WRITE_REG(GPIOx->BRR, PinMask);
 8002536:	4645      	mov	r5, r8
 8002538:	464f      	mov	r7, r9
 800253a:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800253c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800253e:	46a8      	mov	r8, r5
 8002540:	254a      	movs	r5, #74	@ 0x4a
 8002542:	5b45      	ldrh	r5, [r0, r5]
 8002544:	46a9      	mov	r9, r5
 8002546:	4645      	mov	r5, r8
 8002548:	464f      	mov	r7, r9
 800254a:	62af      	str	r7, [r5, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800254c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800254e:	46a8      	mov	r8, r5
 8002550:	254c      	movs	r5, #76	@ 0x4c
 8002552:	5b45      	ldrh	r5, [r0, r5]
 8002554:	46a9      	mov	r9, r5
 8002556:	4645      	mov	r5, r8
 8002558:	464f      	mov	r7, r9
 800255a:	62af      	str	r7, [r5, #40]	@ 0x28
}
 800255c:	e756      	b.n	800240c <R1_SwitchOffPWM+0xc0>
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	08005974 	.word	0x08005974
 8002564:	ffff7fff 	.word	0xffff7fff
 8002568:	fffffeff 	.word	0xfffffeff
 800256c:	ffffefff 	.word	0xffffefff
 8002570:	40012400 	.word	0x40012400
 8002574:	7fffffe8 	.word	0x7fffffe8
 8002578:	fffff23f 	.word	0xfffff23f

0800257c <R1_CurrentReadingCalibration>:
{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	46c6      	mov	lr, r8
 8002580:	0004      	movs	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002582:	26cc      	movs	r6, #204	@ 0xcc
  if (false == pHandle->_Super.offsetCalibStatus)
 8002584:	2781      	movs	r7, #129	@ 0x81
{
 8002586:	b500      	push	{lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002588:	5980      	ldr	r0, [r0, r6]
  if (false == pHandle->_Super.offsetCalibStatus)
 800258a:	5de3      	ldrb	r3, [r4, r7]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800258c:	6845      	ldr	r5, [r0, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 800258e:	2b00      	cmp	r3, #0
 8002590:	d037      	beq.n	8002602 <R1_CurrentReadingCalibration+0x86>
  SET_BIT(TIMx->CCER, Channels);
 8002592:	6a2a      	ldr	r2, [r5, #32]
 8002594:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <R1_CurrentReadingCalibration+0xe4>)
  pHandle->iflag = 0;
 8002596:	2600      	movs	r6, #0
 8002598:	4313      	orrs	r3, r2
 800259a:	622b      	str	r3, [r5, #32]
 800259c:	23c5      	movs	r3, #197	@ 0xc5
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 800259e:	27ba      	movs	r7, #186	@ 0xba
  pHandle->iflag = 0;
 80025a0:	54e6      	strb	r6, [r4, r3]
  pHandle->FOCDurationFlag = false;
 80025a2:	3303      	adds	r3, #3
 80025a4:	54e6      	strb	r6, [r4, r3]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod/2u);
 80025a6:	3b56      	subs	r3, #86	@ 0x56
 80025a8:	5ae2      	ldrh	r2, [r4, r3]
 80025aa:	3346      	adds	r3, #70	@ 0x46
 80025ac:	0855      	lsrs	r5, r2, #1
 80025ae:	52e5      	strh	r5, [r4, r3]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025b0:	8c03      	ldrh	r3, [r0, #32]
 80025b2:	8bc0      	ldrh	r0, [r0, #30]
 80025b4:	0892      	lsrs	r2, r2, #2
 80025b6:	181b      	adds	r3, r3, r0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	1ad0      	subs	r0, r2, r3
 80025bc:	b280      	uxth	r0, r0
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025be:	18d3      	adds	r3, r2, r3
  pHandle->CntSmp1 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025c0:	53e0      	strh	r0, [r4, r7]
                   + (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	0411      	lsls	r1, r2, #16
  pHandle->CntSmp2 = ((uint32_t)(pHandle->Half_PWMPeriod) >> 1)
 80025c6:	3702      	adds	r7, #2
 80025c8:	53e3      	strh	r3, [r4, r7]
  pHandle->_Super.CntPhB = pHandle->Half_PWMPeriod >> 1;
 80025ca:	4311      	orrs	r1, r2
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80025cc:	3f68      	subs	r7, #104	@ 0x68
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80025ce:	6521      	str	r1, [r4, #80]	@ 0x50
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80025d0:	53e2      	strh	r2, [r4, r7]
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during first half PWM period */
 80025d2:	2288      	movs	r2, #136	@ 0x88
 80025d4:	50a1      	str	r1, [r4, r2]
 80025d6:	3204      	adds	r2, #4
 80025d8:	50a1      	str	r1, [r4, r2]
 80025da:	3204      	adds	r2, #4
 80025dc:	50a1      	str	r1, [r4, r2]
 80025de:	3204      	adds	r2, #4
 80025e0:	50a1      	str	r1, [r4, r2]
 80025e2:	3204      	adds	r2, #4
 80025e4:	50a1      	str	r1, [r4, r2]
 80025e6:	3204      	adds	r2, #4
 80025e8:	50a1      	str	r1, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[0] = pHandle->CntSmp2;
 80025ea:	3212      	adds	r2, #18
 80025ec:	52a3      	strh	r3, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80025ee:	23b2      	movs	r3, #178	@ 0xb2
  pHandle->DmaBuffCCR_ADCTrig[1] = pHandle->Half_PWMPeriod-1u;
 80025f0:	3d01      	subs	r5, #1
 80025f2:	3202      	adds	r2, #2
 80025f4:	52a5      	strh	r5, [r4, r2]
  pHandle->DmaBuffCCR_ADCTrig[2] = pHandle->CntSmp1;
 80025f6:	52e0      	strh	r0, [r4, r3]
  pHandle->_Super.BrakeActionLock = false;
 80025f8:	3b2d      	subs	r3, #45	@ 0x2d
 80025fa:	54e6      	strb	r6, [r4, r3]
}
 80025fc:	bc80      	pop	{r7}
 80025fe:	46b8      	mov	r8, r7
 8002600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->PhaseOffset = 0u;
 8002602:	22a0      	movs	r2, #160	@ 0xa0
 8002604:	50a3      	str	r3, [r4, r2]
 8002606:	4690      	mov	r8, r2
    pHandle->Index = 0u;
 8002608:	3224      	adds	r2, #36	@ 0x24
 800260a:	54a3      	strb	r3, [r4, r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 800260c:	6a2b      	ldr	r3, [r5, #32]
 800260e:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <R1_CurrentReadingCalibration+0xe8>)
    R1_SwitchOnPWM(&pHandle->_Super);
 8002610:	0020      	movs	r0, r4
 8002612:	4013      	ands	r3, r2
 8002614:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <R1_CurrentReadingCalibration+0xec>)
 8002618:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <R1_CurrentReadingCalibration+0xf0>)
 800261c:	6163      	str	r3, [r4, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 800261e:	f7ff fd65 	bl	80020ec <R1_SwitchOnPWM>
            pHandle->pParams_str->RepetitionCounter,
 8002622:	2324      	movs	r3, #36	@ 0x24
 8002624:	59a2      	ldr	r2, [r4, r6]
    waitForPolarizationEnd(TIMx,
 8002626:	0021      	movs	r1, r4
 8002628:	5cd2      	ldrb	r2, [r2, r3]
 800262a:	0023      	movs	r3, r4
 800262c:	0028      	movs	r0, r5
 800262e:	33c4      	adds	r3, #196	@ 0xc4
 8002630:	3156      	adds	r1, #86	@ 0x56
 8002632:	f002 fe53 	bl	80052dc <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8002636:	0020      	movs	r0, r4
 8002638:	f7ff fe88 	bl	800234c <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 800263c:	4643      	mov	r3, r8
 800263e:	4642      	mov	r2, r8
 8002640:	58e3      	ldr	r3, [r4, r3]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	50a3      	str	r3, [r4, r2]
    if (0U == pHandle->_Super.SWerror)
 8002646:	2356      	movs	r3, #86	@ 0x56
 8002648:	5ae3      	ldrh	r3, [r4, r3]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <R1_CurrentReadingCalibration+0xd6>
      pHandle->_Super.offsetCalibStatus = true;
 800264e:	3301      	adds	r3, #1
 8002650:	55e3      	strb	r3, [r4, r7]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <R1_CurrentReadingCalibration+0xf4>)
 8002654:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <R1_CurrentReadingCalibration+0xf8>)
 8002658:	6163      	str	r3, [r4, #20]
                   - (uint32_t)(pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800265a:	23cc      	movs	r3, #204	@ 0xcc
 800265c:	58e0      	ldr	r0, [r4, r3]
 800265e:	e798      	b.n	8002592 <R1_CurrentReadingCalibration+0x16>
 8002660:	00000555 	.word	0x00000555
 8002664:	fffffaaa 	.word	0xfffffaaa
 8002668:	08001985 	.word	0x08001985
 800266c:	080019c1 	.word	0x080019c1
 8002670:	08001709 	.word	0x08001709
 8002674:	08001a2d 	.word	0x08001a2d

08002678 <R1_TIM1_UP_IRQHandler>:
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_TIM1_UP_IRQHandler(PWMC_R1_Handle_t *pHandle)
{

  if (pHandle->TCDoneFlag ==true)
 8002678:	23c9      	movs	r3, #201	@ 0xc9
 800267a:	5cc3      	ldrb	r3, [r0, r3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <R1_TIM1_UP_IRQHandler+0x26>
  MODIFY_REG(ADCx->CR,
 8002680:	4a08      	ldr	r2, [pc, #32]	@ (80026a4 <R1_TIM1_UP_IRQHandler+0x2c>)
 8002682:	4909      	ldr	r1, [pc, #36]	@ (80026a8 <R1_TIM1_UP_IRQHandler+0x30>)
 8002684:	6893      	ldr	r3, [r2, #8]
 8002686:	400b      	ands	r3, r1
 8002688:	2104      	movs	r1, #4
 800268a:	430b      	orrs	r3, r1
 800268c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800268e:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <R1_TIM1_UP_IRQHandler+0x34>)
 8002690:	316c      	adds	r1, #108	@ 0x6c
 8002692:	6853      	ldr	r3, [r2, #4]
 8002694:	430b      	orrs	r3, r1
 8002696:	6053      	str	r3, [r2, #4]
  {
    LL_ADC_REG_StartConversion(ADC1);
    LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
    pHandle->FOCDurationFlag = true;
 8002698:	23c8      	movs	r3, #200	@ 0xc8
 800269a:	2201      	movs	r2, #1
 800269c:	52c2      	strh	r2, [r0, r3]
  else
  {
    /* Nothing to do */
  }

  return (&(pHandle->_Super.Motor));
 800269e:	307a      	adds	r0, #122	@ 0x7a
}
 80026a0:	4770      	bx	lr
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	40012400 	.word	0x40012400
 80026a8:	7fffffe8 	.word	0x7fffffe8
 80026ac:	40012c00 	.word	0x40012c00

080026b0 <R1_DMAx_TC_IRQHandler>:
  *         Required only for R1 with rep rate > 1
  * @param pHdl: handler of the current instance of the PWM component
  */
__weak void *R1_DMAx_TC_IRQHandler(PWMC_R1_Handle_t *pHandle)
{
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80026b0:	23cc      	movs	r3, #204	@ 0xcc
 80026b2:	58c2      	ldr	r2, [r0, r3]
{
 80026b4:	b530      	push	{r4, r5, lr}
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80026b6:	6894      	ldr	r4, [r2, #8]
  if (NULL == DMAx)
 80026b8:	2c00      	cmp	r4, #0
 80026ba:	d005      	beq.n	80026c8 <R1_DMAx_TC_IRQHandler+0x18>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80026bc:	2104      	movs	r1, #4
 80026be:	68d3      	ldr	r3, [r2, #12]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4099      	lsls	r1, r3
 80026c6:	6061      	str	r1, [r4, #4]

  LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
  pHandle->TCCnt++;
 80026c8:	21c6      	movs	r1, #198	@ 0xc6
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80026ca:	2424      	movs	r4, #36	@ 0x24
  pHandle->TCCnt++;
 80026cc:	5c43      	ldrb	r3, [r0, r1]
 80026ce:	3301      	adds	r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	5443      	strb	r3, [r0, r1]
  if (pHandle->TCCnt == pHandle->pParams_str->RepetitionCounter)
 80026d4:	5d12      	ldrb	r2, [r2, r4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d110      	bne.n	80026fc <R1_DMAx_TC_IRQHandler+0x4c>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80026da:	2398      	movs	r3, #152	@ 0x98
 80026dc:	58c4      	ldr	r4, [r0, r3]
 80026de:	3304      	adds	r3, #4
 80026e0:	58c2      	ldr	r2, [r0, r3]
 80026e2:	3b08      	subs	r3, #8
 80026e4:	58c5      	ldr	r5, [r0, r3]
 80026e6:	3b0c      	subs	r3, #12
 80026e8:	50c5      	str	r5, [r0, r3]
 80026ea:	3304      	adds	r3, #4
 80026ec:	50c4      	str	r4, [r0, r3]
 80026ee:	3304      	adds	r3, #4
 80026f0:	50c2      	str	r2, [r0, r3]
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[3]= pHandle->DmaBuffCCR_latch[3];
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];

    pHandle->TCCnt = 0;
 80026f2:	2300      	movs	r3, #0
    pHandle->TCDoneFlag =true;
 80026f4:	2201      	movs	r2, #1
    pHandle->TCCnt = 0;
 80026f6:	5443      	strb	r3, [r0, r1]
    pHandle->TCDoneFlag =true;
 80026f8:	33c9      	adds	r3, #201	@ 0xc9
 80026fa:	54c2      	strb	r2, [r0, r3]
  }
  else
  {
  }

  return (&(pHandle->_Super.Motor));
 80026fc:	307a      	adds	r0, #122	@ 0x7a
}
 80026fe:	bd30      	pop	{r4, r5, pc}

08002700 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002700:	4954      	ldr	r1, [pc, #336]	@ (8002854 <RCM_RegisterRegConv+0x154>)
{
 8002702:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002704:	680b      	ldr	r3, [r1, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d030      	beq.n	800276c <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800270a:	791a      	ldrb	r2, [r3, #4]
 800270c:	7904      	ldrb	r4, [r0, #4]
 800270e:	42a2      	cmp	r2, r4
 8002710:	d019      	beq.n	8002746 <RCM_RegisterRegConv+0x46>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002712:	684d      	ldr	r5, [r1, #4]
 8002714:	2d00      	cmp	r5, #0
 8002716:	d03d      	beq.n	8002794 <RCM_RegisterRegConv+0x94>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002718:	792a      	ldrb	r2, [r5, #4]
  uint8_t handle = 255U;
 800271a:	23ff      	movs	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800271c:	42a2      	cmp	r2, r4
 800271e:	d02d      	beq.n	800277c <RCM_RegisterRegConv+0x7c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002720:	688d      	ldr	r5, [r1, #8]
 8002722:	2d00      	cmp	r5, #0
 8002724:	d068      	beq.n	80027f8 <RCM_RegisterRegConv+0xf8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002726:	792a      	ldrb	r2, [r5, #4]
 8002728:	42a2      	cmp	r2, r4
 800272a:	d02d      	beq.n	8002788 <RCM_RegisterRegConv+0x88>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800272c:	68cd      	ldr	r5, [r1, #12]
 800272e:	2d00      	cmp	r5, #0
 8002730:	d100      	bne.n	8002734 <RCM_RegisterRegConv+0x34>
 8002732:	e06e      	b.n	8002812 <RCM_RegisterRegConv+0x112>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002734:	792a      	ldrb	r2, [r5, #4]
 8002736:	42a2      	cmp	r2, r4
 8002738:	d100      	bne.n	800273c <RCM_RegisterRegConv+0x3c>
 800273a:	e071      	b.n	8002820 <RCM_RegisterRegConv+0x120>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 800273c:	2b03      	cmp	r3, #3
 800273e:	d933      	bls.n	80027a8 <RCM_RegisterRegConv+0xa8>
 8002740:	23ff      	movs	r3, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002742:	7303      	strb	r3, [r0, #12]
}
 8002744:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002746:	6802      	ldr	r2, [r0, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d030      	beq.n	80027b0 <RCM_RegisterRegConv+0xb0>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800274e:	684d      	ldr	r5, [r1, #4]
 8002750:	2d00      	cmp	r5, #0
 8002752:	d1e1      	bne.n	8002718 <RCM_RegisterRegConv+0x18>
 8002754:	688d      	ldr	r5, [r1, #8]
      i++;
 8002756:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002758:	2d00      	cmp	r5, #0
 800275a:	d1e4      	bne.n	8002726 <RCM_RegisterRegConv+0x26>
 800275c:	68cd      	ldr	r5, [r1, #12]
 800275e:	2d00      	cmp	r5, #0
 8002760:	d027      	beq.n	80027b2 <RCM_RegisterRegConv+0xb2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002762:	792e      	ldrb	r6, [r5, #4]
 8002764:	7904      	ldrb	r4, [r0, #4]
 8002766:	42a6      	cmp	r6, r4
 8002768:	d123      	bne.n	80027b2 <RCM_RegisterRegConv+0xb2>
 800276a:	e05a      	b.n	8002822 <RCM_RegisterRegConv+0x122>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800276c:	684d      	ldr	r5, [r1, #4]
 800276e:	2d00      	cmp	r5, #0
 8002770:	d05d      	beq.n	800282e <RCM_RegisterRegConv+0x12e>
 8002772:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002774:	792a      	ldrb	r2, [r5, #4]
    uint8_t i = 0;
 8002776:	2300      	movs	r3, #0
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002778:	42a2      	cmp	r2, r4
 800277a:	d1d1      	bne.n	8002720 <RCM_RegisterRegConv+0x20>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800277c:	682d      	ldr	r5, [r5, #0]
 800277e:	6802      	ldr	r2, [r0, #0]
 8002780:	4295      	cmp	r5, r2
 8002782:	d1cd      	bne.n	8002720 <RCM_RegisterRegConv+0x20>
      i++;
 8002784:	2301      	movs	r3, #1
 8002786:	e014      	b.n	80027b2 <RCM_RegisterRegConv+0xb2>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002788:	682d      	ldr	r5, [r5, #0]
 800278a:	6802      	ldr	r2, [r0, #0]
 800278c:	4295      	cmp	r5, r2
 800278e:	d1cd      	bne.n	800272c <RCM_RegisterRegConv+0x2c>
      i++;
 8002790:	2302      	movs	r3, #2
 8002792:	e00e      	b.n	80027b2 <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002794:	688d      	ldr	r5, [r1, #8]
      i++;
 8002796:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002798:	2d00      	cmp	r5, #0
 800279a:	d1c4      	bne.n	8002726 <RCM_RegisterRegConv+0x26>
 800279c:	68cd      	ldr	r5, [r1, #12]
 800279e:	2d00      	cmp	r5, #0
 80027a0:	d002      	beq.n	80027a8 <RCM_RegisterRegConv+0xa8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80027a2:	792a      	ldrb	r2, [r5, #4]
 80027a4:	42a2      	cmp	r2, r4
 80027a6:	d03b      	beq.n	8002820 <RCM_RegisterRegConv+0x120>
 80027a8:	021c      	lsls	r4, r3, #8
 80027aa:	6802      	ldr	r2, [r0, #0]
 80027ac:	431c      	orrs	r4, r3
 80027ae:	e002      	b.n	80027b6 <RCM_RegisterRegConv+0xb6>
    uint8_t i = 0;
 80027b0:	2300      	movs	r3, #0
    while (i < RCM_MAX_CONV)
 80027b2:	021c      	lsls	r4, r3, #8
 80027b4:	431c      	orrs	r4, r3
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80027b6:	2600      	movs	r6, #0
      RCM_handle_array [handle] = regConv;
 80027b8:	009d      	lsls	r5, r3, #2
 80027ba:	5148      	str	r0, [r1, r5]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80027bc:	4926      	ldr	r1, [pc, #152]	@ (8002858 <RCM_RegisterRegConv+0x158>)
 80027be:	00dd      	lsls	r5, r3, #3
 80027c0:	506e      	str	r6, [r5, r1]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80027c2:	6891      	ldr	r1, [r2, #8]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80027c4:	07c9      	lsls	r1, r1, #31
 80027c6:	d40e      	bmi.n	80027e6 <RCM_RegisterRegConv+0xe6>
  MODIFY_REG(ADCx->CR,
 80027c8:	6895      	ldr	r5, [r2, #8]
 80027ca:	4924      	ldr	r1, [pc, #144]	@ (800285c <RCM_RegisterRegConv+0x15c>)
 80027cc:	400d      	ands	r5, r1
 80027ce:	3118      	adds	r1, #24
 80027d0:	4329      	orrs	r1, r5
 80027d2:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80027d4:	6891      	ldr	r1, [r2, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 80027d6:	2900      	cmp	r1, #0
 80027d8:	dbfc      	blt.n	80027d4 <RCM_RegisterRegConv+0xd4>
  MODIFY_REG(ADCx->CR,
 80027da:	6891      	ldr	r1, [r2, #8]
 80027dc:	4d1f      	ldr	r5, [pc, #124]	@ (800285c <RCM_RegisterRegConv+0x15c>)
 80027de:	4029      	ands	r1, r5
 80027e0:	2501      	movs	r5, #1
 80027e2:	4329      	orrs	r1, r5
 80027e4:	6091      	str	r1, [r2, #8]
      RCM_NoInj_array[handle].enable = false;
 80027e6:	2500      	movs	r5, #0
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	491d      	ldr	r1, [pc, #116]	@ (8002860 <RCM_RegisterRegConv+0x160>)
 80027ec:	18d2      	adds	r2, r2, r3
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	5455      	strb	r5, [r2, r1]
      RCM_NoInj_array[handle].prev = handle;
 80027f2:	3104      	adds	r1, #4
 80027f4:	528c      	strh	r4, [r1, r2]
 80027f6:	e7a4      	b.n	8002742 <RCM_RegisterRegConv+0x42>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d91e      	bls.n	800283a <RCM_RegisterRegConv+0x13a>
 80027fc:	68cb      	ldr	r3, [r1, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <RCM_RegisterRegConv+0x108>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002802:	791a      	ldrb	r2, [r3, #4]
 8002804:	4294      	cmp	r4, r2
 8002806:	d01c      	beq.n	8002842 <RCM_RegisterRegConv+0x142>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002808:	4b16      	ldr	r3, [pc, #88]	@ (8002864 <RCM_RegisterRegConv+0x164>)
 800280a:	6802      	ldr	r2, [r0, #0]
 800280c:	1c1c      	adds	r4, r3, #0
      i++;
 800280e:	2302      	movs	r3, #2
 8002810:	e7d1      	b.n	80027b6 <RCM_RegisterRegConv+0xb6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002812:	2b04      	cmp	r3, #4
 8002814:	d9c8      	bls.n	80027a8 <RCM_RegisterRegConv+0xa8>
 8002816:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <RCM_RegisterRegConv+0x168>)
 8002818:	6802      	ldr	r2, [r0, #0]
 800281a:	1c1c      	adds	r4, r3, #0
 800281c:	2303      	movs	r3, #3
 800281e:	e7ca      	b.n	80027b6 <RCM_RegisterRegConv+0xb6>
 8002820:	6802      	ldr	r2, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002822:	682c      	ldr	r4, [r5, #0]
 8002824:	4294      	cmp	r4, r2
 8002826:	d000      	beq.n	800282a <RCM_RegisterRegConv+0x12a>
 8002828:	e788      	b.n	800273c <RCM_RegisterRegConv+0x3c>
      i++;
 800282a:	2303      	movs	r3, #3
    while (i < RCM_MAX_CONV)
 800282c:	e7c1      	b.n	80027b2 <RCM_RegisterRegConv+0xb2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800282e:	688d      	ldr	r5, [r1, #8]
    uint8_t i = 0;
 8002830:	2300      	movs	r3, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002832:	2d00      	cmp	r5, #0
 8002834:	d003      	beq.n	800283e <RCM_RegisterRegConv+0x13e>
 8002836:	7904      	ldrb	r4, [r0, #4]
 8002838:	e775      	b.n	8002726 <RCM_RegisterRegConv+0x26>
 800283a:	2300      	movs	r3, #0
 800283c:	e7ae      	b.n	800279c <RCM_RegisterRegConv+0x9c>
 800283e:	6802      	ldr	r2, [r0, #0]
 8002840:	e78c      	b.n	800275c <RCM_RegisterRegConv+0x5c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002842:	681c      	ldr	r4, [r3, #0]
 8002844:	6802      	ldr	r2, [r0, #0]
      i++;
 8002846:	2303      	movs	r3, #3
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002848:	42a2      	cmp	r2, r4
 800284a:	d0b2      	beq.n	80027b2 <RCM_RegisterRegConv+0xb2>
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <RCM_RegisterRegConv+0x164>)
 800284e:	1c1c      	adds	r4, r3, #0
      i++;
 8002850:	2302      	movs	r3, #2
 8002852:	e7b0      	b.n	80027b6 <RCM_RegisterRegConv+0xb6>
 8002854:	200006d4 	.word	0x200006d4
 8002858:	200006b4 	.word	0x200006b4
 800285c:	7fffffe8 	.word	0x7fffffe8
 8002860:	2000069c 	.word	0x2000069c
 8002864:	00000202 	.word	0x00000202
 8002868:	00000303 	.word	0x00000303

0800286c <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 800286e:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002870:	4b57      	ldr	r3, [pc, #348]	@ (80029d0 <RCM_ExecRegularConv+0x164>)
 8002872:	0050      	lsls	r0, r2, #1
 8002874:	1881      	adds	r1, r0, r2
 8002876:	0049      	lsls	r1, r1, #1
 8002878:	5c59      	ldrb	r1, [r3, r1]
 800287a:	2900      	cmp	r1, #0
 800287c:	d139      	bne.n	80028f2 <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 800287e:	7819      	ldrb	r1, [r3, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	d113      	bne.n	80028ac <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002884:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8002886:	799c      	ldrb	r4, [r3, #6]
 8002888:	2c00      	cmp	r4, #0
 800288a:	d000      	beq.n	800288e <RCM_ExecRegularConv+0x22>
 800288c:	e071      	b.n	8002972 <RCM_ExecRegularConv+0x106>
 800288e:	7b1c      	ldrb	r4, [r3, #12]
 8002890:	2c00      	cmp	r4, #0
 8002892:	d000      	beq.n	8002896 <RCM_ExecRegularConv+0x2a>
 8002894:	e073      	b.n	800297e <RCM_ExecRegularConv+0x112>
 8002896:	7c9e      	ldrb	r6, [r3, #18]
 8002898:	2e00      	cmp	r6, #0
 800289a:	d100      	bne.n	800289e <RCM_ExecRegularConv+0x32>
 800289c:	e08b      	b.n	80029b6 <RCM_ExecRegularConv+0x14a>
      {
        if (RCM_NoInj_array[i].next > handle)
 800289e:	7ddd      	ldrb	r5, [r3, #23]
 80028a0:	4295      	cmp	r5, r2
 80028a2:	d800      	bhi.n	80028a6 <RCM_ExecRegularConv+0x3a>
 80028a4:	e090      	b.n	80029c8 <RCM_ExecRegularConv+0x15c>
 80028a6:	2603      	movs	r6, #3
      if (true == RCM_NoInj_array [i].enable)
 80028a8:	2403      	movs	r4, #3
 80028aa:	e005      	b.n	80028b8 <RCM_ExecRegularConv+0x4c>
        if (RCM_NoInj_array[i].next > handle)
 80028ac:	795d      	ldrb	r5, [r3, #5]
  uint8_t i=0;
 80028ae:	2100      	movs	r1, #0
        if (RCM_NoInj_array[i].next > handle)
 80028b0:	42aa      	cmp	r2, r5
 80028b2:	d2e8      	bcs.n	8002886 <RCM_ExecRegularConv+0x1a>
  uint8_t i=0;
 80028b4:	2600      	movs	r6, #0
      if (true == RCM_NoInj_array [i].enable)
 80028b6:	2400      	movs	r4, #0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 80028b8:	1881      	adds	r1, r0, r2
 80028ba:	0049      	lsls	r1, r1, #1
 80028bc:	1859      	adds	r1, r3, r1
 80028be:	714d      	strb	r5, [r1, #5]
          RCM_NoInj_array[handle].prev = i;
 80028c0:	710e      	strb	r6, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 80028c2:	0061      	lsls	r1, r4, #1
 80028c4:	1909      	adds	r1, r1, r4
 80028c6:	0049      	lsls	r1, r1, #1
 80028c8:	1859      	adds	r1, r3, r1
       /* We find a regular conversion with smaller position to be linked with */
       {
         formerNext = RCM_NoInj_array[LastEnable].next;
         RCM_NoInj_array[handle].next = formerNext;
         RCM_NoInj_array[handle].prev = LastEnable;
         RCM_NoInj_array[LastEnable].next = handle;
 80028ca:	714a      	strb	r2, [r1, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80028cc:	0069      	lsls	r1, r5, #1
 80028ce:	1949      	adds	r1, r1, r5
 80028d0:	0049      	lsls	r1, r1, #1
 80028d2:	1859      	adds	r1, r3, r1
 80028d4:	710a      	strb	r2, [r1, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80028d6:	493f      	ldr	r1, [pc, #252]	@ (80029d4 <RCM_ExecRegularConv+0x168>)
 80028d8:	780d      	ldrb	r5, [r1, #0]
    RCM_NoInj_array[handle].enable = true;
 80028da:	2601      	movs	r6, #1
 80028dc:	1884      	adds	r4, r0, r2
 80028de:	0064      	lsls	r4, r4, #1
 80028e0:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80028e2:	006c      	lsls	r4, r5, #1
 80028e4:	1964      	adds	r4, r4, r5
 80028e6:	0064      	lsls	r4, r4, #1
 80028e8:	191c      	adds	r4, r3, r4
 80028ea:	7864      	ldrb	r4, [r4, #1]
 80028ec:	2c01      	cmp	r4, #1
 80028ee:	d000      	beq.n	80028f2 <RCM_ExecRegularConv+0x86>
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 80028f0:	700a      	strb	r2, [r1, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80028f2:	24ca      	movs	r4, #202	@ 0xca
 80028f4:	4938      	ldr	r1, [pc, #224]	@ (80029d8 <RCM_ExecRegularConv+0x16c>)
 80028f6:	5d09      	ldrb	r1, [r1, r4]
 80028f8:	2900      	cmp	r1, #0
 80028fa:	d135      	bne.n	8002968 <RCM_ExecRegularConv+0xfc>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80028fc:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 80028fe:	4e37      	ldr	r6, [pc, #220]	@ (80029dc <RCM_ExecRegularConv+0x170>)
 8002900:	0091      	lsls	r1, r2, #2
 8002902:	5875      	ldr	r5, [r6, r1]
 8002904:	6829      	ldr	r1, [r5, #0]
 8002906:	68cc      	ldr	r4, [r1, #12]
 8002908:	43bc      	bics	r4, r7
 800290a:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 800290c:	68cc      	ldr	r4, [r1, #12]
 800290e:	4f34      	ldr	r7, [pc, #208]	@ (80029e0 <RCM_ExecRegularConv+0x174>)
 8002910:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002912:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002914:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002916:	694c      	ldr	r4, [r1, #20]
 8002918:	43bc      	bics	r4, r7
 800291a:	68af      	ldr	r7, [r5, #8]
 800291c:	433c      	orrs	r4, r7
 800291e:	614c      	str	r4, [r1, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002920:	2480      	movs	r4, #128	@ 0x80
    LL_ADC_REG_SetTriggerSource(RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels(RCM_handle_array[handle]->regADC, RCM_handle_array[handle]->samplingTime);
    LL_ADC_REG_SetSequencerChannels(RCM_handle_array[handle]->regADC,
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002922:	792d      	ldrb	r5, [r5, #4]
 8002924:	01a4      	lsls	r4, r4, #6
 8002926:	40ac      	lsls	r4, r5
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002928:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800292a:	0b64      	lsrs	r4, r4, #13
 800292c:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800292e:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CR,
 8002930:	688c      	ldr	r4, [r1, #8]
 8002932:	4f2c      	ldr	r7, [pc, #176]	@ (80029e4 <RCM_ExecRegularConv+0x178>)
 8002934:	403c      	ands	r4, r7
 8002936:	432c      	orrs	r4, r5
 8002938:	608c      	str	r4, [r1, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800293a:	680c      	ldr	r4, [r1, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);

    /* Wait EOC */
    while ( 0U == LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC))
 800293c:	4225      	tst	r5, r4
 800293e:	d0fc      	beq.n	800293a <RCM_ExecRegularConv+0xce>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002940:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002942:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002944:	1881      	adds	r1, r0, r2
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 8002946:	4d23      	ldr	r5, [pc, #140]	@ (80029d4 <RCM_ExecRegularConv+0x168>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8002948:	0049      	lsls	r1, r1, #1
 800294a:	1859      	adds	r1, r3, r1
 800294c:	804c      	strh	r4, [r1, #2]
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED);
 800294e:	782c      	ldrb	r4, [r5, #0]
 8002950:	00a4      	lsls	r4, r4, #2
 8002952:	5934      	ldr	r4, [r6, r4]
 8002954:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002956:	68f4      	ldr	r4, [r6, #12]
 8002958:	43bc      	bics	r4, r7
 800295a:	3f02      	subs	r7, #2
 800295c:	433c      	orrs	r4, r7
 800295e:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8002960:	794c      	ldrb	r4, [r1, #5]
 8002962:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array[handle].status = valid;
 8002964:	2402      	movs	r4, #2
 8002966:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8002968:	1880      	adds	r0, r0, r2
 800296a:	0040      	lsls	r0, r0, #1
 800296c:	181b      	adds	r3, r3, r0
  return (retVal);
 800296e:	8858      	ldrh	r0, [r3, #2]
}
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (RCM_NoInj_array[i].next > handle)
 8002972:	7add      	ldrb	r5, [r3, #11]
 8002974:	42aa      	cmp	r2, r5
 8002976:	d316      	bcc.n	80029a6 <RCM_ExecRegularConv+0x13a>
      if (true == RCM_NoInj_array [i].enable)
 8002978:	7b19      	ldrb	r1, [r3, #12]
 800297a:	2900      	cmp	r1, #0
 800297c:	d016      	beq.n	80029ac <RCM_ExecRegularConv+0x140>
        if (RCM_NoInj_array[i].next > handle)
 800297e:	7c5d      	ldrb	r5, [r3, #17]
 8002980:	42aa      	cmp	r2, r5
 8002982:	d31e      	bcc.n	80029c2 <RCM_ExecRegularConv+0x156>
      if (true == RCM_NoInj_array [i].enable)
 8002984:	7c99      	ldrb	r1, [r3, #18]
 8002986:	2602      	movs	r6, #2
 8002988:	2900      	cmp	r1, #0
 800298a:	d000      	beq.n	800298e <RCM_ExecRegularConv+0x122>
 800298c:	e787      	b.n	800289e <RCM_ExecRegularConv+0x32>
         formerNext = RCM_NoInj_array[LastEnable].next;
 800298e:	0034      	movs	r4, r6
 8002990:	0061      	lsls	r1, r4, #1
 8002992:	1909      	adds	r1, r1, r4
 8002994:	0049      	lsls	r1, r1, #1
 8002996:	1859      	adds	r1, r3, r1
         RCM_NoInj_array[handle].next = formerNext;
 8002998:	1884      	adds	r4, r0, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 800299a:	794d      	ldrb	r5, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 800299c:	0064      	lsls	r4, r4, #1
 800299e:	191c      	adds	r4, r3, r4
 80029a0:	7165      	strb	r5, [r4, #5]
         RCM_NoInj_array[handle].prev = LastEnable;
 80029a2:	7126      	strb	r6, [r4, #4]
 80029a4:	e791      	b.n	80028ca <RCM_ExecRegularConv+0x5e>
        if (RCM_NoInj_array[i].next > handle)
 80029a6:	2601      	movs	r6, #1
      if (true == RCM_NoInj_array [i].enable)
 80029a8:	2401      	movs	r4, #1
 80029aa:	e785      	b.n	80028b8 <RCM_ExecRegularConv+0x4c>
 80029ac:	7c99      	ldrb	r1, [r3, #18]
 80029ae:	2601      	movs	r6, #1
 80029b0:	2900      	cmp	r1, #0
 80029b2:	d0ec      	beq.n	800298e <RCM_ExecRegularConv+0x122>
 80029b4:	e773      	b.n	800289e <RCM_ExecRegularConv+0x32>
       if (LastEnable != RCM_MAX_CONV )
 80029b6:	2904      	cmp	r1, #4
 80029b8:	d1e9      	bne.n	800298e <RCM_ExecRegularConv+0x122>
         RCM_currentHandle = handle;
 80029ba:	4906      	ldr	r1, [pc, #24]	@ (80029d4 <RCM_ExecRegularConv+0x168>)
 80029bc:	0015      	movs	r5, r2
 80029be:	700a      	strb	r2, [r1, #0]
    while (i < RCM_MAX_CONV)
 80029c0:	e78b      	b.n	80028da <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 80029c2:	2602      	movs	r6, #2
      if (true == RCM_NoInj_array [i].enable)
 80029c4:	2402      	movs	r4, #2
 80029c6:	e777      	b.n	80028b8 <RCM_ExecRegularConv+0x4c>
 80029c8:	2403      	movs	r4, #3
 80029ca:	2603      	movs	r6, #3
 80029cc:	e7e0      	b.n	8002990 <RCM_ExecRegularConv+0x124>
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	2000069c 	.word	0x2000069c
 80029d4:	20000698 	.word	0x20000698
 80029d8:	20000150 	.word	0x20000150
 80029dc:	200006d4 	.word	0x200006d4
 80029e0:	fffff23f 	.word	0xfffff23f
 80029e4:	7fffffe8 	.word	0x7fffffe8

080029e8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80029ea:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <RCM_ExecUserConv+0x50>)
 80029ec:	681c      	ldr	r4, [r3, #0]
 80029ee:	2c00      	cmp	r4, #0
 80029f0:	d004      	beq.n	80029fc <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80029f2:	4d12      	ldr	r5, [pc, #72]	@ (8002a3c <RCM_ExecUserConv+0x54>)
    handle = RCM_UserConvHandle->convHandle;
 80029f4:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80029f6:	782b      	ldrb	r3, [r5, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d000      	beq.n	80029fe <RCM_ExecUserConv+0x16>
  }
  else
  {
     /* Nothing to do */
  }
}
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80029fe:	0020      	movs	r0, r4
 8002a00:	f7ff ff34 	bl	800286c <RCM_ExecRegularConv>
 8002a04:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <RCM_ExecUserConv+0x58>)
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a06:	0072      	lsls	r2, r6, #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002a08:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a0a:	1992      	adds	r2, r2, r6
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <RCM_ExecUserConv+0x5c>)
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	785b      	ldrb	r3, [r3, #1]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002a14:	0001      	movs	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <RCM_ExecUserConv+0x60>)
 8002a20:	00f6      	lsls	r6, r6, #3
 8002a22:	58f7      	ldr	r7, [r6, r3]
 8002a24:	2f00      	cmp	r7, #0
 8002a26:	d0e9      	beq.n	80029fc <RCM_ExecUserConv+0x14>
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002a28:	2200      	movs	r2, #0
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002a2a:	199b      	adds	r3, r3, r6
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002a2c:	702a      	strb	r2, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002a2e:	0020      	movs	r0, r4
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	47b8      	blx	r7
}
 8002a34:	e7e2      	b.n	80029fc <RCM_ExecUserConv+0x14>
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	20000690 	.word	0x20000690
 8002a3c:	20000694 	.word	0x20000694
 8002a40:	20000696 	.word	0x20000696
 8002a44:	2000069c 	.word	0x2000069c
 8002a48:	200006b4 	.word	0x200006b4

08002a4c <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 8002a4c:	b570      	push	{r4, r5, r6, lr}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002a4e:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <RCM_ExecNextConv+0x5c>)
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <RCM_ExecNextConv+0x60>)
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	0053      	lsls	r3, r2, #1
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	5c58      	ldrb	r0, [r3, r1]
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d021      	beq.n	8002aa4 <RCM_ExecNextConv+0x58>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002a60:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002a62:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a64:	4812      	ldr	r0, [pc, #72]	@ (8002ab0 <RCM_ExecNextConv+0x64>)
 8002a66:	0092      	lsls	r2, r2, #2
 8002a68:	5814      	ldr	r4, [r2, r0]
    (void)LL_ADC_REG_SetSequencerChannels(RCM_handle_array[RCM_currentHandle]->regADC,
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002a6a:	18c9      	adds	r1, r1, r3
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002a6c:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002a6e:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002a70:	68d0      	ldr	r0, [r2, #12]
 8002a72:	43b0      	bics	r0, r6
 8002a74:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002a76:	68d0      	ldr	r0, [r2, #12]
 8002a78:	4e0e      	ldr	r6, [pc, #56]	@ (8002ab4 <RCM_ExecNextConv+0x68>)
 8002a7a:	4030      	ands	r0, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002a7c:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8002a7e:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8002a80:	6950      	ldr	r0, [r2, #20]
 8002a82:	43b0      	bics	r0, r6
 8002a84:	68a6      	ldr	r6, [r4, #8]
 8002a86:	4330      	orrs	r0, r6
 8002a88:	6150      	str	r0, [r2, #20]
                                       __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002a8a:	7920      	ldrb	r0, [r4, #4]
 8002a8c:	2401      	movs	r4, #1
 8002a8e:	0026      	movs	r6, r4
 8002a90:	4086      	lsls	r6, r0
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a92:	0370      	lsls	r0, r6, #13
 8002a94:	0b40      	lsrs	r0, r0, #13
 8002a96:	6290      	str	r0, [r2, #40]	@ 0x28
  MODIFY_REG(ADCx->CR,
 8002a98:	6890      	ldr	r0, [r2, #8]
 8002a9a:	4e07      	ldr	r6, [pc, #28]	@ (8002ab8 <RCM_ExecNextConv+0x6c>)
 8002a9c:	4030      	ands	r0, r6
 8002a9e:	4328      	orrs	r0, r5
 8002aa0:	6090      	str	r0, [r2, #8]
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002aa2:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	20000698 	.word	0x20000698
 8002aac:	2000069c 	.word	0x2000069c
 8002ab0:	200006d4 	.word	0x200006d4
 8002ab4:	fffff23f 	.word	0xfffff23f
 8002ab8:	7fffffe8 	.word	0x7fffffe8

08002abc <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002abe:	2702      	movs	r7, #2
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002ac0:	4d11      	ldr	r5, [pc, #68]	@ (8002b08 <RCM_ReadOngoingConv+0x4c>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <RCM_ReadOngoingConv+0x50>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002ac4:	7828      	ldrb	r0, [r5, #0]
 8002ac6:	4912      	ldr	r1, [pc, #72]	@ (8002b10 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002ac8:	0082      	lsls	r2, r0, #2
 8002aca:	58d3      	ldr	r3, [r2, r3]
 8002acc:	681e      	ldr	r6, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002ace:	6833      	ldr	r3, [r6, #0]
 8002ad0:	469c      	mov	ip, r3
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8002ad2:	0043      	lsls	r3, r0, #1
 8002ad4:	181a      	adds	r2, r3, r0
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	188a      	adds	r2, r1, r2
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002ada:	7854      	ldrb	r4, [r2, #1]
 8002adc:	43bc      	bics	r4, r7
 8002ade:	d002      	beq.n	8002ae6 <RCM_ReadOngoingConv+0x2a>
 8002ae0:	4664      	mov	r4, ip
 8002ae2:	0764      	lsls	r4, r4, #29
 8002ae4:	d405      	bmi.n	8002af2 <RCM_ReadOngoingConv+0x36>
    /* Restore back DMA configuration */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002ae6:	181b      	adds	r3, r3, r0
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	18c9      	adds	r1, r1, r3
 8002aec:	794b      	ldrb	r3, [r1, #5]
 8002aee:	702b      	strb	r3, [r5, #0]
}
 8002af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002af2:	6c34      	ldr	r4, [r6, #64]	@ 0x40
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8002af4:	7057      	strb	r7, [r2, #1]
                  = LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);
 8002af6:	8054      	strh	r4, [r2, #2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002af8:	2403      	movs	r4, #3
 8002afa:	68f2      	ldr	r2, [r6, #12]
 8002afc:	43a2      	bics	r2, r4
 8002afe:	3c02      	subs	r4, #2
 8002b00:	4322      	orrs	r2, r4
 8002b02:	60f2      	str	r2, [r6, #12]
}
 8002b04:	e7ef      	b.n	8002ae6 <RCM_ReadOngoingConv+0x2a>
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000698 	.word	0x20000698
 8002b0c:	200006d4 	.word	0x200006d4
 8002b10:	2000069c 	.word	0x2000069c

08002b14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b14:	2201      	movs	r2, #1
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_MspInit+0x2c>)
{
 8002b18:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	6999      	ldr	r1, [r3, #24]
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	6199      	str	r1, [r3, #24]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	0549      	lsls	r1, r1, #21
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	61da      	str	r2, [r3, #28]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	400b      	ands	r3, r1
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3a:	b002      	add	sp, #8
 8002b3c:	4770      	bx	lr
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b44:	b570      	push	{r4, r5, r6, lr}
 8002b46:	0004      	movs	r4, r0
 8002b48:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	2214      	movs	r2, #20
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	a804      	add	r0, sp, #16
 8002b50:	f002 fda6 	bl	80056a0 <memset>
  if(hadc->Instance==ADC1)
 8002b54:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <HAL_ADC_MspInit+0xb0>)
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b5c:	b00a      	add	sp, #40	@ 0x28
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b60:	2180      	movs	r1, #128	@ 0x80
 8002b62:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <HAL_ADC_MspInit+0xb4>)
 8002b64:	0089      	lsls	r1, r1, #2
 8002b66:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b68:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]
 8002b6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002b70:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b72:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	0289      	lsls	r1, r1, #10
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	9202      	str	r2, [sp, #8]
 8002b8c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	02c9      	lsls	r1, r1, #11
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]
 8002b96:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002b98:	2220      	movs	r2, #32
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002ba0:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_Pin;
 8002ba4:	9204      	str	r2, [sp, #16]
 8002ba6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f000 fc50 	bl	800344c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002bac:	2303      	movs	r3, #3
 8002bae:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	4812      	ldr	r0, [pc, #72]	@ (8002bfc <HAL_ADC_MspInit+0xb8>)
 8002bb2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8002bb4:	9204      	str	r2, [sp, #16]
 8002bb6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f000 fc47 	bl	800344c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002bbe:	4d10      	ldr	r5, [pc, #64]	@ (8002c00 <HAL_ADC_MspInit+0xbc>)
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002bc2:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8002bc4:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bca:	3380      	adds	r3, #128	@ 0x80
 8002bcc:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002bd4:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd6:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd8:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002bda:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002bdc:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002bde:	f000 fc01 	bl	80033e4 <HAL_DMA_Init>
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d102      	bne.n	8002bec <HAL_ADC_MspInit+0xa8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002be6:	6325      	str	r5, [r4, #48]	@ 0x30
 8002be8:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002bea:	e7b7      	b.n	8002b5c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002bec:	f7fd fe26 	bl	800083c <Error_Handler>
 8002bf0:	e7f9      	b.n	8002be6 <HAL_ADC_MspInit+0xa2>
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	40012400 	.word	0x40012400
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	48000400 	.word	0x48000400
 8002c00:	20000594 	.word	0x20000594
 8002c04:	40020008 	.word	0x40020008

08002c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0e:	2214      	movs	r2, #20
 8002c10:	2100      	movs	r1, #0
 8002c12:	a804      	add	r0, sp, #16
 8002c14:	f002 fd44 	bl	80056a0 <memset>
  if(hspi->Instance==SPI1)
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_SPI_MspInit+0x88>)
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c20:	b00a      	add	sp, #40	@ 0x28
 8002c22:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c24:	2180      	movs	r1, #128	@ 0x80
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_SPI_MspInit+0x8c>)
 8002c28:	0149      	lsls	r1, r1, #5
 8002c2a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	619a      	str	r2, [r3, #24]
 8002c32:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c34:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c3a:	9201      	str	r2, [sp, #4]
 8002c3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	0289      	lsls	r1, r1, #10
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	9202      	str	r2, [sp, #8]
 8002c50:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	02c9      	lsls	r1, r1, #11
 8002c56:	430a      	orrs	r2, r1
 8002c58:	615a      	str	r2, [r3, #20]
 8002c5a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c5c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	400b      	ands	r3, r1
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c64:	2302      	movs	r3, #2
 8002c66:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c6a:	9204      	str	r2, [sp, #16]
 8002c6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	f000 fbec 	bl	800344c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c74:	2338      	movs	r3, #56	@ 0x38
 8002c76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	3b36      	subs	r3, #54	@ 0x36
 8002c7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	4806      	ldr	r0, [pc, #24]	@ (8002c98 <HAL_SPI_MspInit+0x90>)
 8002c80:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c84:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c86:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f000 fbe0 	bl	800344c <HAL_GPIO_Init>
}
 8002c8c:	e7c8      	b.n	8002c20 <HAL_SPI_MspInit+0x18>
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	40013000 	.word	0x40013000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000400 	.word	0x48000400

08002c9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c9c:	b530      	push	{r4, r5, lr}
 8002c9e:	0004      	movs	r4, r0
 8002ca0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	2214      	movs	r2, #20
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	a802      	add	r0, sp, #8
 8002ca8:	f002 fcfa 	bl	80056a0 <memset>
  if(htim_pwm->Instance==TIM1)
 8002cac:	4b31      	ldr	r3, [pc, #196]	@ (8002d74 <HAL_TIM_PWM_MspInit+0xd8>)
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002cb4:	b009      	add	sp, #36	@ 0x24
 8002cb6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <HAL_TIM_PWM_MspInit+0xdc>)
 8002cbc:	0109      	lsls	r1, r1, #4
 8002cbe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	482e      	ldr	r0, [pc, #184]	@ (8002d7c <HAL_TIM_PWM_MspInit+0xe0>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	619a      	str	r2, [r3, #24]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	02c9      	lsls	r1, r1, #11
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002cda:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	400b      	ands	r3, r1
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	0152      	lsls	r2, r2, #5
 8002ce6:	9202      	str	r2, [sp, #8]
 8002ce8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cea:	2301      	movs	r3, #1
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002cec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	f000 fbaa 	bl	800344c <HAL_GPIO_Init>
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002cf8:	4d21      	ldr	r5, [pc, #132]	@ (8002d80 <HAL_TIM_PWM_MspInit+0xe4>)
 8002cfa:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <HAL_TIM_PWM_MspInit+0xe8>)
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002cfc:	0028      	movs	r0, r5
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8002cfe:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d00:	2310      	movs	r3, #16
 8002d02:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002d08:	3380      	adds	r3, #128	@ 0x80
 8002d0a:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d0c:	3380      	adds	r3, #128	@ 0x80
 8002d0e:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8002d16:	2320      	movs	r3, #32
 8002d18:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8002d1a:	2380      	movs	r3, #128	@ 0x80
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8002d20:	f000 fb60 	bl	80033e4 <HAL_DMA_Init>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d11f      	bne.n	8002d68 <HAL_TIM_PWM_MspInit+0xcc>
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002d28:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <HAL_TIM_PWM_MspInit+0xec>)
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8002d2a:	6325      	str	r5, [r4, #48]	@ 0x30
 8002d2c:	626c      	str	r4, [r5, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8002d2e:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8002d30:	6365      	str	r5, [r4, #52]	@ 0x34
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002d32:	4d16      	ldr	r5, [pc, #88]	@ (8002d8c <HAL_TIM_PWM_MspInit+0xf0>)
 8002d34:	602b      	str	r3, [r5, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d36:	2310      	movs	r3, #16
 8002d38:	606b      	str	r3, [r5, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60ab      	str	r3, [r5, #8]
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002d3e:	3380      	adds	r3, #128	@ 0x80
 8002d40:	60eb      	str	r3, [r5, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d42:	3380      	adds	r3, #128	@ 0x80
 8002d44:	612b      	str	r3, [r5, #16]
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	616b      	str	r3, [r5, #20]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	61ab      	str	r3, [r5, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002d50:	2380      	movs	r3, #128	@ 0x80
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002d52:	0028      	movs	r0, r5
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002d58:	f000 fb44 	bl	80033e4 <HAL_DMA_Init>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_TIM_PWM_MspInit+0xd2>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002d60:	6225      	str	r5, [r4, #32]
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8002d62:	62e5      	str	r5, [r4, #44]	@ 0x2c
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_ch3_up);
 8002d64:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002d66:	e7a5      	b.n	8002cb4 <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 8002d68:	f7fd fd68 	bl	800083c <Error_Handler>
 8002d6c:	e7dc      	b.n	8002d28 <HAL_TIM_PWM_MspInit+0x8c>
      Error_Handler();
 8002d6e:	f7fd fd65 	bl	800083c <Error_Handler>
 8002d72:	e7f5      	b.n	8002d60 <HAL_TIM_PWM_MspInit+0xc4>
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	48000400 	.word	0x48000400
 8002d80:	2000045c 	.word	0x2000045c
 8002d84:	40020044 	.word	0x40020044
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	20000418 	.word	0x20000418

08002d90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	0004      	movs	r4, r0
 8002d94:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	2214      	movs	r2, #20
 8002d98:	2100      	movs	r1, #0
 8002d9a:	a802      	add	r0, sp, #8
 8002d9c:	f002 fc80 	bl	80056a0 <memset>
  if(htim_encoder->Instance==TIM2)
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002daa:	b008      	add	sp, #32
 8002dac:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dae:	2201      	movs	r2, #1
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_TIM_Encoder_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db4:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db8:	4311      	orrs	r1, r2
 8002dba:	61d9      	str	r1, [r3, #28]
 8002dbc:	69d9      	ldr	r1, [r3, #28]
 8002dbe:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc2:	9200      	str	r2, [sp, #0]
 8002dc4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	0289      	lsls	r1, r1, #10
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	615a      	str	r2, [r3, #20]
 8002dce:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002dd0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9202      	str	r2, [sp, #8]
 8002ddc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002dde:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002de2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f000 fb32 	bl	800344c <HAL_GPIO_Init>
}
 8002de8:	e7df      	b.n	8002daa <HAL_TIM_Encoder_MspInit+0x1a>
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df0:	b5d0      	push	{r4, r6, r7, lr}
 8002df2:	0004      	movs	r4, r0
 8002df4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df6:	2214      	movs	r2, #20
 8002df8:	2100      	movs	r1, #0
 8002dfa:	a802      	add	r0, sp, #8
 8002dfc:	f002 fc50 	bl	80056a0 <memset>
  if(htim->Instance==TIM1)
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_TIM_MspPostInit+0x7c>)
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e08:	b008      	add	sp, #32
 8002e0a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0c:	2180      	movs	r1, #128	@ 0x80
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <HAL_TIM_MspPostInit+0x80>)
 8002e10:	02c9      	lsls	r1, r1, #11
 8002e12:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e14:	2601      	movs	r6, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]
 8002e1a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e1c:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	9200      	str	r2, [sp, #0]
 8002e24:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	0289      	lsls	r1, r1, #10
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	615a      	str	r2, [r3, #20]
 8002e2e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e30:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	400b      	ands	r3, r1
 8002e34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e36:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	a902      	add	r1, sp, #8
 8002e40:	480c      	ldr	r0, [pc, #48]	@ (8002e74 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002e42:	9202      	str	r2, [sp, #8]
 8002e44:	9303      	str	r3, [sp, #12]
 8002e46:	9604      	str	r6, [sp, #16]
 8002e48:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e4a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f000 fafe 	bl	800344c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002e50:	22e0      	movs	r2, #224	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002e54:	2302      	movs	r3, #2
 8002e56:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	a902      	add	r1, sp, #8
 8002e5a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002e5c:	9202      	str	r2, [sp, #8]
 8002e5e:	9303      	str	r3, [sp, #12]
 8002e60:	9604      	str	r6, [sp, #16]
 8002e62:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e64:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f000 faf1 	bl	800344c <HAL_GPIO_Init>
}
 8002e6a:	e7cd      	b.n	8002e08 <HAL_TIM_MspPostInit+0x18>
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	48000400 	.word	0x48000400

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b530      	push	{r4, r5, lr}
 8002e7a:	0004      	movs	r4, r0
 8002e7c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7e:	2214      	movs	r2, #20
 8002e80:	2100      	movs	r1, #0
 8002e82:	a802      	add	r0, sp, #8
 8002e84:	f002 fc0c 	bl	80056a0 <memset>
  if(huart->Instance==USART1)
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <HAL_UART_MspInit+0xb0>)
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e90:	b009      	add	sp, #36	@ 0x24
 8002e92:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e94:	2180      	movs	r1, #128	@ 0x80
 8002e96:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <HAL_UART_MspInit+0xb4>)
 8002e98:	01c9      	lsls	r1, r1, #7
 8002e9a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	4824      	ldr	r0, [pc, #144]	@ (8002f30 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	619a      	str	r2, [r3, #24]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea8:	9200      	str	r2, [sp, #0]
 8002eaa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	02c9      	lsls	r1, r1, #11
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002eb6:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	400b      	ands	r3, r1
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002ebe:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002ec2:	9202      	str	r2, [sp, #8]
 8002ec4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	f000 fac1 	bl	800344c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002eca:	4d1a      	ldr	r5, [pc, #104]	@ (8002f34 <HAL_UART_MspInit+0xbc>)
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_UART_MspInit+0xc0>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ece:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002ed0:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ed4:	0028      	movs	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed6:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed8:	60ab      	str	r3, [r5, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eda:	60ea      	str	r2, [r5, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002edc:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ede:	616b      	str	r3, [r5, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ee0:	61ab      	str	r3, [r5, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee2:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ee4:	f000 fa7e 	bl	80033e4 <HAL_DMA_Init>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d116      	bne.n	8002f1a <HAL_UART_MspInit+0xa2>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <HAL_UART_MspInit+0xc4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002eee:	6765      	str	r5, [r4, #116]	@ 0x74
 8002ef0:	626c      	str	r4, [r5, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002ef2:	4d13      	ldr	r5, [pc, #76]	@ (8002f40 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef4:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002ef6:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	606b      	str	r3, [r5, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002efe:	0028      	movs	r0, r5
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f00:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f02:	60ea      	str	r2, [r5, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f04:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f06:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f08:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f0c:	f000 fa6a 	bl	80033e4 <HAL_DMA_Init>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f14:	6725      	str	r5, [r4, #112]	@ 0x70
 8002f16:	626c      	str	r4, [r5, #36]	@ 0x24
}
 8002f18:	e7ba      	b.n	8002e90 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002f1a:	f7fd fc8f 	bl	800083c <Error_Handler>
 8002f1e:	e7e5      	b.n	8002eec <HAL_UART_MspInit+0x74>
      Error_Handler();
 8002f20:	f7fd fc8c 	bl	800083c <Error_Handler>
 8002f24:	e7f6      	b.n	8002f14 <HAL_UART_MspInit+0x9c>
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	48000400 	.word	0x48000400
 8002f34:	2000034c 	.word	0x2000034c
 8002f38:	40020030 	.word	0x40020030
 8002f3c:	4002001c 	.word	0x4002001c
 8002f40:	20000308 	.word	0x20000308

08002f44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <NMI_Handler>
 8002f46:	46c0      	nop			@ (mov r8, r8)

08002f48 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f48:	4770      	bx	lr
 8002f4a:	46c0      	nop			@ (mov r8, r8)

08002f4c <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002f4c:	2207      	movs	r2, #7
{
 8002f4e:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 8002f50:	4b02      	ldr	r3, [pc, #8]	@ (8002f5c <DMA1_Channel1_IRQHandler+0x10>)
 8002f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */
    TSK_HighFrequencyTask();
 8002f54:	f7fe f87c 	bl	8001050 <TSK_HighFrequencyTask>

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	40020000 	.word	0x40020000

08002f60 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002f60:	2301      	movs	r3, #1
/**
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 8002f62:	b510      	push	{r4, lr}
 8002f64:	4c0e      	ldr	r4, [pc, #56]	@ (8002fa0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002f66:	6922      	ldr	r2, [r4, #16]
 8002f68:	4213      	tst	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002f6c:	68e2      	ldr	r2, [r4, #12]
 8002f6e:	4213      	tst	r3, r2
 8002f70:	d10e      	bne.n	8002f90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x40>)
 8002f76:	6919      	ldr	r1, [r3, #16]
 8002f78:	420a      	tst	r2, r1
 8002f7a:	d008      	beq.n	8002f8e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 8002f7c:	68d9      	ldr	r1, [r3, #12]
 8002f7e:	420a      	tst	r2, r1
 8002f80:	d005      	beq.n	8002f8e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002f82:	3a02      	subs	r2, #2
 8002f84:	3aff      	subs	r2, #255	@ 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(TIM1) && LL_TIM_IsEnabledIT_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8002f86:	4807      	ldr	r0, [pc, #28]	@ (8002fa4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8002f88:	611a      	str	r2, [r3, #16]
 8002f8a:	f7fe fb83 	bl	8001694 <PWMC_OCP_Handler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8002f8e:	bd10      	pop	{r4, pc}
    R1_TIM1_UP_IRQHandler(&PWM_Handle_M1);
 8002f90:	4804      	ldr	r0, [pc, #16]	@ (8002fa4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 8002f92:	f7ff fb71 	bl	8002678 <R1_TIM1_UP_IRQHandler>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f96:	2302      	movs	r3, #2
 8002f98:	425b      	negs	r3, r3
 8002f9a:	6123      	str	r3, [r4, #16]
}
 8002f9c:	e7e9      	b.n	8002f72 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12>
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	20000150 	.word	0x20000150

08002fa8 <DMA1_Channel4_5_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002fa8:	2280      	movs	r2, #128	@ 0x80
 8002faa:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8002fac:	0292      	lsls	r2, r2, #10
 8002fae:	6819      	ldr	r1, [r3, #0]
  * @brief  This function handles first motor DMAx TC interrupt request.
  *         Required only for R1 with rep rate > 1
  * @param  None
  */
void DMAx_R1_M1_IRQHandler(void)
{
 8002fb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC5(DMA1))
 8002fb2:	4211      	tst	r1, r2
 8002fb4:	d100      	bne.n	8002fb8 <DMA1_Channel4_5_IRQHandler+0x10>
  }

  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8002fb6:	bd10      	pop	{r4, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8002fb8:	605a      	str	r2, [r3, #4]
    R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8002fba:	4803      	ldr	r0, [pc, #12]	@ (8002fc8 <DMA1_Channel4_5_IRQHandler+0x20>)
 8002fbc:	f7ff fb78 	bl	80026b0 <R1_DMAx_TC_IRQHandler>
}
 8002fc0:	e7f9      	b.n	8002fb6 <DMA1_Channel4_5_IRQHandler+0xe>
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	20000150 	.word	0x20000150

08002fcc <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002fcc:	2201      	movs	r2, #1
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002fce:	4807      	ldr	r0, [pc, #28]	@ (8002fec <TIM2_IRQHandler+0x20>)
{
 8002fd0:	b510      	push	{r4, lr}
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002fd2:	6a03      	ldr	r3, [r0, #32]
 8002fd4:	68d9      	ldr	r1, [r3, #12]
 8002fd6:	420a      	tst	r2, r1
 8002fd8:	d006      	beq.n	8002fe8 <TIM2_IRQHandler+0x1c>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002fda:	6919      	ldr	r1, [r3, #16]
 8002fdc:	420a      	tst	r2, r1
 8002fde:	d003      	beq.n	8002fe8 <TIM2_IRQHandler+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002fe0:	3a03      	subs	r2, #3
 8002fe2:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 8002fe4:	f002 f8f8 	bl	80051d8 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	20000098 	.word	0x20000098

08002ff0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8002ff0:	b510      	push	{r4, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002ff2:	f7fe f917 	bl	8001224 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002ff6:	e7fe      	b.n	8002ff6 <HardFault_Handler+0x6>

08002ff8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002ff8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002ffa:	4c08      	ldr	r4, [pc, #32]	@ (800301c <SysTick_Handler+0x24>)
 8002ffc:	7823      	ldrb	r3, [r4, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d005      	beq.n	800300e <SysTick_Handler+0x16>
  }
  else
  {
    /* Nothing to do */
  }
  SystickDividerCounter ++;
 8003002:	3301      	adds	r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8003008:	f7fe f8fe 	bl	8001208 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800300c:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800300e:	f000 f84d 	bl	80030ac <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003012:	f000 f9e3 	bl	80033dc <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003016:	2301      	movs	r3, #1
 8003018:	e7f5      	b.n	8003006 <SysTick_Handler+0xe>
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	200002f8 	.word	0x200002f8

08003020 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <EXTI4_15_IRQHandler+0x18>)
 8003024:	0212      	lsls	r2, r2, #8
 8003026:	6959      	ldr	r1, [r3, #20]

/**
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI4_15_IRQHandler (void)
{
 8003028:	b510      	push	{r4, lr}
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 800302a:	4211      	tst	r1, r2
 800302c:	d100      	bne.n	8003030 <EXTI4_15_IRQHandler+0x10>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    UI_HandleStartStopButton_cb ();
  }

}
 800302e:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003030:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003032:	f7fe f907 	bl	8001244 <UI_HandleStartStopButton_cb>
}
 8003036:	e7fa      	b.n	800302e <EXTI4_15_IRQHandler+0xe>
 8003038:	40010400 	.word	0x40010400

0800303c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800303c:	4770      	bx	lr
 800303e:	46c0      	nop			@ (mov r8, r8)

08003040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003044:	20fa      	movs	r0, #250	@ 0xfa
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <HAL_InitTick+0x40>)
 8003048:	0080      	lsls	r0, r0, #2
 800304a:	7819      	ldrb	r1, [r3, #0]
 800304c:	f7fd f836 	bl	80000bc <__udivsi3>
 8003050:	4d0c      	ldr	r5, [pc, #48]	@ (8003084 <HAL_InitTick+0x44>)
 8003052:	0001      	movs	r1, r0
 8003054:	6828      	ldr	r0, [r5, #0]
 8003056:	f7fd f831 	bl	80000bc <__udivsi3>
 800305a:	f000 f9a3 	bl	80033a4 <HAL_SYSTICK_Config>
 800305e:	2800      	cmp	r0, #0
 8003060:	d10c      	bne.n	800307c <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003062:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003064:	2c03      	cmp	r4, #3
 8003066:	d900      	bls.n	800306a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8003068:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306a:	3802      	subs	r0, #2
 800306c:	2200      	movs	r2, #0
 800306e:	0021      	movs	r1, r4
 8003070:	f000 f962 	bl	8003338 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <HAL_InitTick+0x48>)
 8003076:	2000      	movs	r0, #0
 8003078:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800307a:	e7f5      	b.n	8003068 <HAL_InitTick+0x28>
    return HAL_ERROR;
 800307c:	2001      	movs	r0, #1
 800307e:	e7f3      	b.n	8003068 <HAL_InitTick+0x28>
 8003080:	20000300 	.word	0x20000300
 8003084:	200002fc 	.word	0x200002fc
 8003088:	20000304 	.word	0x20000304

0800308c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	2110      	movs	r1, #16
 800308e:	4a06      	ldr	r2, [pc, #24]	@ (80030a8 <HAL_Init+0x1c>)
{
 8003090:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003092:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003094:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003096:	430b      	orrs	r3, r1
 8003098:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800309a:	f7ff ffd1 	bl	8003040 <HAL_InitTick>
  HAL_MspInit();
 800309e:	f7ff fd39 	bl	8002b14 <HAL_MspInit>
}
 80030a2:	2000      	movs	r0, #0
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	40022000 	.word	0x40022000

080030ac <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030ac:	4a03      	ldr	r2, [pc, #12]	@ (80030bc <HAL_IncTick+0x10>)
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <HAL_IncTick+0x14>)
 80030b0:	6811      	ldr	r1, [r2, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	185b      	adds	r3, r3, r1
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	4770      	bx	lr
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	200006e4 	.word	0x200006e4
 80030c0:	20000300 	.word	0x20000300

080030c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030c4:	4b01      	ldr	r3, [pc, #4]	@ (80030cc <HAL_GetTick+0x8>)
 80030c6:	6818      	ldr	r0, [r3, #0]
}
 80030c8:	4770      	bx	lr
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	200006e4 	.word	0x200006e4

080030d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 80030d4:	d064      	beq.n	80031a0 <HAL_ADC_Init+0xd0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d068      	beq.n	80031ae <HAL_ADC_Init+0xde>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030de:	06db      	lsls	r3, r3, #27
 80030e0:	d460      	bmi.n	80031a4 <HAL_ADC_Init+0xd4>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80030e6:	075b      	lsls	r3, r3, #29
 80030e8:	d45c      	bmi.n	80031a4 <HAL_ADC_Init+0xd4>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030ec:	4947      	ldr	r1, [pc, #284]	@ (800320c <HAL_ADC_Init+0x13c>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	3106      	adds	r1, #6
 80030f2:	31ff      	adds	r1, #255	@ 0xff
 80030f4:	430b      	orrs	r3, r1
 80030f6:	63a3      	str	r3, [r4, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80030f8:	2303      	movs	r3, #3
 80030fa:	6891      	ldr	r1, [r2, #8]
 80030fc:	400b      	ands	r3, r1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d05b      	beq.n	80031ba <HAL_ADC_Init+0xea>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003102:	2118      	movs	r1, #24
 8003104:	68d3      	ldr	r3, [r2, #12]
 8003106:	438b      	bics	r3, r1
 8003108:	68a1      	ldr	r1, [r4, #8]
 800310a:	430b      	orrs	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800310e:	6913      	ldr	r3, [r2, #16]
 8003110:	6861      	ldr	r1, [r4, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	430b      	orrs	r3, r1
 8003118:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800311a:	68d3      	ldr	r3, [r2, #12]
 800311c:	493c      	ldr	r1, [pc, #240]	@ (8003210 <HAL_ADC_Init+0x140>)
 800311e:	400b      	ands	r3, r1
 8003120:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003122:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003124:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003126:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003128:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312a:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800312c:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800312e:	68e1      	ldr	r1, [r4, #12]
 8003130:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003132:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003134:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003136:	2124      	movs	r1, #36	@ 0x24
 8003138:	5c61      	ldrb	r1, [r4, r1]
 800313a:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800313c:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800313e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003140:	3901      	subs	r1, #1
 8003142:	1e4d      	subs	r5, r1, #1
 8003144:	41a9      	sbcs	r1, r5
 8003146:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003148:	430b      	orrs	r3, r1
 800314a:	6921      	ldr	r1, [r4, #16]
 800314c:	3902      	subs	r1, #2
 800314e:	424d      	negs	r5, r1
 8003150:	4169      	adcs	r1, r5
 8003152:	0089      	lsls	r1, r1, #2
 8003154:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003156:	7ee1      	ldrb	r1, [r4, #27]
 8003158:	2901      	cmp	r1, #1
 800315a:	d03e      	beq.n	80031da <HAL_ADC_Init+0x10a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315c:	20c2      	movs	r0, #194	@ 0xc2
 800315e:	69e1      	ldr	r1, [r4, #28]
 8003160:	30ff      	adds	r0, #255	@ 0xff
 8003162:	4281      	cmp	r1, r0
 8003164:	d002      	beq.n	800316c <HAL_ADC_Init+0x9c>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003166:	6a20      	ldr	r0, [r4, #32]
 8003168:	4301      	orrs	r1, r0
 800316a:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800316c:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800316e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003170:	4319      	orrs	r1, r3
 8003172:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003174:	2180      	movs	r1, #128	@ 0x80
 8003176:	0549      	lsls	r1, r1, #21
 8003178:	428d      	cmp	r5, r1
 800317a:	d025      	beq.n	80031c8 <HAL_ADC_Init+0xf8>
 800317c:	1e69      	subs	r1, r5, #1
 800317e:	2906      	cmp	r1, #6
 8003180:	d922      	bls.n	80031c8 <HAL_ADC_Init+0xf8>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003182:	68d2      	ldr	r2, [r2, #12]
 8003184:	4923      	ldr	r1, [pc, #140]	@ (8003214 <HAL_ADC_Init+0x144>)
 8003186:	400a      	ands	r2, r1
 8003188:	429a      	cmp	r2, r3
 800318a:	d02c      	beq.n	80031e6 <HAL_ADC_Init+0x116>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800318c:	2212      	movs	r2, #18
 800318e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003190:	4393      	bics	r3, r2
 8003192:	3a02      	subs	r2, #2
 8003194:	4313      	orrs	r3, r2
 8003196:	63a3      	str	r3, [r4, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003198:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800319a:	3a0f      	subs	r2, #15
 800319c:	4313      	orrs	r3, r2
 800319e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80031a0:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80031a2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a4:	2210      	movs	r2, #16
 80031a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031a8:	4313      	orrs	r3, r2
 80031aa:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80031ac:	e7f8      	b.n	80031a0 <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 80031ae:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80031b2:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80031b4:	f7ff fcc6 	bl	8002b44 <HAL_ADC_MspInit>
 80031b8:	e790      	b.n	80030dc <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80031ba:	6811      	ldr	r1, [r2, #0]
 80031bc:	420b      	tst	r3, r1
 80031be:	d1ac      	bne.n	800311a <HAL_ADC_Init+0x4a>
 80031c0:	68d3      	ldr	r3, [r2, #12]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	d4a9      	bmi.n	800311a <HAL_ADC_Init+0x4a>
 80031c6:	e79c      	b.n	8003102 <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80031c8:	2107      	movs	r1, #7
 80031ca:	6950      	ldr	r0, [r2, #20]
 80031cc:	4388      	bics	r0, r1
 80031ce:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80031d0:	6950      	ldr	r0, [r2, #20]
 80031d2:	4029      	ands	r1, r5
 80031d4:	4301      	orrs	r1, r0
 80031d6:	6151      	str	r1, [r2, #20]
 80031d8:	e7d3      	b.n	8003182 <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031da:	2800      	cmp	r0, #0
 80031dc:	d10d      	bne.n	80031fa <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031de:	2180      	movs	r1, #128	@ 0x80
 80031e0:	0249      	lsls	r1, r1, #9
 80031e2:	430b      	orrs	r3, r1
 80031e4:	e7ba      	b.n	800315c <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80031e8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80031ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ee:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80031f0:	4393      	bics	r3, r2
 80031f2:	3a02      	subs	r2, #2
 80031f4:	4313      	orrs	r3, r2
 80031f6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80031f8:	e7d3      	b.n	80031a2 <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fa:	2520      	movs	r5, #32
 80031fc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80031fe:	4328      	orrs	r0, r5
 8003200:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003204:	4301      	orrs	r1, r0
 8003206:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8003208:	e7a8      	b.n	800315c <HAL_ADC_Init+0x8c>
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	fffffefd 	.word	0xfffffefd
 8003210:	fffe0219 	.word	0xfffe0219
 8003214:	833fffe7 	.word	0x833fffe7

08003218 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003218:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321a:	2234      	movs	r2, #52	@ 0x34
{
 800321c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003220:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003222:	5c83      	ldrb	r3, [r0, r2]
{
 8003224:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003226:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003228:	2b01      	cmp	r3, #1
 800322a:	d057      	beq.n	80032dc <HAL_ADC_ConfigChannel+0xc4>
 800322c:	2301      	movs	r3, #1
 800322e:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003230:	6802      	ldr	r2, [r0, #0]
 8003232:	6890      	ldr	r0, [r2, #8]
 8003234:	0740      	lsls	r0, r0, #29
 8003236:	d509      	bpl.n	800324c <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 800323a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800323e:	4313      	orrs	r3, r2
 8003240:	63a3      	str	r3, [r4, #56]	@ 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	2334      	movs	r3, #52	@ 0x34
 8003244:	2200      	movs	r2, #0
 8003246:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8003248:	b003      	add	sp, #12
 800324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800324c:	2610      	movs	r6, #16
 800324e:	4276      	negs	r6, r6
 8003250:	46b4      	mov	ip, r6
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003252:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8003254:	4e31      	ldr	r6, [pc, #196]	@ (800331c <HAL_ADC_ConfigChannel+0x104>)
 8003256:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003258:	4083      	lsls	r3, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800325a:	4484      	add	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 800325c:	42b7      	cmp	r7, r6
 800325e:	d025      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x94>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003260:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8003262:	4333      	orrs	r3, r6
 8003264:	6293      	str	r3, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	055b      	lsls	r3, r3, #21
 800326a:	429d      	cmp	r5, r3
 800326c:	d00f      	beq.n	800328e <HAL_ADC_ConfigChannel+0x76>
 800326e:	3d01      	subs	r5, #1
 8003270:	2d06      	cmp	r5, #6
 8003272:	d90c      	bls.n	800328e <HAL_ADC_ConfigChannel+0x76>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003274:	2307      	movs	r3, #7
 8003276:	688d      	ldr	r5, [r1, #8]
 8003278:	6951      	ldr	r1, [r2, #20]
 800327a:	4019      	ands	r1, r3
 800327c:	428d      	cmp	r5, r1
 800327e:	d006      	beq.n	800328e <HAL_ADC_ConfigChannel+0x76>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003280:	6951      	ldr	r1, [r2, #20]
 8003282:	4399      	bics	r1, r3
 8003284:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003286:	6951      	ldr	r1, [r2, #20]
 8003288:	402b      	ands	r3, r5
 800328a:	430b      	orrs	r3, r1
 800328c:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800328e:	4663      	mov	r3, ip
 8003290:	2b02      	cmp	r3, #2
 8003292:	d809      	bhi.n	80032a8 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003294:	4b22      	ldr	r3, [pc, #136]	@ (8003320 <HAL_ADC_ConfigChannel+0x108>)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2810      	cmp	r0, #16
 800329c:	d022      	beq.n	80032e4 <HAL_ADC_ConfigChannel+0xcc>
 800329e:	2811      	cmp	r0, #17
 80032a0:	d037      	beq.n	8003312 <HAL_ADC_ConfigChannel+0xfa>
 80032a2:	0449      	lsls	r1, r1, #17
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	2000      	movs	r0, #0
 80032aa:	e7ca      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032ae:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032b0:	4663      	mov	r3, ip
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032b2:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d8f7      	bhi.n	80032a8 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032b8:	4b19      	ldr	r3, [pc, #100]	@ (8003320 <HAL_ADC_ConfigChannel+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2810      	cmp	r0, #16
 80032be:	d00f      	beq.n	80032e0 <HAL_ADC_ConfigChannel+0xc8>
 80032c0:	3811      	subs	r0, #17
 80032c2:	1e42      	subs	r2, r0, #1
 80032c4:	4190      	sbcs	r0, r2
 80032c6:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_ADC_ConfigChannel+0x10c>)
 80032c8:	4240      	negs	r0, r0
 80032ca:	4010      	ands	r0, r2
 80032cc:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <HAL_ADC_ConfigChannel+0x110>)
 80032ce:	4694      	mov	ip, r2
 80032d0:	4460      	add	r0, ip
 80032d2:	4018      	ands	r0, r3
 80032d4:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_ADC_ConfigChannel+0x108>)
 80032d6:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d8:	2000      	movs	r0, #0
 80032da:	e7b2      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 80032dc:	2002      	movs	r0, #2
 80032de:	e7b3      	b.n	8003248 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032e0:	4812      	ldr	r0, [pc, #72]	@ (800332c <HAL_ADC_ConfigChannel+0x114>)
 80032e2:	e7f6      	b.n	80032d2 <HAL_ADC_ConfigChannel+0xba>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032e4:	0409      	lsls	r1, r1, #16
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_ADC_ConfigChannel+0x118>)
 80032ec:	4911      	ldr	r1, [pc, #68]	@ (8003334 <HAL_ADC_ConfigChannel+0x11c>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f7fc fee4 	bl	80000bc <__udivsi3>
 80032f4:	0083      	lsls	r3, r0, #2
 80032f6:	181b      	adds	r3, r3, r0
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80032fc:	9b01      	ldr	r3, [sp, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0d2      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0x90>
            wait_loop_index--;
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	3b01      	subs	r3, #1
 8003306:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003308:	9b01      	ldr	r3, [sp, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_ConfigChannel+0xea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800330e:	2000      	movs	r0, #0
 8003310:	e797      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003312:	03c9      	lsls	r1, r1, #15
 8003314:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003316:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003318:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800331a:	e792      	b.n	8003242 <HAL_ADC_ConfigChannel+0x2a>
 800331c:	00001001 	.word	0x00001001
 8003320:	40012708 	.word	0x40012708
 8003324:	ff400000 	.word	0xff400000
 8003328:	ffbfffff 	.word	0xffbfffff
 800332c:	ff7fffff 	.word	0xff7fffff
 8003330:	200002fc 	.word	0x200002fc
 8003334:	000f4240 	.word	0x000f4240

08003338 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	22ff      	movs	r2, #255	@ 0xff
 800333a:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333c:	b510      	push	{r4, lr}
 800333e:	0014      	movs	r4, r2
 8003340:	4003      	ands	r3, r0
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003346:	0189      	lsls	r1, r1, #6
 8003348:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800334c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800334e:	2800      	cmp	r0, #0
 8003350:	db0b      	blt.n	800336a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003352:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <HAL_NVIC_SetPriority+0x4c>)
 8003354:	21c0      	movs	r1, #192	@ 0xc0
 8003356:	469c      	mov	ip, r3
 8003358:	0880      	lsrs	r0, r0, #2
 800335a:	0080      	lsls	r0, r0, #2
 800335c:	4460      	add	r0, ip
 800335e:	0089      	lsls	r1, r1, #2
 8003360:	5843      	ldr	r3, [r0, r1]
 8003362:	4023      	ands	r3, r4
 8003364:	4313      	orrs	r3, r2
 8003366:	5043      	str	r3, [r0, r1]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003368:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800336a:	230f      	movs	r3, #15
 800336c:	4906      	ldr	r1, [pc, #24]	@ (8003388 <HAL_NVIC_SetPriority+0x50>)
 800336e:	4003      	ands	r3, r0
 8003370:	468c      	mov	ip, r1
 8003372:	3b08      	subs	r3, #8
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4463      	add	r3, ip
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	400c      	ands	r4, r1
 800337e:	4314      	orrs	r4, r2
 8003380:	61dc      	str	r4, [r3, #28]
 8003382:	e7f1      	b.n	8003368 <HAL_NVIC_SetPriority+0x30>
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800338c:	2800      	cmp	r0, #0
 800338e:	db05      	blt.n	800339c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003390:	221f      	movs	r2, #31
 8003392:	2301      	movs	r3, #1
 8003394:	4002      	ands	r2, r0
 8003396:	4093      	lsls	r3, r2
 8003398:	4a01      	ldr	r2, [pc, #4]	@ (80033a0 <HAL_NVIC_EnableIRQ+0x14>)
 800339a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800339c:	4770      	bx	lr
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	2280      	movs	r2, #128	@ 0x80
 80033a6:	1e43      	subs	r3, r0, #1
 80033a8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80033aa:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d20e      	bcs.n	80033ce <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b4:	4807      	ldr	r0, [pc, #28]	@ (80033d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b8:	6a03      	ldr	r3, [r0, #32]
 80033ba:	0609      	lsls	r1, r1, #24
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	3307      	adds	r3, #7
 80033cc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80033ce:	4770      	bx	lr
 80033d0:	e000e010 	.word	0xe000e010
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80033d8:	4770      	bx	lr
 80033da:	46c0      	nop			@ (mov r8, r8)

080033dc <HAL_SYSTICK_IRQHandler>:
{
 80033dc:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80033de:	f7ff fffb 	bl	80033d8 <HAL_SYSTICK_Callback>
}
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80033e8:	d027      	beq.n	800343a <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ea:	2521      	movs	r5, #33	@ 0x21
 80033ec:	2302      	movs	r3, #2
 80033ee:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033f0:	6800      	ldr	r0, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80033f4:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033f6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033f8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fe:	68e1      	ldr	r1, [r4, #12]
 8003400:	430b      	orrs	r3, r1
 8003402:	6921      	ldr	r1, [r4, #16]
 8003404:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	6961      	ldr	r1, [r4, #20]
 8003408:	430b      	orrs	r3, r1
 800340a:	69a1      	ldr	r1, [r4, #24]
 800340c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800340e:	69e1      	ldr	r1, [r4, #28]
 8003410:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003412:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003414:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_DMA_Init+0x60>)
 8003418:	2114      	movs	r1, #20
 800341a:	469c      	mov	ip, r3
 800341c:	4460      	add	r0, ip
 800341e:	f7fc fe4d 	bl	80000bc <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8003424:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8003426:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800342a:	0080      	lsls	r0, r0, #2
 800342c:	6420      	str	r0, [r4, #64]	@ 0x40
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003430:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8003432:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8003434:	321f      	adds	r2, #31
 8003436:	54a3      	strb	r3, [r4, r2]
}
 8003438:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	e7fc      	b.n	8003438 <HAL_DMA_Init+0x54>
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	ffffc00f 	.word	0xffffc00f
 8003444:	bffdfff8 	.word	0xbffdfff8
 8003448:	40020000 	.word	0x40020000

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46de      	mov	lr, fp
 8003450:	4657      	mov	r7, sl
 8003452:	464e      	mov	r6, r9
 8003454:	4645      	mov	r5, r8
 8003456:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003458:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 800345a:	2300      	movs	r3, #0
{
 800345c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345e:	2c00      	cmp	r4, #0
 8003460:	d06e      	beq.n	8003540 <HAL_GPIO_Init+0xf4>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	4a70      	ldr	r2, [pc, #448]	@ (8003624 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003464:	4e70      	ldr	r6, [pc, #448]	@ (8003628 <HAL_GPIO_Init+0x1dc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003468:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800346a:	2201      	movs	r2, #1
 800346c:	409a      	lsls	r2, r3
 800346e:	4694      	mov	ip, r2
 8003470:	4022      	ands	r2, r4
 8003472:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8003474:	4662      	mov	r2, ip
 8003476:	4214      	tst	r4, r2
 8003478:	d05e      	beq.n	8003538 <HAL_GPIO_Init+0xec>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800347a:	9902      	ldr	r1, [sp, #8]
 800347c:	005d      	lsls	r5, r3, #1
 800347e:	684a      	ldr	r2, [r1, #4]
 8003480:	4692      	mov	sl, r2
 8003482:	2203      	movs	r2, #3
 8003484:	4651      	mov	r1, sl
 8003486:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003488:	2103      	movs	r1, #3
 800348a:	40a9      	lsls	r1, r5
 800348c:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800348e:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003490:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003492:	2f01      	cmp	r7, #1
 8003494:	d95b      	bls.n	800354e <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	2a03      	cmp	r2, #3
 8003498:	d000      	beq.n	800349c <HAL_GPIO_Init+0x50>
 800349a:	e0ae      	b.n	80035fa <HAL_GPIO_Init+0x1ae>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349c:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800349e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034a0:	9901      	ldr	r1, [sp, #4]
 80034a2:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a4:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a6:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 80034a8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034aa:	4652      	mov	r2, sl
 80034ac:	0289      	lsls	r1, r1, #10
 80034ae:	420a      	tst	r2, r1
 80034b0:	d042      	beq.n	8003538 <HAL_GPIO_Init+0xec>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	465a      	mov	r2, fp
 80034b4:	2101      	movs	r1, #1
 80034b6:	465d      	mov	r5, fp
 80034b8:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ba:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034bc:	430a      	orrs	r2, r1
 80034be:	61aa      	str	r2, [r5, #24]
 80034c0:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034c2:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	400a      	ands	r2, r1
 80034c6:	4959      	ldr	r1, [pc, #356]	@ (800362c <HAL_GPIO_Init+0x1e0>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034c8:	401d      	ands	r5, r3
 80034ca:	468c      	mov	ip, r1
 80034cc:	00ad      	lsls	r5, r5, #2
 80034ce:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d0:	9205      	str	r2, [sp, #20]
 80034d2:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80034d4:	089a      	lsrs	r2, r3, #2
 80034d6:	0092      	lsls	r2, r2, #2
 80034d8:	4462      	add	r2, ip
 80034da:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034dc:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034de:	2790      	movs	r7, #144	@ 0x90
 80034e0:	05ff      	lsls	r7, r7, #23
 80034e2:	42b8      	cmp	r0, r7
 80034e4:	d00a      	beq.n	80034fc <HAL_GPIO_Init+0xb0>
 80034e6:	4f52      	ldr	r7, [pc, #328]	@ (8003630 <HAL_GPIO_Init+0x1e4>)
 80034e8:	42b8      	cmp	r0, r7
 80034ea:	d100      	bne.n	80034ee <HAL_GPIO_Init+0xa2>
 80034ec:	e092      	b.n	8003614 <HAL_GPIO_Init+0x1c8>
 80034ee:	4f51      	ldr	r7, [pc, #324]	@ (8003634 <HAL_GPIO_Init+0x1e8>)
 80034f0:	42b8      	cmp	r0, r7
 80034f2:	d100      	bne.n	80034f6 <HAL_GPIO_Init+0xaa>
 80034f4:	e092      	b.n	800361c <HAL_GPIO_Init+0x1d0>
 80034f6:	2705      	movs	r7, #5
 80034f8:	40af      	lsls	r7, r5
 80034fa:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034fc:	2780      	movs	r7, #128	@ 0x80
 80034fe:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003500:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 8003502:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003504:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8003506:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8003508:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350a:	423d      	tst	r5, r7
 800350c:	d000      	beq.n	8003510 <HAL_GPIO_Init+0xc4>
 800350e:	e071      	b.n	80035f4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8003510:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003512:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8003514:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8003516:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003518:	02ad      	lsls	r5, r5, #10
 800351a:	d468      	bmi.n	80035ee <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800351c:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800351e:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 8003520:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 8003522:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003524:	03ad      	lsls	r5, r5, #14
 8003526:	d45f      	bmi.n	80035e8 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8003528:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352a:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 800352c:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 800352e:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003530:	03ed      	lsls	r5, r5, #15
 8003532:	d455      	bmi.n	80035e0 <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8003534:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003536:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003538:	0022      	movs	r2, r4
      }
    }

    position++;
 800353a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353c:	40da      	lsrs	r2, r3
 800353e:	d194      	bne.n	800346a <HAL_GPIO_Init+0x1e>
  } 
}
 8003540:	b007      	add	sp, #28
 8003542:	bcf0      	pop	{r4, r5, r6, r7}
 8003544:	46bb      	mov	fp, r7
 8003546:	46b2      	mov	sl, r6
 8003548:	46a9      	mov	r9, r5
 800354a:	46a0      	mov	r8, r4
 800354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800354e:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003550:	000f      	movs	r7, r1
 8003552:	9901      	ldr	r1, [sp, #4]
 8003554:	400f      	ands	r7, r1
 8003556:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003558:	9f02      	ldr	r7, [sp, #8]
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	000f      	movs	r7, r1
 800355e:	40af      	lsls	r7, r5
 8003560:	46b8      	mov	r8, r7
 8003562:	464f      	mov	r7, r9
 8003564:	4641      	mov	r1, r8
 8003566:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 8003568:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800356a:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356c:	000f      	movs	r7, r1
 800356e:	4661      	mov	r1, ip
 8003570:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003572:	4651      	mov	r1, sl
 8003574:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003576:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003578:	000f      	movs	r7, r1
 800357a:	2101      	movs	r1, #1
 800357c:	400f      	ands	r7, r1
 800357e:	409f      	lsls	r7, r3
 8003580:	46bc      	mov	ip, r7
 8003582:	4647      	mov	r7, r8
 8003584:	4661      	mov	r1, ip
 8003586:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 8003588:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800358a:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800358c:	000f      	movs	r7, r1
 800358e:	9901      	ldr	r1, [sp, #4]
 8003590:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003592:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003594:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003596:	6889      	ldr	r1, [r1, #8]
 8003598:	000f      	movs	r7, r1
 800359a:	40af      	lsls	r7, r5
 800359c:	46bc      	mov	ip, r7
 800359e:	4647      	mov	r7, r8
 80035a0:	4661      	mov	r1, ip
 80035a2:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 80035a4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	2a02      	cmp	r2, #2
 80035a8:	d000      	beq.n	80035ac <HAL_GPIO_Init+0x160>
 80035aa:	e777      	b.n	800349c <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80035ac:	08d9      	lsrs	r1, r3, #3
 80035ae:	0089      	lsls	r1, r1, #2
 80035b0:	468c      	mov	ip, r1
 80035b2:	4484      	add	ip, r0
 80035b4:	4661      	mov	r1, ip
 80035b6:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b8:	2107      	movs	r1, #7
 80035ba:	4019      	ands	r1, r3
 80035bc:	0089      	lsls	r1, r1, #2
 80035be:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80035c0:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c2:	210f      	movs	r1, #15
 80035c4:	4647      	mov	r7, r8
 80035c6:	40b9      	lsls	r1, r7
 80035c8:	9f03      	ldr	r7, [sp, #12]
 80035ca:	438f      	bics	r7, r1
 80035cc:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ce:	4647      	mov	r7, r8
 80035d0:	9902      	ldr	r1, [sp, #8]
 80035d2:	6909      	ldr	r1, [r1, #16]
 80035d4:	40b9      	lsls	r1, r7
 80035d6:	9f03      	ldr	r7, [sp, #12]
 80035d8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80035da:	4661      	mov	r1, ip
 80035dc:	620f      	str	r7, [r1, #32]
 80035de:	e75d      	b.n	800349c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 80035e0:	9900      	ldr	r1, [sp, #0]
 80035e2:	4311      	orrs	r1, r2
 80035e4:	000a      	movs	r2, r1
 80035e6:	e7a6      	b.n	8003536 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 80035e8:	9d00      	ldr	r5, [sp, #0]
 80035ea:	432a      	orrs	r2, r5
 80035ec:	e79d      	b.n	800352a <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 80035ee:	9d00      	ldr	r5, [sp, #0]
 80035f0:	432a      	orrs	r2, r5
 80035f2:	e794      	b.n	800351e <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80035f4:	9d00      	ldr	r5, [sp, #0]
 80035f6:	432a      	orrs	r2, r5
 80035f8:	e78b      	b.n	8003512 <HAL_GPIO_Init+0xc6>
 80035fa:	000f      	movs	r7, r1
        temp = GPIOx->PUPDR;
 80035fc:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035fe:	4039      	ands	r1, r7
 8003600:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003602:	9902      	ldr	r1, [sp, #8]
 8003604:	6889      	ldr	r1, [r1, #8]
 8003606:	40a9      	lsls	r1, r5
 8003608:	468c      	mov	ip, r1
 800360a:	4641      	mov	r1, r8
 800360c:	4667      	mov	r7, ip
 800360e:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 8003610:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003612:	e743      	b.n	800349c <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003614:	2701      	movs	r7, #1
 8003616:	40af      	lsls	r7, r5
 8003618:	4339      	orrs	r1, r7
 800361a:	e76f      	b.n	80034fc <HAL_GPIO_Init+0xb0>
 800361c:	2702      	movs	r7, #2
 800361e:	40af      	lsls	r7, r5
 8003620:	4339      	orrs	r1, r7
 8003622:	e76b      	b.n	80034fc <HAL_GPIO_Init+0xb0>
 8003624:	40021000 	.word	0x40021000
 8003628:	40010400 	.word	0x40010400
 800362c:	40010000 	.word	0x40010000
 8003630:	48000400 	.word	0x48000400
 8003634:	48000800 	.word	0x48000800

08003638 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003638:	2a00      	cmp	r2, #0
 800363a:	d001      	beq.n	8003640 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800363e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003640:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003642:	e7fc      	b.n	800363e <HAL_GPIO_WritePin+0x6>

08003644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	46ce      	mov	lr, r9
 8003648:	4647      	mov	r7, r8
 800364a:	b580      	push	{r7, lr}
 800364c:	0004      	movs	r4, r0
 800364e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	2800      	cmp	r0, #0
 8003652:	d100      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
 8003654:	e0f2      	b.n	800383c <HAL_RCC_OscConfig+0x1f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	6803      	ldr	r3, [r0, #0]
 8003658:	07da      	lsls	r2, r3, #31
 800365a:	d535      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800365c:	210c      	movs	r1, #12
 800365e:	48c3      	ldr	r0, [pc, #780]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003660:	6842      	ldr	r2, [r0, #4]
 8003662:	400a      	ands	r2, r1
 8003664:	2a04      	cmp	r2, #4
 8003666:	d100      	bne.n	800366a <HAL_RCC_OscConfig+0x26>
 8003668:	e101      	b.n	800386e <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800366a:	6842      	ldr	r2, [r0, #4]
 800366c:	4011      	ands	r1, r2
 800366e:	2908      	cmp	r1, #8
 8003670:	d100      	bne.n	8003674 <HAL_RCC_OscConfig+0x30>
 8003672:	e0f8      	b.n	8003866 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d00f      	beq.n	800369a <HAL_RCC_OscConfig+0x56>
 800367a:	2b00      	cmp	r3, #0
 800367c:	d100      	bne.n	8003680 <HAL_RCC_OscConfig+0x3c>
 800367e:	e11e      	b.n	80038be <HAL_RCC_OscConfig+0x27a>
 8003680:	2b05      	cmp	r3, #5
 8003682:	d100      	bne.n	8003686 <HAL_RCC_OscConfig+0x42>
 8003684:	e1a7      	b.n	80039d6 <HAL_RCC_OscConfig+0x392>
 8003686:	4bb9      	ldr	r3, [pc, #740]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003688:	49b9      	ldr	r1, [pc, #740]	@ (8003970 <HAL_RCC_OscConfig+0x32c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	400a      	ands	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	49b8      	ldr	r1, [pc, #736]	@ (8003974 <HAL_RCC_OscConfig+0x330>)
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	e005      	b.n	80036a6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	2380      	movs	r3, #128	@ 0x80
 800369c:	4ab3      	ldr	r2, [pc, #716]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 800369e:	025b      	lsls	r3, r3, #9
 80036a0:	6811      	ldr	r1, [r2, #0]
 80036a2:	430b      	orrs	r3, r1
 80036a4:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7ff fd0d 	bl	80030c4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80036ac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4faf      	ldr	r7, [pc, #700]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80036b0:	02b6      	lsls	r6, r6, #10
 80036b2:	e005      	b.n	80036c0 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7ff fd06 	bl	80030c4 <HAL_GetTick>
 80036b8:	1b40      	subs	r0, r0, r5
 80036ba:	2864      	cmp	r0, #100	@ 0x64
 80036bc:	d900      	bls.n	80036c0 <HAL_RCC_OscConfig+0x7c>
 80036be:	e0fc      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4233      	tst	r3, r6
 80036c4:	d0f6      	beq.n	80036b4 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	079a      	lsls	r2, r3, #30
 80036ca:	d529      	bpl.n	8003720 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036cc:	220c      	movs	r2, #12
 80036ce:	49a7      	ldr	r1, [pc, #668]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80036d0:	6848      	ldr	r0, [r1, #4]
 80036d2:	4202      	tst	r2, r0
 80036d4:	d100      	bne.n	80036d8 <HAL_RCC_OscConfig+0x94>
 80036d6:	e0aa      	b.n	800382e <HAL_RCC_OscConfig+0x1ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80036d8:	6848      	ldr	r0, [r1, #4]
 80036da:	4002      	ands	r2, r0
 80036dc:	2a08      	cmp	r2, #8
 80036de:	d100      	bne.n	80036e2 <HAL_RCC_OscConfig+0x9e>
 80036e0:	e0a1      	b.n	8003826 <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e2:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4da1      	ldr	r5, [pc, #644]	@ (800396c <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d100      	bne.n	80036ec <HAL_RCC_OscConfig+0xa8>
 80036ea:	e11f      	b.n	800392c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80036ec:	2201      	movs	r2, #1
 80036ee:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80036f2:	4313      	orrs	r3, r2
 80036f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036f6:	f7ff fce5 	bl	80030c4 <HAL_GetTick>
 80036fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e005      	b.n	800370a <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff fce1 	bl	80030c4 <HAL_GetTick>
 8003702:	1b80      	subs	r0, r0, r6
 8003704:	2802      	cmp	r0, #2
 8003706:	d900      	bls.n	800370a <HAL_RCC_OscConfig+0xc6>
 8003708:	e0d7      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370a:	682b      	ldr	r3, [r5, #0]
 800370c:	421f      	tst	r7, r3
 800370e:	d0f6      	beq.n	80036fe <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	21f8      	movs	r1, #248	@ 0xf8
 8003712:	682a      	ldr	r2, [r5, #0]
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	438a      	bics	r2, r1
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4313      	orrs	r3, r2
 800371c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	071a      	lsls	r2, r3, #28
 8003722:	d42d      	bmi.n	8003780 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	075a      	lsls	r2, r3, #29
 8003726:	d544      	bpl.n	80037b2 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003728:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372c:	4b8f      	ldr	r3, [pc, #572]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 800372e:	0552      	lsls	r2, r2, #21
 8003730:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003732:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4211      	tst	r1, r2
 8003736:	d108      	bne.n	800374a <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	69d9      	ldr	r1, [r3, #28]
 800373a:	4311      	orrs	r1, r2
 800373c:	61d9      	str	r1, [r3, #28]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4013      	ands	r3, r2
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	2780      	movs	r7, #128	@ 0x80
 800374c:	4e8a      	ldr	r6, [pc, #552]	@ (8003978 <HAL_RCC_OscConfig+0x334>)
 800374e:	007f      	lsls	r7, r7, #1
 8003750:	6833      	ldr	r3, [r6, #0]
 8003752:	423b      	tst	r3, r7
 8003754:	d100      	bne.n	8003758 <HAL_RCC_OscConfig+0x114>
 8003756:	e094      	b.n	8003882 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d100      	bne.n	8003760 <HAL_RCC_OscConfig+0x11c>
 800375e:	e0f8      	b.n	8003952 <HAL_RCC_OscConfig+0x30e>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x122>
 8003764:	e0c4      	b.n	80038f0 <HAL_RCC_OscConfig+0x2ac>
 8003766:	2b05      	cmp	r3, #5
 8003768:	d100      	bne.n	800376c <HAL_RCC_OscConfig+0x128>
 800376a:	e140      	b.n	80039ee <HAL_RCC_OscConfig+0x3aa>
 800376c:	2101      	movs	r1, #1
 800376e:	4b7f      	ldr	r3, [pc, #508]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	438a      	bics	r2, r1
 8003774:	621a      	str	r2, [r3, #32]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	3103      	adds	r1, #3
 800377a:	438a      	bics	r2, r1
 800377c:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377e:	e0ec      	b.n	800395a <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003780:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8003782:	4d7a      	ldr	r5, [pc, #488]	@ (800396c <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003788:	2201      	movs	r2, #1
 800378a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800378e:	4313      	orrs	r3, r2
 8003790:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003792:	f7ff fc97 	bl	80030c4 <HAL_GetTick>
 8003796:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003798:	e005      	b.n	80037a6 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379a:	f7ff fc93 	bl	80030c4 <HAL_GetTick>
 800379e:	1b80      	subs	r0, r0, r6
 80037a0:	2802      	cmp	r0, #2
 80037a2:	d900      	bls.n	80037a6 <HAL_RCC_OscConfig+0x162>
 80037a4:	e089      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80037a8:	421f      	tst	r7, r3
 80037aa:	d0f6      	beq.n	800379a <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	075a      	lsls	r2, r3, #29
 80037b0:	d4ba      	bmi.n	8003728 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037b2:	06db      	lsls	r3, r3, #27
 80037b4:	d512      	bpl.n	80037dc <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037b6:	6963      	ldr	r3, [r4, #20]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d100      	bne.n	80037be <HAL_RCC_OscConfig+0x17a>
 80037bc:	e13c      	b.n	8003a38 <HAL_RCC_OscConfig+0x3f4>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80037be:	3305      	adds	r3, #5
 80037c0:	d000      	beq.n	80037c4 <HAL_RCC_OscConfig+0x180>
 80037c2:	e0e9      	b.n	8003998 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80037c4:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037c6:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80037c8:	4a68      	ldr	r2, [pc, #416]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80037ca:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80037cc:	438b      	bics	r3, r1
 80037ce:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037d0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80037d2:	69a3      	ldr	r3, [r4, #24]
 80037d4:	4381      	bics	r1, r0
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	430b      	orrs	r3, r1
 80037da:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037dc:	6a23      	ldr	r3, [r4, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01b      	beq.n	800381a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e2:	220c      	movs	r2, #12
 80037e4:	4d61      	ldr	r5, [pc, #388]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80037e6:	6869      	ldr	r1, [r5, #4]
 80037e8:	400a      	ands	r2, r1
 80037ea:	2a08      	cmp	r2, #8
 80037ec:	d100      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1ac>
 80037ee:	e108      	b.n	8003a02 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d100      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
 80037f4:	e13e      	b.n	8003a74 <HAL_RCC_OscConfig+0x430>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	682b      	ldr	r3, [r5, #0]
 80037f8:	4a60      	ldr	r2, [pc, #384]	@ (800397c <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80037fc:	4013      	ands	r3, r2
 80037fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003800:	f7ff fc60 	bl	80030c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003804:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8003806:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003808:	e004      	b.n	8003814 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7ff fc5b 	bl	80030c4 <HAL_GetTick>
 800380e:	1b00      	subs	r0, r0, r4
 8003810:	2802      	cmp	r0, #2
 8003812:	d852      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	4233      	tst	r3, r6
 8003818:	d1f7      	bne.n	800380a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800381a:	2000      	movs	r0, #0
}
 800381c:	b003      	add	sp, #12
 800381e:	bcc0      	pop	{r6, r7}
 8003820:	46b9      	mov	r9, r7
 8003822:	46b0      	mov	r8, r6
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003826:	684a      	ldr	r2, [r1, #4]
 8003828:	03d2      	lsls	r2, r2, #15
 800382a:	d500      	bpl.n	800382e <HAL_RCC_OscConfig+0x1ea>
 800382c:	e759      	b.n	80036e2 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4a4f      	ldr	r2, [pc, #316]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	0792      	lsls	r2, r2, #30
 8003834:	d535      	bpl.n	80038a2 <HAL_RCC_OscConfig+0x25e>
 8003836:	68e2      	ldr	r2, [r4, #12]
 8003838:	2a01      	cmp	r2, #1
 800383a:	d032      	beq.n	80038a2 <HAL_RCC_OscConfig+0x25e>
    return HAL_ERROR;
 800383c:	2001      	movs	r0, #1
 800383e:	e7ed      	b.n	800381c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_LSI_DISABLE();
 8003840:	2201      	movs	r2, #1
 8003842:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003846:	4393      	bics	r3, r2
 8003848:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800384a:	f7ff fc3b 	bl	80030c4 <HAL_GetTick>
 800384e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e004      	b.n	800385c <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003852:	f7ff fc37 	bl	80030c4 <HAL_GetTick>
 8003856:	1b80      	subs	r0, r0, r6
 8003858:	2802      	cmp	r0, #2
 800385a:	d82e      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800385e:	421f      	tst	r7, r3
 8003860:	d1f7      	bne.n	8003852 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	e7a3      	b.n	80037ae <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003866:	6842      	ldr	r2, [r0, #4]
 8003868:	03d2      	lsls	r2, r2, #15
 800386a:	d400      	bmi.n	800386e <HAL_RCC_OscConfig+0x22a>
 800386c:	e702      	b.n	8003674 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386e:	4a3f      	ldr	r2, [pc, #252]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	0392      	lsls	r2, r2, #14
 8003874:	d400      	bmi.n	8003878 <HAL_RCC_OscConfig+0x234>
 8003876:	e727      	b.n	80036c8 <HAL_RCC_OscConfig+0x84>
 8003878:	6862      	ldr	r2, [r4, #4]
 800387a:	2a00      	cmp	r2, #0
 800387c:	d000      	beq.n	8003880 <HAL_RCC_OscConfig+0x23c>
 800387e:	e723      	b.n	80036c8 <HAL_RCC_OscConfig+0x84>
 8003880:	e7dc      	b.n	800383c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003882:	6833      	ldr	r3, [r6, #0]
 8003884:	433b      	orrs	r3, r7
 8003886:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003888:	f7ff fc1c 	bl	80030c4 <HAL_GetTick>
 800388c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	e004      	b.n	800389a <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003890:	f7ff fc18 	bl	80030c4 <HAL_GetTick>
 8003894:	1b40      	subs	r0, r0, r5
 8003896:	2864      	cmp	r0, #100	@ 0x64
 8003898:	d80f      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	6833      	ldr	r3, [r6, #0]
 800389c:	423b      	tst	r3, r7
 800389e:	d0f7      	beq.n	8003890 <HAL_RCC_OscConfig+0x24c>
 80038a0:	e75a      	b.n	8003758 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a2:	25f8      	movs	r5, #248	@ 0xf8
 80038a4:	4831      	ldr	r0, [pc, #196]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80038a6:	6922      	ldr	r2, [r4, #16]
 80038a8:	6801      	ldr	r1, [r0, #0]
 80038aa:	00d2      	lsls	r2, r2, #3
 80038ac:	43a9      	bics	r1, r5
 80038ae:	430a      	orrs	r2, r1
 80038b0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	071a      	lsls	r2, r3, #28
 80038b4:	d400      	bmi.n	80038b8 <HAL_RCC_OscConfig+0x274>
 80038b6:	e735      	b.n	8003724 <HAL_RCC_OscConfig+0xe0>
 80038b8:	e762      	b.n	8003780 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80038ba:	2003      	movs	r0, #3
 80038bc:	e7ae      	b.n	800381c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038be:	4d2b      	ldr	r5, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 80038c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003970 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c4:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	4013      	ands	r3, r2
 80038c8:	602b      	str	r3, [r5, #0]
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	4a29      	ldr	r2, [pc, #164]	@ (8003974 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	4013      	ands	r3, r2
 80038d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80038d4:	f7ff fbf6 	bl	80030c4 <HAL_GetTick>
 80038d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038da:	e004      	b.n	80038e6 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038dc:	f7ff fbf2 	bl	80030c4 <HAL_GetTick>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	2864      	cmp	r0, #100	@ 0x64
 80038e4:	d8e9      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	423b      	tst	r3, r7
 80038ea:	d1f7      	bne.n	80038dc <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	e6eb      	b.n	80036c8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	2201      	movs	r2, #1
 80038f2:	4e1e      	ldr	r6, [pc, #120]	@ (800396c <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	4d22      	ldr	r5, [pc, #136]	@ (8003980 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f6:	6a33      	ldr	r3, [r6, #32]
 80038f8:	4393      	bics	r3, r2
 80038fa:	6233      	str	r3, [r6, #32]
 80038fc:	6a33      	ldr	r3, [r6, #32]
 80038fe:	3203      	adds	r2, #3
 8003900:	4393      	bics	r3, r2
 8003902:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003904:	f7ff fbde 	bl	80030c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800390a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	4698      	mov	r8, r3
 800390e:	e004      	b.n	800391a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7ff fbd8 	bl	80030c4 <HAL_GetTick>
 8003914:	1bc0      	subs	r0, r0, r7
 8003916:	42a8      	cmp	r0, r5
 8003918:	d8cf      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	4642      	mov	r2, r8
 800391c:	6a33      	ldr	r3, [r6, #32]
 800391e:	421a      	tst	r2, r3
 8003920:	d1f6      	bne.n	8003910 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8003922:	464b      	mov	r3, r9
 8003924:	2b01      	cmp	r3, #1
 8003926:	d04f      	beq.n	80039c8 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	e742      	b.n	80037b2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 800392c:	2201      	movs	r2, #1
 800392e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003930:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003932:	4393      	bics	r3, r2
 8003934:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003936:	f7ff fbc5 	bl	80030c4 <HAL_GetTick>
 800393a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393c:	e004      	b.n	8003948 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393e:	f7ff fbc1 	bl	80030c4 <HAL_GetTick>
 8003942:	1b80      	subs	r0, r0, r6
 8003944:	2802      	cmp	r0, #2
 8003946:	d8b8      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	421f      	tst	r7, r3
 800394c:	d1f7      	bne.n	800393e <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	e6e6      	b.n	8003720 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003952:	4906      	ldr	r1, [pc, #24]	@ (800396c <HAL_RCC_OscConfig+0x328>)
 8003954:	6a0a      	ldr	r2, [r1, #32]
 8003956:	4313      	orrs	r3, r2
 8003958:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800395a:	f7ff fbb3 	bl	80030c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	4b03      	ldr	r3, [pc, #12]	@ (800396c <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8003960:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	4698      	mov	r8, r3
 8003964:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	4d06      	ldr	r5, [pc, #24]	@ (8003980 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	e011      	b.n	800398e <HAL_RCC_OscConfig+0x34a>
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	40021000 	.word	0x40021000
 8003970:	fffeffff 	.word	0xfffeffff
 8003974:	fffbffff 	.word	0xfffbffff
 8003978:	40007000 	.word	0x40007000
 800397c:	feffffff 	.word	0xfeffffff
 8003980:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7ff fb9e 	bl	80030c4 <HAL_GetTick>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	42a8      	cmp	r0, r5
 800398c:	d895      	bhi.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	4643      	mov	r3, r8
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	421f      	tst	r7, r3
 8003994:	d0f6      	beq.n	8003984 <HAL_RCC_OscConfig+0x340>
 8003996:	e7c4      	b.n	8003922 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003998:	2204      	movs	r2, #4
 800399a:	4d52      	ldr	r5, [pc, #328]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800399c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800399e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039a0:	4313      	orrs	r3, r2
 80039a2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80039a4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039a6:	3a03      	subs	r2, #3
 80039a8:	4393      	bics	r3, r2
 80039aa:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80039ac:	f7ff fb8a 	bl	80030c4 <HAL_GetTick>
 80039b0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039b4:	f7ff fb86 	bl	80030c4 <HAL_GetTick>
 80039b8:	1b80      	subs	r0, r0, r6
 80039ba:	2802      	cmp	r0, #2
 80039bc:	d900      	bls.n	80039c0 <HAL_RCC_OscConfig+0x37c>
 80039be:	e77c      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039c0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80039c2:	421f      	tst	r7, r3
 80039c4:	d1f6      	bne.n	80039b4 <HAL_RCC_OscConfig+0x370>
 80039c6:	e709      	b.n	80037dc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4a46      	ldr	r2, [pc, #280]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
 80039ca:	4947      	ldr	r1, [pc, #284]	@ (8003ae8 <HAL_RCC_OscConfig+0x4a4>)
 80039cc:	69d3      	ldr	r3, [r2, #28]
 80039ce:	400b      	ands	r3, r1
 80039d0:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	e6ed      	b.n	80037b2 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	4b42      	ldr	r3, [pc, #264]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
 80039da:	02d2      	lsls	r2, r2, #11
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	0252      	lsls	r2, r2, #9
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ec:	e65b      	b.n	80036a6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ee:	2104      	movs	r1, #4
 80039f0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	621a      	str	r2, [r3, #32]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	3903      	subs	r1, #3
 80039fc:	430a      	orrs	r2, r1
 80039fe:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a00:	e7ab      	b.n	800395a <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d100      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3c4>
 8003a06:	e719      	b.n	800383c <HAL_RCC_OscConfig+0x1f8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8003a0a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a0e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8003a10:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	401a      	ands	r2, r3
 8003a14:	428a      	cmp	r2, r1
 8003a16:	d000      	beq.n	8003a1a <HAL_RCC_OscConfig+0x3d6>
 8003a18:	e710      	b.n	800383c <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a1a:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a1e:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	428a      	cmp	r2, r1
 8003a22:	d000      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3e2>
 8003a24:	e70a      	b.n	800383c <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a26:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a28:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a2a:	0392      	lsls	r2, r2, #14
 8003a2c:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a2e:	1a18      	subs	r0, r3, r0
 8003a30:	1e43      	subs	r3, r0, #1
 8003a32:	4198      	sbcs	r0, r3
 8003a34:	b2c0      	uxtb	r0, r0
 8003a36:	e6f1      	b.n	800381c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4d2a      	ldr	r5, [pc, #168]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a3c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a3e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a40:	430a      	orrs	r2, r1
 8003a42:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003a44:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a46:	4313      	orrs	r3, r2
 8003a48:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003a4a:	f7ff fb3b 	bl	80030c4 <HAL_GetTick>
 8003a4e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a50:	e005      	b.n	8003a5e <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a52:	f7ff fb37 	bl	80030c4 <HAL_GetTick>
 8003a56:	1b80      	subs	r0, r0, r6
 8003a58:	2802      	cmp	r0, #2
 8003a5a:	d900      	bls.n	8003a5e <HAL_RCC_OscConfig+0x41a>
 8003a5c:	e72d      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a5e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003a60:	421f      	tst	r7, r3
 8003a62:	d0f6      	beq.n	8003a52 <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a64:	21f8      	movs	r1, #248	@ 0xf8
 8003a66:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003a68:	69a3      	ldr	r3, [r4, #24]
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	636b      	str	r3, [r5, #52]	@ 0x34
 8003a72:	e6b3      	b.n	80037dc <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_RCC_OscConfig+0x4a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a78:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a7e:	f7ff fb21 	bl	80030c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003a84:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a86:	e005      	b.n	8003a94 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a88:	f7ff fb1c 	bl	80030c4 <HAL_GetTick>
 8003a8c:	1b80      	subs	r0, r0, r6
 8003a8e:	2802      	cmp	r0, #2
 8003a90:	d900      	bls.n	8003a94 <HAL_RCC_OscConfig+0x450>
 8003a92:	e712      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	423b      	tst	r3, r7
 8003a98:	d1f6      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a9e:	4e11      	ldr	r6, [pc, #68]	@ (8003ae4 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8003aa8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003aaa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003aac:	686a      	ldr	r2, [r5, #4]
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	490f      	ldr	r1, [pc, #60]	@ (8003af0 <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	682a      	ldr	r2, [r5, #0]
 8003abc:	045b      	lsls	r3, r3, #17
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ac2:	f7ff faff 	bl	80030c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac6:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003ac8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aca:	04ad      	lsls	r5, r5, #18
 8003acc:	e005      	b.n	8003ada <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ace:	f7ff faf9 	bl	80030c4 <HAL_GetTick>
 8003ad2:	1b00      	subs	r0, r0, r4
 8003ad4:	2802      	cmp	r0, #2
 8003ad6:	d900      	bls.n	8003ada <HAL_RCC_OscConfig+0x496>
 8003ad8:	e6ef      	b.n	80038ba <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	422b      	tst	r3, r5
 8003ade:	d0f6      	beq.n	8003ace <HAL_RCC_OscConfig+0x48a>
 8003ae0:	e69b      	b.n	800381a <HAL_RCC_OscConfig+0x1d6>
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	efffffff 	.word	0xefffffff
 8003aec:	feffffff 	.word	0xfeffffff
 8003af0:	ffc2ffff 	.word	0xffc2ffff

08003af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	46ce      	mov	lr, r9
 8003af8:	4647      	mov	r7, r8
 8003afa:	0004      	movs	r4, r0
 8003afc:	000d      	movs	r5, r1
 8003afe:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	2301      	movs	r3, #1
 8003b06:	494a      	ldr	r1, [pc, #296]	@ (8003c30 <HAL_RCC_ClockConfig+0x13c>)
 8003b08:	680a      	ldr	r2, [r1, #0]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	42aa      	cmp	r2, r5
 8003b0e:	d20c      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b10:	680a      	ldr	r2, [r1, #0]
 8003b12:	439a      	bics	r2, r3
 8003b14:	432a      	orrs	r2, r5
 8003b16:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b18:	680a      	ldr	r2, [r1, #0]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	42ab      	cmp	r3, r5
 8003b1e:	d004      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003b22:	bcc0      	pop	{r6, r7}
 8003b24:	46b9      	mov	r9, r7
 8003b26:	46b0      	mov	r8, r6
 8003b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	079a      	lsls	r2, r3, #30
 8003b2e:	d50e      	bpl.n	8003b4e <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	075a      	lsls	r2, r3, #29
 8003b32:	d505      	bpl.n	8003b40 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b34:	22e0      	movs	r2, #224	@ 0xe0
 8003b36:	493f      	ldr	r1, [pc, #252]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003b38:	00d2      	lsls	r2, r2, #3
 8003b3a:	6848      	ldr	r0, [r1, #4]
 8003b3c:	4302      	orrs	r2, r0
 8003b3e:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	20f0      	movs	r0, #240	@ 0xf0
 8003b42:	493c      	ldr	r1, [pc, #240]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003b44:	684a      	ldr	r2, [r1, #4]
 8003b46:	4382      	bics	r2, r0
 8003b48:	68a0      	ldr	r0, [r4, #8]
 8003b4a:	4302      	orrs	r2, r0
 8003b4c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	07db      	lsls	r3, r3, #31
 8003b50:	d522      	bpl.n	8003b98 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	d05b      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5c:	2a02      	cmp	r2, #2
 8003b5e:	d056      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	079b      	lsls	r3, r3, #30
 8003b62:	d5dd      	bpl.n	8003b20 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b64:	2103      	movs	r1, #3
 8003b66:	4e33      	ldr	r6, [pc, #204]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003b68:	6873      	ldr	r3, [r6, #4]
 8003b6a:	438b      	bics	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003b70:	f7ff faa8 	bl	80030c4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	230c      	movs	r3, #12
 8003b76:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 8003b7a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e004      	b.n	8003b8a <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7ff faa0 	bl	80030c4 <HAL_GetTick>
 8003b84:	1bc0      	subs	r0, r0, r7
 8003b86:	4548      	cmp	r0, r9
 8003b88:	d847      	bhi.n	8003c1a <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4643      	mov	r3, r8
 8003b8c:	6872      	ldr	r2, [r6, #4]
 8003b8e:	401a      	ands	r2, r3
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1f3      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4a25      	ldr	r2, [pc, #148]	@ (8003c30 <HAL_RCC_ClockConfig+0x13c>)
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	d905      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	438b      	bics	r3, r1
 8003ba8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	4219      	tst	r1, r3
 8003bae:	d1b7      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	075b      	lsls	r3, r3, #29
 8003bb4:	d506      	bpl.n	8003bc4 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003bb8:	4920      	ldr	r1, [pc, #128]	@ (8003c3c <HAL_RCC_ClockConfig+0x148>)
 8003bba:	6853      	ldr	r3, [r2, #4]
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	68e1      	ldr	r1, [r4, #12]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc4:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003bc6:	491b      	ldr	r1, [pc, #108]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003bc8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00e      	beq.n	8003bee <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd0:	481b      	ldr	r0, [pc, #108]	@ (8003c40 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bd2:	4b18      	ldr	r3, [pc, #96]	@ (8003c34 <HAL_RCC_ClockConfig+0x140>)
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c44 <HAL_RCC_ClockConfig+0x150>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	491b      	ldr	r1, [pc, #108]	@ (8003c48 <HAL_RCC_ClockConfig+0x154>)
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	0f1b      	lsrs	r3, r3, #28
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	40d8      	lsrs	r0, r3
 8003be2:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7ff fa2b 	bl	8003040 <HAL_InitTick>
  return HAL_OK;
 8003bea:	2000      	movs	r0, #0
 8003bec:	e799      	b.n	8003b22 <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003bee:	250f      	movs	r5, #15
 8003bf0:	4816      	ldr	r0, [pc, #88]	@ (8003c4c <HAL_RCC_ClockConfig+0x158>)
 8003bf2:	0c93      	lsrs	r3, r2, #18
 8003bf4:	402b      	ands	r3, r5
 8003bf6:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003bf8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bfa:	03d2      	lsls	r2, r2, #15
 8003bfc:	d50f      	bpl.n	8003c1e <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <HAL_RCC_ClockConfig+0x15c>)
 8003c00:	400d      	ands	r5, r1
 8003c02:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c04:	480e      	ldr	r0, [pc, #56]	@ (8003c40 <HAL_RCC_ClockConfig+0x14c>)
 8003c06:	f7fc fa59 	bl	80000bc <__udivsi3>
 8003c0a:	4360      	muls	r0, r4
 8003c0c:	e7e1      	b.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	019b      	lsls	r3, r3, #6
 8003c10:	d4a8      	bmi.n	8003b64 <HAL_RCC_ClockConfig+0x70>
 8003c12:	e785      	b.n	8003b20 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c14:	039b      	lsls	r3, r3, #14
 8003c16:	d4a5      	bmi.n	8003b64 <HAL_RCC_ClockConfig+0x70>
 8003c18:	e782      	b.n	8003b20 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	e781      	b.n	8003b22 <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c1e:	0163      	lsls	r3, r4, #5
 8003c20:	1b1b      	subs	r3, r3, r4
 8003c22:	0198      	lsls	r0, r3, #6
 8003c24:	1ac0      	subs	r0, r0, r3
 8003c26:	00c0      	lsls	r0, r0, #3
 8003c28:	1900      	adds	r0, r0, r4
 8003c2a:	0200      	lsls	r0, r0, #8
 8003c2c:	e7d1      	b.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	40022000 	.word	0x40022000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	00001388 	.word	0x00001388
 8003c3c:	fffff8ff 	.word	0xfffff8ff
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	08005984 	.word	0x08005984
 8003c48:	200002fc 	.word	0x200002fc
 8003c4c:	080059a4 	.word	0x080059a4
 8003c50:	08005994 	.word	0x08005994

08003c54 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8003c54:	2380      	movs	r3, #128	@ 0x80
 8003c56:	4a03      	ldr	r2, [pc, #12]	@ (8003c64 <HAL_RCC_EnableCSS+0x10>)
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	6811      	ldr	r1, [r2, #0]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	4770      	bx	lr
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8003c68:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003c6a:	4910      	ldr	r1, [pc, #64]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x44>)
{
 8003c6c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8003c6e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x12>
      sysclockfreq = HSE_VALUE;
 8003c76:	480e      	ldr	r0, [pc, #56]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c7a:	250f      	movs	r5, #15
 8003c7c:	480d      	ldr	r0, [pc, #52]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003c7e:	0c93      	lsrs	r3, r2, #18
 8003c80:	402b      	ands	r3, r5
 8003c82:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c84:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c86:	03d2      	lsls	r2, r2, #15
 8003c88:	d507      	bpl.n	8003c9a <HAL_RCC_GetSysClockFreq+0x32>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x50>)
 8003c8c:	400d      	ands	r5, r1
 8003c8e:	5d59      	ldrb	r1, [r3, r5]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c90:	4807      	ldr	r0, [pc, #28]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x48>)
 8003c92:	f7fc fa13 	bl	80000bc <__udivsi3>
 8003c96:	4360      	muls	r0, r4
 8003c98:	e7ee      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x10>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c9a:	0162      	lsls	r2, r4, #5
 8003c9c:	1b12      	subs	r2, r2, r4
 8003c9e:	0193      	lsls	r3, r2, #6
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	191b      	adds	r3, r3, r4
 8003ca6:	0218      	lsls	r0, r3, #8
 8003ca8:	e7e6      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x10>
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	080059a4 	.word	0x080059a4
 8003cb8:	08005994 	.word	0x08005994

08003cbc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003cbc:	4b01      	ldr	r3, [pc, #4]	@ (8003cc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
}
 8003cc0:	4770      	bx	lr
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	200002fc 	.word	0x200002fc

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003cca:	4a05      	ldr	r2, [pc, #20]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4905      	ldr	r1, [pc, #20]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003cd0:	055b      	lsls	r3, r3, #21
 8003cd2:	0f5b      	lsrs	r3, r3, #29
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	6810      	ldr	r0, [r2, #0]
 8003cd8:	40d8      	lsrs	r0, r3
}    
 8003cda:	4770      	bx	lr
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	200002fc 	.word	0x200002fc
 8003ce4:	0800597c 	.word	0x0800597c

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	46ce      	mov	lr, r9
 8003cec:	4647      	mov	r7, r8
 8003cee:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf0:	6803      	ldr	r3, [r0, #0]
{
 8003cf2:	0004      	movs	r4, r0
 8003cf4:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf6:	03da      	lsls	r2, r3, #15
 8003cf8:	d530      	bpl.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	2280      	movs	r2, #128	@ 0x80
 8003cfc:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003cfe:	0552      	lsls	r2, r2, #21
 8003d00:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d04:	4211      	tst	r1, r2
 8003d06:	d042      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	2680      	movs	r6, #128	@ 0x80
 8003d0a:	4d3e      	ldr	r5, [pc, #248]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003d0c:	0076      	lsls	r6, r6, #1
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	4233      	tst	r3, r6
 8003d12:	d04a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d14:	4d3a      	ldr	r5, [pc, #232]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d16:	23c0      	movs	r3, #192	@ 0xc0
 8003d18:	6a2a      	ldr	r2, [r5, #32]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d1e:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d20:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d22:	421a      	tst	r2, r3
 8003d24:	d011      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d26:	400b      	ands	r3, r1
 8003d28:	4283      	cmp	r3, r0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d2c:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2e:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d30:	6a2e      	ldr	r6, [r5, #32]
 8003d32:	0240      	lsls	r0, r0, #9
 8003d34:	4330      	orrs	r0, r6
 8003d36:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d38:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3a:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3c:	4e33      	ldr	r6, [pc, #204]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3e:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d40:	4030      	ands	r0, r6
 8003d42:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d44:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d46:	07db      	lsls	r3, r3, #31
 8003d48:	d446      	bmi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d4c:	482e      	ldr	r0, [pc, #184]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003d4e:	6a13      	ldr	r3, [r2, #32]
 8003d50:	4003      	ands	r3, r0
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d56:	2f01      	cmp	r7, #1
 8003d58:	d038      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	07da      	lsls	r2, r3, #31
 8003d5e:	d506      	bpl.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d60:	2003      	movs	r0, #3
 8003d62:	4927      	ldr	r1, [pc, #156]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d64:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003d66:	4382      	bics	r2, r0
 8003d68:	68a0      	ldr	r0, [r4, #8]
 8003d6a:	4302      	orrs	r2, r0
 8003d6c:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	d405      	bmi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x96>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d72:	2000      	movs	r0, #0
}
 8003d74:	b003      	add	sp, #12
 8003d76:	bcc0      	pop	{r6, r7}
 8003d78:	46b9      	mov	r9, r7
 8003d7a:	46b0      	mov	r8, r6
 8003d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7e:	2110      	movs	r1, #16
 8003d80:	4a1f      	ldr	r2, [pc, #124]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d82:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d84:	438b      	bics	r3, r1
 8003d86:	68e1      	ldr	r1, [r4, #12]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d8c:	e7f1      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4d1c      	ldr	r5, [pc, #112]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4311      	orrs	r1, r2
 8003d96:	61d9      	str	r1, [r3, #28]
 8003d98:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8003da4:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4233      	tst	r3, r6
 8003da8:	d1b4      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	4333      	orrs	r3, r6
 8003dae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003db0:	f7ff f988 	bl	80030c4 <HAL_GetTick>
 8003db4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	4233      	tst	r3, r6
 8003dba:	d1ab      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbc:	f7ff f982 	bl	80030c4 <HAL_GetTick>
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	1ac0      	subs	r0, r0, r3
 8003dc4:	2864      	cmp	r0, #100	@ 0x64
 8003dc6:	d9f6      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xce>
          return HAL_TIMEOUT;
 8003dc8:	2003      	movs	r0, #3
 8003dca:	e7d3      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	69d3      	ldr	r3, [r2, #28]
 8003dce:	4910      	ldr	r1, [pc, #64]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003dd0:	400b      	ands	r3, r1
 8003dd2:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	e7c1      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 8003dd8:	f7ff f974 	bl	80030c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	2302      	movs	r3, #2
 8003dde:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
        tickstart = HAL_GetTick();
 8003de2:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7ff f96c 	bl	80030c4 <HAL_GetTick>
 8003dec:	1b80      	subs	r0, r0, r6
 8003dee:	4548      	cmp	r0, r9
 8003df0:	d8ea      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	4642      	mov	r2, r8
 8003df4:	6a2b      	ldr	r3, [r5, #32]
 8003df6:	421a      	tst	r2, r3
 8003df8:	d0f6      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfa:	6861      	ldr	r1, [r4, #4]
 8003dfc:	e7a5      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	fffffcff 	.word	0xfffffcff
 8003e0c:	fffeffff 	.word	0xfffeffff
 8003e10:	efffffff 	.word	0xefffffff
 8003e14:	00001388 	.word	0x00001388

08003e18 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1a:	46ce      	mov	lr, r9
 8003e1c:	4647      	mov	r7, r8
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e22:	466b      	mov	r3, sp
 8003e24:	1cdc      	adds	r4, r3, #3
 8003e26:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003e28:	0016      	movs	r6, r2
 8003e2a:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8003e2c:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003e2e:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e30:	f7ff f948 	bl	80030c4 <HAL_GetTick>
 8003e34:	19f6      	adds	r6, r6, r7
 8003e36:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8003e38:	f7ff f944 	bl	80030c4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e3c:	4643      	mov	r3, r8
 8003e3e:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e40:	4b35      	ldr	r3, [pc, #212]	@ (8003f18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x100>)
  tmp_tickstart = HAL_GetTick();
 8003e42:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	18d2      	adds	r2, r2, r3
 8003e4a:	00d3      	lsls	r3, r2, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	0d1b      	lsrs	r3, r3, #20
 8003e50:	4373      	muls	r3, r6
 8003e52:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e54:	3701      	adds	r7, #1
 8003e56:	d111      	bne.n	8003e7c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
 8003e58:	22c0      	movs	r2, #192	@ 0xc0
 8003e5a:	68ab      	ldr	r3, [r5, #8]
 8003e5c:	00d2      	lsls	r2, r2, #3
 8003e5e:	4213      	tst	r3, r2
 8003e60:	d006      	beq.n	8003e70 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e62:	7b2b      	ldrb	r3, [r5, #12]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e68:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e6a:	68ab      	ldr	r3, [r5, #8]
 8003e6c:	4213      	tst	r3, r2
 8003e6e:	d1f8      	bne.n	8003e62 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
      }
      count--;
    }
  }

  return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	b003      	add	sp, #12
 8003e74:	bcc0      	pop	{r6, r7}
 8003e76:	46b9      	mov	r9, r7
 8003e78:	46b0      	mov	r8, r6
 8003e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8003e7c:	27c0      	movs	r7, #192	@ 0xc0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e7e:	002b      	movs	r3, r5
  while ((hspi->Instance->SR & Fifo) != State)
 8003e80:	00ff      	lsls	r7, r7, #3
 8003e82:	e013      	b.n	8003eac <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      tmpreg8 = *ptmpreg8;
 8003e84:	7b2b      	ldrb	r3, [r5, #12]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8003e8a:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e8c:	f7ff f91a 	bl	80030c4 <HAL_GetTick>
 8003e90:	464b      	mov	r3, r9
 8003e92:	1ac0      	subs	r0, r0, r3
 8003e94:	42b0      	cmp	r0, r6
 8003e96:	d20d      	bcs.n	8003eb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9c>
      if (count == 0U)
 8003e98:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003e9a:	1e5a      	subs	r2, r3, #1
 8003e9c:	4193      	sbcs	r3, r2
 8003e9e:	425b      	negs	r3, r3
 8003ea0:	401e      	ands	r6, r3
      count--;
 8003ea2:	9b01      	ldr	r3, [sp, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	681b      	ldr	r3, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	423b      	tst	r3, r7
 8003eb0:	d1e8      	bne.n	8003e84 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
 8003eb2:	e7dd      	b.n	8003e70 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	21e0      	movs	r1, #224	@ 0xe0
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebe:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec2:	2282      	movs	r2, #130	@ 0x82
 8003ec4:	6849      	ldr	r1, [r1, #4]
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	4291      	cmp	r1, r2
 8003eca:	d015      	beq.n	8003ef8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ecc:	4642      	mov	r2, r8
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ed2:	0189      	lsls	r1, r1, #6
 8003ed4:	428a      	cmp	r2, r1
 8003ed6:	d106      	bne.n	8003ee6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
          SPI_RESET_CRC(hspi);
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	4810      	ldr	r0, [pc, #64]	@ (8003f1c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x104>)
 8003edc:	4001      	ands	r1, r0
 8003ede:	6019      	str	r1, [r3, #0]
 8003ee0:	6819      	ldr	r1, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ee6:	235d      	movs	r3, #93	@ 0x5d
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4641      	mov	r1, r8
 8003eec:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8003ef2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003ef4:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8003ef6:	e7bc      	b.n	8003e72 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef8:	4642      	mov	r2, r8
 8003efa:	2180      	movs	r1, #128	@ 0x80
 8003efc:	6892      	ldr	r2, [r2, #8]
 8003efe:	0209      	lsls	r1, r1, #8
 8003f00:	428a      	cmp	r2, r1
 8003f02:	d003      	beq.n	8003f0c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xf4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	00c9      	lsls	r1, r1, #3
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d1df      	bne.n	8003ecc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb4>
          __HAL_SPI_DISABLE(hspi);
 8003f0c:	2140      	movs	r1, #64	@ 0x40
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e7da      	b.n	8003ecc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb4>
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	200002fc 	.word	0x200002fc
 8003f1c:	ffffdfff 	.word	0xffffdfff

08003f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	46de      	mov	lr, fp
 8003f24:	4657      	mov	r7, sl
 8003f26:	464e      	mov	r6, r9
 8003f28:	4645      	mov	r5, r8
 8003f2a:	b5e0      	push	{r5, r6, r7, lr}
 8003f2c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8003f2e:	466b      	mov	r3, sp
{
 8003f30:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8003f32:	2200      	movs	r2, #0
{
 8003f34:	000e      	movs	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8003f36:	71da      	strb	r2, [r3, #7]
{
 8003f38:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3a:	f7ff f8c3 	bl	80030c4 <HAL_GetTick>
 8003f3e:	19f3      	adds	r3, r6, r7
 8003f40:	1a1d      	subs	r5, r3, r0
 8003f42:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8003f44:	f7ff f8be 	bl	80030c4 <HAL_GetTick>
  while ((hspi->Instance->SR & Fifo) != State)
 8003f48:	21c0      	movs	r1, #192	@ 0xc0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <SPI_EndRxTxTransaction+0x15c>)
  tmp_tickstart = HAL_GetTick();
 8003f4c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f4e:	4699      	mov	r9, r3
 8003f50:	681b      	ldr	r3, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f52:	0149      	lsls	r1, r1, #5
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	18d2      	adds	r2, r2, r3
 8003f58:	00d3      	lsls	r3, r2, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	0d1b      	lsrs	r3, r3, #20
 8003f5e:	436b      	muls	r3, r5
  while ((hspi->Instance->SR & Fifo) != State)
 8003f60:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f62:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f64:	1c73      	adds	r3, r6, #1
 8003f66:	d000      	beq.n	8003f6a <SPI_EndRxTxTransaction+0x4a>
 8003f68:	e070      	b.n	800404c <SPI_EndRxTxTransaction+0x12c>
 8003f6a:	6893      	ldr	r3, [r2, #8]
 8003f6c:	420b      	tst	r3, r1
 8003f6e:	d1fc      	bne.n	8003f6a <SPI_EndRxTxTransaction+0x4a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f70:	f7ff f8a8 	bl	80030c4 <HAL_GetTick>
 8003f74:	4653      	mov	r3, sl
 8003f76:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003f78:	f7ff f8a4 	bl	80030c4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8003f80:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	0d1b      	lsrs	r3, r3, #20
 8003f86:	436b      	muls	r3, r5
 8003f88:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	4699      	mov	r9, r3
 8003f90:	1c73      	adds	r3, r6, #1
 8003f92:	d120      	bne.n	8003fd6 <SPI_EndRxTxTransaction+0xb6>
 8003f94:	2180      	movs	r1, #128	@ 0x80
 8003f96:	6893      	ldr	r3, [r2, #8]
 8003f98:	4219      	tst	r1, r3
 8003f9a:	d1fc      	bne.n	8003f96 <SPI_EndRxTxTransaction+0x76>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f9c:	003a      	movs	r2, r7
 8003f9e:	0031      	movs	r1, r6
 8003fa0:	0020      	movs	r0, r4
 8003fa2:	f7ff ff39 	bl	8003e18 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d11a      	bne.n	8003fe0 <SPI_EndRxTxTransaction+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003faa:	b005      	add	sp, #20
 8003fac:	bcf0      	pop	{r4, r5, r6, r7}
 8003fae:	46bb      	mov	fp, r7
 8003fb0:	46b2      	mov	sl, r6
 8003fb2:	46a9      	mov	r9, r5
 8003fb4:	46a0      	mov	r8, r4
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fb8:	f7ff f884 	bl	80030c4 <HAL_GetTick>
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	1ac0      	subs	r0, r0, r3
 8003fc0:	4285      	cmp	r5, r0
 8003fc2:	d913      	bls.n	8003fec <SPI_EndRxTxTransaction+0xcc>
      if (count == 0U)
 8003fc4:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	4193      	sbcs	r3, r2
 8003fca:	425b      	negs	r3, r3
 8003fcc:	401d      	ands	r5, r3
      count--;
 8003fce:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd0:	6822      	ldr	r2, [r4, #0]
      count--;
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd6:	6893      	ldr	r3, [r2, #8]
 8003fd8:	464a      	mov	r2, r9
 8003fda:	421a      	tst	r2, r3
 8003fdc:	d1ec      	bne.n	8003fb8 <SPI_EndRxTxTransaction+0x98>
 8003fde:	e7dd      	b.n	8003f9c <SPI_EndRxTxTransaction+0x7c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fe4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fea:	e7de      	b.n	8003faa <SPI_EndRxTxTransaction+0x8a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fec:	21e0      	movs	r1, #224	@ 0xe0
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff6:	2282      	movs	r2, #130	@ 0x82
 8003ff8:	6861      	ldr	r1, [r4, #4]
 8003ffa:	0052      	lsls	r2, r2, #1
 8003ffc:	4291      	cmp	r1, r2
 8003ffe:	d017      	beq.n	8004030 <SPI_EndRxTxTransaction+0x110>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004000:	2180      	movs	r1, #128	@ 0x80
 8004002:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004004:	0189      	lsls	r1, r1, #6
 8004006:	428a      	cmp	r2, r1
 8004008:	d106      	bne.n	8004018 <SPI_EndRxTxTransaction+0xf8>
          SPI_RESET_CRC(hspi);
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	481c      	ldr	r0, [pc, #112]	@ (8004080 <SPI_EndRxTxTransaction+0x160>)
 800400e:	4001      	ands	r1, r0
 8004010:	6019      	str	r1, [r3, #0]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004018:	235d      	movs	r3, #93	@ 0x5d
 800401a:	2201      	movs	r2, #1
 800401c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 800401e:	2200      	movs	r2, #0
 8004020:	3b01      	subs	r3, #1
 8004022:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004024:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004026:	3220      	adds	r2, #32
 8004028:	4313      	orrs	r3, r2
    return HAL_TIMEOUT;
 800402a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800402e:	e7bc      	b.n	8003faa <SPI_EndRxTxTransaction+0x8a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	68a2      	ldr	r2, [r4, #8]
 8004034:	0209      	lsls	r1, r1, #8
 8004036:	428a      	cmp	r2, r1
 8004038:	d003      	beq.n	8004042 <SPI_EndRxTxTransaction+0x122>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403a:	2180      	movs	r1, #128	@ 0x80
 800403c:	00c9      	lsls	r1, r1, #3
 800403e:	428a      	cmp	r2, r1
 8004040:	d1de      	bne.n	8004000 <SPI_EndRxTxTransaction+0xe0>
          __HAL_SPI_DISABLE(hspi);
 8004042:	2140      	movs	r1, #64	@ 0x40
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	438a      	bics	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e7d9      	b.n	8004000 <SPI_EndRxTxTransaction+0xe0>
  while ((hspi->Instance->SR & Fifo) != State)
 800404c:	23c0      	movs	r3, #192	@ 0xc0
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	469b      	mov	fp, r3
 8004052:	e00e      	b.n	8004072 <SPI_EndRxTxTransaction+0x152>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004054:	f7ff f836 	bl	80030c4 <HAL_GetTick>
 8004058:	4643      	mov	r3, r8
 800405a:	1ac0      	subs	r0, r0, r3
 800405c:	4285      	cmp	r5, r0
 800405e:	d9c5      	bls.n	8003fec <SPI_EndRxTxTransaction+0xcc>
      if (count == 0U)
 8004060:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	4193      	sbcs	r3, r2
 8004066:	425b      	negs	r3, r3
 8004068:	401d      	ands	r5, r3
      count--;
 800406a:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 800406c:	6822      	ldr	r2, [r4, #0]
      count--;
 800406e:	3b01      	subs	r3, #1
 8004070:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8004072:	6893      	ldr	r3, [r2, #8]
 8004074:	465a      	mov	r2, fp
 8004076:	4213      	tst	r3, r2
 8004078:	d1ec      	bne.n	8004054 <SPI_EndRxTxTransaction+0x134>
 800407a:	e779      	b.n	8003f70 <SPI_EndRxTxTransaction+0x50>
 800407c:	200002fc 	.word	0x200002fc
 8004080:	ffffdfff 	.word	0xffffdfff

08004084 <HAL_SPI_Init>:
{
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	46de      	mov	lr, fp
 8004088:	4657      	mov	r7, sl
 800408a:	464e      	mov	r6, r9
 800408c:	4645      	mov	r5, r8
 800408e:	0004      	movs	r4, r0
 8004090:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8004092:	2800      	cmp	r0, #0
 8004094:	d100      	bne.n	8004098 <HAL_SPI_Init+0x14>
 8004096:	e093      	b.n	80041c0 <HAL_SPI_Init+0x13c>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004098:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 800409a:	2d00      	cmp	r5, #0
 800409c:	d069      	beq.n	8004172 <HAL_SPI_Init+0xee>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800409e:	2300      	movs	r3, #0
 80040a0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040a2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a8:	335d      	adds	r3, #93	@ 0x5d
 80040aa:	5ce3      	ldrb	r3, [r4, r3]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d06c      	beq.n	800418c <HAL_SPI_Init+0x108>
  hspi->State = HAL_SPI_STATE_BUSY;
 80040b2:	235d      	movs	r3, #93	@ 0x5d
 80040b4:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80040b6:	2140      	movs	r1, #64	@ 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80040b8:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	6813      	ldr	r3, [r2, #0]
 80040be:	438b      	bics	r3, r1
 80040c0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c2:	23e0      	movs	r3, #224	@ 0xe0
 80040c4:	68e1      	ldr	r1, [r4, #12]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4299      	cmp	r1, r3
 80040ca:	d866      	bhi.n	800419a <HAL_SPI_Init+0x116>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040cc:	d000      	beq.n	80040d0 <HAL_SPI_Init+0x4c>
 80040ce:	e070      	b.n	80041b2 <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040dc:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040de:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e0:	2682      	movs	r6, #130	@ 0x82
 80040e2:	2784      	movs	r7, #132	@ 0x84
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	0076      	lsls	r6, r6, #1
 80040e8:	4033      	ands	r3, r6
 80040ea:	68a6      	ldr	r6, [r4, #8]
 80040ec:	023f      	lsls	r7, r7, #8
 80040ee:	403e      	ands	r6, r7
 80040f0:	2702      	movs	r7, #2
 80040f2:	4333      	orrs	r3, r6
 80040f4:	6926      	ldr	r6, [r4, #16]
 80040f6:	69a0      	ldr	r0, [r4, #24]
 80040f8:	403e      	ands	r6, r7
 80040fa:	4333      	orrs	r3, r6
 80040fc:	2601      	movs	r6, #1
 80040fe:	6967      	ldr	r7, [r4, #20]
 8004100:	46b2      	mov	sl, r6
 8004102:	4037      	ands	r7, r6
 8004104:	433b      	orrs	r3, r7
 8004106:	2780      	movs	r7, #128	@ 0x80
 8004108:	00bf      	lsls	r7, r7, #2
 800410a:	4007      	ands	r7, r0
 800410c:	433b      	orrs	r3, r7
 800410e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004110:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004112:	46b8      	mov	r8, r7
 8004114:	2738      	movs	r7, #56	@ 0x38
 8004116:	46b9      	mov	r9, r7
 8004118:	4647      	mov	r7, r8
 800411a:	464e      	mov	r6, r9
 800411c:	4037      	ands	r7, r6
 800411e:	6a26      	ldr	r6, [r4, #32]
 8004120:	433b      	orrs	r3, r7
 8004122:	46b0      	mov	r8, r6
 8004124:	2680      	movs	r6, #128	@ 0x80
 8004126:	4647      	mov	r7, r8
 8004128:	4037      	ands	r7, r6
 800412a:	4666      	mov	r6, ip
 800412c:	433b      	orrs	r3, r7
 800412e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004130:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004132:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004136:	4033      	ands	r3, r6
 8004138:	26f0      	movs	r6, #240	@ 0xf0
 800413a:	0136      	lsls	r6, r6, #4
 800413c:	4031      	ands	r1, r6
 800413e:	4319      	orrs	r1, r3
 8004140:	2304      	movs	r3, #4
 8004142:	4003      	ands	r3, r0
 8004144:	4319      	orrs	r1, r3
 8004146:	2310      	movs	r3, #16
 8004148:	402b      	ands	r3, r5
 800414a:	4319      	orrs	r1, r3
 800414c:	465b      	mov	r3, fp
 800414e:	4319      	orrs	r1, r3
 8004150:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004152:	69d3      	ldr	r3, [r2, #28]
 8004154:	491d      	ldr	r1, [pc, #116]	@ (80041cc <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8004156:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004158:	400b      	ands	r3, r1
 800415a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415c:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800415e:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004160:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004162:	335d      	adds	r3, #93	@ 0x5d
 8004164:	54e2      	strb	r2, [r4, r3]
}
 8004166:	bcf0      	pop	{r4, r5, r6, r7}
 8004168:	46bb      	mov	fp, r7
 800416a:	46b2      	mov	sl, r6
 800416c:	46a9      	mov	r9, r5
 800416e:	46a0      	mov	r8, r4
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004172:	2382      	movs	r3, #130	@ 0x82
 8004174:	6842      	ldr	r2, [r0, #4]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	429a      	cmp	r2, r3
 800417a:	d093      	beq.n	80040a4 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417c:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800417e:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004180:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004182:	335d      	adds	r3, #93	@ 0x5d
 8004184:	5ce3      	ldrb	r3, [r4, r3]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d192      	bne.n	80040b2 <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 800418c:	335c      	adds	r3, #92	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800418e:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004190:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8004192:	f7fe fd39 	bl	8002c08 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004196:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004198:	e78b      	b.n	80040b2 <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800419a:	23f0      	movs	r3, #240	@ 0xf0
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4299      	cmp	r1, r3
 80041a0:	d110      	bne.n	80041c4 <HAL_SPI_Init+0x140>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80041a6:	019b      	lsls	r3, r3, #6
 80041a8:	4018      	ands	r0, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041aa:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ac:	4684      	mov	ip, r0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ae:	469b      	mov	fp, r3
 80041b0:	e796      	b.n	80040e0 <HAL_SPI_Init+0x5c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	015b      	lsls	r3, r3, #5
 80041b6:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	469c      	mov	ip, r3
 80041bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041be:	e78f      	b.n	80040e0 <HAL_SPI_Init+0x5c>
    return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e7d0      	b.n	8004166 <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041c4:	2300      	movs	r3, #0
 80041c6:	469b      	mov	fp, r3
 80041c8:	e7f6      	b.n	80041b8 <HAL_SPI_Init+0x134>
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	fffff7ff 	.word	0xfffff7ff

080041d0 <HAL_SPI_TransmitReceive>:
{
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	4647      	mov	r7, r8
 80041d4:	46ce      	mov	lr, r9
 80041d6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80041d8:	235c      	movs	r3, #92	@ 0x5c
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80041de:	5cc2      	ldrb	r2, [r0, r3]
{
 80041e0:	0004      	movs	r4, r0
 80041e2:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80041e4:	2a01      	cmp	r2, #1
 80041e6:	d100      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x1a>
 80041e8:	e09d      	b.n	8004326 <HAL_SPI_TransmitReceive+0x156>
 80041ea:	2201      	movs	r2, #1
 80041ec:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80041ee:	f7fe ff69 	bl	80030c4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80041f2:	235d      	movs	r3, #93	@ 0x5d
 80041f4:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 80041f6:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 80041f8:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80041fa:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d010      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x52>
 8004200:	2382      	movs	r3, #130	@ 0x82
    errorcode = HAL_BUSY;
 8004202:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	429a      	cmp	r2, r3
 8004208:	d006      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x48>
  __HAL_UNLOCK(hspi);
 800420a:	235c      	movs	r3, #92	@ 0x5c
 800420c:	2200      	movs	r2, #0
 800420e:	54e2      	strb	r2, [r4, r3]
}
 8004210:	bcc0      	pop	{r6, r7}
 8004212:	46b9      	mov	r9, r7
 8004214:	46b0      	mov	r8, r6
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f5      	bne.n	800420a <HAL_SPI_TransmitReceive+0x3a>
 800421e:	2904      	cmp	r1, #4
 8004220:	d1f3      	bne.n	800420a <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004222:	2f00      	cmp	r7, #0
 8004224:	d100      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x58>
 8004226:	e07c      	b.n	8004322 <HAL_SPI_TransmitReceive+0x152>
 8004228:	4643      	mov	r3, r8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d100      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x60>
 800422e:	e078      	b.n	8004322 <HAL_SPI_TransmitReceive+0x152>
 8004230:	2d00      	cmp	r5, #0
 8004232:	d076      	beq.n	8004322 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004234:	235d      	movs	r3, #93	@ 0x5d
 8004236:	5ce1      	ldrb	r1, [r4, r3]
 8004238:	2904      	cmp	r1, #4
 800423a:	d001      	beq.n	8004240 <HAL_SPI_TransmitReceive+0x70>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800423c:	2105      	movs	r1, #5
 800423e:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004240:	4641      	mov	r1, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004242:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004244:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004246:	2146      	movs	r1, #70	@ 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004248:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 800424a:	5265      	strh	r5, [r4, r1]
  hspi->RxXferSize  = Size;
 800424c:	3902      	subs	r1, #2
 800424e:	5265      	strh	r5, [r4, r1]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004250:	21e0      	movs	r1, #224	@ 0xe0
 8004252:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8004254:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004256:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004258:	63a7      	str	r7, [r4, #56]	@ 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800425a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 800425c:	87e5      	strh	r5, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800425e:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004260:	00c9      	lsls	r1, r1, #3
 8004262:	4288      	cmp	r0, r1
 8004264:	d961      	bls.n	800432a <HAL_SPI_TransmitReceive+0x15a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	487f      	ldr	r0, [pc, #508]	@ (8004468 <HAL_SPI_TransmitReceive+0x298>)
 800426a:	4001      	ands	r1, r0
 800426c:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426e:	2140      	movs	r1, #64	@ 0x40
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	4201      	tst	r1, r0
 8004274:	d102      	bne.n	800427c <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	4301      	orrs	r1, r0
 800427a:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	2a00      	cmp	r2, #0
 800427e:	d000      	beq.n	8004282 <HAL_SPI_TransmitReceive+0xb2>
 8004280:	e0af      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x212>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004282:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004286:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8004288:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800428a:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800428c:	3b01      	subs	r3, #1
 800428e:	b29b      	uxth	r3, r3
 8004290:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004292:	9b08      	ldr	r3, [sp, #32]
 8004294:	3301      	adds	r3, #1
 8004296:	d000      	beq.n	800429a <HAL_SPI_TransmitReceive+0xca>
 8004298:	e0ab      	b.n	80043f2 <HAL_SPI_TransmitReceive+0x222>
{
 800429a:	2301      	movs	r3, #1
 800429c:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429e:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a0:	2746      	movs	r7, #70	@ 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a2:	4698      	mov	r8, r3
 80042a4:	e02a      	b.n	80042fc <HAL_SPI_TransmitReceive+0x12c>
 80042a6:	4641      	mov	r1, r8
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	4211      	tst	r1, r2
 80042ae:	d010      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x102>
 80042b0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d00d      	beq.n	80042d2 <HAL_SPI_TransmitReceive+0x102>
 80042b6:	464a      	mov	r2, r9
 80042b8:	2a01      	cmp	r2, #1
 80042ba:	d108      	bne.n	80042ce <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80042be:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c0:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c2:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c4:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80042c6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80042c8:	3a01      	subs	r2, #1
 80042ca:	b292      	uxth	r2, r2
 80042cc:	87e2      	strh	r2, [r4, #62]	@ 0x3e
{
 80042ce:	2200      	movs	r2, #0
 80042d0:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042d2:	2501      	movs	r5, #1
 80042d4:	002a      	movs	r2, r5
 80042d6:	6899      	ldr	r1, [r3, #8]
 80042d8:	400a      	ands	r2, r1
 80042da:	420d      	tst	r5, r1
 80042dc:	d00c      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x128>
 80042de:	5be1      	ldrh	r1, [r4, r7]
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80042e4:	4691      	mov	r9, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e6:	68d9      	ldr	r1, [r3, #12]
 80042e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042ea:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ec:	3302      	adds	r3, #2
 80042ee:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80042f0:	5be3      	ldrh	r3, [r4, r7]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042f8:	f7fe fee4 	bl	80030c4 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d1      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0xd6>
 8004302:	5be3      	ldrh	r3, [r4, r7]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ce      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004308:	0032      	movs	r2, r6
 800430a:	0020      	movs	r0, r4
 800430c:	9908      	ldr	r1, [sp, #32]
 800430e:	f7ff fe07 	bl	8003f20 <SPI_EndRxTxTransaction>
 8004312:	2800      	cmp	r0, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_TransmitReceive+0x14c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004316:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8004318:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800431a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	e771      	b.n	800420a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8004326:	2002      	movs	r0, #2
 8004328:	e772      	b.n	8004210 <HAL_SPI_TransmitReceive+0x40>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800432a:	2180      	movs	r1, #128	@ 0x80
 800432c:	6858      	ldr	r0, [r3, #4]
 800432e:	0149      	lsls	r1, r1, #5
 8004330:	4301      	orrs	r1, r0
 8004332:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004334:	2140      	movs	r1, #64	@ 0x40
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	4201      	tst	r1, r0
 800433a:	d102      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x172>
    __HAL_SPI_ENABLE(hspi);
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	4301      	orrs	r1, r0
 8004340:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004342:	2a00      	cmp	r2, #0
 8004344:	d14a      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x20c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004346:	783a      	ldrb	r2, [r7, #0]
 8004348:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800434a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800434c:	3301      	adds	r3, #1
 800434e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004350:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004352:	3b01      	subs	r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004358:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435a:	2546      	movs	r5, #70	@ 0x46
        txallowed = 1U;
 800435c:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435e:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004360:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_SPI_TransmitReceive+0x19c>
 8004366:	5b63      	ldrh	r3, [r4, r5]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0cd      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x138>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	4217      	tst	r7, r2
 8004372:	d012      	beq.n	800439a <HAL_SPI_TransmitReceive+0x1ca>
 8004374:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004376:	2a00      	cmp	r2, #0
 8004378:	d00f      	beq.n	800439a <HAL_SPI_TransmitReceive+0x1ca>
 800437a:	4642      	mov	r2, r8
 800437c:	2a01      	cmp	r2, #1
 800437e:	d10c      	bne.n	800439a <HAL_SPI_TransmitReceive+0x1ca>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004380:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8004386:	2200      	movs	r2, #0
 8004388:	4690      	mov	r8, r2
        hspi->pTxBuffPtr++;
 800438a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800438c:	3301      	adds	r3, #1
 800438e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004390:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004392:	3b01      	subs	r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	2101      	movs	r1, #1
 800439c:	0008      	movs	r0, r1
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	4010      	ands	r0, r2
 80043a2:	4211      	tst	r1, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x1f2>
 80043a6:	5b62      	ldrh	r2, [r4, r5]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x1f2>
        txallowed = 1U;
 80043ac:	4680      	mov	r8, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ae:	7b1b      	ldrb	r3, [r3, #12]
 80043b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80043b2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80043b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043b6:	3301      	adds	r3, #1
 80043b8:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80043ba:	5b63      	ldrh	r3, [r4, r5]
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29b      	uxth	r3, r3
 80043c0:	5363      	strh	r3, [r4, r5]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043c2:	f7fe fe7f 	bl	80030c4 <HAL_GetTick>
 80043c6:	9b08      	ldr	r3, [sp, #32]
 80043c8:	1b80      	subs	r0, r0, r6
 80043ca:	4298      	cmp	r0, r3
 80043cc:	d3c8      	bcc.n	8004360 <HAL_SPI_TransmitReceive+0x190>
 80043ce:	3301      	adds	r3, #1
 80043d0:	d0c6      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x190>
        hspi->State = HAL_SPI_STATE_READY;
 80043d2:	235d      	movs	r3, #93	@ 0x5d
 80043d4:	2201      	movs	r2, #1
        errorcode = HAL_TIMEOUT;
 80043d6:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80043d8:	54e2      	strb	r2, [r4, r3]
        goto error;
 80043da:	e716      	b.n	800420a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043dc:	2d01      	cmp	r5, #1
 80043de:	d1bb      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x188>
 80043e0:	e7b1      	b.n	8004346 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e2:	2d01      	cmp	r5, #1
 80043e4:	d000      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x218>
 80043e6:	e754      	b.n	8004292 <HAL_SPI_TransmitReceive+0xc2>
 80043e8:	e74b      	b.n	8004282 <HAL_SPI_TransmitReceive+0xb2>
    hspi->State = HAL_SPI_STATE_READY;
 80043ea:	2201      	movs	r2, #1
 80043ec:	335d      	adds	r3, #93	@ 0x5d
 80043ee:	54e2      	strb	r2, [r4, r3]
 80043f0:	e70b      	b.n	800420a <HAL_SPI_TransmitReceive+0x3a>
        txallowed = 1U;
 80043f2:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f4:	2546      	movs	r5, #70	@ 0x46
        txallowed = 1U;
 80043f6:	4698      	mov	r8, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043f8:	2702      	movs	r7, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043fa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x238>
 8004400:	5b63      	ldrh	r3, [r4, r5]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d100      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x238>
 8004406:	e77f      	b.n	8004308 <HAL_SPI_TransmitReceive+0x138>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4217      	tst	r7, r2
 800440e:	d010      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x262>
 8004410:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004412:	2a00      	cmp	r2, #0
 8004414:	d00d      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x262>
 8004416:	4642      	mov	r2, r8
 8004418:	2a01      	cmp	r2, #1
 800441a:	d108      	bne.n	800442e <HAL_SPI_TransmitReceive+0x25e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800441e:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004420:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004422:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004424:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004426:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004428:	3a01      	subs	r2, #1
 800442a:	b292      	uxth	r2, r2
 800442c:	87e2      	strh	r2, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800442e:	2200      	movs	r2, #0
 8004430:	4690      	mov	r8, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004432:	2101      	movs	r1, #1
 8004434:	0008      	movs	r0, r1
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4010      	ands	r0, r2
 800443a:	4211      	tst	r1, r2
 800443c:	d00c      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x288>
 800443e:	5b62      	ldrh	r2, [r4, r5]
 8004440:	2a00      	cmp	r2, #0
 8004442:	d009      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x288>
        txallowed = 1U;
 8004444:	4680      	mov	r8, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	3302      	adds	r3, #2
 800444e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004450:	5b63      	ldrh	r3, [r4, r5]
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	5363      	strh	r3, [r4, r5]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004458:	f7fe fe34 	bl	80030c4 <HAL_GetTick>
 800445c:	9b08      	ldr	r3, [sp, #32]
 800445e:	1b80      	subs	r0, r0, r6
 8004460:	4298      	cmp	r0, r3
 8004462:	d3ca      	bcc.n	80043fa <HAL_SPI_TransmitReceive+0x22a>
 8004464:	e7b5      	b.n	80043d2 <HAL_SPI_TransmitReceive+0x202>
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	ffffefff 	.word	0xffffefff

0800446c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	d05c      	beq.n	800452c <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	233d      	movs	r3, #61	@ 0x3d
 8004474:	5cc3      	ldrb	r3, [r0, r3]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d041      	beq.n	8004500 <HAL_TIM_PWM_Init+0x94>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	233d      	movs	r3, #61	@ 0x3d
 800447e:	2202      	movs	r2, #2
 8004480:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004482:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	4e2a      	ldr	r6, [pc, #168]	@ (8004530 <HAL_TIM_PWM_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004486:	6813      	ldr	r3, [r2, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448a:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800448c:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448e:	42b2      	cmp	r2, r6
 8004490:	d03b      	beq.n	800450a <HAL_TIM_PWM_Init+0x9e>
 8004492:	2680      	movs	r6, #128	@ 0x80
 8004494:	05f6      	lsls	r6, r6, #23
 8004496:	42b2      	cmp	r2, r6
 8004498:	d029      	beq.n	80044ee <HAL_TIM_PWM_Init+0x82>
 800449a:	4e26      	ldr	r6, [pc, #152]	@ (8004534 <HAL_TIM_PWM_Init+0xc8>)
 800449c:	42b2      	cmp	r2, r6
 800449e:	d026      	beq.n	80044ee <HAL_TIM_PWM_Init+0x82>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a0:	4e25      	ldr	r6, [pc, #148]	@ (8004538 <HAL_TIM_PWM_Init+0xcc>)
 80044a2:	42b2      	cmp	r2, r6
 80044a4:	d027      	beq.n	80044f6 <HAL_TIM_PWM_Init+0x8a>
 80044a6:	4e25      	ldr	r6, [pc, #148]	@ (800453c <HAL_TIM_PWM_Init+0xd0>)
 80044a8:	42b2      	cmp	r2, r6
 80044aa:	d032      	beq.n	8004512 <HAL_TIM_PWM_Init+0xa6>
 80044ac:	4e24      	ldr	r6, [pc, #144]	@ (8004540 <HAL_TIM_PWM_Init+0xd4>)
 80044ae:	42b2      	cmp	r2, r6
 80044b0:	d02f      	beq.n	8004512 <HAL_TIM_PWM_Init+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b2:	2680      	movs	r6, #128	@ 0x80
 80044b4:	43b3      	bics	r3, r6
 80044b6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80044b8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ba:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044bc:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044be:	2301      	movs	r3, #1
 80044c0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c2:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 80044c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	3a08      	subs	r2, #8
 80044ca:	54a3      	strb	r3, [r4, r2]
 80044cc:	3201      	adds	r2, #1
 80044ce:	54a3      	strb	r3, [r4, r2]
 80044d0:	3201      	adds	r2, #1
 80044d2:	54a3      	strb	r3, [r4, r2]
 80044d4:	3201      	adds	r2, #1
 80044d6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	3201      	adds	r2, #1
 80044da:	54a3      	strb	r3, [r4, r2]
 80044dc:	3201      	adds	r2, #1
 80044de:	54a3      	strb	r3, [r4, r2]
 80044e0:	3201      	adds	r2, #1
 80044e2:	54a3      	strb	r3, [r4, r2]
 80044e4:	3201      	adds	r2, #1
 80044e6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	3a08      	subs	r2, #8
 80044ea:	54a3      	strb	r3, [r4, r2]
}
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ee:	2670      	movs	r6, #112	@ 0x70
 80044f0:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 80044f2:	68a6      	ldr	r6, [r4, #8]
 80044f4:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	4e13      	ldr	r6, [pc, #76]	@ (8004544 <HAL_TIM_PWM_Init+0xd8>)
 80044f8:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	6926      	ldr	r6, [r4, #16]
 80044fc:	4333      	orrs	r3, r6
 80044fe:	e7d8      	b.n	80044b2 <HAL_TIM_PWM_Init+0x46>
    htim->Lock = HAL_UNLOCKED;
 8004500:	333c      	adds	r3, #60	@ 0x3c
 8004502:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004504:	f7fe fbca 	bl	8002c9c <HAL_TIM_PWM_MspInit>
 8004508:	e7b8      	b.n	800447c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450a:	2670      	movs	r6, #112	@ 0x70
 800450c:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800450e:	68a6      	ldr	r6, [r4, #8]
 8004510:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004512:	4e0c      	ldr	r6, [pc, #48]	@ (8004544 <HAL_TIM_PWM_Init+0xd8>)
 8004514:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004516:	6926      	ldr	r6, [r4, #16]
 8004518:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451a:	2680      	movs	r6, #128	@ 0x80
 800451c:	43b3      	bics	r3, r6
 800451e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004520:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004522:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004524:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	6313      	str	r3, [r2, #48]	@ 0x30
 800452a:	e7c8      	b.n	80044be <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 800452c:	2001      	movs	r0, #1
 800452e:	e7dd      	b.n	80044ec <HAL_TIM_PWM_Init+0x80>
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40000400 	.word	0x40000400
 8004538:	40002000 	.word	0x40002000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	fffffcff 	.word	0xfffffcff

08004548 <HAL_TIM_Encoder_Init>:
{
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	46c6      	mov	lr, r8
 800454c:	0004      	movs	r4, r0
 800454e:	000d      	movs	r5, r1
 8004550:	b500      	push	{lr}
  if (htim == NULL)
 8004552:	2800      	cmp	r0, #0
 8004554:	d100      	bne.n	8004558 <HAL_TIM_Encoder_Init+0x10>
 8004556:	e07f      	b.n	8004658 <HAL_TIM_Encoder_Init+0x110>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004558:	233d      	movs	r3, #61	@ 0x3d
 800455a:	5cc3      	ldrb	r3, [r0, r3]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d064      	beq.n	800462c <HAL_TIM_Encoder_Init+0xe4>
  htim->State = HAL_TIM_STATE_BUSY;
 8004562:	233d      	movs	r3, #61	@ 0x3d
 8004564:	2202      	movs	r2, #2
 8004566:	54e2      	strb	r2, [r4, r3]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	493c      	ldr	r1, [pc, #240]	@ (800465c <HAL_TIM_Encoder_Init+0x114>)
 800456c:	689a      	ldr	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456e:	4f3c      	ldr	r7, [pc, #240]	@ (8004660 <HAL_TIM_Encoder_Init+0x118>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004570:	400a      	ands	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 8004574:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004576:	69a6      	ldr	r6, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004578:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457a:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800457c:	42bb      	cmp	r3, r7
 800457e:	d05a      	beq.n	8004636 <HAL_TIM_Encoder_Init+0xee>
 8004580:	2780      	movs	r7, #128	@ 0x80
 8004582:	05ff      	lsls	r7, r7, #23
 8004584:	42bb      	cmp	r3, r7
 8004586:	d048      	beq.n	800461a <HAL_TIM_Encoder_Init+0xd2>
 8004588:	4f36      	ldr	r7, [pc, #216]	@ (8004664 <HAL_TIM_Encoder_Init+0x11c>)
 800458a:	42bb      	cmp	r3, r7
 800458c:	d045      	beq.n	800461a <HAL_TIM_Encoder_Init+0xd2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	4f36      	ldr	r7, [pc, #216]	@ (8004668 <HAL_TIM_Encoder_Init+0x120>)
 8004590:	42bb      	cmp	r3, r7
 8004592:	d046      	beq.n	8004622 <HAL_TIM_Encoder_Init+0xda>
 8004594:	4f35      	ldr	r7, [pc, #212]	@ (800466c <HAL_TIM_Encoder_Init+0x124>)
 8004596:	42bb      	cmp	r3, r7
 8004598:	d051      	beq.n	800463e <HAL_TIM_Encoder_Init+0xf6>
 800459a:	4f35      	ldr	r7, [pc, #212]	@ (8004670 <HAL_TIM_Encoder_Init+0x128>)
 800459c:	42bb      	cmp	r3, r7
 800459e:	d04e      	beq.n	800463e <HAL_TIM_Encoder_Init+0xf6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	2780      	movs	r7, #128	@ 0x80
 80045a2:	43ba      	bics	r2, r7
 80045a4:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80045a6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a8:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045aa:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80045ac:	2001      	movs	r0, #1
 80045ae:	6158      	str	r0, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	689e      	ldr	r6, [r3, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80045b2:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 80045b4:	699a      	ldr	r2, [r3, #24]
  tmpsmcr |= sConfig->EncoderMode;
 80045b6:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045b8:	492e      	ldr	r1, [pc, #184]	@ (8004674 <HAL_TIM_Encoder_Init+0x12c>)
  tmpsmcr |= sConfig->EncoderMode;
 80045ba:	46b0      	mov	r8, r6
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045bc:	400a      	ands	r2, r1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045be:	69a9      	ldr	r1, [r5, #24]
 80045c0:	68ae      	ldr	r6, [r5, #8]
 80045c2:	0209      	lsls	r1, r1, #8
 80045c4:	4331      	orrs	r1, r6
 80045c6:	4311      	orrs	r1, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004678 <HAL_TIM_Encoder_Init+0x130>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045ca:	692e      	ldr	r6, [r5, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045cc:	4011      	ands	r1, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ce:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045d0:	0136      	lsls	r6, r6, #4
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045d2:	0212      	lsls	r2, r2, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045d4:	4332      	orrs	r2, r6
 80045d6:	68ee      	ldr	r6, [r5, #12]
  tmpccer = htim->Instance->CCER;
 80045d8:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045da:	4332      	orrs	r2, r6
 80045dc:	6a2e      	ldr	r6, [r5, #32]
 80045de:	0336      	lsls	r6, r6, #12
 80045e0:	4332      	orrs	r2, r6
 80045e2:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045e4:	21aa      	movs	r1, #170	@ 0xaa
 80045e6:	438f      	bics	r7, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045e8:	6969      	ldr	r1, [r5, #20]
 80045ea:	686d      	ldr	r5, [r5, #4]
 80045ec:	0109      	lsls	r1, r1, #4
 80045ee:	4329      	orrs	r1, r5
  htim->Instance->SMCR = tmpsmcr;
 80045f0:	4645      	mov	r5, r8
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045f2:	4339      	orrs	r1, r7
  htim->Instance->SMCR = tmpsmcr;
 80045f4:	609d      	str	r5, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80045f6:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80045f8:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fa:	2346      	movs	r3, #70	@ 0x46
 80045fc:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	3b08      	subs	r3, #8
 8004600:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	3301      	adds	r3, #1
 8004604:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	3303      	adds	r3, #3
 8004608:	54e0      	strb	r0, [r4, r3]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800460a:	3301      	adds	r3, #1
 800460c:	54e0      	strb	r0, [r4, r3]
  htim->State = HAL_TIM_STATE_READY;
 800460e:	3b06      	subs	r3, #6
 8004610:	54e0      	strb	r0, [r4, r3]
  return HAL_OK;
 8004612:	2000      	movs	r0, #0
}
 8004614:	bc80      	pop	{r7}
 8004616:	46b8      	mov	r8, r7
 8004618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800461a:	2770      	movs	r7, #112	@ 0x70
 800461c:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 800461e:	68a7      	ldr	r7, [r4, #8]
 8004620:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	4f16      	ldr	r7, [pc, #88]	@ (800467c <HAL_TIM_Encoder_Init+0x134>)
 8004624:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004626:	6927      	ldr	r7, [r4, #16]
 8004628:	433a      	orrs	r2, r7
 800462a:	e7b9      	b.n	80045a0 <HAL_TIM_Encoder_Init+0x58>
    htim->Lock = HAL_UNLOCKED;
 800462c:	333c      	adds	r3, #60	@ 0x3c
 800462e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8004630:	f7fe fbae 	bl	8002d90 <HAL_TIM_Encoder_MspInit>
 8004634:	e795      	b.n	8004562 <HAL_TIM_Encoder_Init+0x1a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004636:	2770      	movs	r7, #112	@ 0x70
 8004638:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 800463a:	68a7      	ldr	r7, [r4, #8]
 800463c:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800463e:	4f0f      	ldr	r7, [pc, #60]	@ (800467c <HAL_TIM_Encoder_Init+0x134>)
 8004640:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	6927      	ldr	r7, [r4, #16]
 8004644:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004646:	2780      	movs	r7, #128	@ 0x80
 8004648:	43ba      	bics	r2, r7
 800464a:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 800464c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004650:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004652:	6962      	ldr	r2, [r4, #20]
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
 8004656:	e7a9      	b.n	80045ac <HAL_TIM_Encoder_Init+0x64>
    return HAL_ERROR;
 8004658:	2001      	movs	r0, #1
 800465a:	e7db      	b.n	8004614 <HAL_TIM_Encoder_Init+0xcc>
 800465c:	ffffbff8 	.word	0xffffbff8
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40002000 	.word	0x40002000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800
 8004674:	fffffcfc 	.word	0xfffffcfc
 8004678:	ffff0303 	.word	0xffff0303
 800467c:	fffffcff 	.word	0xfffffcff

08004680 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004680:	233c      	movs	r3, #60	@ 0x3c
{
 8004682:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004684:	5cc4      	ldrb	r4, [r0, r3]
{
 8004686:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8004688:	2c01      	cmp	r4, #1
 800468a:	d100      	bne.n	800468e <HAL_TIM_PWM_ConfigChannel+0xe>
 800468c:	e0ea      	b.n	8004864 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800468e:	2001      	movs	r0, #1
 8004690:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 8004692:	2a08      	cmp	r2, #8
 8004694:	d100      	bne.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x18>
 8004696:	e0ab      	b.n	80047f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004698:	d837      	bhi.n	800470a <HAL_TIM_PWM_ConfigChannel+0x8a>
 800469a:	2a00      	cmp	r2, #0
 800469c:	d100      	bne.n	80046a0 <HAL_TIM_PWM_ConfigChannel+0x20>
 800469e:	e07c      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x11a>
 80046a0:	2a04      	cmp	r2, #4
 80046a2:	d12e      	bne.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x82>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a6:	682b      	ldr	r3, [r5, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a8:	4c77      	ldr	r4, [pc, #476]	@ (8004888 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	4382      	bics	r2, r0
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80046b0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80046b2:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80046b4:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b6:	4020      	ands	r0, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	680c      	ldr	r4, [r1, #0]
 80046ba:	0224      	lsls	r4, r4, #8
 80046bc:	4304      	orrs	r4, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046be:	2020      	movs	r0, #32
 80046c0:	4382      	bics	r2, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c2:	6888      	ldr	r0, [r1, #8]
 80046c4:	0100      	lsls	r0, r0, #4
 80046c6:	4310      	orrs	r0, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c8:	4a70      	ldr	r2, [pc, #448]	@ (800488c <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d056      	beq.n	800477c <HAL_TIM_PWM_ConfigChannel+0xfc>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ce:	4a70      	ldr	r2, [pc, #448]	@ (8004890 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d05a      	beq.n	800478a <HAL_TIM_PWM_ConfigChannel+0x10a>
 80046d4:	4a6f      	ldr	r2, [pc, #444]	@ (8004894 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d057      	beq.n	800478a <HAL_TIM_PWM_ConfigChannel+0x10a>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046da:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80046dc:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046de:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e2:	2280      	movs	r2, #128	@ 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e4:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e6:	6998      	ldr	r0, [r3, #24]
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	4302      	orrs	r2, r0
 80046ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	4869      	ldr	r0, [pc, #420]	@ (8004898 <HAL_TIM_PWM_ConfigChannel+0x218>)
 80046f2:	4002      	ands	r2, r0
 80046f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f6:	690a      	ldr	r2, [r1, #16]
 80046f8:	6998      	ldr	r0, [r3, #24]
 80046fa:	0212      	lsls	r2, r2, #8
 80046fc:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004700:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004702:	233c      	movs	r3, #60	@ 0x3c
 8004704:	2200      	movs	r2, #0
 8004706:	54ea      	strb	r2, [r5, r3]
}
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 800470a:	2001      	movs	r0, #1
 800470c:	2a0c      	cmp	r2, #12
 800470e:	d1f8      	bne.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004710:	682b      	ldr	r3, [r5, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004712:	4862      	ldr	r0, [pc, #392]	@ (800489c <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8004714:	6a1a      	ldr	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004716:	4c5c      	ldr	r4, [pc, #368]	@ (8004888 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004718:	4002      	ands	r2, r0
 800471a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800471c:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800471e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004720:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004722:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	680c      	ldr	r4, [r1, #0]
 8004726:	0224      	lsls	r4, r4, #8
 8004728:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800472a:	4a5d      	ldr	r2, [pc, #372]	@ (80048a0 <HAL_TIM_PWM_ConfigChannel+0x220>)
 800472c:	4010      	ands	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800472e:	688a      	ldr	r2, [r1, #8]
 8004730:	0312      	lsls	r2, r2, #12
 8004732:	4302      	orrs	r2, r0

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004734:	4855      	ldr	r0, [pc, #340]	@ (800488c <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004736:	4283      	cmp	r3, r0
 8004738:	d01a      	beq.n	8004770 <HAL_TIM_PWM_ConfigChannel+0xf0>
 800473a:	4855      	ldr	r0, [pc, #340]	@ (8004890 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800473c:	4283      	cmp	r3, r0
 800473e:	d017      	beq.n	8004770 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004740:	4854      	ldr	r0, [pc, #336]	@ (8004894 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004742:	4283      	cmp	r3, r0
 8004744:	d014      	beq.n	8004770 <HAL_TIM_PWM_ConfigChannel+0xf0>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004746:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004748:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800474a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800474c:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004750:	2280      	movs	r2, #128	@ 0x80
 8004752:	69d8      	ldr	r0, [r3, #28]
 8004754:	0112      	lsls	r2, r2, #4
 8004756:	4302      	orrs	r2, r0
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	484e      	ldr	r0, [pc, #312]	@ (8004898 <HAL_TIM_PWM_ConfigChannel+0x218>)
 800475e:	4002      	ands	r2, r0
 8004760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004762:	690a      	ldr	r2, [r1, #16]
 8004764:	69d8      	ldr	r0, [r3, #28]
 8004766:	0212      	lsls	r2, r2, #8
 8004768:	4302      	orrs	r2, r0
 800476a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2000      	movs	r0, #0
 800476e:	e7c8      	b.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004770:	484c      	ldr	r0, [pc, #304]	@ (80048a4 <HAL_TIM_PWM_ConfigChannel+0x224>)
 8004772:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004774:	694e      	ldr	r6, [r1, #20]
 8004776:	01b6      	lsls	r6, r6, #6
 8004778:	4306      	orrs	r6, r0
 800477a:	e7e4      	b.n	8004746 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer &= ~TIM_CCER_CC2NP;
 800477c:	2280      	movs	r2, #128	@ 0x80
 800477e:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004780:	68ca      	ldr	r2, [r1, #12]
 8004782:	0112      	lsls	r2, r2, #4
 8004784:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004786:	2240      	movs	r2, #64	@ 0x40
 8004788:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800478a:	4a47      	ldr	r2, [pc, #284]	@ (80048a8 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800478c:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800478e:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004790:	698e      	ldr	r6, [r1, #24]
 8004792:	433e      	orrs	r6, r7
 8004794:	00b6      	lsls	r6, r6, #2
 8004796:	4316      	orrs	r6, r2
 8004798:	e79f      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800479a:	2673      	movs	r6, #115	@ 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	4382      	bics	r2, r0
 80047a2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80047a4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80047a6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80047a8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047aa:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	680e      	ldr	r6, [r1, #0]
 80047ae:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80047b0:	2602      	movs	r6, #2
 80047b2:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 80047b4:	688e      	ldr	r6, [r1, #8]
 80047b6:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047b8:	4e34      	ldr	r6, [pc, #208]	@ (800488c <HAL_TIM_PWM_ConfigChannel+0x20c>)
 80047ba:	42b3      	cmp	r3, r6
 80047bc:	d045      	beq.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80047be:	4e34      	ldr	r6, [pc, #208]	@ (8004890 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80047c0:	42b3      	cmp	r3, r6
 80047c2:	d042      	beq.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80047c4:	4e33      	ldr	r6, [pc, #204]	@ (8004894 <HAL_TIM_PWM_ConfigChannel+0x214>)
 80047c6:	42b3      	cmp	r3, r6
 80047c8:	d03f      	beq.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CR2 = tmpcr2;
 80047ca:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80047ce:	6848      	ldr	r0, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d0:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 80047d2:	6358      	str	r0, [r3, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d4:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 80047d6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	4302      	orrs	r2, r0
 80047dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	3804      	subs	r0, #4
 80047e2:	4382      	bics	r2, r0
 80047e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e6:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ea:	430a      	orrs	r2, r1
 80047ec:	619a      	str	r2, [r3, #24]
      break;
 80047ee:	e788      	b.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x82>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f0:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f2:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047f4:	482d      	ldr	r0, [pc, #180]	@ (80048ac <HAL_TIM_PWM_ConfigChannel+0x22c>)
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	4002      	ands	r2, r0
 80047fa:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80047fc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80047fe:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004800:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004802:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004804:	680e      	ldr	r6, [r1, #0]
 8004806:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004808:	4829      	ldr	r0, [pc, #164]	@ (80048b0 <HAL_TIM_PWM_ConfigChannel+0x230>)
 800480a:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800480c:	6888      	ldr	r0, [r1, #8]
 800480e:	0200      	lsls	r0, r0, #8
 8004810:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004812:	481e      	ldr	r0, [pc, #120]	@ (800488c <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8004814:	4283      	cmp	r3, r0
 8004816:	d027      	beq.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004818:	481d      	ldr	r0, [pc, #116]	@ (8004890 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800481a:	4283      	cmp	r3, r0
 800481c:	d02b      	beq.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x1f6>
 800481e:	481d      	ldr	r0, [pc, #116]	@ (8004894 <HAL_TIM_PWM_ConfigChannel+0x214>)
 8004820:	4283      	cmp	r3, r0
 8004822:	d028      	beq.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x1f6>
  TIMx->CCR3 = OC_Config->Pulse;
 8004824:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004826:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004828:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800482a:	63d8      	str	r0, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482c:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 800482e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004830:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004832:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004834:	4302      	orrs	r2, r0
 8004836:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	3804      	subs	r0, #4
 800483c:	4382      	bics	r2, r0
 800483e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004840:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004844:	430a      	orrs	r2, r1
 8004846:	61da      	str	r2, [r3, #28]
      break;
 8004848:	e75b      	b.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x82>
    tmpccer &= ~TIM_CCER_CC1NP;
 800484a:	2608      	movs	r6, #8
 800484c:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 800484e:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004850:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004852:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004854:	2604      	movs	r6, #4
 8004856:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004858:	4e16      	ldr	r6, [pc, #88]	@ (80048b4 <HAL_TIM_PWM_ConfigChannel+0x234>)
 800485a:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800485c:	694c      	ldr	r4, [r1, #20]
 800485e:	433c      	orrs	r4, r7
 8004860:	4334      	orrs	r4, r6
 8004862:	e7b2      	b.n	80047ca <HAL_TIM_PWM_ConfigChannel+0x14a>
  __HAL_LOCK(htim);
 8004864:	2002      	movs	r0, #2
 8004866:	e74f      	b.n	8004708 <HAL_TIM_PWM_ConfigChannel+0x88>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004868:	4813      	ldr	r0, [pc, #76]	@ (80048b8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800486a:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800486c:	68c8      	ldr	r0, [r1, #12]
 800486e:	0200      	lsls	r0, r0, #8
 8004870:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8004874:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004876:	4811      	ldr	r0, [pc, #68]	@ (80048bc <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004878:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800487a:	4020      	ands	r0, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800487c:	698c      	ldr	r4, [r1, #24]
 800487e:	433c      	orrs	r4, r7
 8004880:	0124      	lsls	r4, r4, #4
 8004882:	4304      	orrs	r4, r0
 8004884:	e7ce      	b.n	8004824 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	ffff8cff 	.word	0xffff8cff
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800
 8004898:	fffffbff 	.word	0xfffffbff
 800489c:	ffffefff 	.word	0xffffefff
 80048a0:	ffffdfff 	.word	0xffffdfff
 80048a4:	ffffbfff 	.word	0xffffbfff
 80048a8:	fffff3ff 	.word	0xfffff3ff
 80048ac:	fffffeff 	.word	0xfffffeff
 80048b0:	fffffdff 	.word	0xfffffdff
 80048b4:	fffffcff 	.word	0xfffffcff
 80048b8:	fffff7ff 	.word	0xfffff7ff
 80048bc:	ffffcfff 	.word	0xffffcfff

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c0:	233c      	movs	r3, #60	@ 0x3c
{
 80048c2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80048c4:	5cc3      	ldrb	r3, [r0, r3]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d021      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ca:	233d      	movs	r3, #61	@ 0x3d
 80048cc:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ce:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80048d2:	6803      	ldr	r3, [r0, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80048d6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d8:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048da:	680d      	ldr	r5, [r1, #0]
 80048dc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d006      	beq.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	05d2      	lsls	r2, r2, #23
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d002      	beq.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80048ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d104      	bne.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f4:	2280      	movs	r2, #128	@ 0x80
 80048f6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f8:	684a      	ldr	r2, [r1, #4]
 80048fa:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048fc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	233d      	movs	r3, #61	@ 0x3d
 8004900:	2201      	movs	r2, #1
 8004902:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004904:	2200      	movs	r2, #0
 8004906:	3b01      	subs	r3, #1
 8004908:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800490a:	2000      	movs	r0, #0
}
 800490c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800490e:	2002      	movs	r0, #2
 8004910:	e7fc      	b.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400

0800491c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800491c:	223c      	movs	r2, #60	@ 0x3c
{
 800491e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004920:	5c83      	ldrb	r3, [r0, r2]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d01e      	beq.n	8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004926:	68cb      	ldr	r3, [r1, #12]
 8004928:	4c0f      	ldr	r4, [pc, #60]	@ (8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800492a:	4023      	ands	r3, r4
 800492c:	688c      	ldr	r4, [r1, #8]
 800492e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004930:	4c0e      	ldr	r4, [pc, #56]	@ (800496c <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004932:	4023      	ands	r3, r4
 8004934:	684c      	ldr	r4, [r1, #4]
 8004936:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004938:	4c0d      	ldr	r4, [pc, #52]	@ (8004970 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800493a:	4023      	ands	r3, r4
 800493c:	680c      	ldr	r4, [r1, #0]
 800493e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004940:	4c0c      	ldr	r4, [pc, #48]	@ (8004974 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004942:	4023      	ands	r3, r4
 8004944:	690c      	ldr	r4, [r1, #16]
 8004946:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004948:	4c0b      	ldr	r4, [pc, #44]	@ (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800494a:	4023      	ands	r3, r4
 800494c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800494e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004950:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004952:	4c0a      	ldr	r4, [pc, #40]	@ (800497c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004954:	4023      	ands	r3, r4
 8004956:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004958:	6801      	ldr	r1, [r0, #0]
 800495a:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800495c:	2300      	movs	r3, #0
 800495e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8004960:	2000      	movs	r0, #0
}
 8004962:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004964:	2002      	movs	r0, #2
 8004966:	e7fc      	b.n	8004962 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8004968:	fffffcff 	.word	0xfffffcff
 800496c:	fffffbff 	.word	0xfffffbff
 8004970:	fffff7ff 	.word	0xfffff7ff
 8004974:	ffffefff 	.word	0xffffefff
 8004978:	ffffdfff 	.word	0xffffdfff
 800497c:	ffffbfff 	.word	0xffffbfff

08004980 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004980:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8004982:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004984:	07da      	lsls	r2, r3, #31
 8004986:	d506      	bpl.n	8004996 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004988:	6801      	ldr	r1, [r0, #0]
 800498a:	4c28      	ldr	r4, [pc, #160]	@ (8004a2c <UART_AdvFeatureConfig+0xac>)
 800498c:	684a      	ldr	r2, [r1, #4]
 800498e:	4022      	ands	r2, r4
 8004990:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8004992:	4322      	orrs	r2, r4
 8004994:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004996:	079a      	lsls	r2, r3, #30
 8004998:	d506      	bpl.n	80049a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499a:	6801      	ldr	r1, [r0, #0]
 800499c:	4c24      	ldr	r4, [pc, #144]	@ (8004a30 <UART_AdvFeatureConfig+0xb0>)
 800499e:	684a      	ldr	r2, [r1, #4]
 80049a0:	4022      	ands	r2, r4
 80049a2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80049a4:	4322      	orrs	r2, r4
 80049a6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a8:	075a      	lsls	r2, r3, #29
 80049aa:	d506      	bpl.n	80049ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ac:	6801      	ldr	r1, [r0, #0]
 80049ae:	4c21      	ldr	r4, [pc, #132]	@ (8004a34 <UART_AdvFeatureConfig+0xb4>)
 80049b0:	684a      	ldr	r2, [r1, #4]
 80049b2:	4022      	ands	r2, r4
 80049b4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80049b6:	4322      	orrs	r2, r4
 80049b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ba:	071a      	lsls	r2, r3, #28
 80049bc:	d506      	bpl.n	80049cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049be:	6801      	ldr	r1, [r0, #0]
 80049c0:	4c1d      	ldr	r4, [pc, #116]	@ (8004a38 <UART_AdvFeatureConfig+0xb8>)
 80049c2:	684a      	ldr	r2, [r1, #4]
 80049c4:	4022      	ands	r2, r4
 80049c6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80049c8:	4322      	orrs	r2, r4
 80049ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049cc:	06da      	lsls	r2, r3, #27
 80049ce:	d506      	bpl.n	80049de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d0:	6801      	ldr	r1, [r0, #0]
 80049d2:	4c1a      	ldr	r4, [pc, #104]	@ (8004a3c <UART_AdvFeatureConfig+0xbc>)
 80049d4:	688a      	ldr	r2, [r1, #8]
 80049d6:	4022      	ands	r2, r4
 80049d8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80049da:	4322      	orrs	r2, r4
 80049dc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049de:	069a      	lsls	r2, r3, #26
 80049e0:	d506      	bpl.n	80049f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e2:	6801      	ldr	r1, [r0, #0]
 80049e4:	4c16      	ldr	r4, [pc, #88]	@ (8004a40 <UART_AdvFeatureConfig+0xc0>)
 80049e6:	688a      	ldr	r2, [r1, #8]
 80049e8:	4022      	ands	r2, r4
 80049ea:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80049ec:	4322      	orrs	r2, r4
 80049ee:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f0:	065a      	lsls	r2, r3, #25
 80049f2:	d50a      	bpl.n	8004a0a <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f4:	6801      	ldr	r1, [r0, #0]
 80049f6:	4d13      	ldr	r5, [pc, #76]	@ (8004a44 <UART_AdvFeatureConfig+0xc4>)
 80049f8:	684a      	ldr	r2, [r1, #4]
 80049fa:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80049fc:	402a      	ands	r2, r5
 80049fe:	4322      	orrs	r2, r4
 8004a00:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	0352      	lsls	r2, r2, #13
 8004a06:	4294      	cmp	r4, r2
 8004a08:	d009      	beq.n	8004a1e <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	d506      	bpl.n	8004a1c <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0e:	6802      	ldr	r2, [r0, #0]
 8004a10:	490d      	ldr	r1, [pc, #52]	@ (8004a48 <UART_AdvFeatureConfig+0xc8>)
 8004a12:	6853      	ldr	r3, [r2, #4]
 8004a14:	400b      	ands	r3, r1
 8004a16:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6053      	str	r3, [r2, #4]
  }
}
 8004a1c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a1e:	684a      	ldr	r2, [r1, #4]
 8004a20:	4c0a      	ldr	r4, [pc, #40]	@ (8004a4c <UART_AdvFeatureConfig+0xcc>)
 8004a22:	4022      	ands	r2, r4
 8004a24:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004a26:	4322      	orrs	r2, r4
 8004a28:	604a      	str	r2, [r1, #4]
 8004a2a:	e7ee      	b.n	8004a0a <UART_AdvFeatureConfig+0x8a>
 8004a2c:	fffdffff 	.word	0xfffdffff
 8004a30:	fffeffff 	.word	0xfffeffff
 8004a34:	fffbffff 	.word	0xfffbffff
 8004a38:	ffff7fff 	.word	0xffff7fff
 8004a3c:	ffffefff 	.word	0xffffefff
 8004a40:	ffffdfff 	.word	0xffffdfff
 8004a44:	ffefffff 	.word	0xffefffff
 8004a48:	fff7ffff 	.word	0xfff7ffff
 8004a4c:	ff9fffff 	.word	0xff9fffff

08004a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	2384      	movs	r3, #132	@ 0x84
 8004a54:	2200      	movs	r2, #0
{
 8004a56:	46c6      	mov	lr, r8
 8004a58:	0004      	movs	r4, r0
 8004a5a:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a5e:	f7fe fb31 	bl	80030c4 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a62:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004a64:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	0712      	lsls	r2, r2, #28
 8004a6a:	d410      	bmi.n	8004a8e <UART_CheckIdleState+0x3e>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	0752      	lsls	r2, r2, #29
 8004a70:	d43c      	bmi.n	8004aec <UART_CheckIdleState+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a72:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	2280      	movs	r2, #128	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 8004a76:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004a7c:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a80:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8004a82:	2378      	movs	r3, #120	@ 0x78
 8004a84:	2200      	movs	r2, #0
 8004a86:	54e2      	strb	r2, [r4, r3]
}
 8004a88:	bc80      	pop	{r7}
 8004a8a:	46b8      	mov	r8, r7
 8004a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	0292      	lsls	r2, r2, #10
 8004a92:	d4eb      	bmi.n	8004a6c <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a96:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a98:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a9a:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9c:	04b6      	lsls	r6, r6, #18
 8004a9e:	e010      	b.n	8004ac2 <UART_CheckIdleState+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4217      	tst	r7, r2
 8004aa6:	d009      	beq.n	8004abc <UART_CheckIdleState+0x6c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	4211      	tst	r1, r2
 8004aae:	d158      	bne.n	8004b62 <UART_CheckIdleState+0x112>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	0112      	lsls	r2, r2, #4
 8004ab6:	4211      	tst	r1, r2
 8004ab8:	d000      	beq.n	8004abc <UART_CheckIdleState+0x6c>
 8004aba:	e083      	b.n	8004bc4 <UART_CheckIdleState+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	0292      	lsls	r2, r2, #10
 8004ac0:	d4d4      	bmi.n	8004a6c <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fe faff 	bl	80030c4 <HAL_GetTick>
 8004ac6:	1b40      	subs	r0, r0, r5
 8004ac8:	42b0      	cmp	r0, r6
 8004aca:	d3e9      	bcc.n	8004aa0 <UART_CheckIdleState+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004acc:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad6:	2080      	movs	r0, #128	@ 0x80
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	4383      	bics	r3, r0
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004ae4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8004ae6:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8004ae8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8004aea:	e7ca      	b.n	8004a82 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	d4bf      	bmi.n	8004a72 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af4:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004af6:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af8:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	04b6      	lsls	r6, r6, #18
 8004afc:	e011      	b.n	8004b22 <UART_CheckIdleState+0xd2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4217      	tst	r7, r2
 8004b04:	d00a      	beq.n	8004b1c <UART_CheckIdleState+0xcc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b06:	4641      	mov	r1, r8
 8004b08:	69da      	ldr	r2, [r3, #28]
 8004b0a:	4211      	tst	r1, r2
 8004b0c:	d000      	beq.n	8004b10 <UART_CheckIdleState+0xc0>
 8004b0e:	e089      	b.n	8004c24 <UART_CheckIdleState+0x1d4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	0112      	lsls	r2, r2, #4
 8004b16:	4211      	tst	r1, r2
 8004b18:	d000      	beq.n	8004b1c <UART_CheckIdleState+0xcc>
 8004b1a:	e0b4      	b.n	8004c86 <UART_CheckIdleState+0x236>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	025b      	lsls	r3, r3, #9
 8004b20:	d4a7      	bmi.n	8004a72 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7fe facf 	bl	80030c4 <HAL_GetTick>
 8004b26:	1b40      	subs	r0, r0, r5
 8004b28:	42b0      	cmp	r0, r6
 8004b2a:	d3e8      	bcc.n	8004afe <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	2201      	movs	r2, #1
 8004b32:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	4d6b      	ldr	r5, [pc, #428]	@ (8004ce8 <UART_CheckIdleState+0x298>)
 8004b3a:	680b      	ldr	r3, [r1, #0]
 8004b3c:	402b      	ands	r3, r5
 8004b3e:	600b      	str	r3, [r1, #0]
 8004b40:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	688b      	ldr	r3, [r1, #8]
 8004b50:	4393      	bics	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]
 8004b54:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8004b5c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004b60:	e78f      	b.n	8004a82 <UART_CheckIdleState+0x32>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b62:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b64:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6e:	6821      	ldr	r1, [r4, #0]
 8004b70:	4d5d      	ldr	r5, [pc, #372]	@ (8004ce8 <UART_CheckIdleState+0x298>)
 8004b72:	680b      	ldr	r3, [r1, #0]
 8004b74:	402b      	ands	r3, r5
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b80:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	6821      	ldr	r1, [r4, #0]
 8004b86:	688b      	ldr	r3, [r1, #8]
 8004b88:	4393      	bics	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
 8004b8c:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10a      	bne.n	8004bac <UART_CheckIdleState+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b96:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	2010      	movs	r0, #16
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	4383      	bics	r3, r0
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	2380      	movs	r3, #128	@ 0x80
 8004bae:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bb0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb4:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bb6:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	6623      	str	r3, [r4, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bba:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bbc:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004bbe:	3a0c      	subs	r2, #12
 8004bc0:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004bc2:	e783      	b.n	8004acc <UART_CheckIdleState+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd0:	6821      	ldr	r1, [r4, #0]
 8004bd2:	4d45      	ldr	r5, [pc, #276]	@ (8004ce8 <UART_CheckIdleState+0x298>)
 8004bd4:	680b      	ldr	r3, [r1, #0]
 8004bd6:	402b      	ands	r3, r5
 8004bd8:	600b      	str	r3, [r1, #0]
 8004bda:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	6821      	ldr	r1, [r4, #0]
 8004be8:	688b      	ldr	r3, [r1, #8]
 8004bea:	4393      	bics	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
 8004bee:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d10a      	bne.n	8004c0e <UART_CheckIdleState+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	2010      	movs	r0, #16
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	4383      	bics	r3, r0
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	2220      	movs	r2, #32
 8004c10:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c12:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	2300      	movs	r3, #0
 8004c18:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004c1a:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004c1e:	3258      	adds	r2, #88	@ 0x58
 8004c20:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004c22:	e753      	b.n	8004acc <UART_CheckIdleState+0x7c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c24:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c30:	6821      	ldr	r1, [r4, #0]
 8004c32:	4d2d      	ldr	r5, [pc, #180]	@ (8004ce8 <UART_CheckIdleState+0x298>)
 8004c34:	680b      	ldr	r3, [r1, #0]
 8004c36:	402b      	ands	r3, r5
 8004c38:	600b      	str	r3, [r1, #0]
 8004c3a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	6821      	ldr	r1, [r4, #0]
 8004c48:	688b      	ldr	r3, [r1, #8]
 8004c4a:	4393      	bics	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
 8004c4e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c52:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10a      	bne.n	8004c6e <UART_CheckIdleState+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c60:	2010      	movs	r0, #16
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	4383      	bics	r3, r0
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	2380      	movs	r3, #128	@ 0x80
 8004c70:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c72:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004c74:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c78:	3264      	adds	r2, #100	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004c7c:	66a3      	str	r3, [r4, #104]	@ 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c7e:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004c80:	3a0c      	subs	r2, #12
 8004c82:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004c84:	e752      	b.n	8004b2c <UART_CheckIdleState+0xdc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c86:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c88:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c92:	6821      	ldr	r1, [r4, #0]
 8004c94:	4d14      	ldr	r5, [pc, #80]	@ (8004ce8 <UART_CheckIdleState+0x298>)
 8004c96:	680b      	ldr	r3, [r1, #0]
 8004c98:	402b      	ands	r3, r5
 8004c9a:	600b      	str	r3, [r1, #0]
 8004c9c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	6821      	ldr	r1, [r4, #0]
 8004caa:	688b      	ldr	r3, [r1, #8]
 8004cac:	4393      	bics	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]
 8004cb0:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10a      	bne.n	8004cd0 <UART_CheckIdleState+0x280>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc2:	2010      	movs	r0, #16
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	4383      	bics	r3, r0
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	2380      	movs	r3, #128	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cd4:	2184      	movs	r1, #132	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxISR = NULL;
 8004cdc:	66a3      	str	r3, [r4, #104]	@ 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cde:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004ce0:	3258      	adds	r2, #88	@ 0x58
 8004ce2:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004ce4:	e722      	b.n	8004b2c <UART_CheckIdleState+0xdc>
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	fffffedf 	.word	0xfffffedf

08004cec <HAL_UART_Init>:
{
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004cf0:	d074      	beq.n	8004ddc <HAL_UART_Init+0xf0>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d100      	bne.n	8004cfa <HAL_UART_Init+0xe>
 8004cf8:	e072      	b.n	8004de0 <HAL_UART_Init+0xf4>
  huart->gState = HAL_UART_STATE_BUSY;
 8004cfa:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d00:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004d02:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d04:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004d06:	438b      	bics	r3, r1
 8004d08:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d0a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d0c:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d0e:	432b      	orrs	r3, r5
 8004d10:	6965      	ldr	r5, [r4, #20]
 8004d12:	69e1      	ldr	r1, [r4, #28]
 8004d14:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d16:	4d4a      	ldr	r5, [pc, #296]	@ (8004e40 <HAL_UART_Init+0x154>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d18:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d1a:	4028      	ands	r0, r5
 8004d1c:	4303      	orrs	r3, r0
 8004d1e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d20:	6853      	ldr	r3, [r2, #4]
 8004d22:	4848      	ldr	r0, [pc, #288]	@ (8004e44 <HAL_UART_Init+0x158>)
  tmpreg |= huart->Init.OneBitSampling;
 8004d24:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d26:	4003      	ands	r3, r0
 8004d28:	68e0      	ldr	r0, [r4, #12]
 8004d2a:	4303      	orrs	r3, r0
 8004d2c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d30:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8004d32:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d34:	4d44      	ldr	r5, [pc, #272]	@ (8004e48 <HAL_UART_Init+0x15c>)
 8004d36:	4028      	ands	r0, r5
 8004d38:	4303      	orrs	r3, r0
 8004d3a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3c:	4b43      	ldr	r3, [pc, #268]	@ (8004e4c <HAL_UART_Init+0x160>)
 8004d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d40:	2303      	movs	r3, #3
 8004d42:	4013      	ands	r3, r2
 8004d44:	3b01      	subs	r3, #1
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d91f      	bls.n	8004d8a <HAL_UART_Init+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	4299      	cmp	r1, r3
 8004d50:	d100      	bne.n	8004d54 <HAL_UART_Init+0x68>
 8004d52:	e072      	b.n	8004e3a <HAL_UART_Init+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe ffb8 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d124      	bne.n	8004da6 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d60:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d130      	bne.n	8004dca <HAL_UART_Init+0xde>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	4939      	ldr	r1, [pc, #228]	@ (8004e50 <HAL_UART_Init+0x164>)
 8004d6c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004d6e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d70:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d72:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	438a      	bics	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	3929      	subs	r1, #41	@ 0x29
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004d84:	f7ff fe64 	bl	8004a50 <UART_CheckIdleState>
 8004d88:	e029      	b.n	8004dde <HAL_UART_Init+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d8a:	2080      	movs	r0, #128	@ 0x80
 8004d8c:	4a31      	ldr	r2, [pc, #196]	@ (8004e54 <HAL_UART_Init+0x168>)
 8004d8e:	0200      	lsls	r0, r0, #8
 8004d90:	5cd3      	ldrb	r3, [r2, r3]
 8004d92:	4281      	cmp	r1, r0
 8004d94:	d029      	beq.n	8004dea <HAL_UART_Init+0xfe>
    switch (clocksource)
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d046      	beq.n	8004e28 <HAL_UART_Init+0x13c>
 8004d9a:	d81a      	bhi.n	8004dd2 <HAL_UART_Init+0xe6>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0d9      	beq.n	8004d54 <HAL_UART_Init+0x68>
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d118      	bne.n	8004dd6 <HAL_UART_Init+0xea>
        pclk = (uint32_t) HSI_VALUE;
 8004da4:	482c      	ldr	r0, [pc, #176]	@ (8004e58 <HAL_UART_Init+0x16c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004da6:	6861      	ldr	r1, [r4, #4]
 8004da8:	084b      	lsrs	r3, r1, #1
 8004daa:	1818      	adds	r0, r3, r0
 8004dac:	f7fb f986 	bl	80000bc <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	0002      	movs	r2, r0
 8004db2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e5c <HAL_UART_Init+0x170>)
 8004db4:	3a10      	subs	r2, #16
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d80d      	bhi.n	8004dd6 <HAL_UART_Init+0xea>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dc2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ce      	beq.n	8004d68 <HAL_UART_Init+0x7c>
    UART_AdvFeatureConfig(huart);
 8004dca:	0020      	movs	r0, r4
 8004dcc:	f7ff fdd8 	bl	8004980 <UART_AdvFeatureConfig>
 8004dd0:	e7ca      	b.n	8004d68 <HAL_UART_Init+0x7c>
    switch (clocksource)
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d0e7      	beq.n	8004da6 <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dda:	66e3      	str	r3, [r4, #108]	@ 0x6c
    return HAL_ERROR;
 8004ddc:	2001      	movs	r0, #1
}
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004de0:	2278      	movs	r2, #120	@ 0x78
 8004de2:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004de4:	f7fe f848 	bl	8002e78 <HAL_UART_MspInit>
 8004de8:	e787      	b.n	8004cfa <HAL_UART_Init+0xe>
    switch (clocksource)
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d01f      	beq.n	8004e2e <HAL_UART_Init+0x142>
 8004dee:	d816      	bhi.n	8004e1e <HAL_UART_Init+0x132>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d022      	beq.n	8004e3a <HAL_UART_Init+0x14e>
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d1ee      	bne.n	8004dd6 <HAL_UART_Init+0xea>
 8004df8:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <HAL_UART_Init+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dfa:	6861      	ldr	r1, [r4, #4]
 8004dfc:	0848      	lsrs	r0, r1, #1
 8004dfe:	18c0      	adds	r0, r0, r3
 8004e00:	f7fb f95c 	bl	80000bc <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e04:	0002      	movs	r2, r0
 8004e06:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <HAL_UART_Init+0x170>)
 8004e08:	3a10      	subs	r2, #16
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d8e3      	bhi.n	8004dd6 <HAL_UART_Init+0xea>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0e:	4b15      	ldr	r3, [pc, #84]	@ (8004e64 <HAL_UART_Init+0x178>)
        huart->Instance->BRR = brrtemp;
 8004e10:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e12:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e14:	0700      	lsls	r0, r0, #28
 8004e16:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004e18:	4303      	orrs	r3, r0
 8004e1a:	60d3      	str	r3, [r2, #12]
  return ret;
 8004e1c:	e79e      	b.n	8004d5c <HAL_UART_Init+0x70>
    switch (clocksource)
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d1d9      	bne.n	8004dd6 <HAL_UART_Init+0xea>
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	025b      	lsls	r3, r3, #9
 8004e26:	e7e8      	b.n	8004dfa <HAL_UART_Init+0x10e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e28:	f7fe ff1e 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
        break;
 8004e2c:	e794      	b.n	8004d58 <HAL_UART_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fe ff1b 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e32:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d1e0      	bne.n	8004dfa <HAL_UART_Init+0x10e>
 8004e38:	e790      	b.n	8004d5c <HAL_UART_Init+0x70>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3a:	f7fe ff45 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
        break;
 8004e3e:	e7f8      	b.n	8004e32 <HAL_UART_Init+0x146>
 8004e40:	ffff69f3 	.word	0xffff69f3
 8004e44:	ffffcfff 	.word	0xffffcfff
 8004e48:	fffff4ff 	.word	0xfffff4ff
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	ffffb7ff 	.word	0xffffb7ff
 8004e54:	080059b4 	.word	0x080059b4
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	0000ffef 	.word	0x0000ffef
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	0000fff0 	.word	0x0000fff0

08004e68 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8004e68:	b530      	push	{r4, r5, lr}
 8004e6a:	b20b      	sxth	r3, r1
 8004e6c:	1409      	asrs	r1, r1, #16
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8004e6e:	8802      	ldrh	r2, [r0, #0]

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004e70:	000c      	movs	r4, r1
    square_limit = maxModule * maxModule;
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004e72:	8845      	ldrh	r5, [r0, #2]
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004e74:	0018      	movs	r0, r3
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8004e76:	434c      	muls	r4, r1
    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
 8004e78:	4358      	muls	r0, r3
    square_limit = maxModule * maxModule;
 8004e7a:	4352      	muls	r2, r2
    square_sum = square_q + square_d;
 8004e7c:	1900      	adds	r0, r0, r4
{
 8004e7e:	b085      	sub	sp, #20

    if (square_sum > square_limit)
 8004e80:	4282      	cmp	r2, r0
 8004e82:	da0f      	bge.n	8004ea4 <Circle_Limitation+0x3c>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8004e84:	0028      	movs	r0, r5
 8004e86:	436d      	muls	r5, r5
    {
      if (square_d <= vd_square_limit)
 8004e88:	42ac      	cmp	r4, r5
 8004e8a:	dc11      	bgt.n	8004eb0 <Circle_Limitation+0x48>
      {
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - square_d) / 1048576;
 8004e8c:	1b12      	subs	r2, r2, r4
 8004e8e:	17d4      	asrs	r4, r2, #31
 8004e90:	0324      	lsls	r4, r4, #12
 8004e92:	0b24      	lsrs	r4, r4, #12
 8004e94:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004e96:	4810      	ldr	r0, [pc, #64]	@ (8004ed8 <Circle_Limitation+0x70>)
        square_temp = (square_limit - square_d) / 1048576;
 8004e98:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004e9a:	0052      	lsls	r2, r2, #1
 8004e9c:	5a12      	ldrh	r2, [r2, r0]
#else
        square_temp = square_limit - square_d;
        new_q = MCM_Sqrt(square_temp);
#endif
        if (Vqd.q < 0)
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db14      	blt.n	8004ecc <Circle_Limitation+0x64>
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8004ea2:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8004ea4:	0418      	lsls	r0, r3, #16
 8004ea6:	0409      	lsls	r1, r1, #16
 8004ea8:	0c00      	lsrs	r0, r0, #16
 8004eaa:	4308      	orrs	r0, r1
}
 8004eac:	b005      	add	sp, #20
 8004eae:	bd30      	pop	{r4, r5, pc}
        if (Vqd.d < 0)
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	db0e      	blt.n	8004ed2 <Circle_Limitation+0x6a>
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004eb4:	1b52      	subs	r2, r2, r5
 8004eb6:	17d4      	asrs	r4, r2, #31
 8004eb8:	0324      	lsls	r4, r4, #12
 8004eba:	0b24      	lsrs	r4, r4, #12
 8004ebc:	18a2      	adds	r2, r4, r2
        new_q = SqrtTable[square_temp];
 8004ebe:	4906      	ldr	r1, [pc, #24]	@ (8004ed8 <Circle_Limitation+0x70>)
        square_temp = (square_limit - vd_square_limit) / 1048576;
 8004ec0:	1512      	asrs	r2, r2, #20
        new_q = SqrtTable[square_temp];
 8004ec2:	0052      	lsls	r2, r2, #1
 8004ec4:	5a52      	ldrh	r2, [r2, r1]
      local_vqd.d = (int16_t)new_d;
 8004ec6:	b201      	sxth	r1, r0
        if (Vqd.q < 0)
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	daea      	bge.n	8004ea2 <Circle_Limitation+0x3a>
          new_q = - new_q;
 8004ecc:	4252      	negs	r2, r2
      local_vqd.q = (int16_t)new_q;
 8004ece:	b213      	sxth	r3, r2
      local_vqd.d = (int16_t)new_d;
 8004ed0:	e7e8      	b.n	8004ea4 <Circle_Limitation+0x3c>
          new_d = -new_d;
 8004ed2:	4240      	negs	r0, r0
 8004ed4:	e7ee      	b.n	8004eb4 <Circle_Limitation+0x4c>
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	080059b8 	.word	0x080059b8

08004edc <EAC_Init>:
  else
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
 8004edc:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8004ede:	2300      	movs	r3, #0
    pHandle->pSTC = pSTC;
 8004ee0:	6001      	str	r1, [r0, #0]
    pHandle->pVSS = pVSS;
 8004ee2:	6042      	str	r2, [r0, #4]
    pHandle->EncAligned = false;
 8004ee4:	81c3      	strh	r3, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004ee6:	4770      	bx	lr

08004ee8 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	0004      	movs	r4, r0
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2100      	movs	r1, #0
 8004ef0:	6840      	ldr	r0, [r0, #4]
 8004ef2:	f000 fb8f 	bl	8005614 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8004ef6:	2314      	movs	r3, #20
 8004ef8:	5ee1      	ldrsh	r1, [r4, r3]
 8004efa:	6860      	ldr	r0, [r4, #4]
 8004efc:	f000 fb7e 	bl	80055fc <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	2104      	movs	r1, #4
 8004f04:	f000 fada 	bl	80054bc <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	f000 fad9 	bl	80054c4 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8004f12:	2312      	movs	r3, #18
 8004f14:	5ee1      	ldrsh	r1, [r4, r3]
 8004f16:	8ae2      	ldrh	r2, [r4, #22]
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	f000 fad3 	bl	80054c4 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
    wAux /= 1000U;
 8004f1e:	21fa      	movs	r1, #250	@ 0xfa
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004f20:	8ae3      	ldrh	r3, [r4, #22]
 8004f22:	8a20      	ldrh	r0, [r4, #16]
    wAux /= 1000U;
 8004f24:	0089      	lsls	r1, r1, #2
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8004f26:	4358      	muls	r0, r3
    wAux /= 1000U;
 8004f28:	f7fb f8c8 	bl	80000bc <__udivsi3>
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	81a0      	strh	r0, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)

08004f34 <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec(EncAlign_Handle_t *pHandle)
{
 8004f34:	b510      	push	{r4, lr}
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8004f36:	8983      	ldrh	r3, [r0, #12]
{
 8004f38:	0004      	movs	r4, r0
    if (pHandle->hRemainingTicks > 0U)
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d011      	beq.n	8004f62 <EAC_Exec+0x2e>
    {
      pHandle->hRemainingTicks--;
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8183      	strh	r3, [r0, #12]
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8004f44:	2000      	movs	r0, #0
      if (0U == pHandle->hRemainingTicks)
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d000      	beq.n	8004f4c <EAC_Exec+0x18>
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8004f4a:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8004f4c:	2314      	movs	r3, #20
 8004f4e:	5ee0      	ldrsh	r0, [r4, r3]
 8004f50:	7e21      	ldrb	r1, [r4, #24]
 8004f52:	f7fb f93d 	bl	80001d0 <__divsi3>
 8004f56:	b201      	sxth	r1, r0
 8004f58:	68a0      	ldr	r0, [r4, #8]
 8004f5a:	f000 f927 	bl	80051ac <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8004f62:	2001      	movs	r0, #1
 8004f64:	e7f1      	b.n	8004f4a <EAC_Exec+0x16>
 8004f66:	46c0      	nop			@ (mov r8, r8)

08004f68 <EAC_IsAligned>:
__weak bool EAC_IsAligned(EncAlign_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 8004f68:	7b80      	ldrb	r0, [r0, #14]
#endif
}
 8004f6a:	4770      	bx	lr

08004f6c <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8004f6c:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8004f6e:	4770      	bx	lr

08004f70 <ENC_Init>:
  WRITE_REG(TIMx->CNT, Counter);
 8004f70:	2300      	movs	r3, #0
            required for the speed position sensor management using ENCODER
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Init(ENCODER_Handle_t *pHandle)
{
 8004f72:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8004f74:	6a05      	ldr	r5, [r0, #32]
{
 8004f76:	0004      	movs	r4, r0
 8004f78:	626b      	str	r3, [r5, #36]	@ 0x24
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004f7a:	336e      	adds	r3, #110	@ 0x6e
 8004f7c:	5ac1      	ldrh	r1, [r0, r3]
 8004f7e:	2001      	movs	r0, #1
 8004f80:	4240      	negs	r0, r0
 8004f82:	f7fb f89b 	bl	80000bc <__udivsi3>
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004f86:	236c      	movs	r3, #108	@ 0x6c
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8004f88:	21f0      	movs	r1, #240	@ 0xf0
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8004f8a:	66a0      	str	r0, [r4, #104]	@ 0x68
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8004f8c:	5ae3      	ldrh	r3, [r4, r3]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f92:	69aa      	ldr	r2, [r5, #24]
 8004f94:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004f96:	438a      	bics	r2, r1
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61ab      	str	r3, [r5, #24]
 8004f9e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004fa0:	69aa      	ldr	r2, [r5, #24]
 8004fa2:	490d      	ldr	r1, [pc, #52]	@ (8004fd8 <ENC_Init+0x68>)
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	400a      	ands	r2, r1
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61ab      	str	r3, [r5, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004fae:	2302      	movs	r3, #2
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004fb0:	2201      	movs	r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004fb2:	425b      	negs	r3, r3
 8004fb4:	612b      	str	r3, [r5, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004fb6:	68eb      	ldr	r3, [r5, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	602b      	str	r3, [r5, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8004fc2:	2374      	movs	r3, #116	@ 0x74
 8004fc4:	5ce2      	ldrb	r2, [r4, r3]

    for (index = 0U; index < bufferSize; index++)
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d005      	beq.n	8004fd6 <ENC_Init+0x66>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004fca:	0020      	movs	r0, r4
 8004fcc:	2100      	movs	r1, #0
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	3028      	adds	r0, #40	@ 0x28
 8004fd2:	f000 fb65 	bl	80056a0 <memset>
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	ffff0fff 	.word	0xffff0fff

08004fdc <ENC_Clear>:
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004fdc:	2374      	movs	r3, #116	@ 0x74
{
 8004fde:	b510      	push	{r4, lr}
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004fe0:	5cc2      	ldrb	r2, [r0, r3]
{
 8004fe2:	0004      	movs	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d004      	beq.n	8004ff2 <ENC_Clear+0x16>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8004fe8:	2100      	movs	r1, #0
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	3028      	adds	r0, #40	@ 0x28
 8004fee:	f000 fb57 	bl	80056a0 <memset>
    }
    pHandle->SensorIsReliable = true;
 8004ff2:	2375      	movs	r3, #117	@ 0x75
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	54e2      	strb	r2, [r4, r3]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)

08004ffc <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8004ffc:	0002      	movs	r2, r0
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8004ffe:	6a03      	ldr	r3, [r0, #32]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8005000:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005002:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8005004:	0409      	lsls	r1, r1, #16
 8005006:	0c09      	lsrs	r1, r1, #16
 8005008:	434b      	muls	r3, r1
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 800500a:	2006      	movs	r0, #6
 800500c:	5e11      	ldrsh	r1, [r2, r0]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800500e:	141b      	asrs	r3, r3, #16

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005010:	7850      	ldrb	r0, [r2, #1]
    pHandle->_Super.hMecAngle = mecAngle;
 8005012:	80d3      	strh	r3, [r2, #6]
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005014:	b29b      	uxth	r3, r3
 8005016:	4358      	muls	r0, r3

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8005018:	1a5b      	subs	r3, r3, r1
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800501a:	6891      	ldr	r1, [r2, #8]
 800501c:	b21b      	sxth	r3, r3
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800501e:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005020:	18cb      	adds	r3, r1, r3
    pHandle->_Super.hElAngle = elAngle;
 8005022:	8090      	strh	r0, [r2, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005024:	6093      	str	r3, [r2, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8005026:	4770      	bx	lr

08005028 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	46c6      	mov	lr, r8
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 800502c:	2274      	movs	r2, #116	@ 0x74
{
 800502e:	b500      	push	{lr}
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005030:	6a03      	ldr	r3, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8005032:	5c85      	ldrb	r5, [r0, r2]
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8005034:	3a04      	subs	r2, #4
 8005036:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
{
 8005038:	0004      	movs	r4, r0
 800503a:	000f      	movs	r7, r1
    OverflowCntSample = pHandle->TimerOverflowNb;
 800503c:	5a81      	ldrh	r1, [r0, r2]
    pHandle->TimerOverflowNb = 0;
 800503e:	2000      	movs	r0, #0
 8005040:	52a0      	strh	r0, [r4, r2]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3a60      	subs	r2, #96	@ 0x60
 8005046:	401a      	ands	r2, r3
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
    {
      pHandle->TimerOverflowError = true;
 8005048:	237d      	movs	r3, #125	@ 0x7d
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 800504a:	2901      	cmp	r1, #1
 800504c:	d800      	bhi.n	8005050 <ENC_CalcAvrgMecSpeedUnit+0x28>
 800504e:	e0a2      	b.n	8005196 <ENC_CalcAvrgMecSpeedUnit+0x16e>
      pHandle->TimerOverflowError = true;
 8005050:	2101      	movs	r1, #1
 8005052:	54e1      	strb	r1, [r4, r3]
 8005054:	3b7c      	subs	r3, #124	@ 0x7c
 8005056:	4698      	mov	r8, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8005058:	2372      	movs	r3, #114	@ 0x72
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800505a:	216e      	movs	r1, #110	@ 0x6e
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 800505c:	5ae3      	ldrh	r3, [r4, r3]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800505e:	5a61      	ldrh	r1, [r4, r1]
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8005060:	1af0      	subs	r0, r6, r3
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8005062:	2a00      	cmp	r2, #0
 8005064:	d100      	bne.n	8005068 <ENC_CalcAvrgMecSpeedUnit+0x40>
 8005066:	e087      	b.n	8005178 <ENC_CalcAvrgMecSpeedUnit+0x150>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005068:	227c      	movs	r2, #124	@ 0x7c
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800506a:	42b3      	cmp	r3, r6
 800506c:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800506e:	5ca2      	ldrb	r2, [r4, r2]
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005070:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005072:	320a      	adds	r2, #10
 8005074:	0092      	lsls	r2, r2, #2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005076:	1ac3      	subs	r3, r0, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005078:	5113      	str	r3, [r2, r4]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800507a:	2d00      	cmp	r5, #0
 800507c:	d100      	bne.n	8005080 <ENC_CalcAvrgMecSpeedUnit+0x58>
 800507e:	e087      	b.n	8005190 <ENC_CalcAvrgMecSpeedUnit+0x168>
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005080:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005082:	2d01      	cmp	r5, #1
 8005084:	d039      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005086:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005088:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800508a:	2d02      	cmp	r5, #2
 800508c:	d035      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800508e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005090:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005092:	2d03      	cmp	r5, #3
 8005094:	d031      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005096:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005098:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800509a:	2d04      	cmp	r5, #4
 800509c:	d02d      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800509e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80050a0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050a2:	2d05      	cmp	r5, #5
 80050a4:	d029      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050a6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80050a8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050aa:	2d06      	cmp	r5, #6
 80050ac:	d025      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80050b0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050b2:	2d07      	cmp	r5, #7
 80050b4:	d021      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050b6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80050b8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050ba:	2d08      	cmp	r5, #8
 80050bc:	d01d      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050be:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80050c0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050c2:	2d09      	cmp	r5, #9
 80050c4:	d019      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050c6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80050c8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050ca:	2d0a      	cmp	r5, #10
 80050cc:	d015      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050ce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80050d0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050d2:	2d0b      	cmp	r5, #11
 80050d4:	d011      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050da:	2d0c      	cmp	r5, #12
 80050dc:	d00d      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050de:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80050e0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050e2:	2d0d      	cmp	r5, #13
 80050e4:	d009      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050e6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80050e8:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050ea:	2d0e      	cmp	r5, #14
 80050ec:	d005      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050ee:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80050f0:	189b      	adds	r3, r3, r2
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80050f2:	2d0f      	cmp	r5, #15
 80050f4:	d001      	beq.n	80050fa <ENC_CalcAvrgMecSpeedUnit+0xd2>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80050f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050f8:	189b      	adds	r3, r3, r2
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 80050fa:	4369      	muls	r1, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80050fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80050fe:	4358      	muls	r0, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8005100:	2900      	cmp	r1, #0
 8005102:	d001      	beq.n	8005108 <ENC_CalcAvrgMecSpeedUnit+0xe0>
 8005104:	f7fb f864 	bl	80001d0 <__divsi3>

    *pMecSpeedUnit = (int16_t)wtemp1;
 8005108:	b203      	sxth	r3, r0

    /* Computes & stores average mechanical acceleration */
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800510a:	b280      	uxth	r0, r0
    *pMecSpeedUnit = (int16_t)wtemp1;
 800510c:	803b      	strh	r3, [r7, #0]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 800510e:	89a2      	ldrh	r2, [r4, #12]

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8005110:	81a3      	strh	r3, [r4, #12]

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005112:	237c      	movs	r3, #124	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005114:	1a80      	subs	r0, r0, r2
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005116:	226c      	movs	r2, #108	@ 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005118:	8260      	strh	r0, [r4, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800511a:	5ce3      	ldrb	r3, [r4, r3]
 800511c:	5aa2      	ldrh	r2, [r4, r2]
 800511e:	330a      	adds	r3, #10
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	591b      	ldr	r3, [r3, r4]
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8005124:	7860      	ldrb	r0, [r4, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005126:	4353      	muls	r3, r2
 8005128:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 800512a:	236e      	movs	r3, #110	@ 0x6e
 800512c:	5ae1      	ldrh	r1, [r4, r3]
 800512e:	f7fb f84f 	bl	80001d0 <__divsi3>
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005132:	69e3      	ldr	r3, [r4, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005134:	8b61      	ldrh	r1, [r4, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005136:	4358      	muls	r0, r3
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005138:	f7fb f84a 	bl	80001d0 <__divsi3>

    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800513c:	2380      	movs	r3, #128	@ 0x80
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 800513e:	81e0      	strh	r0, [r4, #14]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	429e      	cmp	r6, r3
 8005144:	d300      	bcc.n	8005148 <ENC_CalcAvrgMecSpeedUnit+0x120>
 8005146:	4e18      	ldr	r6, [pc, #96]	@ (80051a8 <ENC_CalcAvrgMecSpeedUnit+0x180>)
 8005148:	2372      	movs	r3, #114	@ 0x72
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 800514a:	227c      	movs	r2, #124	@ 0x7c
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800514c:	52e6      	strh	r6, [r4, r3]
    pHandle->DeltaCapturesIndex++;
 800514e:	5ca3      	ldrb	r3, [r4, r2]
 8005150:	3301      	adds	r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	54a3      	strb	r3, [r4, r2]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005156:	5ca3      	ldrb	r3, [r4, r2]
 8005158:	42ab      	cmp	r3, r5
 800515a:	d301      	bcc.n	8005160 <ENC_CalcAvrgMecSpeedUnit+0x138>
    {
      pHandle->DeltaCapturesIndex = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	54a3      	strb	r3, [r4, r2]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8005160:	4643      	mov	r3, r8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01a      	beq.n	800519c <ENC_CalcAvrgMecSpeedUnit+0x174>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
 8005166:	2375      	movs	r3, #117	@ 0x75
 8005168:	2200      	movs	r2, #0
      bReliability = false;
 800516a:	2000      	movs	r0, #0
      pHandle->SensorIsReliable = false;
 800516c:	54e2      	strb	r2, [r4, r3]
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800516e:	78e3      	ldrb	r3, [r4, #3]
 8005170:	7023      	strb	r3, [r4, #0]
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8005172:	bc80      	pop	{r7}
 8005174:	46b8      	mov	r8, r7
 8005176:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005178:	227c      	movs	r2, #124	@ 0x7c
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800517a:	429e      	cmp	r6, r3
 800517c:	419b      	sbcs	r3, r3
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800517e:	5ca2      	ldrb	r2, [r4, r2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005180:	400b      	ands	r3, r1
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005182:	320a      	adds	r2, #10
 8005184:	0092      	lsls	r2, r2, #2
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005186:	181b      	adds	r3, r3, r0
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8005188:	5113      	str	r3, [r2, r4]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800518a:	2d00      	cmp	r5, #0
 800518c:	d000      	beq.n	8005190 <ENC_CalcAvrgMecSpeedUnit+0x168>
 800518e:	e777      	b.n	8005080 <ENC_CalcAvrgMecSpeedUnit+0x58>
 8005190:	2000      	movs	r0, #0
 8005192:	2300      	movs	r3, #0
 8005194:	e7ba      	b.n	800510c <ENC_CalcAvrgMecSpeedUnit+0xe4>
    if (pHandle->TimerOverflowError)
 8005196:	5ce3      	ldrb	r3, [r4, r3]
 8005198:	4698      	mov	r8, r3
 800519a:	e75d      	b.n	8005058 <ENC_CalcAvrgMecSpeedUnit+0x30>
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 800519c:	0039      	movs	r1, r7
 800519e:	0020      	movs	r0, r4
 80051a0:	f000 f93c 	bl	800541c <SPD_IsMecSpeedReliable>
 80051a4:	e7e5      	b.n	8005172 <ENC_CalcAvrgMecSpeedUnit+0x14a>
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	0000ffff 	.word	0x0000ffff

080051ac <ENC_SetMecAngle>:
  *         As a consequence, timer counter is computed and updated.
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle in [s16degree](measurement_units.md) format.
  */
__weak void ENC_SetMecAngle(ENCODER_Handle_t *pHandle, int16_t hMecAngle)
{
 80051ac:	0003      	movs	r3, r0
 80051ae:	b510      	push	{r4, lr}

    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
 80051b0:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80051b2:	785a      	ldrb	r2, [r3, #1]
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80051b4:	6a04      	ldr	r4, [r0, #32]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80051b6:	b288      	uxth	r0, r1
 80051b8:	4342      	muls	r2, r0
 80051ba:	809a      	strh	r2, [r3, #4]
    if (localhMecAngle < 0)
 80051bc:	2900      	cmp	r1, #0
 80051be:	da01      	bge.n	80051c4 <ENC_SetMecAngle+0x18>
    {
      localhMecAngle *= -1;
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 80051c0:	3801      	subs	r0, #1
 80051c2:	b280      	uxth	r0, r0
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80051c4:	226e      	movs	r2, #110	@ 0x6e
 80051c6:	5a9b      	ldrh	r3, [r3, r2]
 80051c8:	4902      	ldr	r1, [pc, #8]	@ (80051d4 <ENC_SetMecAngle+0x28>)
 80051ca:	4358      	muls	r0, r3
 80051cc:	f7fa ff76 	bl	80000bc <__udivsi3>

    TIMx->CNT = (uint16_t)hAngleCounts;
 80051d0:	6260      	str	r0, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80051d2:	bd10      	pop	{r4, pc}
 80051d4:	0000ffff 	.word	0x0000ffff

080051d8 <ENC_IRQHandler>:
{
  ENCODER_Handle_t *pHandle = (ENCODER_Handle_t *)pHandleVoid; //cstat !MISRAC2012-Rule-11.5

  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;
 80051d8:	2270      	movs	r2, #112	@ 0x70
 80051da:	5a83      	ldrh	r3, [r0, r2]
 80051dc:	3301      	adds	r3, #1
 80051de:	b29b      	uxth	r3, r3
 80051e0:	5283      	strh	r3, [r0, r2]

  return (MC_NULL);
}
 80051e2:	2000      	movs	r0, #0
 80051e4:	4770      	bx	lr
 80051e6:	46c0      	nop			@ (mov r8, r8)

080051e8 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 80051ec:	4770      	bx	lr
 80051ee:	46c0      	nop			@ (mov r8, r8)

080051f0 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 80051f0:	7803      	ldrb	r3, [r0, #0]
{
 80051f2:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <NTC_Init+0x12>
      pHandle->hFaultState = MC_NO_ERROR;
 80051f8:	2300      	movs	r3, #0
 80051fa:	8103      	strh	r3, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80051fc:	8883      	ldrh	r3, [r0, #4]
 80051fe:	8043      	strh	r3, [r0, #2]
}
 8005200:	bd10      	pop	{r4, pc}
      NTC_Clear(pHandle);
 8005202:	f7ff fff1 	bl	80051e8 <NTC_Clear>
 8005206:	e7fb      	b.n	8005200 <NTC_Init+0x10>

08005208 <PID_HandleInit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005208:	6803      	ldr	r3, [r0, #0]
 800520a:	6043      	str	r3, [r0, #4]
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800520c:	8c03      	ldrh	r3, [r0, #32]
 800520e:	8443      	strh	r3, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005214:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005216:	4770      	bx	lr

08005218 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005218:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800521a:	4770      	bx	lr

0800521c <PI_Controller>:
  * 
  * The resulting value is then saturated by the upper and lower output limit values before 
  * being returned.
  */
__weak int16_t PI_Controller(PID_Handle_t *pHandle, int32_t wProcessVarError)
{
 800521c:	0003      	movs	r3, r0
 800521e:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wIntegral_Term;
    int32_t wOutput_32;
    int32_t wIntegral_sum_temp;
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005220:	2216      	movs	r2, #22
 8005222:	5e9e      	ldrsh	r6, [r3, r2]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005224:	2214      	movs	r2, #20
 8005226:	5e80      	ldrsh	r0, [r0, r2]

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005228:	2406      	movs	r4, #6
 800522a:	5f1d      	ldrsh	r5, [r3, r4]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800522c:	2404      	movs	r4, #4
 800522e:	5f1a      	ldrsh	r2, [r3, r4]
 8005230:	2400      	movs	r4, #0
 8005232:	434a      	muls	r2, r1
    if (0 == pHandle->hKiGain)
 8005234:	2d00      	cmp	r5, #0
 8005236:	d00b      	beq.n	8005250 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005238:	4369      	muls	r1, r5
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800523a:	689d      	ldr	r5, [r3, #8]
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800523c:	68dc      	ldr	r4, [r3, #12]
      if (wIntegral_sum_temp < 0)
 800523e:	186f      	adds	r7, r5, r1
 8005240:	d41a      	bmi.n	8005278 <PI_Controller+0x5c>
        if (pHandle->wIntegralTerm < 0)
 8005242:	4029      	ands	r1, r5
 8005244:	d422      	bmi.n	800528c <PI_Controller+0x70>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005246:	42a7      	cmp	r7, r4
 8005248:	dc02      	bgt.n	8005250 <PI_Controller+0x34>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800524a:	691c      	ldr	r4, [r3, #16]
 800524c:	42bc      	cmp	r4, r7
 800524e:	dd1b      	ble.n	8005288 <PI_Controller+0x6c>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005250:	0025      	movs	r5, r4
 8005252:	8b99      	ldrh	r1, [r3, #28]
 8005254:	410a      	asrs	r2, r1
 8005256:	8bd9      	ldrh	r1, [r3, #30]
 8005258:	410d      	asrs	r5, r1
 800525a:	1952      	adds	r2, r2, r5
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800525c:	4290      	cmp	r0, r2
 800525e:	da03      	bge.n	8005268 <PI_Controller+0x4c>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005260:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005262:	18a4      	adds	r4, r4, r2
 8005264:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005268:	4296      	cmp	r6, r2
 800526a:	dd03      	ble.n	8005274 <PI_Controller+0x58>
      wDischarge = hLowerOutputLimit - wOutput_32;
 800526c:	1ab2      	subs	r2, r6, r2
 800526e:	0030      	movs	r0, r6
    pHandle->wIntegralTerm += wDischarge;
 8005270:	18a4      	adds	r4, r4, r2
 8005272:	e7f7      	b.n	8005264 <PI_Controller+0x48>
    returnValue = (int16_t)wOutput_32;
 8005274:	b210      	sxth	r0, r2
 8005276:	e7f5      	b.n	8005264 <PI_Controller+0x48>
        if (pHandle->wIntegralTerm > 0)
 8005278:	2d00      	cmp	r5, #0
 800527a:	dde4      	ble.n	8005246 <PI_Controller+0x2a>
          if (wIntegral_Term > 0)
 800527c:	2900      	cmp	r1, #0
 800527e:	dde2      	ble.n	8005246 <PI_Controller+0x2a>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005280:	4903      	ldr	r1, [pc, #12]	@ (8005290 <PI_Controller+0x74>)
 8005282:	0027      	movs	r7, r4
 8005284:	428c      	cmp	r4, r1
 8005286:	d1e3      	bne.n	8005250 <PI_Controller+0x34>
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8005288:	003c      	movs	r4, r7
 800528a:	e7e1      	b.n	8005250 <PI_Controller+0x34>
            wIntegral_sum_temp = -INT32_MAX;
 800528c:	4f01      	ldr	r7, [pc, #4]	@ (8005294 <PI_Controller+0x78>)
 800528e:	e7da      	b.n	8005246 <PI_Controller+0x2a>
 8005290:	7fffffff 	.word	0x7fffffff
 8005294:	80000001 	.word	0x80000001

08005298 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005298:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800529a:	6883      	ldr	r3, [r0, #8]
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800529c:	220c      	movs	r2, #12
 800529e:	5e99      	ldrsh	r1, [r3, r2]
 80052a0:	2416      	movs	r4, #22
 80052a2:	5f1a      	ldrsh	r2, [r3, r4]
 80052a4:	434a      	muls	r2, r1
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80052a6:	240e      	movs	r4, #14
 80052a8:	5f19      	ldrsh	r1, [r3, r4]
 80052aa:	2418      	movs	r4, #24
 80052ac:	5f1b      	ldrsh	r3, [r3, r4]
 80052ae:	434b      	muls	r3, r1
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80052b0:	18d2      	adds	r2, r2, r3
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80052b2:	2300      	movs	r3, #0
 80052b4:	5ec1      	ldrsh	r1, [r0, r3]
    wAux /= 65536;
 80052b6:	17d3      	asrs	r3, r2, #31
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	189b      	adds	r3, r3, r2
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80052be:	220f      	movs	r2, #15
    wAux /= 65536;
 80052c0:	141b      	asrs	r3, r3, #16
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	17dc      	asrs	r4, r3, #31
 80052c6:	4022      	ands	r2, r4
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	111b      	asrs	r3, r3, #4
 80052cc:	185b      	adds	r3, r3, r1
 80052ce:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	46c0      	nop			@ (mov r8, r8)

080052d4 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80052d8:	4770      	bx	lr
 80052da:	46c0      	nop			@ (mov r8, r8)

080052dc <waitForPolarizationEnd>:
  * @param  repCnt Repetition counter value.
  * @param  cnt Polarization counter value.
  */
//cstat !MISRAC2012-Rule-8.13
__weak void waitForPolarizationEnd(TIM_TypeDef *TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt)
{
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80052de:	2703      	movs	r7, #3
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80052e0:	3201      	adds	r2, #1
 80052e2:	0856      	lsrs	r6, r2, #1
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80052e4:	2502      	movs	r5, #2

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80052e6:	2200      	movs	r2, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80052e8:	427f      	negs	r7, r7
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80052ea:	0176      	lsls	r6, r6, #5
 80052ec:	6107      	str	r7, [r0, #16]
    while (*cnt < NB_CONVERSIONS)
 80052ee:	781c      	ldrb	r4, [r3, #0]
 80052f0:	2c0f      	cmp	r4, #15
 80052f2:	d80c      	bhi.n	800530e <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80052f4:	6904      	ldr	r4, [r0, #16]
 80052f6:	4225      	tst	r5, r4
 80052f8:	d0f9      	beq.n	80052ee <waitForPolarizationEnd+0x12>
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80052fa:	3201      	adds	r2, #1
 80052fc:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80052fe:	6107      	str	r7, [r0, #16]
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005300:	4296      	cmp	r6, r2
 8005302:	d8f4      	bhi.n	80052ee <waitForPolarizationEnd+0x12>
        {
          if (*cnt < NB_CONVERSIONS)
 8005304:	781c      	ldrb	r4, [r3, #0]
 8005306:	2c0f      	cmp	r4, #15
 8005308:	d8f1      	bhi.n	80052ee <waitForPolarizationEnd+0x12>
          {
            *SWerror = 1u;
 800530a:	2301      	movs	r3, #1
 800530c:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800530e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005310 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005310:	8a43      	ldrh	r3, [r0, #18]
 8005312:	8981      	ldrh	r1, [r0, #12]
{
 8005314:	b530      	push	{r4, r5, lr}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8005316:	18c9      	adds	r1, r1, r3
 8005318:	0849      	lsrs	r1, r1, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800531a:	8943      	ldrh	r3, [r0, #10]
 800531c:	040d      	lsls	r5, r1, #16
 800531e:	430d      	orrs	r5, r1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <RVBS_Clear+0x26>
 8005324:	2300      	movs	r3, #0
    {
      pHandle->aBuffer[index] = aux;
 8005326:	6944      	ldr	r4, [r0, #20]
 8005328:	005a      	lsls	r2, r3, #1
 800532a:	5311      	strh	r1, [r2, r4]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800532c:	3301      	adds	r3, #1
 800532e:	8942      	ldrh	r2, [r0, #10]
 8005330:	b29b      	uxth	r3, r3
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f8      	bhi.n	8005328 <RVBS_Clear+0x18>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8005336:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8005338:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 800533a:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800533c:	bd30      	pop	{r4, r5, pc}
 800533e:	46c0      	nop			@ (mov r8, r8)

08005340 <RVBS_Init>:
{
 8005340:	b510      	push	{r4, lr}
    RVBS_Clear(pHandle);
 8005342:	f7ff ffe5 	bl	8005310 <RVBS_Clear>
}
 8005346:	bd10      	pop	{r4, pc}

08005348 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 8005348:	b510      	push	{r4, lr}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800534a:	8982      	ldrh	r2, [r0, #12]
 800534c:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800534e:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8005350:	428a      	cmp	r2, r1
 8005352:	d00d      	beq.n	8005370 <RVBS_CheckFaultState+0x28>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005354:	8a44      	ldrh	r4, [r0, #18]
 8005356:	429c      	cmp	r4, r3
 8005358:	d808      	bhi.n	800536c <RVBS_CheckFaultState+0x24>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800535a:	7c04      	ldrb	r4, [r0, #16]
 800535c:	2c00      	cmp	r4, #0
 800535e:	d10f      	bne.n	8005380 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8005360:	4299      	cmp	r1, r3
 8005362:	d911      	bls.n	8005388 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8005364:	2301      	movs	r3, #1
 8005366:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8005368:	2000      	movs	r0, #0
 800536a:	e000      	b.n	800536e <RVBS_CheckFaultState+0x26>
        fault = MC_UNDER_VOLT;
 800536c:	2004      	movs	r0, #4
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800536e:	bd10      	pop	{r4, pc}
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005370:	429a      	cmp	r2, r3
 8005372:	d309      	bcc.n	8005388 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8005374:	8a40      	ldrh	r0, [r0, #18]
 8005376:	4283      	cmp	r3, r0
 8005378:	4180      	sbcs	r0, r0
 800537a:	4240      	negs	r0, r0
 800537c:	0080      	lsls	r0, r0, #2
 800537e:	e7f6      	b.n	800536e <RVBS_CheckFaultState+0x26>
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8005380:	429a      	cmp	r2, r3
 8005382:	d2f1      	bcs.n	8005368 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8005384:	2300      	movs	r3, #0
 8005386:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 8005388:	2002      	movs	r0, #2
 800538a:	e7f0      	b.n	800536e <RVBS_CheckFaultState+0x26>

0800538c <RVBS_CalcAvVbus>:
{
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	46c6      	mov	lr, r8
    if (0xFFFFU == hAux)
 8005390:	4b17      	ldr	r3, [pc, #92]	@ (80053f0 <RVBS_CalcAvVbus+0x64>)
{
 8005392:	0004      	movs	r4, r0
 8005394:	000d      	movs	r5, r1
 8005396:	b500      	push	{lr}
    if (0xFFFFU == hAux)
 8005398:	4299      	cmp	r1, r3
 800539a:	d01d      	beq.n	80053d8 <RVBS_CalcAvVbus+0x4c>
      pHandle->aBuffer[pHandle->index] = hAux;
 800539c:	7e47      	ldrb	r7, [r0, #25]
 800539e:	6942      	ldr	r2, [r0, #20]
 80053a0:	007b      	lsls	r3, r7, #1
 80053a2:	5299      	strh	r1, [r3, r2]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80053a4:	8943      	ldrh	r3, [r0, #10]
 80053a6:	7a86      	ldrb	r6, [r0, #10]
 80053a8:	4698      	mov	r8, r3
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	d01e      	beq.n	80053ec <RVBS_CalcAvVbus+0x60>
 80053ae:	2300      	movs	r3, #0
      wtemp = 0u;
 80053b0:	2000      	movs	r0, #0
        wtemp += pHandle->aBuffer[i];
 80053b2:	8811      	ldrh	r1, [r2, #0]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80053b4:	3301      	adds	r3, #1
 80053b6:	b2db      	uxtb	r3, r3
        wtemp += pHandle->aBuffer[i];
 80053b8:	1840      	adds	r0, r0, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80053ba:	3202      	adds	r2, #2
 80053bc:	42b3      	cmp	r3, r6
 80053be:	d1f8      	bne.n	80053b2 <RVBS_CalcAvVbus+0x26>
      wtemp /= pHandle->LowPassFilterBW;
 80053c0:	4641      	mov	r1, r8
 80053c2:	f7fa fe7b 	bl	80000bc <__udivsi3>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80053c6:	b280      	uxth	r0, r0
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80053c8:	4646      	mov	r6, r8
 80053ca:	3e01      	subs	r6, #1
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80053cc:	80e0      	strh	r0, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80053ce:	80a5      	strh	r5, [r4, #4]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80053d0:	42b7      	cmp	r7, r6
 80053d2:	d208      	bcs.n	80053e6 <RVBS_CalcAvVbus+0x5a>
        pHandle->index++;
 80053d4:	3701      	adds	r7, #1
 80053d6:	7667      	strb	r7, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80053d8:	0020      	movs	r0, r4
 80053da:	f7ff ffb5 	bl	8005348 <RVBS_CheckFaultState>
 80053de:	8120      	strh	r0, [r4, #8]
}
 80053e0:	bc80      	pop	{r7}
 80053e2:	46b8      	mov	r8, r7
 80053e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pHandle->index = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	7663      	strb	r3, [r4, #25]
 80053ea:	e7f5      	b.n	80053d8 <RVBS_CalcAvVbus+0x4c>
      wtemp /= pHandle->LowPassFilterBW;
 80053ec:	2000      	movs	r0, #0
 80053ee:	e7eb      	b.n	80053c8 <RVBS_CalcAvVbus+0x3c>
 80053f0:	0000ffff 	.word	0x0000ffff

080053f4 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 80053f8:	6043      	str	r3, [r0, #4]
    pHandle->RampRemainingStep = 0U;
 80053fa:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80053fc:	6103      	str	r3, [r0, #16]
    pHandle->ScalingFactor = 1U;
 80053fe:	3301      	adds	r3, #1
 8005400:	6143      	str	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8005402:	4770      	bx	lr

08005404 <SPD_GetElAngle>:
__weak int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8005404:	2304      	movs	r3, #4
 8005406:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005408:	4770      	bx	lr
 800540a:	46c0      	nop			@ (mov r8, r8)

0800540c <SPD_GetAvrgMecSpeedUnit>:
__weak int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
 800540c:	230c      	movs	r3, #12
 800540e:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005410:	4770      	bx	lr
 8005412:	46c0      	nop			@ (mov r8, r8)

08005414 <SPD_GetInstElSpeedDpp>:
__weak int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
 8005414:	2310      	movs	r3, #16
 8005416:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 8005418:	4770      	bx	lr
 800541a:	46c0      	nop			@ (mov r8, r8)

0800541c <SPD_IsMecSpeedReliable>:
  * - Called at least with the same periodicity on which speed control is executed.
  *         -

  */
__weak bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit)
{
 800541c:	0003      	movs	r3, r0
 800541e:	b570      	push	{r4, r5, r6, lr}
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8005420:	2500      	movs	r5, #0
 8005422:	5f4c      	ldrsh	r4, [r1, r5]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8005424:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8005426:	781a      	ldrb	r2, [r3, #0]
    {
      hAux = -(*pMecSpeedUnit);
 8005428:	8809      	ldrh	r1, [r1, #0]
    if (*pMecSpeedUnit < 0)
 800542a:	2c00      	cmp	r4, #0
 800542c:	da01      	bge.n	8005432 <SPD_IsMecSpeedReliable+0x16>
      hAux = -(*pMecSpeedUnit);
 800542e:	4249      	negs	r1, r1
 8005430:	b289      	uxth	r1, r1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8005432:	2512      	movs	r5, #18
 8005434:	5f5c      	ldrsh	r4, [r3, r5]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8005436:	8add      	ldrh	r5, [r3, #22]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8005438:	8a9e      	ldrh	r6, [r3, #20]
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800543a:	428d      	cmp	r5, r1
 800543c:	d80f      	bhi.n	800545e <SPD_IsMecSpeedReliable+0x42>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800543e:	b2a5      	uxth	r5, r4
    if (pHandle->hMecAccelUnitP < 0)
 8005440:	2c00      	cmp	r4, #0
 8005442:	db11      	blt.n	8005468 <SPD_IsMecSpeedReliable+0x4c>
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8005444:	8b1c      	ldrh	r4, [r3, #24]
 8005446:	42ac      	cmp	r4, r5
 8005448:	d309      	bcc.n	800545e <SPD_IsMecSpeedReliable+0x42>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800544a:	428e      	cmp	r6, r1
 800544c:	d307      	bcc.n	800545e <SPD_IsMecSpeedReliable+0x42>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800544e:	4290      	cmp	r0, r2
 8005450:	d80d      	bhi.n	800546e <SPD_IsMecSpeedReliable+0x52>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8005452:	1a10      	subs	r0, r2, r0
 8005454:	1e41      	subs	r1, r0, #1
 8005456:	4188      	sbcs	r0, r1
 8005458:	b2c0      	uxtb	r0, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800545a:	701a      	strb	r2, [r3, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800545c:	bd70      	pop	{r4, r5, r6, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800545e:	4290      	cmp	r0, r2
 8005460:	d9f7      	bls.n	8005452 <SPD_IsMecSpeedReliable+0x36>
        bSpeedErrorNumber++;
 8005462:	3201      	adds	r2, #1
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	e7f4      	b.n	8005452 <SPD_IsMecSpeedReliable+0x36>
      hAux = -(pHandle->hMecAccelUnitP);
 8005468:	426d      	negs	r5, r5
 800546a:	b2ad      	uxth	r5, r5
      hAbsMecAccelUnitP = (uint16_t)hAux;
 800546c:	e7ea      	b.n	8005444 <SPD_IsMecSpeedReliable+0x28>
        bSpeedErrorNumber = 0u;
 800546e:	2200      	movs	r2, #0
  bool SpeedSensorReliability = true;
 8005470:	2001      	movs	r0, #1
 8005472:	e7f2      	b.n	800545a <SPD_IsMecSpeedReliable+0x3e>

08005474 <STC_Init>:
  else
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
 8005474:	232a      	movs	r3, #42	@ 0x2a
    pHandle->SPD = SPD_Handle;
 8005476:	6142      	str	r2, [r0, #20]
    pHandle->PISpeed = pPI;
 8005478:	6101      	str	r1, [r0, #16]
    pHandle->Mode = pHandle->ModeDefault;
 800547a:	5cc3      	ldrb	r3, [r0, r3]
 800547c:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800547e:	222c      	movs	r2, #44	@ 0x2c
 8005480:	5e83      	ldrsh	r3, [r0, r2]
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	6043      	str	r3, [r0, #4]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8005486:	222e      	movs	r2, #46	@ 0x2e
 8005488:	5e83      	ldrsh	r3, [r0, r2]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	6083      	str	r3, [r0, #8]
    pHandle->TargetFinal = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8005492:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8005494:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8005496:	4770      	bx	lr

08005498 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8005498:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800549a:	4770      	bx	lr

0800549c <STC_GetSpeedSensor>:
__weak SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 800549c:	6940      	ldr	r0, [r0, #20]
#endif
}
 800549e:	4770      	bx	lr

080054a0 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80054a0:	7803      	ldrb	r3, [r0, #0]
{
 80054a2:	b510      	push	{r4, lr}
    if (MCM_SPEED_MODE == pHandle->Mode)
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d000      	beq.n	80054aa <STC_Clear+0xa>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80054a8:	bd10      	pop	{r4, pc}
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80054aa:	2100      	movs	r1, #0
 80054ac:	6900      	ldr	r0, [r0, #16]
 80054ae:	f7ff feb3 	bl	8005218 <PID_SetIntegralTerm>
}
 80054b2:	e7f9      	b.n	80054a8 <STC_Clear+0x8>

080054b4 <STC_GetTorqueRef>:
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef >> 16));
#else
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80054b4:	230a      	movs	r3, #10
 80054b6:	5ec0      	ldrsh	r0, [r0, r3]
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80054b8:	4770      	bx	lr
 80054ba:	46c0      	nop			@ (mov r8, r8)

080054bc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80054bc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80054be:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80054c0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80054c2:	4770      	bx	lr

080054c4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80054c6:	7803      	ldrb	r3, [r0, #0]
{
 80054c8:	0004      	movs	r4, r0
 80054ca:	000d      	movs	r5, r1
 80054cc:	0016      	movs	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d012      	beq.n	80054f8 <STC_ExecRamp+0x34>
    }
    else
    {
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80054d2:	2306      	movs	r3, #6
 80054d4:	5ec7      	ldrsh	r7, [r0, r3]
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80054d6:	8bc3      	ldrh	r3, [r0, #30]
 80054d8:	4299      	cmp	r1, r3
 80054da:	dd01      	ble.n	80054e0 <STC_ExecRamp+0x1c>
 80054dc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80054de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80054e0:	2224      	movs	r2, #36	@ 0x24
 80054e2:	5e83      	ldrsh	r3, [r0, r2]
 80054e4:	428b      	cmp	r3, r1
 80054e6:	dcf9      	bgt.n	80054dc <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 80054e8:	8c03      	ldrh	r3, [r0, #32]
 80054ea:	4299      	cmp	r1, r3
 80054ec:	da0e      	bge.n	800550c <STC_ExecRamp+0x48>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 80054ee:	2222      	movs	r2, #34	@ 0x22
 80054f0:	5e83      	ldrsh	r3, [r0, r2]
 80054f2:	428b      	cmp	r3, r1
 80054f4:	dbf2      	blt.n	80054dc <STC_ExecRamp+0x18>
 80054f6:	e009      	b.n	800550c <STC_ExecRamp+0x48>
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80054f8:	f7ff ffdc 	bl	80054b4 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80054fc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80054fe:	0007      	movs	r7, r0
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8005500:	42ab      	cmp	r3, r5
 8005502:	dbeb      	blt.n	80054dc <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8005504:	2228      	movs	r2, #40	@ 0x28
 8005506:	5ea3      	ldrsh	r3, [r4, r2]
 8005508:	42ab      	cmp	r3, r5
 800550a:	dce7      	bgt.n	80054dc <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 800550c:	2e00      	cmp	r6, #0
 800550e:	d109      	bne.n	8005524 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005510:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005512:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8005514:	2b03      	cmp	r3, #3
 8005516:	d013      	beq.n	8005540 <STC_ExecRamp+0x7c>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8005518:	60a5      	str	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 800551a:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 800551c:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 800551e:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8005520:	2001      	movs	r0, #1
 8005522:	e7dc      	b.n	80054de <STC_ExecRamp+0x1a>
        wAux /= 1000U;
 8005524:	21fa      	movs	r1, #250	@ 0xfa
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8005526:	8ba0      	ldrh	r0, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8005528:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800552a:	4370      	muls	r0, r6
        wAux /= 1000U;
 800552c:	0089      	lsls	r1, r1, #2
 800552e:	f7fa fdc5 	bl	80000bc <__udivsi3>
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005532:	1bed      	subs	r5, r5, r7
        pHandle->RampRemainingStep++;
 8005534:	1c46      	adds	r6, r0, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8005536:	0031      	movs	r1, r6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8005538:	0428      	lsls	r0, r5, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800553a:	f7fa fe49 	bl	80001d0 <__divsi3>
        pHandle->IncDecAmount = wAux1;
 800553e:	e7ed      	b.n	800551c <STC_ExecRamp+0x58>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8005540:	6065      	str	r5, [r4, #4]
 8005542:	e7ea      	b.n	800551a <STC_ExecRamp+0x56>

08005544 <STC_CalcTorqueReference>:
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8005544:	7802      	ldrb	r2, [r0, #0]
{
 8005546:	b570      	push	{r4, r5, r6, lr}
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8005548:	68c3      	ldr	r3, [r0, #12]
{
 800554a:	0004      	movs	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800554c:	2a04      	cmp	r2, #4
 800554e:	d01f      	beq.n	8005590 <STC_CalcTorqueReference+0x4c>
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8005550:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8005552:	2b01      	cmp	r3, #1
 8005554:	d908      	bls.n	8005568 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8005556:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8005558:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800555a:	186d      	adds	r5, r5, r1
      pHandle->RampRemainingStep--;
 800555c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800555e:	2a03      	cmp	r2, #3
 8005560:	d00a      	beq.n	8005578 <STC_CalcTorqueReference+0x34>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8005562:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8005564:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8005566:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8005568:	2b01      	cmp	r3, #1
 800556a:	d1f8      	bne.n	800555e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800556c:	2302      	movs	r3, #2
 800556e:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 8005570:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8005572:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8005574:	60c3      	str	r3, [r0, #12]
 8005576:	e7f2      	b.n	800555e <STC_CalcTorqueReference+0x1a>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8005578:	6960      	ldr	r0, [r4, #20]
 800557a:	f7ff ff47 	bl	800540c <SPD_GetAvrgMecSpeedUnit>
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
 800557e:	1429      	asrs	r1, r5, #16
      hError = hTargetSpeed - hMeasuredSpeed;
 8005580:	1a09      	subs	r1, r1, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8005582:	b209      	sxth	r1, r1
 8005584:	6920      	ldr	r0, [r4, #16]
 8005586:	f7ff fe49 	bl	800521c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800558a:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800558c:	0405      	lsls	r5, r0, #16
 800558e:	e7e9      	b.n	8005564 <STC_CalcTorqueReference+0x20>
      wCurrentReference = pHandle->TorqueRef;
 8005590:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8005592:	2b01      	cmp	r3, #1
 8005594:	d904      	bls.n	80055a0 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8005596:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8005598:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800559a:	18ad      	adds	r5, r5, r2
      pHandle->RampRemainingStep--;
 800559c:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800559e:	e7e0      	b.n	8005562 <STC_CalcTorqueReference+0x1e>
    else if (1U == pHandle->RampRemainingStep)
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d1de      	bne.n	8005562 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80055a4:	2302      	movs	r3, #2
 80055a6:	5ec5      	ldrsh	r5, [r0, r3]
      pHandle->RampRemainingStep = 0U;
 80055a8:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80055aa:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80055ac:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80055ae:	e7d8      	b.n	8005562 <STC_CalcTorqueReference+0x1e>

080055b0 <STC_GetMecSpeedRefUnitDefault>:
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
 80055b0:	232c      	movs	r3, #44	@ 0x2c
 80055b2:	5ec0      	ldrsh	r0, [r0, r3]
#endif
}
 80055b4:	4770      	bx	lr
 80055b6:	46c0      	nop			@ (mov r8, r8)

080055b8 <STC_GetDefaultIqdref>:
    IqdRefDefault.q = pHandle->TorqueRefDefault;
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80055b8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80055ba:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 80055bc:	041b      	lsls	r3, r3, #16
{
 80055be:	b082      	sub	sp, #8
  return (IqdRefDefault);
 80055c0:	4318      	orrs	r0, r3
}
 80055c2:	b002      	add	sp, #8
 80055c4:	4770      	bx	lr
 80055c6:	46c0      	nop			@ (mov r8, r8)

080055c8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80055c8:	b510      	push	{r4, lr}
 80055ca:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80055cc:	6940      	ldr	r0, [r0, #20]
 80055ce:	f7ff ff1d 	bl	800540c <SPD_GetAvrgMecSpeedUnit>
 80055d2:	0400      	lsls	r0, r0, #16
 80055d4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80055d8:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80055da:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80055dc:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80055de:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80055e0:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80055e2:	8243      	strh	r3, [r0, #18]
    pHandle->wElAccDppP32 = 0;
 80055e4:	6203      	str	r3, [r0, #32]
    pHandle->wElSpeedDpp32 = 0;
 80055e6:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->hRemainingStep = 0U;
 80055e8:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 80055ea:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80055ec:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 80055ee:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80055f0:	4770      	bx	lr
 80055f2:	46c0      	nop			@ (mov r8, r8)

080055f4 <VSS_Init>:
{
 80055f4:	b510      	push	{r4, lr}
  VSS_Clear(pHandle);
 80055f6:	f7ff ffef 	bl	80055d8 <VSS_Clear>
}
 80055fa:	bd10      	pop	{r4, pc}

080055fc <VSS_SetMecAngle>:
  *
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void VSS_SetMecAngle(VirtualSpeedSensor_Handle_t *pHandle, int16_t hMecAngle)
{
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	000d      	movs	r5, r1
 8005600:	0004      	movs	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
 8005602:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005604:	7841      	ldrb	r1, [r0, #1]
 8005606:	0028      	movs	r0, r5
 8005608:	f7fa fde2 	bl	80001d0 <__divsi3>
    pHandle->_Super.hElAngle = hMecAngle;
 800560c:	80a5      	strh	r5, [r4, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800560e:	80e0      	strh	r0, [r4, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)

08005614 <VSS_SetMecAcceleration>:
  * - Called during @ref RevUpCtrl "Rev-Up Control" and
  * @ref EncAlignCtrl "Encoder Alignment Controller procedure" initialization.
  */
__weak void  VSS_SetMecAcceleration(VirtualSpeedSensor_Handle_t *pHandle, int16_t hFinalMecSpeedUnit,
                                    uint16_t hDurationms)
{
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	4647      	mov	r7, r8
 8005618:	46ce      	mov	lr, r9
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800561a:	232c      	movs	r3, #44	@ 0x2c
{
 800561c:	b580      	push	{r7, lr}
    if (false == pHandle->bTransitionStarted)
 800561e:	5cc3      	ldrb	r3, [r0, r3]
{
 8005620:	0004      	movs	r4, r0
 8005622:	000f      	movs	r7, r1
 8005624:	0015      	movs	r5, r2
    if (false == pHandle->bTransitionStarted)
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <VSS_SetMecAcceleration+0x38>
        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800562a:	7843      	ldrb	r3, [r0, #1]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800562c:	69c0      	ldr	r0, [r0, #28]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800562e:	4698      	mov	r8, r3
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8005630:	4348      	muls	r0, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8005632:	8b61      	ldrh	r1, [r4, #26]
 8005634:	0109      	lsls	r1, r1, #4
                                              / (((int32_t)SPEED_UNIT)
 8005636:	f7fa fdcb 	bl	80001d0 <__divsi3>
 800563a:	0006      	movs	r6, r0
      if (0U == hDurationms)
 800563c:	2d00      	cmp	r5, #0
 800563e:	d109      	bne.n	8005654 <VSS_SetMecAcceleration+0x40>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005640:	4643      	mov	r3, r8
 8005642:	435e      	muls	r6, r3
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8005644:	81a7      	strh	r7, [r4, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8005646:	81e6      	strh	r6, [r4, #14]

        pHandle->hRemainingStep = 0U;
 8005648:	8525      	strh	r5, [r4, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800564a:	8567      	strh	r7, [r4, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800564c:	bcc0      	pop	{r6, r7}
 800564e:	46b9      	mov	r9, r7
 8005650:	46b0      	mov	r8, r6
 8005652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8005654:	21fa      	movs	r1, #250	@ 0xfa
 8005656:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8005658:	0089      	lsls	r1, r1, #2
 800565a:	4368      	muls	r0, r5
 800565c:	f7fa fd2e 	bl	80000bc <__udivsi3>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005660:	220e      	movs	r2, #14
 8005662:	5ea3      	ldrsh	r3, [r4, r2]
        hNbrStep++;
 8005664:	3001      	adds	r0, #1
 8005666:	b285      	uxth	r5, r0
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8005668:	4699      	mov	r9, r3
        pHandle->hRemainingStep = hNbrStep;
 800566a:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (0U == hNbrStep)
 800566c:	2d00      	cmp	r5, #0
 800566e:	d104      	bne.n	800567a <VSS_SetMecAcceleration+0x66>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005670:	464b      	mov	r3, r9
 8005672:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005674:	8567      	strh	r7, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005676:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8005678:	e7e8      	b.n	800564c <VSS_SetMecAcceleration+0x38>
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800567a:	0018      	movs	r0, r3
 800567c:	4641      	mov	r1, r8
 800567e:	f7fa fda7 	bl	80001d0 <__divsi3>
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8005682:	b236      	sxth	r6, r6
 8005684:	1a30      	subs	r0, r6, r0
 8005686:	0029      	movs	r1, r5
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8005688:	0400      	lsls	r0, r0, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800568a:	f7fa fda1 	bl	80001d0 <__divsi3>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800568e:	4643      	mov	r3, r8
 8005690:	4343      	muls	r3, r0
 8005692:	6223      	str	r3, [r4, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8005694:	464b      	mov	r3, r9
 8005696:	041b      	lsls	r3, r3, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005698:	8567      	strh	r7, [r4, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800569a:	6263      	str	r3, [r4, #36]	@ 0x24
    }
 800569c:	e7d6      	b.n	800564c <VSS_SetMecAcceleration+0x38>
 800569e:	46c0      	nop			@ (mov r8, r8)

080056a0 <memset>:
 80056a0:	0003      	movs	r3, r0
 80056a2:	1882      	adds	r2, r0, r2
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	7019      	strb	r1, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <memcpy>:
 80056b0:	2300      	movs	r3, #0
 80056b2:	b510      	push	{r4, lr}
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d100      	bne.n	80056ba <memcpy+0xa>
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	5ccc      	ldrb	r4, [r1, r3]
 80056bc:	54c4      	strb	r4, [r0, r3]
 80056be:	3301      	adds	r3, #1
 80056c0:	e7f8      	b.n	80056b4 <memcpy+0x4>
	...

080056c4 <_init>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr

080056d0 <_fini>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr
